/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:47:33 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StreamCorruptedException;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0.writeNumber(1);
      mockFileOutputStream0.release();
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.writeRaw(',');
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("X");
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeString((char[]) null, (-3166), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" 5,3Hb(Bn7=PFSM$GvW");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeRaw("6H}c:U>-4|z");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(5004);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:gt\"V3A");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, (-664));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[21];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((long) 0);
      System.setCurrentTimeMillis(0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeFieldName("write a string");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 2, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:gt\"V3A");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      BigInteger bigInteger0 = BigInteger.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(Bn7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeEndArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber((-1L));
      System.setCurrentTimeMillis((byte)49);
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0019';
      charArray0[5] = 'd';
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
//      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber((-1L));
      System.setCurrentTimeMillis((byte)49);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("Can not write a field name, expecting a value");
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Can not write a field name, expecting a value");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0.writeNumber(1);
      mockFileOutputStream0.release();
      iOContext0.constructTextBuffer();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("X");
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeString((char[]) null, (-3166), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("2_)rnFGtiIc7T!5IRO");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      byte[] byteArray0 = new byte[21];
      byteArray0[16] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2_)rnFGtiIc7T!5IRO", false);
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 68, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0.writeNumber(1);
      mockFileOutputStream0.release();
      iOContext0.constructTextBuffer();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeString((char[]) null, (-3166), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~,3Hb(Bn7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.println((double) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeStartObject((Object) "~,3Hb(Bn7=sFSMYGvW");
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1691), (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRaw('\u0084');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-1.0F));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0.writeNumber(1);
      mockFileOutputStream0.release();
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator1._verifyPrettyValueWrite("}dB`uYl]q", 3);
      uTF8JsonGenerator1.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      StringBuffer stringBuffer0 = new StringBuffer();
      mockPrintStream0.append((CharSequence) stringBuffer0);
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      uTF8JsonGenerator0.writeBinaryField("write a string", byteArray0);
      uTF8JsonGenerator0._characterEscapes = null;
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeString("write a string");
      int int0 = 1496;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 2673);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x", true);
      MockFile mockFile0 = new MockFile("Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x", true);
      byte[] byteArray0 = new byte[10];
      MockFile mockFile1 = new MockFile("", "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("FI`LD_NAME");
      byte byte0 = (byte)93;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "FI`LD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      mockFileOutputStream1.getChannel();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)93, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("FI`LD_NAME");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      uTF8JsonGenerator0.writeBinaryField("write a string", byteArray0);
      uTF8JsonGenerator0.writeNumber(3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 1496);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[6];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '|';
      charArray0[2] = '\\';
      charArray0[3] = '=';
      charArray0[4] = '*';
      charArray0[5] = '-';
      charArray0[6] = '&';
      iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString("T:g\"V3A");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[6];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, '}', (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[10];
      charArray0[2] = '';
      charArray0[3] = '}';
      charArray0[6] = '';
      charArray0[7] = '';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      int int0 = (-112);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("Split surrogate on writeRaw() input (last character): first character 0x%4x", (-112), 3);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawValue("[$YIrkY?JS0}=;");
      uTF8JsonGenerator0.writeNumber(0L);
      System.setCurrentTimeMillis(55296);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 3);
      uTF8JsonGenerator0.writeNumber(1971L);
      uTF8JsonGenerator0.writeStartArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, byteArray0, (-3269));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      String string0 = "Can not write a field name, expecting a value";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber((-1L));
      System.setCurrentTimeMillis(809L);
      InputStream inputStream0 = null;
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[3] = '`';
      char char0 = 'd';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 1711);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      pipedOutputStream0.write(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)120, (ObjectCodec) null, pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator1._writePPFieldName("Invalid custom escape definitions; custom escape not found for character code 0x");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber((-1L));
      System.setCurrentTimeMillis(809L);
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[3] = '`';
      charArray0[5] = 'd';
      uTF8JsonGenerator0.writeRawValue(charArray0, 8, (-2575));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[9];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1691), (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      uTF8JsonGenerator0.writeStartArray();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('\u0084');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)24;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.min(bigInteger1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(226);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-97), (ObjectCodec) null, pipedOutputStream0, byteArray0, 89, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte)0;
      FileSystemHandling.createFolder(evoSuiteFile0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-852), (ObjectCodec) null, pipedOutputStream0);
      pipedOutputStream0.close();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 55296, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw('\u0090');
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[20];
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 606, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1691), (ObjectCodec) null, (OutputStream) null, byteArray0, 0, false);
      char[] charArray0 = new char[21];
      charArray0[0] = '\u008B';
      charArray0[1] = '\u008B';
      charArray0[2] = '\u008B';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.releaseBase64Buffer((byte[]) null);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)39;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 593;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 536868258, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Sp{it +urrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Sp{it +urrogate on writeRaw() input (last character): first character 0x%4x", "Sp{it +urrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 255, false);
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(521);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5668), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2045);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'R';
      charArray0[2] = 'r';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 1149);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3858);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 13, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Sp{it +urrogate on writeRaw() input (last character): first character 0x%4x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Sp{it +urrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Sp{it +urrogate on writeRaw() input (last character): first character 0x%4x", "Sp{it +urrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 84, false);
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x", true);
      MockFile mockFile0 = new MockFile("Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x", true);
      byte[] byteArray0 = new byte[10];
      MockFile mockFile1 = new MockFile("", "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("FI`LD_NAME");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "FI`LD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      mockFileOutputStream1.getChannel();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)93, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      iOContext2.allocTokenBuffer(0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2);
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = BigInteger.TEN;
//      try { 
        uTF8JsonGenerator0.writeNumber((double) (byte)93);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[6];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((-3298L));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1912), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      char[] charArray0 = new char[10];
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)20, (-1912));
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-97), (-957));
      mockPrintStream0.close();
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = new SerializedString("loC\u0001cv1<ZRj^4!MA");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "~5,3Hb(B7=sFSMYGvW";
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      bufferRecycler0.allocByteBuffer(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3907, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeEndArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[6];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)32;
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 120, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      byte[] byteArray0 = new byte[17];
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 13, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber(1L);
      MockFile mockFile0 = new MockFile((String) null, "l");
      uTF8JsonGenerator1._outputSurrogates((-5645), 56320);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.append((-3903));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-80);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1023, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("", 334, 4000);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0.writeNumber(1);
      mockFileOutputStream0.release();
      iOContext0.constructTextBuffer();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("write a null");
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeString((char[]) null, (-3166), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)91, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2250, true);
      uTF8JsonGenerator0.writeNumber(33);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0._cfgUnqNames = true;
      uTF8JsonGenerator0.writeNumber((-112L));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".K@uq:JYS<G_s-");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1729), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      uTF8JsonGenerator0.writeRaw(".K@uq:JYS<G_s-");
      uTF8JsonGenerator0.writeRaw("WSl='i%eMZVn`C3");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      System.setCurrentTimeMillis(1255L);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      uTF8JsonGenerator0.writeString(charArray0, 1, 2);
      int int0 = (-807);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1691), (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      MockFile mockFile0 = new MockFile("-INF", "-INF");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-INF", true);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("-INF", byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[6];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeStartObject();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("T:g\"V3A");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1691), (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      MockFile mockFile0 = new MockFile("-INF");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("-INF", byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x", true);
      MockFile mockFile0 = new MockFile("Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x", "Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrLgate on writeRaw() input (last character#: first ch\"racter 0x%4x", true);
      byte[] byteArray0 = new byte[10];
      MockFile mockFile1 = new MockFile("", "");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("FIELD_NAME");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "FIELD_NAME", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      mockFileOutputStream1.getChannel();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (byte)85, true);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      mockFileOutputStream0.release();
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("");
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'Q';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 119, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 119
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 13, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeRaw((String) null, (int) (byte)0, 56320);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 13, true);
      iOContext0.allocTokenBuffer(1);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber(1L);
      jsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      boolean boolean0 = true;
      uTF8JsonGenerator0._bufferRecyclable = true;
      TextBuffer textBuffer0 = iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.writeStartObject((Object) textBuffer0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)0;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1717), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1858, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3472, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((-1540));
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "";
      uTF8JsonGenerator0.writeRawValue("");
      char[] charArray0 = new char[5];
      charArray0[2] = 'U';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      charArray0[2] = 'U';
      charArray0[4] = 'q';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      jsonGenerator0.writeStartArray();
      jsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeNumber((double) 56319);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 84, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3503, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((-1540));
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "";
      uTF8JsonGenerator0.writeRawValue("");
      char[] charArray0 = new char[5];
      charArray0[2] = 'U';
      uTF8JsonGenerator0.writeFieldName("teq;@V1QA<m\"bo;");
      charArray0[2] = 'U';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      byteArray0[1] = (byte)4;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1280), (-3467));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(Bn7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3913, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeBinaryField("~5,3Hb(Bn7=sFSMYGvW", byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "~5,3Hb(B7=sFSMYGvW";
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      iOContext0.allocWriteEncodingBuffer((-2541));
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3913, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3503, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((-1540));
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "";
      uTF8JsonGenerator0.writeRawValue("");
      char[] charArray0 = new char[5];
      charArray0[2] = 'U';
      uTF8JsonGenerator0.writeFieldName("teq;@V1QA<m\"bo;");
      charArray0[2] = 'U';
      charArray0[4] = 'q';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)53;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)105, false);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((-1L));
      System.setCurrentTimeMillis(809L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "~5,3Hb(Bn7=sFSMYGvW";
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(Bn7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      iOContext3.allocBase64Buffer();
      iOContext3.allocNameCopyBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 62, (ObjectCodec) null, mockPrintStream0, byteArray0, 788, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 92, false);
      uTF8JsonGenerator0.writeNumber(1);
      mockFileOutputStream0.release();
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      mockFile0.setReadable(false, false);
      uTF8JsonGenerator0.writeNumber(512);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
//      try { 
        uTF8JsonGenerator0.writeBinaryField("/gmamZrb.9", byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)105;
      uTF8JsonGenerator0._outputBuffer = byteArray0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 115, (ObjectCodec) null, pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream("com.fasterxml.jackson.core.base.ParserMinimalBase");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) uTF8JsonGenerator0;
      objectArray0[1] = (Object) mockPrintStream1;
      mockPrintStream1.printf("", objectArray0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("write a binary value");
      uTF8JsonGenerator0.writeNumber((short) (-1731));
      mockPrintStream0.println((-154L));
      mockPrintStream1.print(1);
      File file0 = MockFile.createTempFile("write a raw (unencoded) value", "vqR*H");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, (int) (short) (-9217));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)53;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-128), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-46);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("com.fasterxml.jackson.core.io.SerializedString");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, mockFileOutputStream1, byteArray0, (-58), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.io.SerializedString");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -58
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value");
      mockFileOutputStream0.release();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, dataOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawValue("kuK");
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = 'p';
      charArray0[2] = 'f';
      charArray0[3] = 'l';
      charArray0[4] = 'F';
      charArray0[5] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, 33, (-1259));
      uTF8JsonGenerator0.writeNumber(0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-96), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[7];
      uTF8JsonGenerator0.overrideStdFeatures(73, (-2565));
      charArray0[1] = 'j';
      charArray0[2] = 'v';
      String string0 = "R:oPX[J]R%T0@~";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 116);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "T:g\"V3A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)73;
      char char0 = 'j';
      byte byte0 = (byte)74;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte)74;
      byteArray1[5] = (byte)15;
      byteArray1[6] = (byte)15;
      byteArray1[7] = (byte)15;
      byteArray1[8] = (byte)105;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 35, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (byte)117);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.write(2906);
      byte[] byteArray0 = new byte[1];
      IOContext iOContext0 = new IOContext(bufferRecycler0, "D", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1880), false);
      SerializedString serializedString0 = new SerializedString("3izR]5]8");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", true);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)85;
      iOContext0.allocReadIOBuffer(0);
      byteArray0[3] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-124);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 121, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((long) (byte)34);
      byte[] byteArray1 = new byte[0];
      uTF8JsonGenerator0.writeBinaryField("~d", byteArray1);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("-L");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3913, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-22);
      String string0 = "[{k'qI6";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[{k'qI6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[2] = '#';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[0] = (byte)78;
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 13, false);
      iOContext1.allocTokenBuffer((-263));
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      uTF8JsonGenerator0.writeNumber(1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      uTF8JsonGenerator1.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumber((-102L));
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator0.writeEndArray();
      int int0 = 54;
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-7));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+t(%dM!~.Y2", false);
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-2485), false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.asQuotedChars();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte byte0 = (byte)18;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockPrintStream0, byteArray0, 448, true);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 54, 832);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-77), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 176, false);
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      uTF8JsonGenerator0.writeString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56320, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      int int0 = 84;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 84, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)48);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3503, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((-1540));
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      uTF8JsonGenerator0.writeFieldName("");
      charArray0[2] = 'Z';
      charArray0[3] = 'H';
      charArray0[4] = 'q';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-96), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      charArray0[2] = 'v';
      uTF8JsonGenerator0.writeString("R:oPX[J]R%T0@~");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 15);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-96), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 176, false);
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      uTF8JsonGenerator0.writeString("R:oPX[J]R%T0@~");
      charArray0[5] = 'j';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)37, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 37
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[0] = (byte)78;
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 13, false);
      iOContext1.allocTokenBuffer((-263));
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((-102L));
      jsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeEndArray();
      int int0 = 54;
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-7));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
      StringWriter stringWriter0 = new StringWriter(56320);
      StringWriter stringWriter1 = stringWriter0.append('.');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator((IOContext) null, 1, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): frst character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): frst character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-96), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 176, false);
      char[] charArray0 = new char[7];
      charArray0[1] = 'j';
      charArray0[2] = 'v';
      uTF8JsonGenerator0.writeString("R:oPX[J]R%T0@~");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 15);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeBooleanField("T:g\"V3A", true);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      uTF8JsonGenerator0.writeNumber((-244));
      uTF8JsonGenerator0.writeString("5T}hzCW 7e xVcp{Ue_");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      StringWriter stringWriter0 = new StringWriter(128);
      StringWriter stringWriter1 = stringWriter0.append('F');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2752), (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-99), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3545, false);
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'p';
      charArray0[4] = 'v';
      charArray0[5] = 't';
      charArray0[6] = '/';
      charArray0[7] = 'v';
      charArray0[8] = 'v';
      int int0 = 134;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 134);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)53;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-128), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
      uTF8JsonGenerator0.writeString("~V");
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, (int) (byte)86);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-22);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[{k'qI6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[2] = '#';
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-3815));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)53;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-128), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
      uTF8JsonGenerator0.writeString("~V");
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 2, (-406));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.write(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3913, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(")*}rE-|=Xelf");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = new SerializedString("");
      serializedString1.asQuotedChars();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, evoSuiteFile0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, (byte)78, true);
      uTF8JsonGenerator0.writeNumber((-1L));
      System.setCurrentTimeMillis(799L);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1378);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 422, false);
//      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(177);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)105, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 70);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)53;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-128), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
      uTF8JsonGenerator0.writeNumber((short) (-2128));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(5);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bigInteger1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 198, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)86, false);
      BigInteger bigInteger2 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeBinaryField("3'ZHS%@/hoU_s\"1[O", byteArray0);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3503, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRawValue("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = 'J';
      charArray0[2] = 'Z';
      charArray0[3] = 'H';
      charArray0[4] = 'q';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[6] = (byte) (-96);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("6eCATsKqn_`w,");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3913, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[6] = (byte) (-96);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      byteArray0[8] = (byte)86;
      byteArray0[8] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("6eCATsKqn_`w,");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((long) (byte)49);
      uTF8JsonGenerator0.writeBoolean(false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = '`';
      charArray0[2] = 's';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-891), 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -891
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("write a null");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2005), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a null", true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
      uTF8JsonGenerator0.writeNumber((short) (-1042));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qVj%7\"GeFl%- bjb");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("qVj%7\"GeFl%- bjb");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-220), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-220), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5049, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" H}}GB");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(1114111);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 61, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)78;
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 6, false);
      iOContext1.allocTokenBuffer((-263));
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte)116);
      uTF8JsonGenerator0.writeNumber(65);
      uTF8JsonGenerator0.writeNumber((-102L));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3913, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Spli. surrogateon writeRaw() nput (last haracter): first charactr 0x%4x", false);
      MockFile mockFile0 = new MockFile("Spli. surrogateon writeRaw() nput (last haracter): first charactr 0x%4x");
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)87;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4894, (ObjectCodec) null, pipedOutputStream0, byteArray0, 14, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      StringReader stringReader0 = new StringReader(".q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 83, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(Double.NaN);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[6] = (byte) (-96);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("6eCATsKqn_`w,");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(1);
      uTF8JsonGenerator0.writeNumber((long) (byte)49);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-96), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 176, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = ',';
      charArray0[2] = 'v';
      charArray0[3] = '<';
      charArray0[4] = ',';
      charArray0[5] = 'j';
      charArray0[6] = ',';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)86, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 86
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-7303), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0.writeString((char[]) null, (-1194), (-1906));
      uTF8JsonGenerator0.setHighestNonEscapedChar(18);
//      try { 
        uTF8JsonGenerator0.writeNumber((-3049));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      iOContext0.allocReadIOBuffer(0);
      byteArray0[3] = (byte)0;
      mockFileOutputStream0.flush();
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-124);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 121, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((long) (byte)34);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Internal error on SymbolTable.rehash(): had ", false);
      File file0 = MockFile.createTempFile("Internal error on SymbolTable.rehash(): had ", "Internal error on SymbolTable.rehash(): had ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Internal error on SymbolTable.rehash(): had ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      char[] charArray0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)66;
      byte byte0 = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-1);
      uTF8JsonGenerator0.writeRaw('');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, printStream0, byteArray0, 1, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(".q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1122, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((double) 83);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      int int0 = 21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      byte byte0 = (byte)0;
      uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      uTF8JsonGenerator0.writeRawValue("[YI)rkY?JS0}=;");
      String string0 = "-R\")>m7%";
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(56320);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "-R\")>m7%", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3120, (ObjectCodec) null, (OutputStream) null, byteArray0, 57343, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Internal error on SymbolTable.rehash(): had ", false);
      File file0 = MockFile.createTempFile("Internal error on SymbolTable.rehash(): had ", "Internal error on SymbolTable.rehash(): had ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Internal error on SymbolTable.rehash(): had ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 1);
      uTF8JsonGenerator0.writeString((char[]) null, 0, (-1));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((long) 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)64;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte) (-38), 10);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[0];
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 114, (-3301));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 5049, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStringField("", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
//      try { 
        uTF8JsonGenerator0.writeBinaryField("Split surrogate on writeRaw() input (last character): first character 0x%4x", byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Internal error on SymbolTable.rehash(): had ", false);
      MockFile.createTempFile("Internal error on SymbolTable.rehash(): had ", "Internal error on SymbolTable.rehash(): had ");
      String string0 = "";
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-64);
      byte byte0 = (byte) (-32);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-91);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte) (-32), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("Internal error on SymbolTable.rehash(): had ");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -32
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(5);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1021, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeFieldName("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeString("%E");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
      uTF8JsonGenerator0._verifyValueWrite("]@CmR<r;d>}gL/'ip ");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Spli. surrogateon writeRaw() nput (last haracter): first charactr 0x%4x", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("Spli. surrogateon writeRaw() nput (last haracter): first charactr 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Spli. surrogateon writeRaw() nput (last haracter): first charactr 0x%4x", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 118, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(5);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1021, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Split surrogate on writeRaw() input (last character): first character 0x%4x");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      BigInteger bigInteger0 = BigInteger.TEN;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 707, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1449, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = BigInteger.TEN;
      mockFile0.setReadable(false);
      int int0 = (-1228);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1228), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((-790));
      uTF8JsonGenerator0.writeRaw('J');
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "Split surrogate on writeRaw() input (last character): first character 0x%4x", false, 'x', (byte)86);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 75)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      boolean boolean0 = false;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[16];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      byte[] byteArray1 = new byte[0];
//      try { 
        uTF8JsonGenerator0.writeBinaryField("q^Qolx8ef~q.2m'co", byteArray1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("T:g\"V3A", objectArray0);
      mockPrintStream0.println(']');
      StringReader stringReader0 = new StringReader("T:g\"V3A");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1900), (ObjectCodec) null, objectOutputStream0, byteArray0, 176, true);
      BigDecimal bigDecimal0 = new BigDecimal((-1014));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      System.setCurrentTimeMillis(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)118;
      uTF8JsonGenerator0.writeBinaryField("q^Qolx8ef~q.2m'co", byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" entries");
      byte byte0 = (byte) (-96);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty(" entries");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 761, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
//      try { 
        uTF8JsonGenerator1.writeFieldName(" entries");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      IOContext iOContext1 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)86, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      assertArrayEquals(new byte[] {(byte)34, (byte)86, (byte)34, (byte)32, (byte)123, (byte)125, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFile mockFile0 = new MockFile("OBJECT", "OBJECT");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a number");
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 25, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
//      try { 
        uTF8JsonGenerator0.writeBinaryField("com.fasterxml.jackson.core.json.UTF8JsonGenerator", byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 28, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      uTF8JsonGenerator0.writeNumber(173);
      iOContext0.allocNameCopyBuffer(1027);
      uTF8JsonGenerator0.writeRawValue("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeString(charArray0, 3, (-1134));
      uTF8JsonGenerator0.writeString("write a raw (unencoded) value");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      uTF8JsonGenerator0.writeBinaryField("8", byteArray0);
      uTF8JsonGenerator0.writeBoolean(false);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("g-Bs'^zFanVP<>u");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1926, 48);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 662, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 1024;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1024, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 120, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 7, true);
      uTF8JsonGenerator1.writeStartArray();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      String string0 = "";
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byte byte0 = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 1024;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1024, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      byte byte0 = (byte) (-46);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("q^Qolx8ef~q.2m'co");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)122;
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2507), false);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2507
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      byte byte0 = (byte)72;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.writeArrayFieldStart("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeNumber("uX1cYX6f(D,3cp`S");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[4] = 'C';
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "UD1Uy5s#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3195);
      mockFile0.setReadable(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)125, true);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.writeNumber(65535);
      uTF8JsonGenerator0.writeRaw('7');
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      iOContext0.constructTextBuffer();
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      System.setCurrentTimeMillis(28);
      MockPrintStream mockPrintStream0 = new MockPrintStream("8");
      SerializedString serializedString0 = new SerializedString("7rn\"w06'cWbWXuI");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3526), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber("write a raw (unencoded) value");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      iOContext0.allocReadIOBuffer((-2063));
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-124);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 121;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 121, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
//      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte) (-96));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      String string0 = "T:g\"V3A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      char char0 = '(';
      charArray0[0] = '(';
      mockPrintStream0.print((float) 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)65;
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("T:g\"V3A");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-1207));
      uTF8JsonGenerator0.writeNumber(21L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("T:g\"V3A", 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ".q^Qolx8\\ef~q.2m'co";
      StringReader stringReader0 = new StringReader(".q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      charsToNameCanonicalizer0.findSymbol(charArray0, 1, (-4403), 0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      BigDecimal bigDecimal0 = new BigDecimal(2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)86;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(177);
      int int0 = 2250;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2250, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeFieldName("epHPfR+f#@s");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)86);
//      try { 
        uTF8JsonGenerator0._outputSurrogates(2250, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x8ca, second 0x1
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[4] = 'C';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("]Xr ");
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      System.setCurrentTimeMillis(1000L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      uTF8JsonGenerator0.writeBinaryField("Dv,W[P5%_C$GNcG'", byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      System.setCurrentTimeMillis(0L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PrintStream printStream0 = mockPrintStream0.append('-');
      mockPrintStream0.print((double) (byte)57);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      SerializedString serializedString0 = new SerializedString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("", (-865), (-4505));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 264, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      boolean boolean1 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding0);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3503, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "";
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("", (byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[1];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("v1Ulpq", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'H';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(98);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('u');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding0);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "";
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("", (byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 160, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeString("lZtO");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal1.negate();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("lZtO", 3, 160);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      uTF8JsonGenerator0._verifyPrettyValueWrite("T:g\"V3A", 0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('F');
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 114, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext3 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)86;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(177);
      int int0 = 2250;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2250, true);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeFieldName("epHPfR+f#@s");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)86);
//      try { 
        uTF8JsonGenerator0._outputSurrogates(2250, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x8ca, second 0x1
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-22);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[{k'qI6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[2] = '#';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1912), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)20, (-1912));
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[{k'qI6", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigInteger bigInteger0 = BigInteger.TEN;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeString("V:Z}gR'H<15T&ZR");
      uTF8JsonGenerator0.writeBinaryField("V:Z}gR'H<15T&ZR", byteArray0);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      System.setCurrentTimeMillis(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 34, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((-1799.834856114458));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)86, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocWriteEncodingBuffer(1);
      System.setCurrentTimeMillis((byte) (-96));
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStringField(".}r0KnC{m", "ESCAPE_NON_ASCII");
//      try { 
        uTF8JsonGenerator0.writeBinaryField("-L", byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(5);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1021, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeFieldName("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeNumber((short) (byte) (-96));
//      try { 
        uTF8JsonGenerator0._outputSurrogates(170, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xaa, second 0x3
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      mockFile0.mkdir();
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputTarget();
//      try { 
        uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-22);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[{k'qI6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      char[] charArray0 = new char[3];
      char char0 = '8';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~5,3Hb(B7=sFSMYGvW");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockPrintStream0, byteArray0, 593, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-22);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[{k'qI6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(600.414F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      System.setCurrentTimeMillis(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBinaryField("-L", byteArray0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3);
      File file0 = MockFile.createTempFile("*oZzP7lLT=t-V0", "*oZzP7lLT=t-V0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-96);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, false);
      uTF8JsonGenerator0.writeNumber(bigInteger1);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (byte)44);
//      try { 
        uTF8JsonGenerator0._outputSurrogates(57, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x39, second 0x1
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(5);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1024, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeFieldName("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeNumber((short) (byte) (-96));
//      try { 
        uTF8JsonGenerator0._outputSurrogates(170, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xaa, second 0x3
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 84, false);
      uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      char[] charArray0 = new char[0];
      mockFile0.setWritable(false);
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 589, 23);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-210), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-210), true);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.negate();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-24);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, (OutputStream) null, byteArray0, 11, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[14];
      System.setCurrentTimeMillis(33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
//      try { 
        uTF8JsonGenerator0.writeBinaryField(" g", byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      System.setCurrentTimeMillis(0L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      uTF8JsonGenerator0.writeBinaryField("q^Qolx8ef~q.2m'co", byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[{k'qI6", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 121, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2907);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 55296, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 23, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)125;
      file0.toURL();
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-124);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)125, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw("Split surrogate on writeRaw() input (last character): first character 0x%4x", 0, 63);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("T:g\"V3A", objectArray0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      System.setCurrentTimeMillis((-1774L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      String string0 = "T:g\"V3A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("T:g\"V3A");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-451), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, filteringParserDelegate0, true);
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)46, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)35, true);
      BigInteger bigInteger0 = BigInteger.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)86, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocWriteEncodingBuffer(1);
      System.setCurrentTimeMillis((byte) (-96));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("Split surrogate on writeRaw() input (last character): first character 0x%4x", byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-46), (ObjectCodec) null, (OutputStream) null, byteArray0, 110, false);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-46), (-2487));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1929, 48);
      BigInteger.valueOf(2938L);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2514, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("Current context not an object but ");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      byte byte0 = (byte)72;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.writeArrayFieldStart("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2038, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.loadMore();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 173, true);
//      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Internal error on SymbolTable.rehash(): had ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Internal error on SymbolTable.rehash(): had ", true);
      MockFile mockFile0 = new MockFile("Internal error on SymbolTable.rehash(): had ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Internal error on SymbolTable.rehash(): had ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      printStream0.write(0);
      uTF8JsonGenerator0.writeNumber(1.1644785F);
      byte[] byteArray0 = new byte[20];
      int int0 = 916;
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 18);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile0, true);
      iOContext1.allocBase64Buffer();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but OBJECT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "T:g\"V3A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      String string1 = "l\\ZtO";
      uTF8JsonGenerator0.writeString("lZtO");
      uTF8JsonGenerator0.close();
      byte byte0 = (byte)3;
      iOContext0.allocWriteEncodingBuffer(55296);
      System.setCurrentTimeMillis(56320);
      int int0 = (-2289);
      StringReader stringReader0 = new StringReader("lZtO");
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
//      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)3, stringReader0, (ObjectCodec) null, (CharsToNameCanonicalizer) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)86;
      BigInteger bigInteger0 = BigInteger.TEN;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 331, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeBinaryField("Split surrogate on writeRaw() input (last character): first character 0x%4x", byteArray0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)88;
      uTF8JsonGenerator0.close();
      iOContext0.allocWriteEncodingBuffer(57343);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)88;
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((double) (byte)88);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)86;
      BigInteger bigInteger0 = BigInteger.TEN;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 701, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      int int0 = 344;
      uTF8JsonGenerator0.writeRawValue("write a raw (unencoded) value");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, 56320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 84, false);
      uTF8JsonGenerator0.writeRawValue("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      char[] charArray0 = new char[0];
      int int0 = 589;
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 589, 494);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[{k'qI6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 0);
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      IOContext iOContext2 = new IOContext(bufferRecycler0, stringReader0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 79, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 121, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((long) (byte)57);
      uTF8JsonGenerator0.writeNumber(121);
      uTF8JsonGenerator0.writeNumber((float) 0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-46);
      String string0 = "j";
      uTF8JsonGenerator0.writeBinaryField("T:g\"V3A", byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 512, 655);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 512
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      String string0 = "~id_EIKK4";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)88;
      uTF8JsonGenerator0.close();
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFile1.setExecutable(true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)86, true);
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeNumber((short) (-8193));
      uTF8JsonGenerator0.writeNumber((double) 0);
      System.setCurrentTimeMillis(3);
//      try { 
        uTF8JsonGenerator0._outputSurrogates(4349, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x10fd, second 0x2
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintStream mockPrintStream2 = new MockPrintStream("5T}hzCW 7e xVcp{Ue_");
      mockPrintStream0.printf("write a raw (unencoded) value", objectArray0);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      uTF8JsonGenerator0.writeFieldName(";_6xTj}2t.tW!gFi#");
      short short0 = (short) (-3397);
      uTF8JsonGenerator0.writeNumber((short) (-3397));
      mockPrintStream0.println((long) 56320);
      printStream0.println(' ');
      mockPrintStream1.print((-2298));
      File file0 = MockFile.createTempFile("5T}hzCW 7e xVcp{Ue_", "T:g\"V3A");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)116;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, 718, 15);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-96), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString(" bytes (out of ");
      uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
      short short0 = (short) (-8193);
      uTF8JsonGenerator0.writeNumber((short) (-8193));
//      try { 
        uTF8JsonGenerator0._outputSurrogates(1029, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x405, second 0x1
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("Invalid custom escape definitions; custom escape not found for character code 0x", objectArray0);
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = 'k';
      charArray0[2] = '\'';
      charArray0[3] = 'l';
      charArray0[4] = 'L';
      charArray0[5] = 'M';
      charArray0[6] = '5';
      charArray0[7] = 'A';
      charArray0[8] = '\"';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, 2);
      MockPrintStream mockPrintStream2 = new MockPrintStream("5T}hzCW 7e xVcp{Ue_");
      mockPrintStream0.printf("write a raw (unencoded) value", objectArray0);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      char[] charArray1 = new char[4];
      charArray1[0] = 'j';
      charArray1[1] = '=';
      charArray1[2] = 'n';
      charArray1[3] = 'n';
      uTF8JsonGenerator0.writeString(charArray1, 0, 2);
      uTF8JsonGenerator0.writeString("5T}hzCW 7e xVcp{Ue_");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-46);
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[1] = 'v';
      charArray0[3] = ',';
      charArray0[4] = 'j';
      charArray0[5] = '3';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, 344);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      int int0 = 35;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 35, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1600, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 35, 97);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-451), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)45);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      String string0 = "Enxe";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Enxe");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2815);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.flush();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("Enxe", "", false, 'r', 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)88;
      uTF8JsonGenerator0.close();
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)88;
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("~id_EIKK4", byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)33;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)115;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3519, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('+');
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)86, true);
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeNumber((short) (-8193));
//      try { 
        uTF8JsonGenerator0._outputSurrogates(4349, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x10fd, second 0x2
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("T:g\"V3A", objectArray0);
      StringReader stringReader0 = new StringReader("g");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-451), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1650), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawValue("T:g\"V3A", 0, 1);
      uTF8JsonGenerator0._outputBuffer = byteArray0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("write a number");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 72, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = '0';
      charArray0[2] = '!';
      charArray0[3] = ']';
      charArray0[4] = '0';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, (-858));
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append(']');
      uTF8JsonGenerator0.getOutputTarget();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      IOContext iOContext2 = new IOContext(bufferRecycler1, "T:g\"V3A", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 72, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeFieldName("T:g\"V3A");
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = '%';
      charArray0[2] = '!';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4221, 2, true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 33, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(".oj^.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("Invalid custom escape definitions; custom escape not found for character code 0x", objectArray0);
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintStream mockPrintStream2 = new MockPrintStream("5T}hzCW 7e xVcp{Ue_");
      mockPrintStream0.printf("write a raw (unencoded) value", objectArray0);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = '=';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      uTF8JsonGenerator0.writeString("5T}hzCW 7e xVcp{Ue_");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-46);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[{k'qI6", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-63), (ObjectCodec) null, (OutputStream) null, byteArray0, 2082, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)78;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, pipedOutputStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeNumber(3520L);
      System.setCurrentTimeMillis((-3548L));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 6, 1664);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintStream mockPrintStream2 = new MockPrintStream("5T}hzCW 7e xVcp{Ue_");
      mockPrintStream0.printf("write a raw (unencoded) value", objectArray0);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      uTF8JsonGenerator0.writeFieldName(";_6xTj}2t.tW!gFi#");
      short short0 = (short) (-3397);
      uTF8JsonGenerator0.writeNumber((short) (-3397));
      mockPrintStream0.println((long) 56320);
      mockPrintStream1.print((-2298));
      File file0 = MockFile.createTempFile("5T}hzCW 7e xVcp{Ue_", "T:g\"V3A");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) bufferedInputStream0, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = '{';
      charArray0[2] = '2';
      charArray0[3] = 'A';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte)86);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)88;
      uTF8JsonGenerator0.close();
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)88, (ObjectCodec) null, (OutputStream) null, byteArray0, 1000, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber((-710L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFile mockFile1 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-96), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-8193));
//      try { 
        uTF8JsonGenerator0._outputSurrogates(1000, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x3e8, second 0x1
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = '%';
      charArray0[2] = '!';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4221, 2, true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 33, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-938));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("T:g\"V3A");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-451), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, filteringParserDelegate0, true);
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)46, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)35, true);
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 50, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(16);
      stringWriter0.append('');
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1041), 3419);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      byte byte0 = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      uTF8JsonGenerator1._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 1, 55296);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)88;
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)57, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1.getOutputTarget();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("~id_EIKK4");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (byte)57);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, mockFileOutputStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName(">$?");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-97);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (byte) (-97));
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3508, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte) (-125));
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 2, (int) (byte)0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      IOContext iOContext2 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte) (-41), (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw(charArray0, (-1243), 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1243
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      uTF8JsonGenerator0.flush();
      byte byte0 = (byte)0;
      uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      StringWriter stringWriter0 = new StringWriter(64);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'H';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(98);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      mockFile0.setWritable(false, true);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)86;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1471), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("-Infinity");
      uTF8JsonGenerator0.writeNumber(570.0541772481832);
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'q';
      charArray0[2] = '7';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (-2899));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-96), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((-3851.07F));
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "", true, '#', 2038);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      int int0 = 344;
      uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      uTF8JsonGenerator0.writeRawValue("[YI)r%Y?JS0}=;");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, 56320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)88;
      uTF8JsonGenerator0.close();
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)88;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinaryField("~id_EIKK4", byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)78, (ObjectCodec) null, pipedOutputStream0, byteArray0, 56, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Internal error on SymbolTable.rehash(): had ", false);
      File file0 = MockFile.createTempFile("Internal error on SymbolTable.rehash(): had ", "Internal error on SymbolTable.rehash(): had ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Internal error on SymbolTable.rehash(): had ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber(1.1644785F);
      byte[] byteArray0 = new byte[20];
      int int0 = 916;
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 18);
      IOContext iOContext1 = new IOContext(bufferRecycler0, file0, false);
      // Undeclared exception!
//      try { 
        iOContext1.releaseReadIOBuffer(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      File file0 = MockFile.createTempFile("start an object", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber(1.1644785F);
      BigInteger bigInteger0 = BigInteger.TEN;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('\'');
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringWriter0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 1509, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext3 = new IOContext(bufferRecycler0, (Object) null, false);
      uTF8JsonGenerator1.writeString((String) null);
      uTF8JsonGenerator1.writeFieldName("H@UpBT<uA_A-tN$fJ");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[14];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
//      try { 
        uTF8JsonGenerator0.writeString("q^Qolx8ef~q.2m'co");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[2] = 'H';
      charArray0[3] = 't';
      charArray0[4] = '_';
      charArray0[5] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      String string0 = "l\\ZtO";
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeString("lZtO");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.negate();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      boolean boolean0 = true;
      char char0 = '.';
      uTF8JsonGenerator0._flushBuffer();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("No FormatFeatures defined for parser of type ", "No FormatFeatures defined for parser of type ", true, '.', 3615);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 45)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[14];
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 3);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      int int0 = 344;
      uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, 737);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[2] = 'H';
      charArray0[3] = 't';
      charArray0[4] = '_';
      charArray0[5] = 'C';
      charArray0[6] = '\u0000';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2048, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintStream mockPrintStream2 = new MockPrintStream("5T}hzCW 7e xVcp{Ue_");
      mockPrintStream0.printf("write a raw (unencoded) value", objectArray0);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      uTF8JsonGenerator0.writeFieldName(";_6xTj}2t.tW!gFi#");
      uTF8JsonGenerator0.writeNumber((short) (-3397));
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, true);
      uTF8JsonGenerator0.writeString("write a boolean value");
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-51);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1669), (-1343));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-68), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (-96), 3333);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-451), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 33, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "T:g\"V3A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString("lZtO");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-46);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('H');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.getOutputTarget();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
//      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
//        fail("Expecting exception: StreamCorruptedException");
      
//      } catch(Throwable e) {
//         //
//         // invalid stream header: 0000D2D2
//         //
//         verifyException("java.io.ObjectInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 121, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.writeNumber((long) (byte)57);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, pipedOutputStream0);
      iOContext0.constructTextBuffer();
      byte byte0 = (byte) (-46);
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 1, (-1448));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2056);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[14];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      MockPrintStream mockPrintStream2 = new MockPrintStream("5T}hzCW 7e xVcp{Ue_");
      mockPrintStream0.printf("write a raw (unencoded) value", objectArray0);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      uTF8JsonGenerator0.writeFieldName(";_6xTj}2t.tW!gFi#");
      uTF8JsonGenerator0.writeNumber((short) (-3397));
//      try { 
        uTF8JsonGenerator0._outputSurrogates((short) (-3397), 2047);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xfffff2bb, second 0x7ff
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)78, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1230), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte)20);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1230
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeString("lZtO");
      byte byte0 = (byte)32;
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-1051), 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1051
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 72, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = '(';
      charArray0[2] = '!';
      charArray0[3] = ']';
      charArray0[4] = '(';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, (-858));
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append(']');
      uTF8JsonGenerator0.getOutputTarget();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      IOContext iOContext2 = new IOContext(bufferRecycler1, "T:g\"V3A", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 72, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeFieldName("T:g\"V3A");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      mockFile0.setWritable(false, true);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)86;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('5');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1471), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("-Infinity");
      uTF8JsonGenerator0.writeNumber(570.0541772481832);
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      mockFile0.setWritable(false, true);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)86;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('5');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1471), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      mockFile0.getCanonicalPath();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("-Infinity");
      uTF8JsonGenerator0.writeNumber(570.0541772481832);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(16);
      stringWriter0.append('');
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-202), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1041), 3419);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      uTF8JsonGenerator0.writeString("OZ0iu");
      uTF8JsonGenerator0.writeFieldName("OZ0iu");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      uTF8JsonGenerator0.writeString(charArray0, 1, (-1042));
      StringWriter stringWriter0 = null;
//      try {
        stringWriter0 = new StringWriter((-1893));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative buffer size
//         //
//         verifyException("java.io.StringWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)7, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-1152), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "start an object";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      File file0 = MockFile.createTempFile("start an object", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      byte[] byteArray0 = new byte[20];
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 916, 18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 916
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)0;
      mockFile0.setWritable(false, true);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('5');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1471), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("-Infinity");
      uTF8JsonGenerator0.writeNumber(570.0541772481832);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      mockPrintStream0.print((float) 2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)109;
      Locale locale0 = Locale.FRANCE;
      mockPrintStream0.format(locale0, "", objectArray0);
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("T:g\"V3A");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-1207));
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString("lZtO");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('F');
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 114, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext3 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      uTF8JsonGenerator0.writeString("T:g\"V3A");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-96), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("q^Qolx8ef~q.2m'co");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "start an object";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      File file0 = MockFile.createTempFile("start an object", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-44);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, (byte) (-44));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      System.setCurrentTimeMillis(1337L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "*[", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, mockPrintStream1);
      pipedOutputStream0.close();
      iOContext0.allocReadIOBuffer((-256));
      uTF8JsonGenerator0._verifyValueWrite("<gKTmq");
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)0;
      mockFile0.setWritable(false, true);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)57, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
//      try { 
        uTF8JsonGenerator0.writeString((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.setEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      printStream0.print(3);
      MockPrintStream mockPrintStream1 = new MockPrintStream("~C}J");
      printStream0.printf("(@Fzw6bi9", objectArray0);
      uTF8JsonGenerator0.writeString("(@Fzw6bi9");
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("VRjT", 2475);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)20;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 114, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)78, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      mockPrintStream0.printf(locale1, "T:g\"V3A", objectArray0);
      uTF8JsonGenerator0.writeString("lZtO");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.negate();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("No FormatFeatures defined for parser of type ", "No FormatFeatures defined for parser of type ", true, '.', 3615);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 45)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      String string0 = "T:g\"V3A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      mockPrintStream0.println();
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      SerializedString serializedString0 = new SerializedString("q");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 57343, 344);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 57343
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "q^Qolx8\\ef~q.2m'co";
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[14];
      pushbackInputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 183, true);
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      printStream0.print(3);
      MockPrintStream mockPrintStream1 = new MockPrintStream("~C}J");
      printStream0.printf("(@Fzw6bi9", objectArray0);
      uTF8JsonGenerator0.writeString("(@Fzw6bi9");
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeNumber((long) 1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      String string0 = "T:g\"V3A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      mockPrintStream0.println();
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 57343, 344);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 57343
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      mockPrintStream0.print((float) 2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)109;
      mockPrintStream0.write(byteArray0);
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("T:g\"V3A");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((-1207));
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("", (long) 3);
      uTF8JsonGenerator0.getOutputTarget();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) iOContext1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "write a raw (unencoded) value";
      mockPrintStream0.printf((Locale) null, "write a raw (unencoded) value", objectArray0);
      uTF8JsonGenerator0.writeString("lZtO");
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.negate();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("!^><r:&_%Vb~)Y~7", "write a string", true, '`', 102);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 14)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2038, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.loadMore();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 173, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ", (-1956), 69);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-23), (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 65);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 90, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.overrideStdFeatures(2, (byte) (-96));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)109;
      mockPrintStream0.write(byteArray0);
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("T:g\"V3A");
      assertEquals(16, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-451), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 836, (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)0;
      mockFile0.setWritable(false, true);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)57, true);
//      try { 
        uTF8JsonGenerator0.writeString((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-320), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -320
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      printStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeString(", although was supposed to have one");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.negate();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, mockPrintStream0, (byte[]) null, 55296, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) iOContext1;
      objectArray0[3] = (Object) "write a raw (unencoded) value";
      uTF8JsonGenerator0.writeString("lZtO");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[2] = (byte)123;
      byteArray0[2] = (byte) (-125);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-125);
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = 0L;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (byte) (-8);
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 55296;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 60, 128);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 60
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-46);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 344, (byte)0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      MockFile mockFile0 = new MockFile("start an object", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFile0.setWritable(false, false);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)35, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3720, false);
      mockFile0.getCanonicalPath();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1709, true);
//      try { 
        uTF8JsonGenerator1.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.printf("T:g\"V3A", objectArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-451), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("Too few bytes available: missing ");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 78, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, (byte)78);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)20;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 114, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)78, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)7, 3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      uTF8JsonGenerator0.writeString(charArray0, 2, 0);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      mockFile0.setWritable(false, true);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)86;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append('5');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1471), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeString("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      uTF8JsonGenerator0.writeFieldName("-Infinity");
      uTF8JsonGenerator0.writeNumber(570.0541772481832);
      uTF8JsonGenerator0.writeNull();
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.getOutputTarget();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) iOContext1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "write a raw (unencoded) value";
      mockPrintStream0.printf((Locale) null, "write a raw (unencoded) value", objectArray0);
      uTF8JsonGenerator0.writeString("lZtO");
      assertEquals(6, uTF8JsonGenerator0.getOutputBuffered());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-125);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 16, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      pipedOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 97, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      MockPrintStream mockPrintStream1 = new MockPrintStream("5T}hzCW 7e xVcp{Ue_");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) "5T}hzCW 7e xVcp{Ue_";
      mockPrintStream1.printf("^b|/)3MXGziYf)}", objectArray0);
      mockPrintStream1.printf((Locale) null, "5T}hzCW 7e xVcp{Ue_", (Object[]) null);
      uTF8JsonGenerator0.writeString("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeFieldName("{+0");
      assertEquals(35, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-96), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 0, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x/Split surrogate on writeRaw() input (last character): first character 0x%4x0Split surrogate on writeRaw() input (last character): first character 0x%4x");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Split surrogate on writeRaw() input (last character): first character 0x%4x", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Split surrogate on writeRaw() input (last character): first character 0x%4x", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 90, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)57);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)0;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty("T:g\"V3A");
      TokenFilter tokenFilter3 = tokenFilter2.includeElement(56333);
      TokenFilter tokenFilter4 = tokenFilter3.includeRootValue(2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter4, true, true);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 56333);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 2, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-564), true);
      uTF8JsonGenerator0._verifyValueWrite("mGRFBHO");
      assertEquals((-564), uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'K';
      charArray0[2] = 'H';
      charArray0[3] = 't';
      charArray0[4] = '_';
      charArray0[5] = 'C';
      charArray0[6] = 'Z';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2048, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)192);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      String string0 = "T:g\"V3A";
      MockPrintStream mockPrintStream0 = new MockPrintStream("T:g\"V3A");
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf("T:g\"V3A", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[1];
      char char0 = '(';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 21, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[1];
      byte byte0 = (byte) (-46);
      byte byte1 = (byte)0;
      int int0 = 344;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, 737);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      mockPrintStream0.write(byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 33, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-916), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-916), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-3199), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3199
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2038);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q^Qolx8ef~q.2m'co");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 224, true);
//      try { 
        uTF8JsonGenerator0.writeString("q^Qolx8ef~q.2m'co");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      pipedOutputStream0.write((-1474));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 65535, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1002);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-46);
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[1] = 'v';
      charArray0[3] = ',';
      charArray0[4] = 'j';
      charArray0[5] = '3';
      String string0 = "Mz,DO97KOv{:Hl3";
      int int0 = (-1577);
      System.setCurrentTimeMillis(1699L);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 482, (ObjectCodec) null, (OutputStream) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile("start an object", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((-1.0F));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      int int0 = 916;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 916, 18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 916
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes (out of ", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-107);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1120, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)0, false);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant(" bytes (out of ", " bytes (out of ", true, '5', 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 15)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }
}
