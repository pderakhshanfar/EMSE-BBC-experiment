/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:06:01 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "KP ?rc@W-R", true);
      MockFile mockFile0 = new MockFile("KP ?rc@W-R", "M");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((long) 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2);
      uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 0);
      uTF8JsonGenerator0.writeNumber("write a string");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 71, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 71, true);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((long) 0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)16;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, mockFileInputStream0, byteArray1, 994);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "/1iM\"@)dn*n(";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/1iM\"@)dn*n(", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/1iM\"@)dn*n(");
      byte[] byteArray0 = new byte[20];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(245L);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 57343);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator1.writeNumber(0L);
      uTF8JsonGenerator0.writeNumber("JSjJJ(Lfk3@Z^r!Xb]");
      String string0 = "Illegal white space character (code 0x";
      SerializedString serializedString0 = new SerializedString("Illegal white space character (code 0x");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ":1\\2P.CJ$Fc.";
      MockFile.createTempFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '@';
      charArray0[2] = 'r';
      uTF8JsonGenerator0._charBuffer = charArray0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(":1\u0002P.CJ$Fc.");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile(":1\u0002%P.CJ$Fc.", ":1\u0002%P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002%P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 43, true);
      uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.util.MinimalPrettyPrinter");
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.writeNumber((-570));
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 120, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 49, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("Invalid custom escape definitions; custom escape not found for character code 0x");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(">CXO%[BkRw05[", 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("378$(>T#+", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeRawValue("'y4^(F>;'o`qD{'k");
      uTF8JsonGenerator0.writeNumber("'y4^(F>;'o`qD{'k");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("378$(>T#+");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      uTF8JsonGenerator0._releaseBuffers();
      byteArray0[1] = (byte) (-13);
      mockFileInputStream0.read(byteArray0);
      mockFileInputStream0.getChannel();
      uTF8JsonGenerator0._entityBuffer = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "H", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1264, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber("H");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("H");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) mockFileInputStream0, 63);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "AUTO_CLOSE_SOURCE", false);
      MockFile mockFile0 = new MockFile("M");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[17];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pushbackInputStream0, 133);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002.C$Fc.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("K-vt=");
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 429, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeStringField("K-vt=", ":1\u0002.C$Fc.");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(":1\u0002.C$Fc.", 429, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[17];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)50;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 705, (ObjectCodec) null, pipedOutputStream0, byteArray1, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("K6-zt>s", "K6-zt>s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K6-zt>s");
      mockFileOutputStream0.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeRaw('K');
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      uTF8JsonGenerator0.writeString("?Bra0)q*o`F");
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("(;v<", 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "KP ?rc@W-R", false);
      MockFile mockFile0 = new MockFile("M");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M");
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[2] = '\u0080';
      charArray0[3] = '\u0080';
      charArray0[1] = 'M';
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.xor(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 48);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[2] = (byte)34;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a strGng", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, (byte)34);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 93, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStringField("s(-}\"IYD0]H`z~`=", "s(-}\"IYD0]H`z~`=");
      String string0 = "UTF-32LE";
      jsonGenerator0.writeRaw("UTF-32LE");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, dataOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 116, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("r]FafyUS!8?.");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      mockFileOutputStream0.close();
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "?Bra0)q*o`F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 80, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 16, true);
//      try { 
        uTF8JsonGenerator0.writeRaw("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocWriteEncodingBuffer(1);
      MockFile mockFile0 = new MockFile("K6-zt>s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(101);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('\u0080');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber(0);
      System.setCurrentTimeMillis(0L);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = '\u0080';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("IpB7");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?Bra0)q*o`F");
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2085, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('');
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeString("IpB7");
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "K-vt=s";
      MockFile mockFile0 = new MockFile("K-vt=s");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)89;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      uTF8JsonGenerator0.writeStartArray(57343);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1322, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('K');
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeString("?Bra0)q*o`F");
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 78, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._releaseBuffers();
      int int0 = (-917);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-917), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2461), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw(":1\u0002P.CJ$Fc.");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2461
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw("#3?gcp84;vQ ibi&");
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0._outputTail = 128;
      int int0 = 82;
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'o';
      charArray0[2] = 'H';
      charArray0[3] = '%';
      charArray0[4] = 'w';
      charArray0[5] = 'T';
      charArray0[6] = 'L';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[5] = (byte) (-18);
      IOContext iOContext0 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeArrayFieldStart("Oc;X!y,C8~>'3J");
      uTF8JsonGenerator0.writeRaw('f');
      jsonGenerator0.writeNumber("K-vt=s");
      jsonGenerator0.writeString("Oc;X!y,C8~>'3J");
      jsonGenerator0.writeNumber("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeRaw("Split surrogate on writeRaw() input (last character): first character 0x%4x", 3, 57343);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.io.SerializedString", "com.fasterxml.jackson.core.io.SerializedString");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Njr!8_\" Jy(");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)115;
      dataOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, dataOutputStream0, byteArray0, 3, false);
      int int0 = GeneratorBase.SURR2_FIRST;
      uTF8JsonGenerator0.writeNumber((int) (byte)55);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 895, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeStringField("", "Can not ");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "{?:IVfOE<Ip");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)41;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ":1\\2P.CJ$Fc.";
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, filterOutputStream0, byteArray0, 1000, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('!');
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", true);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'o';
      charArray0[2] = '6';
      charArray0[3] = '';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("JGX~N;T(Or*QU`", 75);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", true);
      MockFile mockFile0 = new MockFile("-", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartArray(1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      iOContext0.allocWriteEncodingBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "sBX40I,=ffbYK", true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2555, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-127), true);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.setHighestNonEscapedChar((-127));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("sBX40I,=ffbYK");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -127
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)61;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 895, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 48, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeStringField("", "Can not ");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("M");
      MockFile mockFile1 = new MockFile("M");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[1] = 'r';
      charArray0[2] = '\u0080';
      charArray0[3] = 'j';
      charArray0[1] = 'O';
      charArray0[3] = 'j';
      charArray0[6] = '\'';
      charArray0[7] = 'R';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, 82);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "{?:IVfOE<Ip");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)55;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\"P.CJ$Fc.");
      mockFileOutputStream0.getChannel();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-18);
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = '\'';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1000000000, (ObjectCodec) null, filterOutputStream0, byteArray0, 127, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K-vt=s", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      File file0 = MockFile.createTempFile("{Ii})5&C0:txg", (String) null);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream1 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1620), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-18), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -18
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber("K-vt=s");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("K-vt=s", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      int int0 = 114;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 114, (ObjectCodec) null, filterOutputStream0, byteArray0, 114, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("K-vt=s", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("Internal error: this code path should never get executed");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(101);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[5] = (byte) (-18);
      IOContext iOContext0 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeArrayFieldStart("Oc;X!y,C8~>'3J");
      uTF8JsonGenerator0.writeRaw('f');
      jsonGenerator0.writeNumber("K-vt=s");
      int int0 = GeneratorBase.SURR2_LAST;
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      uTF8JsonGenerator0.writeString(charArray0, 57343, (-350));
      jsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N#");
      mockFileOutputStream0.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("N#");
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("N#");
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 3);
      SerializedString serializedString1 = new SerializedString("N#");
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((long) 1);
      SerializedString serializedString0 = new SerializedString(":1\u0002P.CJ$Fc.");
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("n");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "K-vt=s";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(":1\\2P.CJ$Fc.");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[5] = (byte) (-18);
      IOContext iOContext0 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator1._writePPFieldName(serializedString0);
      String string1 = "Oc;X!y,C8~>'3J";
//      try { 
        uTF8JsonGenerator0.writeArrayFieldStart("Oc;X!y,C8~>'3J");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "k", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 122, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 109, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k");
      MockPrintStream mockPrintStream0 = new MockPrintStream("P$Jd?=hw~fY-f>`");
      File file0 = MockFile.createTempFile("Can not write a field name, expecting a value", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-249), 2);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "l@&", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[3];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) iOContext0;
      mockPrintStream0.printf("l@&", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2679, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[5] = (byte) (-18);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      dataOutputStream0.write(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)64, true);
      int int0 = GeneratorBase.SURR2_FIRST;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(192);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-LtrN");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[9] = (byte)64;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[5] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStringField(":1\u0002P.CJ$Fc.", "qpckfBQwm");
//      try { 
        jsonGenerator0.writeFieldName("y%ZN=z>62|a'd3X.LO");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-LtrN");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[9] = (byte)64;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[5] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(":1\u0002P.CJ$Fc.");
      jsonGenerator0.writeStringField(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      jsonGenerator0.writeRaw((SerializableString) serializedString0);
      jsonGenerator0.writeString("K-LtrN");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName("?6");
      uTF8JsonGenerator0.writeNumber((double) 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[5] = (byte) (-18);
      SerializedString serializedString0 = new SerializedString("K-vt=s");
      SerializedString serializedString1 = new SerializedString("K-vt=s");
      SerializedString serializedString2 = new SerializedString("K-vt=s");
      serializedString2.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, filterOutputStream0, false);
      SerializedString serializedString3 = new SerializedString("Y");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1933), (ObjectCodec) null, filterOutputStream0, byteArray0, 40, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N#", false);
      mockFileOutputStream0.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("k!OMO1'7G&Y");
      jsonGenerator0.writeStartObject();
      jsonGenerator0.writeEndObject();
      int int0 = 128;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 26, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 128, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[5] = (byte) (-18);
      IOContext iOContext0 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeArrayFieldStart("Oc;X!y,C8~>'3J");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      SerializedString serializedString0 = new SerializedString(":1\u0002P.CJ$Fc.");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56320, false);
      jsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeUTF8String(byteArray0, 0, (byte)64);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 17
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "k", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFile mockFile0 = new MockFile("Can not write a field name, expecting a value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 10, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("Current context not an object but ");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._rootValueSeparator = null;
      uTF8JsonGenerator0.writeStringField("HJXaY=8eJ/r(", "HJXaY=8eJ/r(");
      String string0 = "fv \\";
      uTF8JsonGenerator0.writeBoolean(false);
//      try { 
        uTF8JsonGenerator0.writeFieldName("fv ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "u @\u0002feZ/^{<iY", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "u @\u0002feZ/^{<iY");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      mockFile0.setLastModified(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3), (ObjectCodec) null, mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeStringField("8Q", (String) null);
      uTF8JsonGenerator0.writeNumber(1402);
      uTF8JsonGenerator1.writeNumber("8Q");
//      try { 
        uTF8JsonGenerator1._writePPFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartArray(1);
      SerializedString serializedString0 = new SerializedString("-");
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("-");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) 1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("-");
      mockFileOutputStream1.write(57343);
      uTF8JsonGenerator0.writeStringField("", "");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N#", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("N#", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 8);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, bufferedOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = '+';
      charArray0[2] = '=';
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 1, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(":1\u0002P.CJ$Fc.");
      jsonGenerator0.writeNumber(":1\u0002P.CJ$Fc.");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        jsonGenerator0.writeFieldName("MODIFIED-FOR-URL");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N#", false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("N#", false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 8);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, (ObjectCodec) null, bufferedOutputStream0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'l';
      charArray1[1] = '+';
      charArray1[2] = '=';
      charArray1[3] = 'i';
      uTF8JsonGenerator0.writeString(charArray1, 1, (-3034));
      uTF8JsonGenerator0.writeString(charArray0, 1, 248);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("", "Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFile0.getCanonicalFile();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)21);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ":1\\2P.CJ$Fc.";
      MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-LtrN");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[5] = (byte) (-18);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(":1\u0002P.CJ$Fc.");
      jsonGenerator0.writeStringField(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)64, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "k", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockFile mockFile0 = new MockFile("Can not write a field name, expecting a value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "l@&", false);
      ObjectCodec objectCodec0 = null;
      String string0 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray(0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue(charArray0, 0, 34);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile(",\f");
      MockFile mockFile1 = new MockFile(mockFile0, ",\f");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("-", false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('p');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString(";vNX.'m&LSy=%hjl1");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Can not /Can not ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Too few bytes available: missing ");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      uTF8JsonGenerator0.writeRaw("Can not ");
      uTF8JsonGenerator0.writeNumber("Can not ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-105);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArray0, 15);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can n{t ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2551, (ObjectCodec) null, mockPrintStream0, byteArray0, 69, false);
      uTF8JsonGenerator0.writeStringField("", "");
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("K-vt=s");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "l@&", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      mockFile0.setReadOnly();
      int int0 = 0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l@&");
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.asQuotedChars();
      mockFileOutputStream0.getChannel();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("L8kLb=w;>X");
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("K-vt=s");
      mockPrintStream0.print(0.0F);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-6), (ObjectCodec) null, mockFileOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((String) null);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile1 = new MockFile("2CO");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      jsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-5009), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-6), true);
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[5] = (byte) (-18);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(":1\u0002P.CJ$Fc.");
      uTF8JsonGenerator0.writeArrayFieldStart("Oc;X!y,C8~>'3J");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, filterOutputStream0, byteArray0, (-136), false);
      uTF8JsonGenerator0.writeRaw('f');
      mockFileOutputStream0.write(127);
      uTF8JsonGenerator1.getOutputBuffered();
      uTF8JsonGenerator0.writeStringField("8bmvvs.$I%_q=t4?\"", "K-vt=s");
      jsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", true);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartArray(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray1 = serializedString0.asQuotedUTF8();
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("-");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, (byte)11);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", true);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartArray(1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedUTF8();
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("-");
      SerializedString serializedString1 = new SerializedString("2z%!Z<C");
      uTF8JsonGenerator0.writeEndArray();
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("2z%!Z<C");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "-";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartArray(1);
      SerializedString serializedString0 = new SerializedString("-");
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("-");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartArray(1);
      SerializedString serializedString0 = new SerializedString("-");
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("-");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) 1);
      SerializedString serializedString2 = new SerializedString("2z%!Z<C");
      uTF8JsonGenerator0.writeEndArray();
      SerializedString serializedString3 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString3);
//      try { 
        uTF8JsonGenerator0.writeFieldName("2z%!Z<C");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":1\u0002.CJ$Fc.", ":1\u0002.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("K-vt=s");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-107);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockPrintStream0, byteArray0, 4, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 4, (byte)34);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%n6\nk*,8ovCmN8");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-6), (ObjectCodec) null, mockFileOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((String) null);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.writeFieldName("#%n6\nk*,8ovCmN8");
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jsonGenerator0.writeNumber(bigDecimal0);
      StringWriter stringWriter0 = new StringWriter(2179);
      BigDecimal bigDecimal1 = new BigDecimal((int) (byte) (-6));
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigDecimal bigDecimal2 = null;
//      try {
        bigDecimal2 = new BigDecimal((char[]) null, 9, 56320, mathContext0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = ":1\\2P.CJ$Fc.";
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber("K-vt=s");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(":1\u0002P.CJ$Fc.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile.createTempFile("K-vt=s", "jackson-core");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not write a field name, expecting a value");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("Can not write a field name, expecting a value");
      IOContext iOContext1 = new IOContext(bufferRecycler1, "K-vt=s", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, filterOutputStream0, byteArray0, 2359, true);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeStringField("", "*]d E-}qZjZT");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber((float) 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartArray(1);
      uTF8JsonGenerator0.writeRawValue((char[]) null, 2, (int) (byte) (-18));
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      uTF8JsonGenerator0.writeString((char[]) null, 471, 0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string0 = "Can not ";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("Can not ");
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = 'N';
      charArray0[2] = 'M';
      charArray0[3] = 'R';
      charArray0[4] = 'A';
      charArray0[5] = '@';
      charArray0[6] = '~';
      charArray0[7] = 'H';
      charArray0[8] = 'V';
      serializedString0.appendQuoted(charArray0, 0);
      uTF8JsonGenerator0.writeObjectFieldStart("J");
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a raw (unencoded) value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      mockFile0.delete();
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFile0.getCanonicalFile();
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[1] = '`';
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
      charArray0[2] = '|';
      charArray0[5] = 'M';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("K-vt=s");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-6), (ObjectCodec) null, mockFileOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((String) null);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K-vt=s");
      uTF8JsonGenerator0.writeRaw("K-vt=s");
      jsonGenerator0.writeNumber("com.fasterxml.jackson.core.type.TypeReference");
      mockFile0.toURI();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-105);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 56320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile(":1\u0002!P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      mockFile0.toPath();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte) (-1));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "u @\u0002feZ/^{<iY", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("u @\u0002feZ/^{<iY", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 110, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(114);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      mockFile0.toURI();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 't';
      charArray0[2] = 'u';
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 929, false);
//      try { 
        uTF8JsonGenerator0.writeString("6");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('\u0085');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString(";vNX.'m&LSy=%hjl1");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Can not /Can not ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Too few bytes available: missing ");
      uTF8JsonGenerator0.writeRaw("(RGNv");
      uTF8JsonGenerator0.writeNumber("Can not ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-105);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[5] = (byte) (-18);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(":1\u0002P.CJ$Fc.");
      uTF8JsonGenerator0.writeArrayFieldStart("Oc;X!y,C8~>'3J");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, filterOutputStream0, byteArray0, (-136), false);
      uTF8JsonGenerator1.getOutputBuffered();
      uTF8JsonGenerator0.writeStringField("8bmvvs.$I%_q=t4?\"", "K-vt=s");
      jsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[6] = (byte)91;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRawValue((char[]) null, (int) (byte) (-6), 0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      StringWriter stringWriter0 = new StringWriter(72);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 1, 674);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)34;
      byteArray0[4] = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a strGng", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 498, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("write a strGng");
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeBinary(byteArray0, (int) (byte)116, 2702);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 116
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartArray(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(";vNX.'m&LSy=%hjl1");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('\u0085');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString(";vNX.'m&LSy=%hjl1");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeRaw("(RGNv");
      uTF8JsonGenerator0.writeNumber("Can not ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("N#", false);
      mockFileOutputStream1.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.writeQuotedUTF8(filterOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((long) 2);
      SerializedString serializedString1 = new SerializedString(".");
      uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[5] = (byte) (-18);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-18), (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber(":1\u0002P.CJ$Fc.");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, filterOutputStream0, byteArray0, (-136), false);
      uTF8JsonGenerator1.getOutputBuffered();
      uTF8JsonGenerator0.writeStringField("8bmvvs.$I%_q=t4?\"", "K-vt=s");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("N#", false);
      mockFileOutputStream1.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.writeQuotedUTF8(filterOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((-991));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 3);
      uTF8JsonGenerator1.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(1001);
      uTF8JsonGenerator1.writeStartObject();
//      try { 
        uTF8JsonGenerator1._verifyValueWrite("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not , expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "k", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      SerializedString serializedString0 = new SerializedString("k");
      MockFile mockFile0 = new MockFile("Can not write a field name, expecting a value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)55, false);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString1 = new SerializedString("a");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile("", "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(14);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 446, (ObjectCodec) null, (OutputStream) null, byteArray0, 65535, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K-vt=s");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[2] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)72, false);
      int int0 = GeneratorBase.SURR2_LAST;
      SerializedString serializedString0 = new SerializedString("F\"#Q@/8_BUcCt4^");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      IOContext iOContext1 = new IOContext(bufferRecycler0, file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3240, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber("write a string");
      SerializedString serializedString0 = new SerializedString(":1\u0002P.CJ$Fc.");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[0] = (byte)0;
      int int0 = 0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 't';
      charArray0[2] = 'u';
      uTF8JsonGenerator0.writeRawValue(charArray0, 1, 1);
      BigInteger bigInteger0 = BigInteger.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      int int0 = 56319;
      System.setCurrentTimeMillis(1153L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2330), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2330
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string0 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('\u0085');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeString(";vNX.'m&LSy=%hjl1");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "l@&", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      mockFile0.setReadOnly();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l@&");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      serializedString0.asQuotedChars();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(4096);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 57343);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "i)_D\"[O]L");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 255, false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)86;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRawValue((char[]) null, (int) (byte)86, 0);
      uTF8JsonGenerator0.writeNumber((-1.0998725165873284));
      StringWriter stringWriter0 = new StringWriter(0);
      uTF8JsonGenerator0.writeRaw((char[]) null, (-1707), (-4144));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 1);
      uTF8JsonGenerator0.writeNumber(2587.179F);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a strGng", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      SerializedString serializedString2 = new SerializedString("Y");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 682, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 682, true);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 4);
      SerializedString serializedString3 = new SerializedString("Y");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(256);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":1\u0002P.CJ$Fc.");
      mockFileOutputStream0.flush();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":1\u0002P.CJ$Fc.");
      IOContext iOContext0 = new IOContext(bufferRecycler1, "Invalid custom escape definitions; custom escape not found for character code 0x", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)110, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)110, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 4255, 104);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = 1672;
      String string0 = "Can not write a field name, expecting a value";
      MockFile mockFile0 = new MockFile("Can not write a field name, expecting a value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1672, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 0, (int) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("Can not ");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 9);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 5, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 48, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1421, true);
      uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)127);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 34, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1771, true);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeStringField(":1\u0002P.CJ$Fc.", "K-vt=s");
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 256);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ">/", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile(">/", ">/");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)87);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("p]?%qI]ozL#}GPbDP2p");
      uTF8JsonGenerator0.writeNumber(1089L);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("]s1qY,zrf#)N;40q-F", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 2);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      String string0 = null;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("ESCAPE_NON_ASCII");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1);
      DefaultPrettyPrinter defaultPrettyPrinter3 = new DefaultPrettyPrinter(defaultPrettyPrinter2, defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) defaultPrettyPrinter3.DEFAULT_ROOT_VALUE_SEPARATOR);
      String string1 = "!!K|vD$";
      uTF8JsonGenerator0.writeFieldName("!!K|vD$");
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        MockFile.createTempFile("ESCAPE_NON_ASCII", "Current context not an ARRAY but ", file0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("N#", false);
      mockFileOutputStream1.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("K-vt=s");
      serializedString1.writeQuotedUTF8(filterOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, serializedString1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 1, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 3);
      uTF8JsonGenerator0._writePPFieldName("6yrF>.");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 104, (ObjectCodec) null, filterOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("K-vt=s");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)91;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-6), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0._verifyPrettyValueWrite(", expecting field name", (byte)0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a boolean value", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      String string0 = "Can not write a field name, expecting a value";
      MockFile mockFile0 = new MockFile("Can not write a field name, expecting a value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1672, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      SerializedString serializedString0 = new SerializedString("Vp");
      byte byte0 = (byte)47;
      byte byte1 = (byte)0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("@I#(^'/Fdi5h_", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("K-vt=s");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-6), (ObjectCodec) null, mockFileOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((String) null);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.writeFieldName("K-vt=s");
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        MockFile.createTempFile("K-vt=s", (String) null, (File) mockFile0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeRawValue((char[]) null, 1, (-1));
      mockFile0.setReadable(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      StringWriter stringWriter0 = new StringWriter(55296);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRawValue((char[]) null, (int) (byte)110, 0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      StringWriter stringWriter0 = new StringWriter(0);
      uTF8JsonGenerator0.writeRaw((char[]) null, (-1707), (-4144));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 1);
      uTF8JsonGenerator0.writeNumber(2587.179F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K-vt=s");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[4] = (byte)110;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeStringField("K-vt=s", "");
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 46, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 46, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("Can not ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 2);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeRaw("3X<*&a0Fp\"W&9");
//      try { 
        uTF8JsonGenerator0._writePPFieldName("3X<*&a0Fp\"W&9");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("Vp");
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)23;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, objectOutputStream0, byteArray0, 12, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeStringField("K-vt=s", ":1\u0002P.CJ$Fc.");
      uTF8JsonGenerator0.writeRaw('M');
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-6);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, (byte)123, (byte)64);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = ":1\\2P.CJ$Fc.";
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[6] = (byte)91;
      mockFileOutputStream0.write(byteArray0);
      SerializedString serializedString0 = new SerializedString(":1\u0002P.CJ$Fc.");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)91, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)91, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-6);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 74, 3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1916), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte) (-1));
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('l');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 633, (ObjectCodec) null, filterOutputStream0, byteArray0, 73, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.setHighestNonEscapedChar(128);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("K-vt=s");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 2120, false);
      uTF8JsonGenerator0._releaseBuffers();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("nV}!'O9");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, byteArrayBuilder0);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2, 39);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeBoolean(false);
      mockFileOutputStream0.getChannel();
      uTF8JsonGenerator0.writeNumber("Current context not an object but ");
      uTF8JsonGenerator0.writeStringField("write a binary value", "Current context not an object but ");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)117, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      String string0 = "write a strGng";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a strGng", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 491, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("write a strGng");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-2533L));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-1386), 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      mockFileOutputStream0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFile0.setLastModified(2);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("-");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "-");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)55, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("nV}!'O9");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3607);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "l@&", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) iOContext0;
      mockPrintStream0.printf("l@&", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2679, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "hwCyc{BYP\"qSU3^", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("hwCyc{BYP\"qSU3^");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1746), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeNumber((-1741.8F));
      uTF8JsonGenerator1.writeStartObject();
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
//      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 385, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("Current context not an object but ");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(1359);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string0 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 46, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 46, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 0, 48);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a strGng", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Y";
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "Y", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 4, 1932);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "l@&", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      mockFile1.setReadOnly();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 101, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.setHighestNonEscapedChar(192);
//      try { 
        uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 125);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1766, (ObjectCodec) null, objectOutputStream0);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      serializedString0.writeQuotedUTF8(objectOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      MockFile mockFile0 = new MockFile("Current context not an ARRAY but ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      mockFileOutputStream0.write(byteArray0);
      mockFile1.toURI();
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "l@&", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      mockFile1.setReadOnly();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartArray();
      int int0 = 83;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0, byteArray0, 83, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("}hjvk");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockPrintStream0, byteArray0, 69, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator2.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " ", false);
      MockFile mockFile0 = new MockFile(" ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " ");
      mockFile0.setLastModified(2);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3185, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      SerializedString serializedString0 = new SerializedString("i&-j*\"|");
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      SerializedString serializedString0 = new SerializedString("");
      MockFile mockFile0 = new MockFile("Can not write a field name, expecting a value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1672, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 65535, true);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        serializedString0.writeQuotedUTF8(mockFileOutputStream0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "l@&";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "l@&", false);
      int int0 = 446;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      mockFileOutputStream0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "l@&", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      uTF8JsonGenerator0.writeBinary(byteArray0, 0, (-648));
      String string1 = "QUOTE_NON_NUMERIC_NUMBERS";
      uTF8JsonGenerator0.writeNumber("QUOTE_NON_NUMERIC_NUMBERS");
      uTF8JsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-1), 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeStartArray();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      int int0 = 42;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "", 63, 1148);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile("h6", "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      byte[] byteArray0 = new byte[5];
      mockFileOutputStream0.close();
      byteArray0[2] = (byte)45;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNull();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 55296;
//      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 0, 1114111);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)55;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")q9yDTv*b,:");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)55, (ObjectCodec) null, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)55, (ObjectCodec) null, mockPrintStream0, byteArray0, 56320, false);
      uTF8JsonGenerator1.writeStartArray();
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
//      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2534, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ":.22A", true);
      MockFile mockFile0 = new MockFile("B_D,@XaY?O y,.z~|");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte) (-1));
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      uTF8JsonGenerator0.writeFieldName("");
      jsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("spw&.M=?'");
      MockFile mockFile1 = new MockFile((File) null, "?Bra0)q*o`F");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('{');
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.setHighestNonEscapedChar(23);
      uTF8JsonGenerator0.writeFieldName("R['%1q(y>|");
      uTF8JsonGenerator0.writeString("?Bra0)q*o`F");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStringField("K-vt=s", "");
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("bL7z");
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 557, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 2, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.setHighestNonEscapedChar((-705));
      uTF8JsonGenerator0.writeFieldName(":1\u0002P.CJ$Fc.");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw('5');
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber("");
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 49, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRawValue((char[]) null, 49, (int) (byte) (-18));
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      uTF8JsonGenerator0.writeStringField("-", "");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Can not ");
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = new SerializedString("");
      String string1 = "";
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartArray(80);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0.writeStringField("K-vt=s", "");
//      try { 
        uTF8JsonGenerator0.writeFieldName("K-vt=s");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-88);
      byteArray0[0] = (byte) (-88);
      byte byte1 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byte byte2 = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write ag strGnO", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 491, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("write ag strGnO");
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      jsonGenerator0.writeString(charArray0, (int) (byte)34, 0);
      Base64Variant base64Variant0 = null;
      MockFile mockFile0 = new MockFile("8rlw>");
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "v", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("v");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler2);
      boolean boolean0 = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      String string0 = "WiBK{(E";
      SerializedString serializedString0 = new SerializedString("WiBK{(E");
      serializedString0.writeQuotedUTF8(byteArrayBuilder0);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      mockFileOutputStream0.close();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 8000, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string0 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile("`8/L['j.4", "`8/L['j.4");
      MockFile mockFile2 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1608), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 11, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0.writeStringField("K-vt=s", "");
//      try { 
        uTF8JsonGenerator0.writeFieldName("K-vt=s");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[3] = 'j';
      charArray0[4] = 'J';
      charArray0[5] = 'M';
      charArray0[6] = 'b';
      uTF8JsonGenerator0.writeRaw("write a boolean value", 2, 1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 108, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0.writeStringField("K-vt=s", "");
      uTF8JsonGenerator0.writeRaw('d');
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStringField("K-vt=s", "oDt ~/wS1?T&%D");
//      try { 
        uTF8JsonGenerator0.writeNumberField("K-vt=s", 1101.3802F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", true);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[18];
      charArray0[0] = 'C';
      charArray0[1] = 'O';
      charArray0[2] = 'C';
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "-", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 24);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1215, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      mockFileOutputStream0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFile0.setLastModified(2);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)55, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("nV}!'O9");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3607);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1416);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler1, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1580), (ObjectCodec) null, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      StringReader stringReader0 = new StringReader("Current context not an object but ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-269), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)102;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-269), (ObjectCodec) null, pipedOutputStream0, byteArray0, 226, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1780.1839);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStringField("K-vt=s", "");
      uTF8JsonGenerator0.writeRaw('d');
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw('e');
//      try { 
        uTF8JsonGenerator0.writeNumber((double) (byte) (-64));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      int int0 = 10;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 10);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 10, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) (byte) (-1));
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.writeQuotedUTF8(objectOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 19, (ObjectCodec) null, bufferedOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 709, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStringField("Can not ", "e 7c?sd*)iY$;KrDy-");
      uTF8JsonGenerator0.writeRaw('G');
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(2892L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'b';
      uTF8JsonGenerator0.writeObjectField("mGJI(h`)}k", (Object) null);
      charArray0[2] = 'M';
      charArray0[3] = 'J';
      charArray0[4] = 'M';
      charArray0[5] = 'R';
      charArray0[6] = 'M';
      charArray0[7] = 'J';
      uTF8JsonGenerator0.writeString(charArray0, 3, (-392));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeNumber(2);
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)64, false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('{');
      uTF8JsonGenerator0.writeNumber(3430.1898613866765);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      uTF8JsonGenerator0.writeFieldName("xH");
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      MockFile mockFile0 = new MockFile("Eu#?", "Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Can not ", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 112, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 91, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1535, true);
      String string0 = "";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber("");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string1 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[2] = '|';
      int int0 = 748;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 748, 748);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 748
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'b';
      uTF8JsonGenerator0.writeObjectField("mGJI(h`)}k", (Object) null);
      charArray0[2] = 'M';
      charArray0[3] = 'J';
      charArray0[4] = 'M';
      charArray0[5] = 'R';
      charArray0[6] = 'M';
      charArray0[7] = 'J';
      uTF8JsonGenerator0.writeString(charArray0, 3, (-392));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      mockFileOutputStream0.close();
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)55;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      mockFile1.toURI();
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      charArray0[1] = '#';
      charArray0[2] = 'Y';
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "u @\u0002feZ/^{<iY", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "u @\u0002feZ/^{<iY");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 307, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("$HL");
      uTF8JsonGenerator0.writeFieldName("u @\u0002feZ/^{<iY");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Can not ");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 5);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 307, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw('b');
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "write ag strGnO";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write ag strGnO", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 491, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("write ag strGnO");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-2568L));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      String string0 = "$HL";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('$');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (byte)55, (ObjectCodec) null, stringWriter1);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockFile0.setLastModified(2);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)55, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("nV}!'O9");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 32767, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 737, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
//      try { 
        uTF8JsonGenerator1.writeString(charArray0, 93, (int) (byte)0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a string");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Eu#?");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byte byte1 = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "write a string";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1872, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(108.45501086456);
      String string1 = "mIO0O{+]%eb=\\";
      String string2 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      int int0 = 116;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      String string0 = "write a strGng";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a strGng", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 491, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeBinary(byteArray0, (int) (byte) (-14), 1166);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -14
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler2, (-2829));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3676), (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder1.NO_BYTES, 46, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder1.NO_BYTES, 2254, 46);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("Eu#?");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'h';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'J';
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("*CQ-[)G2Zw{y", "E}y");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-892), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2390, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(108);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArrayBuilder0.NO_BYTES, 48, 80);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 48
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber("$HL");
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 24, 0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 44);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1861), false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1861
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      mockFileOutputStream0.close();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ":1\u0002P.CJ$Fc.", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "write ag strGnO";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write ag strGnO", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 491, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("write ag strGnO");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-2568L));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[0] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBooleanField("", true);
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
//      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte)116);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartArray();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("write a boolean value");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-1386), 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("Current context not an object but ");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(1359);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      byte byte0 = (byte) (-1);
      mockFileOutputStream0.close();
      short short0 = (short) (-32768);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream1, byteArray1, 0, true);
      SerializedString serializedString0 = new SerializedString(":1\u0002P.CJ$Fc.");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", ":1\u0002P.CJ$Fc.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRawValue((char[]) null, (-1217), 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (int) (byte) (-64), (int) (byte)110);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-6), (ObjectCodec) null, filterOutputStream0, byteArray0, 2019, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[2] = '|';
      charArray0[3] = 'j';
      charArray0[4] = 'J';
      charArray0[5] = 'M';
      charArray0[6] = 'b';
      charArray0[7] = 'R';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, 116);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      String string0 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      PrintStream printStream0 = mockPrintStream0.printf("", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 22, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.getCurrentValue();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject((Object) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Eu#?";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eu#?", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 125);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      int int0 = GeneratorBase.SURR2_LAST;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "write a binary value");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "{?:IVfOE<Ip");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)55;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a strGng", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 547, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 16, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '&';
      charArray0[2] = 'h';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3446, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a strGng", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 547, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 16, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString2 = new SerializedString("write a strGng");
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1872, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(108.45501086456);
      uTF8JsonGenerator0.writeStringField("mIO0O{+]%eb=", "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      char char0 = 'G';
      iOContext1.withEncoding(jsonEncoding0);
      int int0 = 234;
      boolean boolean0 = false;
//      try { 
        mockFileOutputStream0.write(byteArray0, 11, 24);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '*';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (-2500), 2254);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("dQNmeG");
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      SerializedString serializedString0 = new SerializedString("dQNmeG");
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, stringWriter0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-79), (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("wJ`");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("YBi,a*[l|T4");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'x';
      charArray0[2] = 'u';
      charArray0[3] = '3';
      charArray0[4] = '{';
      charArray0[5] = 'l';
      charArray0[6] = 'Q';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (-860), (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-1), (byte) (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "write a strGng";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a strGng", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 104, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 491, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("write a strGng");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-2533L));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      iOContext0.allocTokenBuffer();
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 433, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 20, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "1,eS--Lrxh+P/-`{9";
//      try { 
        uTF8JsonGenerator0.writeNumber(1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Current context not an ARRAY but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 125);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1766, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 125);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      serializedString0.writeQuotedUTF8(objectOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-3596.41554361));
      SerializedString serializedString1 = new SerializedString("");
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("YBi,a*[l|T4");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.getOutputTarget();
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)32, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeNumber("-");
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string0 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      mockFile0.getAbsoluteFile();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 4166, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 3, false);
      int int0 = 123;
      int int1 = 15;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 3, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "{?:IVfOE<Ip");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)55;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw((String) null, (-2928), 55296);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "eIp?,S+inlit:C", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)0;
      boolean boolean0 = false;
      mockFile1.setExecutable(true);
      String string0 = null;
      int int0 = 93;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 29, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'O';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      mockFile1.toURI();
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, (int) (byte)0);
      uTF8JsonGenerator0.writeString("-");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('\u0085');
      uTF8JsonGenerator0.writeString(";vNX.'m&LSy=%hjl1");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "s1o", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 433, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 20, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
//      try { 
        uTF8JsonGenerator0.writeNumber("1,eS--Lrxh+P/-`{9");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'O';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray1, (byte)0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      int int0 = 446;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = new SerializedString("");
//      try { 
        uTF8JsonGenerator0.writeStringField("", "Can not ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2166, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0._releaseBuffers();
      BigDecimal bigDecimal0 = new BigDecimal((long) (byte)55);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      String string0 = "YBi,a*[l|T4";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "write a string";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a string", true);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 24);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      SerializedString serializedString1 = new SerializedString("Eu#?");
      serializedString1.writeQuotedUTF8(mockFileOutputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Y", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 547, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 16, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '&';
      charArray0[2] = 'h';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)34, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 34
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eu#?", false);
      mockFileOutputStream0.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      mockFileOutputStream0.write(byteArray0);
      char[] charArray0 = new char[2];
      charArray0[1] = '*';
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 21, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 38, false);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 89);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      String string1 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1312, (ObjectCodec) null, filterOutputStream0, byteArray0, 1, false);
      int int0 = GeneratorBase.SURR1_LAST;
      int int1 = (-1669);
      uTF8JsonGenerator0.writeRawValue((char[]) null, (-1669), (int) (byte) (-1));
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 1312);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("Can not ", 2, (int) (byte) (-1));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockFileOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)55, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 80, false);
//      try { 
        uTF8JsonGenerator1.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("f3;9D");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) dataOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("START_ARRAY", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "eIp?,S+inlit:C", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockFile0.deleteOnExit();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((short)918);
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
//      try { 
        uTF8JsonGenerator0.writeNumber(" e.7-dEvuAi");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      mockFile0.deleteOnExit();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("p/4T?w{", (-114), (int) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string0 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 125, false);
      int int0 = GeneratorBase.SURR1_LAST;
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'C';
//      try { 
        uTF8JsonGenerator0.writeRawValue(charArray0, (-1054), 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-1), (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = '8';
      charArray0[2] = '@';
      charArray0[3] = 'H';
      charArray0[4] = '@';
      charArray0[5] = 'H';
      charArray0[6] = '@';
      charArray0[7] = '@';
      uTF8JsonGenerator0.writeString(charArray0, 20, (-134));
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("-");
      mockFile0.toURI();
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-513), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeNumber(9223372036854775807L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "eIp?,S+inlit:C", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), false);
      uTF8JsonGenerator0._releaseBuffers();
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "-";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2166, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeRaw('C');
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      mockFileOutputStream0.close();
      FilterOutputStream filterOutputStream1 = new FilterOutputStream(mockFileOutputStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)55, (ObjectCodec) null, filterOutputStream1);
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'H';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'O';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1470, 56319);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1470
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      int int0 = 446;
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'O';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (int) (byte)0, (int) (byte)55);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t]PcFQYbl]");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-3), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-309), true);
      uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("Eu#?");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -309
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)55, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)33);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("p]?%qI]ozL#}GPbDP2p");
      uTF8JsonGenerator0.writeNumber(1089L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStringField((String) null, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0._outputSurrogates(0, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x0, second 0x0
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = 'q';
      charArray0[2] = ';';
      charArray0[3] = ')';
      charArray0[4] = 'y';
      charArray0[5] = ';';
      charArray0[6] = 'Y';
      charArray0[7] = '1';
      charArray0[8] = '-';
      uTF8JsonGenerator0.writeRaw(charArray0, 828, (-2425));
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eu#?", false);
      mockFileOutputStream0.write(byteArray0);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      mockFileOutputStream0.write(byteArray0);
      char[] charArray0 = new char[2];
      charArray0[1] = '*';
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 21, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 38, false);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('w');
      uTF8JsonGenerator0.writeString(";vNX.'m&LSy=%hjl1");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('w');
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw('C');
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Eu#?";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eu#?", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("TokenFilter.INCLUDE_ALL", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream1);
      mockFileOutputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(2);
      byteArrayBuilder1.append(4646);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 176, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder1.NO_BYTES, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H3ML31BM{#cFDCo_/O");
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("H3ML31BM{#cFDCo_/O");
      serializedString0.asQuotedUTF8();
      serializedString0.asUnquotedUTF8();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("YBi,a*[l|T4");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "{?:IVfOE<Ip");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1292, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartObject((Object) bufferRecycler0);
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = '*';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      charArray0[7] = 'x';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 224, (-1775));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('w');
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      SerializedString serializedString0 = new SerializedString(",imx52C");
//      try { 
        uTF8JsonGenerator0.writeNumber("Can not write a field name, expecting a value");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "START_ARRAY";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) dataOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("START_ARRAY", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("START_ARRAY");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eu#?", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.write(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 4, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[0] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "{?:IVfOE<Ip");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-63), true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 15, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator1.setHighestNonEscapedChar((byte)0);
      // Undeclared exception!
      uTF8JsonGenerator1.writeFieldName("Can not ");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ca<kS", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(40.12F);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('w');
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)55);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) dataOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("START_ARRAY", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      char char0 = 'x';
      charArray0[1] = 'x';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStringField("C`'rj6:*U^6>'GN", ", although was supposed to have one");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 775, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = '*';
      charArray0[2] = 'x';
      charArray0[3] = '';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      charArray0[7] = 'O';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 98, (int) (byte)0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, ">#");
      File file0 = MockFile.createTempFile("x\"l", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(" $,/a]TRb~R'Vs(5'#");
      uTF8JsonGenerator0.writeNumber((long) 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 3, (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Split surrogate on writeRaw() input (last character): first character 0x%4x");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 114, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString(")");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[5];
      mockFileOutputStream0.release();
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("YBi,a*[l|T4");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Can not ");
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string1 = "Can not ";
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-11.728435057));
      StringWriter stringWriter0 = new StringWriter(2054);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 2054, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, Integer.MIN_VALUE, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("YBi,a*[l|T4");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) dataOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("START_ARRAY", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject((Object) printStream0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRawValue((char[]) null, (-1217), 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      StringWriter stringWriter0 = new StringWriter(0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "START_ARRAY", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) dataOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("START_ARRAY", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'x';
      charArray0[2] = '*';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 116);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('w');
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      PrintStream printStream0 = mockPrintStream0.append('C');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 446, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (-990), 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), false);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Can not ");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 51, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Can not ", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1000000000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 54, false);
//      try { 
        uTF8JsonGenerator1.writeStringField("", "u@9U5J)-");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Current context not an ARRAY but ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Current context not an ARRAY but ", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 125);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1766, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 125);
      SerializedString serializedString0 = new SerializedString("Current context not an ARRAY but ");
      serializedString0.writeQuotedUTF8(objectOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      String string1 = "";
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1, (-961));
      jsonGenerator0.writeNumber((-1910.24586834811));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
//      try { 
        jsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      String string0 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((-11.728435057));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      mockFileOutputStream0.close();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2274, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55296, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "edb6A:@>kncS_Ich");
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Can not ");
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "W+O>2z]1^^dQ/");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2411, (ObjectCodec) null, filterOutputStream0, byteArray0, (-86), false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((char[]) null, 419, 4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)55;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 3333;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1947.0302327642648);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      PrintStream printStream0 = mockPrintStream0.append('C');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 446, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRaw('w');
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 4184, 854);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-34);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1920, false);
//      try { 
        uTF8JsonGenerator1.writeStringField("WI&}Vf", "6|ZBMSxya`gU[E4");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short)2100);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(" $,/a]TRb~R'Vs(5'#");
      uTF8JsonGenerator0.writeNumber(0L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(",:IwQF");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeStringField("", "");
//      try { 
        uTF8JsonGenerator0.writeRaw('C');
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2761), 33, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2761), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('7');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2761
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2761), 33, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      tokenFilter1.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 892, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2761), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) (-2761));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2761
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("VALUE_STRING", "", false, '-', 57343);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "dQNmeG";
      StringReader stringReader0 = new StringReader("dQNmeG");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      charArray0[2] = 'n';
      charArray0[3] = '$';
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 1, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber((short) (-32768));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)55, (byte)0}, byteArray0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeFieldName("");
      assertArrayEquals(new byte[] {(byte)32, (byte)34, (byte)34, (byte)0}, byteArray0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRaw('C');
      uTF8JsonGenerator0.writeStartObject();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YBi,a*[l|T4");
      uTF8JsonGenerator0._releaseBuffers();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56319, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      SerializedString serializedString0 = new SerializedString("Can not ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":AY)_'g?b", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 125);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1766, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 125);
      SerializedString serializedString0 = new SerializedString(":AY)_'g?b");
      serializedString0.writeQuotedUTF8(objectOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.overrideStdFeatures(1, (-961));
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeRaw(":AY)_'g?b");
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("dQNmeG");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      charArray0[2] = 'n';
      charArray0[3] = '$';
      charArray0[4] = 'j';
      charArray0[5] = '|';
      charArray0[6] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-531), 0, true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      SerializedString serializedString0 = new SerializedString("dQNmeG");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("dQNmeG");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1075);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1394), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0._releaseBuffers();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1075, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte) (-1), false);
      uTF8JsonGenerator1._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((short) (byte)55);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(" $,/a]TRb~R'Vs(5'#");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 275, (byte)0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-1), false);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)918);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("");
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)55, (byte)0}, byteArray0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRaw('C');
      uTF8JsonGenerator0.writeStartObject();
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eu#?", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 125);
      iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      int int0 = GeneratorBase.SURR2_LAST;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRaw("");
//      try { 
        uTF8JsonGenerator0._writePPFieldName("Eu#?");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2761), 33, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-64), (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      int int0 = GeneratorBase.SURR1_LAST;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((char[]) null, (-1669), 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("dQNmeG");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      charArray0[2] = 'n';
      charArray0[3] = '$';
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 1, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-588), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 50, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ", 5, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      String string0 = "Can not ";
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[10];
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 482, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeNumber((short) (-32768));
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":AY)_'g?b", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 125);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1766, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 125);
      SerializedString serializedString0 = new SerializedString(":AY)_'g?b");
      serializedString0.writeQuotedUTF8(objectOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeRaw(":AY)_'g?b");
      uTF8JsonGenerator0.writeNumber((short)605);
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YBi,a*[l|T4");
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2761), 33, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.resetAndGetFirstSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2761), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 33);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2761
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eu#?", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 262144, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNull();
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeNumber((short) (-32768));
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":AY)_'g?b", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 125);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1766, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 125);
      SerializedString serializedString0 = new SerializedString(":AY)_'g?b");
      serializedString0.writeQuotedUTF8(objectOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeRaw(":AY)_'g?b");
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eu#?", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 262144, (ObjectCodec) null, objectOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (-32768));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0);
      byte byte0 = (byte) (-1);
      mockFileOutputStream0.close();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)55);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1075);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1394), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeNumber((short) (byte)55);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("dQNmeG");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'n';
      charArray0[3] = '$';
      charArray0[4] = 'j';
      charArray0[5] = '|';
      charArray0[6] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-531), 0, true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 3, true);
      SerializedString serializedString0 = new SerializedString("dQNmeG");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile(":1\u0002P.CJ$Fc.", "K-vt=s");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-64);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 425, (ObjectCodec) null, filterOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeRawValue((char[]) null, (-1217), 0);
      uTF8JsonGenerator0.writeNumber((-1.0));
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Eu#?", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eu#?", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0, 125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 47, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      SerializedString serializedString0 = new SerializedString("Eu#?");
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      serializedString0.writeQuotedUTF8(bufferedOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeRaw("");
//      try { 
        uTF8JsonGenerator0._writePPFieldName("Eu#?");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = (-4236);
      String string0 = "write a null";
      StringReader stringReader0 = new StringReader("write a null");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      jsonParserSequence0.isExpectedStartObjectToken();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      charsToNameCanonicalizer0.makeChild(0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4236), (ObjectCodec) null, (OutputStream) null);
      readerBasedJsonParser0._bufferRecyclable = false;
      // Undeclared exception!
//      try { 
        iOContext0.allocWriteEncodingBuffer();
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "^c SG.";
      File file0 = MockFile.createTempFile("^c SG.", "^c SG.", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      mockFileOutputStream0.release();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1393), (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(iOContext0).allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("*$__t$Z\"b9{M=n`O]");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFile mockFile0 = new MockFile("Can not ");
      MockFile mockFile1 = new MockFile(mockFile0, "Can not ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      mockFileOutputStream0.close();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 446, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (-32768));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 0, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-994), false);
      String string0 = null;
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((String) null, (String) null, false, 'v', 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 3, (ObjectCodec) null, stringWriter0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, (TokenFilter) null, true, false);
      filteringGeneratorDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2562, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      int int0 = (-4848);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)29;
      byte byte0 = (byte) (-104);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)0;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-4848), (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }
}
