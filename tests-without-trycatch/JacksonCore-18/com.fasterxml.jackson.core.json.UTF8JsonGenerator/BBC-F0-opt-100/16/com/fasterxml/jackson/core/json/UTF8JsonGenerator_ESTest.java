/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:59:31 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", true);
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bes (out of ");
      mockFile0.toPath();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 251, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      char[] charArray0 = new char[4];
      charArray0[1] = 'y';
      uTF8JsonGenerator1.writeString(charArray0, (-1782), 0);
      uTF8JsonGenerator1._writePPFieldName("");
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-108);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 2174, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 369, true);
      uTF8JsonGenerator2.getCharacterEscapes();
      uTF8JsonGenerator0._characterEscapes = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite((String) null, 224);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "com.fasterxml.ackson.core.JonToken";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.ackson.core.JonToken", true);
      iOContext0.allocWriteEncodingBuffer();
      File file0 = MockFile.createTempFile("com.fasterxml.ackson.core.JonToken", "com.fasterxml.ackson.core.JonToken");
      file0.toPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      byte[] byteArray0 = new byte[8];
      iOContext0.allocBase64Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.ackson.core.JonToken");
      iOContext0.constructTextBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " b}|es (out of ", false);
      MockFile mockFile0 = new MockFile(" b}|es (out of ", " b}|es (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" b}|es (out of ");
      mockFile0.toPath();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      mockFile0.createNewFile();
      mockFile0.toPath();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(" bes (out of ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[20];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, mockPrintStream0, byteArray0, 128, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._verifyValueWrite(" bytes (out of ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeRaw('@');
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 262144, true);
      uTF8JsonGenerator0.writeNumber(2344);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " Dyte<& (out of ", false);
      MockFile mockFile0 = new MockFile(" Dyte<& (out of ", " Dyte<& (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" Dyte<& (out of ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeRawValue("3G=Bw3VBqPJ=y=<");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyValueWrite(" Dyte<& (out of ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      file0.toURL();
      byte[] byteArray0 = new byte[8];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2850, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      pipedOutputStream0.flush();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
//      try { 
        uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", true);
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bes (out of ");
      mockFile0.toPath();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 251, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1034, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[4];
      charArray0[3] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = '*';
      charArray0[3] = '1';
//      try { 
        jsonGenerator0.writeString(charArray0, (-1782), 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 127, false);
      uTF8JsonGenerator0._verifyValueWrite(" bytes (out of ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bes (out of ");
      mockFile0.toPath();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1355, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1002, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._verifyValueWrite((String) null);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte) (-95);
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte) (-92);
      byteArray1[5] = (byte)17;
      byteArray1[6] = (byte) (-58);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)2, (byte)2);
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-100);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-231), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeRaw('3');
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ubytes (out of}", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ubytes (out of}");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      iOContext0.allocWriteEncodingBuffer();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeString("");
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '4';
      charArray0[2] = 'B';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 55);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._verifyValueWrite(" bes (out of ");
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      mockPrintStream0.print(0);
      mockPrintStream0.append((CharSequence) " bytes (out of ");
      iOContext0.allocTokenBuffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumberField("*R\"T^T,I7", 0.0F);
      uTF8JsonGenerator0.writeString("*R\"T^T,I7");
      uTF8JsonGenerator0._verifyValueWrite("j");
      uTF8JsonGenerator0.writeNumber((short)79);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", true);
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bes (out of ", true);
      mockFile0.toPath();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 251, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1002, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'y';
      charArray0[2] = '*';
      charArray0[3] = '1';
      jsonGenerator0.writeString(charArray0, (-1782), 0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("", (float) 1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[6] = (byte)2;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ bytes (out of 0 bytes (out of ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " bytes (out of ");
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '?';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)2, 1);
      System.setCurrentTimeMillis(111L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 116);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0, byteArray0, 104, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('\u0088');
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis((byte)17);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#|/Bo>y7");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)20, false);
      SerializedString serializedString0 = new SerializedString("#|/Bo>y7");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      mockFile0.toPath();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1002, true);
      String string0 = "";
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)48;
      byte byte0 = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._verifyValueWrite(" bytes (out of ");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      SerializedString serializedString1 = null;
//      try {
        serializedString1 = new SerializedString((String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Null String illegal for SerializedString
//         //
//         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Cu{AiYdQ4VRQy_R.InT", true);
      byte[] byteArray0 = new byte[14];
      MockFile mockFile0 = new MockFile("Cu{AiYdQ4VRQy_R.InT", "Cu{AiYdQ4VRQy_R.InT");
      mockFile0.toPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Cu{AiYdQ4VRQy_R.InT");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3534, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3534, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1, serializedString0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      uTF8JsonGenerator0.writeNumberField("Split surrogate on writeRaw() input (last character): first character 0x%4x", (-2571.6677F));
      jsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      iOContext0.allocWriteEncodingBuffer(3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 0.0F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" byes (out of ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      mockPrintStream0.print((Object) jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.print((-1L));
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(3);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-19);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (byte)49);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("6");
      MockFile mockFile1 = new MockFile(mockFile0, "6");
      mockFile1.toPath();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 1257.3218F);
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
      String string0 = " ";
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator((IOContext) null, 65, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1900, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._verifyValueWrite("pI`$u@b8m\"@,1.}Rav");
      char char0 = 'S';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw('S');
      int int0 = 4000;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("~1+#9,", (-3192), 4000);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.print((-1L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawValue("/C1q+Qrr5M:EPXB)M");
      uTF8JsonGenerator0.writeStartArray();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 56320;
      longArray0[1] = (long) 0;
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[3];
      charArray0[1] = '';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 192);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, Integer.MIN_VALUE, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)67;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 51, (byte)102);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " Dyte<& (out of ", false);
      MockFile mockFile0 = new MockFile(" Dyte<& (out of ", " Dyte<& (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" Dyte<& (out of ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      String string0 = "3G=Bw3uVBP^J=y\\=<a";
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of", true);
      byte[] byteArray0 = new byte[8];
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 10, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of", true);
      byte[] byteArray0 = new byte[8];
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of");
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 45, (ObjectCodec) null, mockPrintStream1, byteArray0, (-492), true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('@');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -492
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-49);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1165, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 11, true);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.ackson.core.JonToken", true);
      iOContext0.allocWriteEncodingBuffer();
      File file0 = MockFile.createTempFile("com.fasterxml.ackson.core.JonToken", "com.fasterxml.ackson.core.JonToken");
      file0.toPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.ackson.core.JonToken");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1);
      DefaultPrettyPrinter defaultPrettyPrinter3 = new DefaultPrettyPrinter(defaultPrettyPrinter2, serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out o ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out o ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " bytes (out o ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out o ");
      iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.println((Object) uTF8JsonGenerator0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int int0 = 72;
      mockPrintStream0.write(72);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, 72, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-49), (ObjectCodec) null, mockPrintStream0, byteArray0, 1955, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        uTF8JsonGenerator1.writeBinary((InputStream) byteArrayInputStream0, 46);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 37 bytes (out of 46)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      File file0 = MockFile.createTempFile("Illegal character (", "Illegal character (");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.flush();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-30);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 104);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string1 = "com.fasterxml.jackson.core.JsonPointer";
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 32767);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 32758 bytes (out of 32767)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      File file1 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file1);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeBoolean(false);
      file1.renameTo(file0);
      String string0 = "expected a valid value (number, String, array, object, 'true', 'false' or 'null')";
      uTF8JsonGenerator0.writeRawValue("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1352);
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)117;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-97);
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte)86;
      byteArray1[7] = (byte) (-25);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray1, (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ bytes (out of 0 bytes (out of ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      uTF8JsonGenerator0.writeBoolean(true);
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", true);
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bes (out of ", true);
      mockFile0.toPath();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 251, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1002, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("", (float) 1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " Dyte<& (out of ", false);
      MockFile mockFile0 = new MockFile(" Dyte<& (out of ", " Dyte<& (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" Dyte<& (out of ", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeRawValue("3G=3uVBP^J=y=<a");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(Double.NaN);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 46, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("]");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = " bytes (out f ";
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out f ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 101, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 46, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 65535);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("2}&T/:; /", 3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("v_t\"`OM]fu[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytQs (outQ9 1fK");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytQs (outQ9 1fK");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1000000000, (ObjectCodec) null, mockPrintStream0, byteArray0, (-772), false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("3POcx]s4.`TAyD[`O5");
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, 2636);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 108, true);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ bytes (out of 0 bytes (out of ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      uTF8JsonGenerator0.writeStartArray();
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out f ", true);
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      MockFile.createTempFile(" bytes (out f ", "");
      MockFile mockFile0 = new MockFile("tJ*5k%U9x", "tJ*5k%U9x");
      mockFile0.toPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`@({/cn$S`gN&RY&");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 91, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 305, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString1);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      DefaultPrettyPrinter defaultPrettyPrinter3 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = '#';
      charArray0[2] = 'q';
      charArray0[3] = '5';
      serializedString1.appendQuoted(charArray0, 1);
      uTF8JsonGenerator0.setHighestNonEscapedChar(346);
      defaultPrettyPrinter2.writeEndArray(uTF8JsonGenerator0, 123);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField("tJ*5k%U9x", (float) 123);
//      try { 
        uTF8JsonGenerator0.writeArrayFieldStart("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      mockFile0.toPath();
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 251, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1009, false);
      mockFileOutputStream0.close();
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumber((-1857));
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[2] = (byte)2;
      byteArray1[2] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray1, (byte)2, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      MockPrintStream mockPrintStream1 = new MockPrintStream("com.fasterxml.jackson.core.JsonPointer");
      uTF8JsonGenerator0.writeNumber(" bytes (out of ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, (-2));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", (float) 2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytQs (outQ9 1fK");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytQs (outQ9 1fK");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1287), true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("%&P\"yPL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = ':';
      charArray0[2] = '1';
      charArray0[3] = '>';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)125;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2549, (ObjectCodec) null, (OutputStream) null, byteArray0, 114, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-32768), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumberField("o5=U3;-6kk\"y&5", (float) 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a null, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRawValue("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1352);
      iOContext0.allocBase64Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, false);
      int int0 = 59;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1961), (ObjectCodec) null, mockPrintStream0, byteArray0, (-1961), false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1961
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ bytes (out of 0 bytes (out of ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRawValue("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      Object object0 = new Object();
      uTF8JsonGenerator0.writeStartObject(object0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 65535);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bts (ut of ", false);
      File file0 = MockFile.createTempFile(" bts (ut of ", " bts (ut of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bts (ut of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bts (ut of ");
      byte[] byteArray0 = new byte[3];
      file0.toPath();
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-20), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bts (ut of ");
      SerializedString serializedString0 = new SerializedString(" bts (ut of ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      mockPrintStream0.print(65535);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)75;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 77, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)108, false);
//      try { 
        uTF8JsonGenerator0.writeNumber(3302);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-19);
      mockPrintStream0.write(byteArray0, (-3), 0);
      byte[] byteArray1 = new byte[9];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray1, 508, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byte byte0 = (byte)10;
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNull();
      iOContext0.allocWriteEncodingBuffer((int) (byte) (-19));
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 55296;
      longArray0[1] = (long) (byte) (-19);
      longArray0[2] = (long) (byte)10;
      longArray0[3] = (long) 1;
      longArray0[4] = 0L;
      longArray0[5] = (long) (byte)69;
      longArray0[6] = (-558L);
      uTF8JsonGenerator0.writeArray(longArray0, 970, (-1585));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 332, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 332
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1641), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeString(" bytes (out of ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-19);
      mockPrintStream0.write(byteArray0, (-3), 0);
      SerializedString serializedString0 = new SerializedString("lQ:,r");
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, serializedString0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-826), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ubytes (out of}", true);
      File file0 = MockFile.createTempFile("Ubytes (out of}", "Ubytes (out of}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream("Ubytes (out of}");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", true);
      MockFile mockFile0 = new MockFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(",^yY+92|H*#`g");
      mockFile0.toPath();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      String string1 = "j+B";
      uTF8JsonGenerator0._verifyValueWrite("j+B");
//      try { 
        uTF8JsonGenerator0.writeRaw('e');
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.ackson.core.JonToken", true);
      iOContext0.allocReadIOBuffer(2);
      iOContext0.allocWriteEncodingBuffer();
      File file0 = MockFile.createTempFile("com.fasterxml.ackson.core.JonToken", "com.fasterxml.ackson.core.JonToken");
      file0.toPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.ackson.core.JonToken");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.print(35);
      mockPrintStream0.print(35);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("+INF");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "+INF");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(filterOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byte byte0 = (byte)64;
      byteArray0[1] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, (ObjectCodec) null, filterOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 1023);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("E2Cp");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)27;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 409, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = new SerializedString("E2Cp");
      uTF8JsonGenerator0._verifyValueWrite("[[7dpt<3RSF");
      uTF8JsonGenerator0.writeRaw('');
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("M]Ol");
      uTF8JsonGenerator0.writeString("VALUE_NULL");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 699, (ObjectCodec) null, pipedOutputStream0, byteArray0, 110, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("=CMM~SO$K%KdL(");
//      try { 
        uTF8JsonGenerator0.writeNumber(" bytes (out of ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out %=of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out %=of ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out %=of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      SerializedString serializedString0 = new SerializedString("4!sv");
      uTF8JsonGenerator0._verifyValueWrite("Trying to release buffer not owned by the context");
      uTF8JsonGenerator0.writeRaw('s');
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("Trying to release buffer not owned by the context", " bytes (out %=of ", false, 's', (-2143));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 17)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(1392L);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(97);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("BIG_DECIMAL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = '7';
      charArray0[2] = '6';
      charArray0[3] = 'x';
      charArray0[4] = '.';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1485), 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append('L');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-106);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0, byteArray0, 1023, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("BIG_DECIMAL");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ", expecting field name", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", expecting field name");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)13, true);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("4!sv");
      uTF8JsonGenerator0._verifyValueWrite("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeRaw('N');
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator0.writeString("Z`M*v(\"BFViZ(>JUJy#");
      uTF8JsonGenerator0.writeString("Z`M*v(\"BFViZ(>JUJy#");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRawValue("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1352);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes (out of ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      file0.toPath();
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", 2223.1687F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)2;
      byteArray0[3] = (byte)10;
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte)2;
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 1.0F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short)63);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = true;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.print((-1L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      Base64Variant base64Variant0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2579);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((-1857));
      iOContext2.allocTokenBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      System.setCurrentTimeMillis(3205L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "y} bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("y} bytes (out of ");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      iOContext1.allocTokenBuffer(2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((long) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(536868245);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes (out of ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      file0.toPath();
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", 2223.1687F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("Spill-over slots in symbol table with ");
      mockPrintStream0.print(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1822, (ObjectCodec) null, (OutputStream) null, byteArray0, 4000, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(747L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out o ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out o ");
      byte[] byteArray0 = new byte[8];
      String string0 = "w)xm\\R";
      MockFile mockFile0 = new MockFile("m,_OKl4REU", "w)xmR");
      mockFile0.toPath();
      mockPrintStream0.print((int) (byte)2);
      mockPrintStream0.print(7);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      mockPrintStream1.write(240);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      String string1 = "";
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0.writeNumberField("w)xmR", (float) 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1030, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._verifyValueWrite("Trying to release buffer not owned by the context");
      uTF8JsonGenerator0.writeRaw('I');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("r4*Cy", 0, 55296);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1030, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 11, 337);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      boolean boolean0 = true;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile(" bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print((long) 1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2167), false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("+:cq-+uBeZ?u");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2167
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile(" bytes (out of ");
      mockFile0.toURL();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = true;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.print((-1L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      String string1 = "/C1q+Qrr5M:EPXB)M";
      uTF8JsonGenerator0.writeRawValue("/C1q+Qrr5M:EPXB)M");
      uTF8JsonGenerator0.writeStartArray();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 56320;
      longArray0[1] = (long) 0;
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 192);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(0.0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      mockPrintStream1.print('y');
      uTF8JsonGenerator0.writeNumber((float) 55296);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" bytes (out of ");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRaw("5");
      uTF8JsonGenerator0.writeString((char[]) null, 1, (-133));
      SerializedString serializedString0 = new SerializedString("Trying to release buffer not owned by the context");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1030, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeString("g*bK");
      uTF8JsonGenerator0._verifyValueWrite("Trying to release buffer not owned by the context");
      uTF8JsonGenerator0.writeRaw('N');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("r4*Cy", 0, 55296);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile(" bytes (out of ");
      mockFile0.getCanonicalPath();
      mockFile0.toURL();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[5];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.print((-1L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawValue("/C1q+Qrr5M:EPXB)M");
      uTF8JsonGenerator0.writeStartArray();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 56320;
      longArray0[1] = (long) 0;
      uTF8JsonGenerator0._cfgUnqNames = true;
      uTF8JsonGenerator0.writeArray(longArray0, 5, (-2305));
      MockPrintStream mockPrintStream1 = new MockPrintStream("/C1q+Qrr5M:EPXB)M");
      mockPrintStream0.println((Object) bufferRecycler0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(" bytes (out of ");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      ObjectCodec objectCodec0 = null;
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(objectOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2602), (ObjectCodec) null, filterOutputStream0, byteArray0, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      File file1 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(" bytes (out of ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(file1);
      MockPrintStream mockPrintStream2 = new MockPrintStream(" bytes (out of ");
      int int0 = 2026;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2026, (ObjectCodec) null, mockFileOutputStream1, byteArray0, 2026, false);
//      try { 
        uTF8JsonGenerator0.writeRaw("T'=64!Rl-xv?[Ck[eW");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out o ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out o ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " bytes (out o ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out o ");
      iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream0.println((Object) uTF8JsonGenerator0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeString((char[]) null, 77, 0);
      uTF8JsonGenerator0.writeRaw('\u0088');
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("", (float) (byte)34);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 557, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = null;
//      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile(" bytes (out of ");
      mockFile0.toURL();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.print((-1L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawValue("/C1q+Qrr5M:EPXB)M");
      uTF8JsonGenerator0.writeStartArray();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 56320;
      longArray0[1] = (long) 0;
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 62);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", true);
      MockFile mockFile0 = new MockFile(" bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("D,^yY+9H*#`Xg");
      mockFile0.toPath();
      mockPrintStream0.print(3);
      mockPrintStream0.print(1);
      mockPrintStream0.write((int) (byte)2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      SerializedString serializedString0 = new SerializedString("%W:w");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._verifyValueWrite("/O!9>)3RbK9c0kFc]M");
      uTF8JsonGenerator0.writeRaw('N');
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("4!sv", 2, 1000000000);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((long) 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 56320);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 15);
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferedInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1466), (ObjectCodec) null, pipedOutputStream0, byteArray0, 536870910, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0._verifyValueWrite(" bytes (out of ");
      uTF8JsonGenerator0.writeRaw('N');
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.json.UTF8JsonGenerator", 0, 1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      file0.toURL();
      byte[] byteArray0 = new byte[8];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2850, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, true);
      pipedOutputStream0.flush();
      BigInteger bigInteger0 = BigInteger.TEN;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-737L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-67), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("7Y`?SWEr");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -67
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("4!sv");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("g*bK");
      uTF8JsonGenerator0._verifyValueWrite("Trying to release buffer not owned by the context");
      uTF8JsonGenerator0.writeRaw('N');
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.base.ParserMinimalBase", 40, (int) (byte)2);
//      try { 
        uTF8JsonGenerator0.writeFieldName("write a null");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("4!sv");
      long[] longArray0 = new long[0];
      uTF8JsonGenerator0.writeArray(longArray0, (-1887), 0);
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("4!sv");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("*");
      uTF8JsonGenerator0._verifyValueWrite("Trying to release buffer not owned by the context");
      uTF8JsonGenerator0.writeRaw('N');
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.base.ParserMinimalBase", 40, (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", true);
      MockFile mockFile0 = new MockFile(" bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("D,^yY+9H*#`Xg");
      mockFile0.toPath();
      mockPrintStream0.write((int) (byte)2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2279, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 255, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      byte byte0 = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      mockPrintStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)10;
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte)2;
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("4!sv");
      float float0 = 1.0F;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      File file0 = MockFile.createTempFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bes (out of ");
      byte[] byteArray0 = new byte[6];
      mockPrintStream0.print(512);
      mockPrintStream0.write((int) (byte)8);
      int int0 = 15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeRawValue("%u!>:YCClo6JVZ`");
      uTF8JsonGenerator0._outputTail = 512;
      uTF8JsonGenerator0.writeNumberField("", (-141.574F));
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = 'f';
      charArray0[2] = '>';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 15, 8);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      mockPrintStream1.write((-1));
      IOContext iOContext1 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)4, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("M%Fy\":I%", (-1.0F));
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1023);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("END_ARRAY", "END_ARRAY", true, '\'', 55296);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 9)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W=\"{B|!]\"W");
      IOContext iOContext0 = new IOContext(bufferRecycler0, " by%tes (out of ", true);
      File file0 = MockFile.createTempFile(" by%tes (out of ", " by%tes (out of ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFile mockFile0 = new MockFile(" by%tes (out of ");
      mockFile0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" by%tes (out of ");
      mockPrintStream1.write(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      byte[] byteArray1 = new byte[5];
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream3 = new MockPrintStream(mockPrintStream1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-2573), (ObjectCodec) null, mockPrintStream0, byteArray1, 3, false);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeNumber(3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 3, 1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)10;
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte)2;
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("4!sv");
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 1.0F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short)63);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumberField("Trying to release buffer not owned by the context", 1348.3951F);
      SerializedString serializedString0 = new SerializedString("4!sv");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("g*bK");
      uTF8JsonGenerator0._verifyValueWrite("Trying to release buffer not owned by the context");
      uTF8JsonGenerator0.writeRaw('N');
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4031, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartArray(18);
      uTF8JsonGenerator0.writeRawValue("3G=3uVBP^)Jsy1=<a");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((-1.0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(2);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) " bytes (out of ";
      objectArray0[3] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format(locale0, " bytes (out of ", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2770, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 3819.1873F);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)24;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 56319);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1, byteArray1, 127, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(3349.045);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumberField("Trying to release buffer not owned by the context", 1348.3951F);
      SerializedString serializedString0 = new SerializedString("4!sv");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      String string0 = "g*bK";
      uTF8JsonGenerator0.writeString("g*bK");
      uTF8JsonGenerator0._verifyValueWrite("Trying to release buffer not owned by the context");
      uTF8JsonGenerator0.writeRaw('N');
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("Z`M*v(\"BFViZ(>JUJy#");
      MockPrintStream mockPrintStream1 = new MockPrintStream("Int{kb]B ");
      PrintStream printStream0 = mockPrintStream1.append('f');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      MockPrintStream mockPrintStream3 = new MockPrintStream("com.fasterxml.jackson.core.JsonPointer");
      mockPrintStream3.println((Object) mockPrintStream2);
      uTF8JsonGenerator0.writeNumber(" bytes (out of ");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumberField("eqPdP|@se1_oK.Ikb;", bigDecimal0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("com.fasterxml.jackson.core.JsonPointer");
      uTF8JsonGenerator0.writeNumber(" bytes (out of ");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "vbS:d47g|", true);
      File file0 = MockFile.createTempFile("vbS:d47g|", "vbS:d47g|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("vbS:d47g|");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      MockPrintStream mockPrintStream3 = new MockPrintStream("com.fasterxml.jackson.core.JsonPointer");
      mockPrintStream3.println((Object) mockPrintStream2);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber("vbS:d47g|");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      uTF8JsonGenerator0.writeNumberField("vbS:d47g|", bigDecimal0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)34, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(3);
      mockPrintStream0.print(0);
      int int0 = (-2277);
      int int1 = 4647;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int2 = 93;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 93, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xDtjb<^Mm[L");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, (byte)4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = new SerializedString("4!sv");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("g*bK");
      uTF8JsonGenerator0._verifyValueWrite("Trying to release buffer not owned by the context");
      uTF8JsonGenerator0.writeRaw('N');
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.base.ParserMinimalBase", 40, (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", (float) 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[0];
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      file0.toURL();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.print((-1L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawValue("/C1q+Qrr5M:EPXB)M");
      uTF8JsonGenerator0.writeStartArray();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 56320;
      longArray0[1] = (long) 0;
      uTF8JsonGenerator0.writeArray(longArray0, 5, (-2305));
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 5);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2277), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((long) (byte)108);
      uTF8JsonGenerator0.writeRaw("O/{LxeI~G;0");
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bes (out of ", ", expecting field name");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(", expecting field name");
      mockFileOutputStream0.write(595);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int0 = 69;
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 457, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      mockPrintStream1.print(240);
      SerializedString serializedString0 = new SerializedString("");
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 119, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      iOContext0.allocNameCopyBuffer(56319);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) 2);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("wH");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(3);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream1 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream2.println((Object) null);
      uTF8JsonGenerator0.writeBoolean(false);
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      file0.toPath();
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("Trying to release buffer not owned by the context");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 69, (ObjectCodec) null, mockPrintStream1, byteArray0, 56320, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      File file0 = MockFile.createTempFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bes (out of ");
      byte[] byteArray0 = new byte[6];
      mockPrintStream0.print(5035);
      mockPrintStream0.print(512);
      mockPrintStream0.write((int) (byte)8);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 6, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'C';
      charArray0[2] = 'q';
      charArray0[3] = 'Y';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = 'V';
      charArray0[7] = 'q';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 19, 1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream1.println(false);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 42, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", (-5097.2F));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)50, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      File file0 = MockFile.createTempFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bes (out of ");
      byte[] byteArray0 = new byte[6];
      mockPrintStream0.print(48);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1556), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      mockPrintStream2.print((long) 0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      MockPrintStream mockPrintStream3 = new MockPrintStream("com.fasterxml.jackson.core.JsonPointer");
      mockPrintStream3.println((Object) mockPrintStream2);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(" bytes (out of ");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumberField("eqPdP|@se1_oK.Ikb;", bigDecimal0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 668);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      mockPrintStream1.print((-279L));
      byte[] byteArray0 = new byte[9];
      file0.toPath();
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", 2223.1687F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 933, (-1263));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", (float) 1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 2289.043F);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = new SerializedString("WKV~`!b)9pl&N):");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.toPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 121);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 64, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-455), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -455
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray1 = ByteArrayBuilder.NO_BYTES;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockFileOutputStream0, byteArray1, 115, true);
      uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream1.println((Object) bufferRecycler0);
//      try { 
        uTF8JsonGenerator0.writeNumber((short)2676);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " by%tes (out of ", true);
      File file0 = MockFile.createTempFile(" by%tes (out of ", " by%tes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFile mockFile0 = new MockFile(" by%tes (out of ");
      mockFile0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" by%tes (out of ");
      mockPrintStream1.write(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      MockPrintStream mockPrintStream3 = new MockPrintStream("D0QXz");
      mockPrintStream3.println((Object) jsonEncoding0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber("D0QXz");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, true);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = new SerializedString("4!sv");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("Trying to release buffer not owned by the context");
      uTF8JsonGenerator0.writeRaw('N');
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.getAbsolutePath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2319), (ObjectCodec) null, mockPrintStream1, byteArray0, 69, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      mockPrintStream1.print(240);
      SerializedString serializedString0 = new SerializedString("");
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 119, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) 2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)100;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 340, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte) (-128);
      byteArray1[6] = (byte) (-128);
      byteArray1[7] = (byte)40;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 1864, 127);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.JsonToken", true);
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.core.JsonToken", "com.fasterxml.jackson.core.JsonToken");
      file0.toPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.JsonToken");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockPrintStream mockPrintStream1 = new MockPrintStream("com.fasterxml.jackson.core.JsonToken");
      bufferRecycler0.allocByteBuffer(0, 0);
      mockPrintStream0.println(true);
      mockPrintStream1.print(3);
      mockPrintStream0.print(1024);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeRawValue("com.fasterxml.jackson.core.JsonToken");
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      file0.toURL();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawValue("/C1q+Qrr5M:EPXB)M");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeEndArray();
      SerializedString serializedString0 = new SerializedString(" bytes (out of ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      mockPrintStream1.print(240);
      SerializedString serializedString0 = new SerializedString("");
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 89, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      File file0 = MockFile.createTempFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bes (out of ");
      byte[] byteArray0 = new byte[6];
      mockPrintStream0.print(5035);
      mockPrintStream0.print(512);
      mockPrintStream0.write((int) (byte)8);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeRawValue("%u!>:YCClo6JVZ`");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("%u!>:YCClo6JVZ`");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      IOContext iOContext1 = new IOContext(bufferRecycler0, file0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)4, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRaw("js?k{I\"(<}/c+g~MK");
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 55296);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1023, (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, true);
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)2, (-1433));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream(file0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 13, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 13
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "vQx;8e-x~\\sX";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vQx;8e-x~sX");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = BigInteger.ONE;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      File file0 = MockFile.createTempFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bes (out of ");
      byte[] byteArray0 = new byte[6];
      mockPrintStream0.print(5035);
      mockPrintStream0.print(512);
      mockPrintStream0.write((int) (byte)8);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeRawValue("%u!>:YCClo6JVZ`");
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = 'A';
      charArray0[2] = '8';
      charArray0[3] = 'H';
      charArray0[4] = '_';
      charArray0[5] = 'x';
      charArray0[6] = 'C';
      uTF8JsonGenerator0.writeRawValue(charArray0, 0, 2);
      uTF8JsonGenerator0.writeNumberField("", (-141.574F));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " by%tes (out of ", true);
      File file0 = MockFile.createTempFile(" by%tes (out of ", " by%tes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFile mockFile0 = new MockFile(" by%tes (out of ", " by%tes (out of ");
      mockFile0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" by%tes (out of ");
      mockPrintStream1.write(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, file0, true);
      int int0 = 34;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockPrintStream0, byteArray0, 139, true);
      SerializedString serializedString0 = new SerializedString(" by%tes (out of ");
      ByteBuffer.allocateDirect((byte)2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1909), 12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      File file0 = MockFile.createTempFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bes (out of ");
      byte[] byteArray0 = new byte[6];
      mockPrintStream0.print(5035);
      mockPrintStream0.print(512);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)8, false);
      uTF8JsonGenerator0.writeNumber((long) (byte)8);
      uTF8JsonGenerator0.writeNumber(3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 0, 1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.flush();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeRawValue("3G=3uVBP^J=y=<a");
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      mockPrintStream1.print(240);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 98, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 36, 772);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber((long) 1032);
      uTF8JsonGenerator0.writeNumber((int) (byte)51);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 128, 65535);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream(file0);
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-64), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -64
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFile mockFile0 = new MockFile("true");
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream("LOp^J X(#");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T!s");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("PBf'zPc}q(#zMQ== >");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      file0.toURL();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeRawValue("/C1q+Qrr5M:EPXB)M");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeEndArray();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2426, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 55, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'U';
      charArray0[3] = ',';
      charArray0[4] = 't';
      charArray0[5] = 't';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 298, 55);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 298
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockFileOutputStream0);
      int int0 = 2643;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2643, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (byte)2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1153, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = 'j';
      charArray0[2] = 'y';
      charArray0[3] = '4';
      charArray0[4] = 'F';
      charArray0[5] = 't';
      charArray0[6] = 'U';
      uTF8JsonGenerator0.writeString(charArray0, 55, (-2170));
      uTF8JsonGenerator0.writeNumber("y`TLc[8([U>>q|?");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2209), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      mockPrintStream0.println((Object) null);
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-2209), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1, serializedString0);
      defaultPrettyPrinter2.writeEndArray(uTF8JsonGenerator0, 240);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", (float) 2);
      uTF8JsonGenerator0.writeString(" bytes (out of ");
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeUTF8String(byteArray0, 7, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = new SerializedString("WKV~`!b)9pl&N):");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("_&?]?N$C_y");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " by%tes (out of ", true);
      File file0 = MockFile.createTempFile(" by%tes (out of ", " by%tes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockFile mockFile0 = new MockFile(" by%tes (out of ", " by%tes (out of ");
      mockFile0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" by%tes (out of ");
      mockPrintStream0.print(1489);
      mockPrintStream1.write(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, file0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockPrintStream0, byteArray0, 139, true);
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(55296);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(file0);
      mockPrintStream2.println((Object) file0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1032), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-10), false);
      char[] charArray0 = new char[7];
      charArray0[1] = '_';
      charArray0[2] = '=';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      BigDecimal bigDecimal0 = new BigDecimal(14);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -10
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, mockFileOutputStream1);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeTree((TreeNode) null);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = ']';
      charArray0[2] = 'A';
      charArray0[3] = 'N';
      uTF8JsonGenerator0.writeString(charArray0, 0, 1);
      uTF8JsonGenerator0.writeNumber("m{k+x+GGcnH!HED9oc");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "a(s{/K#o?QHdMWD");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bes (out of ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      int int0 = 116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRawValue(" bes (out of ");
      int int1 = 4;
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("VALUE_TRUE", 98, 319);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      MockPrintStream mockPrintStream2 = new MockPrintStream(" bytes (out of ");
      mockPrintStream0.print((int) (byte)4);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber((long) 9);
      uTF8JsonGenerator0.writeNumber(91);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("bqM.UQ,I");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      File file0 = MockFile.createTempFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bes (out of ");
      byte[] byteArray0 = new byte[6];
      mockPrintStream0.print(5035);
      mockPrintStream0.print(512);
      mockPrintStream0.write((int) (byte)2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 6, false);
      uTF8JsonGenerator0.writeRawValue("%u!>:YCClo6JVZ`");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-558), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("~_F4>.C~/$wp'B", 2050.43F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant(", expecting field name", "", false, 'p', (byte)4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1, serializedString0);
      defaultPrettyPrinter2.writeEndArray(uTF8JsonGenerator0, 240);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", (float) 2);
//      try { 
        uTF8JsonGenerator0.writeArrayFieldStart(" bytes (out of ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      mockPrintStream0.print(0);
      mockPrintStream0.write((-732));
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream1, byteArray0, 139, true);
      uTF8JsonGenerator0.writeRaw("START_ARRAY");
      uTF8JsonGenerator0.writeNumber(123);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-4046), 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      mockPrintStream0.print((Object) null);
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream3 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream3.println((Object) null);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeRaw(" bytes (out of ");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream3 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream3.println((Object) null);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((long) 248);
      uTF8JsonGenerator0.writeRaw(" bytes (out of ");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3193, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRawValue("");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      String string0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumberField((String) null, 0.0F);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      iOContext0.allocWriteEncodingBuffer(25);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (byte)2);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeStartArray();
      jsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
//      try { 
        jsonGenerator0.writeArrayFieldStart(" bytes (out of ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      String string0 = "6^W^A~T.9\"";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("6^W^A~T.9\"");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-558), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("_&?]?N$C_y");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("_&?]?N$C_y");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream1.println((Object) file0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, mockPrintStream1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-860), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      mockPrintStream0.print(0);
      mockPrintStream0.write((-732));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockPrintStream1, byteArray0, 45, true);
      uTF8JsonGenerator0.writeRawValue("V+5]rg/^");
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", (float) 45);
      uTF8JsonGenerator0.writeStartArray();
      mockPrintStream1.println(true);
      uTF8JsonGenerator0._outputTail = 1;
      uTF8JsonGenerator0.writeStartObject();
      short short0 = (short)116;
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)123);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream1.println(false);
      boolean boolean0 = false;
      int int0 = (-3173);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-203), (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-3173), false);
      uTF8JsonGenerator0.close();
//      try { 
        uTF8JsonGenerator0.writeNumber((-1742.5667F));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " bytes (out of ");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._verifyPrettyValueWrite(" bytes (out of ", 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[2] = '[';
      charArray0[3] = ' ';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 128, 56319);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 128
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " byteos out o ", false);
      File file0 = MockFile.createTempFile(" byteos out o ", " byteos out o ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ byteos out o 0 byteos out o ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      file0.mkdir();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, mockPrintStream0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 56319;
      intArray0[4] = 2;
      intArray0[5] = 56320;
      intArray0[6] = 58;
      intArray0[7] = 2;
      uTF8JsonGenerator0.writeNumber((-148.8F));
      intArray0[8] = 3;
      uTF8JsonGenerator0.writeArray(intArray0, 0, 2);
      uTF8JsonGenerator0.writeNumberField(" byteos out o ", (-313.4F));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputBuffered();
      String string0 = null;
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a raw (unencoded) value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeRaw('5');
      uTF8JsonGenerator0.writeNumberField("", (float) (byte)34);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not , expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "vQx;8e-x~\\sX";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vQx;8e-x~sX", true);
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBinary(byteArray1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumber(890.0423F);
      uTF8JsonGenerator0.close();
//      try { 
        uTF8JsonGenerator0._outputSurrogates(2000, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x7d0, second 0x0
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-20);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.println((Object) uTF8JsonGenerator0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
      String string0 = "ERROR: Failed to load Version information from ";
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray1, (int) (byte) (-20), 1239);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -20
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      File file0 = MockFile.createTempFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      file0.setExecutable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bes (out of ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw(" bes (out of ", 11, 2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 248, true);
      uTF8JsonGenerator0.writeRawValue("");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, 1871);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", (-3579.2136F));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      MockPrintStream mockPrintStream2 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream3 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-117);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-55), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) (-55));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -55
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2319), (ObjectCodec) null, mockPrintStream1, byteArray0, 69, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.setReadable(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 37, (ObjectCodec) null, mockFileOutputStream1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 0, 1184);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)4, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 63);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 706, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeRawValue("3G=3uVBP^J=y=<a");
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(file0);
      mockPrintStream2.println((Object) file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)102, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((long) (byte)48);
      uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
      uTF8JsonGenerator0.writeRaw("");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      iOContext0.allocWriteEncodingBuffer();
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      file0.mkdir();
      int int0 = 57;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 512, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 57, true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(403.59F);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.close();
      String string0 = "";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockPrintStream1, byteArray0, (-319), false);
      uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream2.println((Object) bufferRecycler0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)387);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -319
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream1.println(false);
      int int0 = 168;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 168, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 168, false);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((float) (byte)2);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 6000, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1.writeRawValue(" bytes (out of ");
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      mockPrintStream0.print(0);
      mockPrintStream0.write((-732));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockPrintStream1, byteArray0, 68, true);
      uTF8JsonGenerator0.writeRawValue("V+5]rg/^");
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", (float) 68);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short)116);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes (out of ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      MockPrintStream mockPrintStream2 = new MockPrintStream("com.fasterxml.jackson.core.util.JsonGeneratorDelegate");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 69, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 6, 76);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      mockFileOutputStream0.getChannel();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ bytes (out of 0 bytes (out of ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " bytes (out of ");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._verifyPrettyValueWrite(" bytes (out of ", 0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'm';
      charArray0[2] = '[';
      charArray0[3] = ' ';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 128, 718);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 128
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)17;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-855), (ObjectCodec) null, dataOutputStream0, byteArray0, 46, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("JS%Zkl][zN");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 32767, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream1.println(object0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeFieldName("Dv)=ctp$(");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      mockPrintStream0.println((Object) sequenceInputStream0);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, mockPrintStream0, byteArray0, 256, false);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 855);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes (out of ", true);
      file0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65535, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber(647.1696F);
      uTF8JsonGenerator0.writeRawValue("/tmp/ bytes (out of 0 bytes (out of ");
      uTF8JsonGenerator0.writeNumber("KnVh}");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4292, (ObjectCodec) null, (OutputStream) null, byteArray0, 1704, true);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getCurrentValue();
      mockPrintStream0.println((Object) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)387);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      mockPrintStream1.print(240);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream1.println(false);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeBoolean(false);
      file0.mkdirs();
      SerializedString serializedString0 = new SerializedString("_&?]?N$C_y");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 9, 959);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-558), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("_&?]?N$C_y");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1933), (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 49, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream0.println((Object) uTF8JsonGenerator0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(958L);
      uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      String string0 = "";
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (byte)2);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
//      try { 
        jsonGenerator0.writeArrayFieldStart(" bytes (out of ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 101, (ObjectCodec) null, mockPrintStream2, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream1.println((Object) uTF8JsonGenerator0);
      uTF8JsonGenerator0.writeNumber((short)387);
      uTF8JsonGenerator0.writeBoolean(true);
      SerializedString serializedString0 = new SerializedString("%h0AF33 zL1#=U^FdT");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream1.println(false);
      byte byte0 = (byte) (-127);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2784), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        iOContext0.releaseBase64Buffer(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 0.0F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      mockPrintStream0.write(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("", (float) (byte)34);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " byteos out o ", false);
      File file0 = MockFile.createTempFile(" byteos out o ", " byteos out o ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ byteos out o 0 byteos out o ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      file0.mkdir();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, mockPrintStream0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 56319;
      intArray0[4] = 2;
      intArray0[5] = 56320;
      intArray0[6] = 58;
      intArray0[7] = 2;
      intArray0[8] = 3;
      uTF8JsonGenerator0.writeArray(intArray0, 0, 2);
      uTF8JsonGenerator0.writeNumberField("Current context not an object but ", (-313.4F));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4129), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      byte byte0 = (byte)115;
      // Undeclared exception!
//      try { 
        iOContext0.releaseBase64Buffer(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      MockFile.createTempFile("Invalid custom escape definitions; custom escape not found for character code 0x", "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      byte byte0 = (byte) (-6);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-99);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      byteArray0[2] = (byte) (-127);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeNumber((short) (byte)116);
      byteArray0[3] = (byte)116;
      // Undeclared exception!
//      try { 
        iOContext0.releaseBase64Buffer(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      String string0 = "";
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (byte)2);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        jsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 49, (ObjectCodec) null, mockPrintStream2, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream1.println((Object) uTF8JsonGenerator0);
      uTF8JsonGenerator0.writeNumber((short)387);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("%h0AF33 zL1#=U^FdT");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream1.println(false);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeBoolean(false);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (-2981), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream1.println(false);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("_&?]?N$C_y");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", 2223.1687F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[7] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      MockPrintStream mockPrintStream3 = new MockPrintStream(file0);
      mockPrintStream0.print((int) (byte)2);
      mockPrintStream1.print((int) (byte)2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 39, (ObjectCodec) null, mockPrintStream2, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRawValue("write a null");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7928, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("UZzWee;88L+;q[-", 7, (-1404));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      jsonGenerator0.writeNumber((BigDecimal) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
//      try { 
        iOContext0.releaseBase64Buffer(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 366, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 2, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 57343);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 49, (ObjectCodec) null, mockPrintStream2, byteArray0, 0, false);
      uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream1.println((Object) uTF8JsonGenerator0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(958L);
      uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile(" bytes (out of ", "p{2\":H");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print(3);
      mockPrintStream0.print((int) (byte) (-108));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, mockPrintStream0, byteArray0, 39, false);
      uTF8JsonGenerator0.writeRawValue("write a null");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("write a null");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      IOContext iOContext1 = new IOContext(bufferRecycler0, file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 39, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 4, true);
      uTF8JsonGenerator0.writeRawValue("G,ZSUU`X@");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 20, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1.flush();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but OBJECT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-558), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(" bytes (out of ", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bes (out of ", false);
      File file0 = MockFile.createTempFile(" bes (out of ", " bes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bes (out of ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 897, (ObjectCodec) null, mockPrintStream1, byteArray0, 1407, false);
      uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream0.println((Object) file0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(10000000000L);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " byteos out o ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " byteos out o ", true);
      File file0 = MockFile.createTempFile(" byteos out o ", " byteos out o ");
      file0.mkdir();
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7928, (ObjectCodec) null, mockPrintStream0);
      float float0 = (-2480.656F);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)115;
      // Undeclared exception!
//      try { 
        iOContext0.releaseBase64Buffer(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      file0.getAbsolutePath();
      file0.delete();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 66, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      int int0 = 69;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7928, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((-2480.656F));
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintStream1.println(false);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumber((short)21);
      uTF8JsonGenerator0.writeBoolean(false);
      SerializedString serializedString0 = new SerializedString("_&?]?N$C_y");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/ bytes (out of 0 bytes (out of ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "AELijr");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._verifyPrettyValueWrite(" bytes (out of ", 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      String string0 = "";
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeStartObject();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (byte)2);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "hH6?z5", false, ']', 1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 7)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(" bytes (out of ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1153, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but OBJECT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 376, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 2, 0);
      uTF8JsonGenerator0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 48;
      StringWriter stringWriter0 = new StringWriter(50);
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) " bytes (out of ", 32, 86);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeRawValue("3G=3uVBP^J=y=<a");
      uTF8JsonGenerator0.close();
      mockPrintStream1.flush();
      uTF8JsonGenerator0.writeNumber((short)18);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (byte[]) null, (short)18, 668);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      file0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 66, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 69, 66);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = " bytes (out of ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream1, byteArray0, 2184, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue("V=", (int) (byte)2, (-1));
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 568, true);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, 18);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 0.0F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "", false, 'B', 11);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sxI!jju>zcBHB");
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (byte)2);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('T');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 56320, true);
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.getAbsoluteFile();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 654, (ObjectCodec) null, mockPrintStream1);
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 4, (int) (byte)2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, false);
      char[] charArray0 = new char[0];
      mockPrintStream1.println(false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3020, (int) (byte)2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3020
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      mockFileOutputStream0.getChannel();
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '?';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)2, 1);
      System.setCurrentTimeMillis(111L);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      file0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      file0.deleteOnExit();
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 77, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeRawValue("3G=3uVBP^J=y=<a");
      uTF8JsonGenerator0.close();
      Base64Variant base64Variant0 = null;
      byte[] byteArray0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)18);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeRawValue("3G=3uVBP^J=y=<a");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(" bytes (out of ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      file0.getAbsolutePath();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream1);
      uTF8JsonGenerator0.writeBoolean(false);
      char char0 = 'p';
      char char1 = 's';
      char char2 = 'B';
      char char3 = '?';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("/tmp/ bytes (out of 0 bytes (out of ", (-936));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      StringBuilder stringBuilder0 = new StringBuilder("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      StringBuilder stringBuilder1 = stringBuilder0.append('b');
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0._verifyValueWrite("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 8000, (-632));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 42);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, byteArrayOutputStream0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 55296);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      boolean boolean0 = false;
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "", false, '2', (-2399));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte byte0 = (byte)2;
      file0.toURL();
      MockPrintStream mockPrintStream2 = new MockPrintStream("$L!%%6mWn");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockPrintStream2, byteArray0, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      mockPrintStream1.print(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", 2223.1687F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      file0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 1153, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5361), (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("cX`tJ", (-54.169F));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue("M");
      uTF8JsonGenerator0.writeNumberField("", (float) (byte)48);
      uTF8JsonGenerator0.writeStartArray();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 56320, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, mockFileOutputStream1);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", (int) (byte)2);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1, 102);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[7] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRaw('6');
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '?';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)2, 1);
      System.setCurrentTimeMillis(111L);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7928, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((-2480.656F));
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-865), (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRawUTF8String((byte[]) null, (-555), 127);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0.writeNumberField("", (float) (byte)2);
      uTF8JsonGenerator0.writeStartArray();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 56320, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", false);
      ObjectCodec objectCodec0 = null;
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.close();
      Base64Variant base64Variant0 = null;
      byte[] byteArray1 = null;
      int int0 = (-139);
      MockPrintStream mockPrintStream2 = null;
//      try {
        mockPrintStream2 = new MockPrintStream(mockFileOutputStream0, true, "hz\rw!{MhOTvE");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // hz\rw!{MhOTvE
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (byte)2);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("!,f[`=C!$[Mj4", "", false, '*', 32767);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField(" entries; now have ", 1887.501F);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short)2770);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short)8);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "8a43,g}0`~4m_", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8a43,g}0`~4m_");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-2);
      iOContext0.allocTokenBuffer();
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2849, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte) (-104), false);
      SerializedString serializedString0 = new SerializedString("Current context not an object but ");
      serializedString0.asQuotedChars();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream0.println(object0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((long) (byte)49);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = '$';
      charArray0[2] = ']';
      charArray0[3] = 'z';
      charArray0[4] = '$';
      charArray0[5] = ']';
      charArray0[6] = ']';
      charArray0[7] = 'j';
      charArray0[8] = '$';
      jsonGenerator0.writeRaw(charArray0, 56319, 0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("!,f[`=C!$[Mj4", "", false, '*', 32767);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, (byte)2, false);
      char[] charArray0 = new char[0];
      mockPrintStream1.println(false);
      uTF8JsonGenerator0.writeRaw(charArray0, 3020, (-3767));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 55, 41);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      byte byte0 = (byte) (-52);
      file0.setReadable(true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0);
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator1.writeBoolean(true);
      uTF8JsonGenerator1.writeNumber(3679.5F);
      uTF8JsonGenerator1.writeRawValue("M})#~(k=#");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, (byte[]) null, 0, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte)2;
      mockPrintStream0.print(0);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeRawValue(" bytes (out of ");
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)32);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " bytes (out of ");
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 69, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (byte[]) null, (byte)2, 111);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vQx;8e-x~sX", true);
      byte[] byteArray0 = new byte[0];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      byte byte0 = (byte)83;
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger(byteArray0);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Zero length BigInteger
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "[[&kwK";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[[&kwK", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(218);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      file0.mkdirs();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(3);
      MockFile mockFile0 = new MockFile(",*T>8?L&D E@");
      mockFile0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(",*T>8?L&D E@");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, (OutputStream) null, byteArray0, 49, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("/experiment/,*T>8?L&D E@");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("m>6D+", "t{D{h3zo'2_", true, ']', 37);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 11)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)2, false);
      uTF8JsonGenerator0.writeNumberField("", (float) 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeNumber("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 224;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" bytes (out of ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 224, true);
      uTF8JsonGenerator0.writeBoolean(true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 168960, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      byte byte0 = (byte)111;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0, 1961);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      char char0 = '<';
      PrintStream printStream0 = mockPrintStream0.append('<');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 121, (ObjectCodec) null, printStream0, byteArray0, (-238), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -238
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFile mockFile0 = new MockFile("tR");
      mockFile0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("(l@");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)66;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 102, (ObjectCodec) null, (OutputStream) null, byteArray0, 63, true);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw(charArray0, 1, 56320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.deleteOnExit();
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(" bytes (out of ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeRaw(" bytes (out of ");
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator1.writeBoolean(true);
      uTF8JsonGenerator1.writeNumber(3679.5F);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, (byte[]) null, 0, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'I';
      charArray0[2] = 's';
      charArray0[3] = 'B';
      charArray0[4] = '?';
      int int0 = (-936);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("s8", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)81;
      jsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        jsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      file0.toURL();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)32);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 0.0F);
//      try { 
        uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      byte byte0 = (byte) (-52);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((float) 2);
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)56;
      uTF8JsonGenerator0._entityBuffer = byteArray0;
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (byte[]) null, 2, (-2267));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFile mockFile0 = new MockFile(",*T>8?L&D E@");
      mockFile0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(",*T>8?L&D E@");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1104), (ObjectCodec) null, mockPrintStream1);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 512, 2602);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 512
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)81, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-6), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._verifyPrettyValueWrite(" bytes (out of ", 0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 3);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((double) 1);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(" bytes (out of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "ZV:vyN~YaoXS");
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumberField(" bytes (out of ", 0.0F);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      file0.mkdir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeRaw(" bytes (out of ");
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " bytes (out of ", true);
      File file0 = MockFile.createTempFile(" bytes (out of ", " bytes (out of ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2602);
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile(",*T>8?L&D E@");
      mockFile0.getAbsolutePath();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(",*T>8?L&D E@");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)2, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName(",*T>8?L&D E@");
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1673);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArrayOutputStream0.flush();
      byteArray0[1] = (byte)45;
      byte byte0 = (byte)93;
      byteArray0[2] = (byte)93;
      byteArrayOutputStream0.write(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 1673, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2602);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)51;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) jsonEncoding0;
      objectArray0[2] = (Object) byteArrayBuilder0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) jsonEncoding0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) jsonEncoding0;
      mockPrintStream0.format(locale0, "write a string", objectArray0);
      PrintStream printStream0 = mockPrintStream0.append('`');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 6, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("M&c.3E");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("M&c.3E");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      charsToNameCanonicalizer0.release();
//      try { 
        uTF8JsonGenerator0._outputSurrogates(0, 3847);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x0, second 0xf07
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vQx;8e-x~sX", true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 116, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)81;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-19), true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      IOContext iOContext0 = null;
      int int0 = 0;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-1919), (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }
}
