/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 15:34:08 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)31, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Object object0 = new Object();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1._writePPFieldName(serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(3);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)31, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56319, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator1.getOutputTarget();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._outputSurrogates(2, 56320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)8, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(1920);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, byteArrayOutputStream1);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeObjectField("}S;\"?T#", "?1Q}fd&31cX--|#");
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 62);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, bufferedInputStream0, byteArray0, 2728);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1195, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte)0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)30, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("GoBP@\"CQP*-=%0", 2);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "mxY", false);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0._verifyValueWrite("mxY");
      uTF8JsonGenerator0.writeString("mxY");
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      iOContext0.allocReadIOBuffer(1774);
      uTF8JsonGenerator0.writeNumber("]m+8vk{");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '/';
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1543, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1543
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ", expecting field name", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2888), (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeObjectField("{d\"dJQ`To", "?1Q}fd&31cX--|#");
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[24];
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      int int0 = 33;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator1._outputTail = 1;
      uTF8JsonGenerator1._verifyPrettyValueWrite("GoBP@\"CQP*-=%0", 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber((long) 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      iOContext0.allocReadIOBuffer(1774);
      iOContext0.allocTokenBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      char[] charArray0 = new char[3];
      charArray0[1] = '/';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 79, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 43, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CANONICALIZE_FIELD_NAMES");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "CANONICALIZE_FIELD_NAMES", 0, 12);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1369, (ObjectCodec) null, printStream0, byteArray0, 12, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-1640), false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("DBww];k", 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      iOContext0.allocReadIOBuffer(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte)80;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      Object object0 = new Object();
      System.setCurrentTimeMillis((-2147483648L));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-70), (ObjectCodec) null, byteArrayOutputStream0, byteArray1, (byte)80, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName(")");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)31, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      Object object0 = new Object();
      uTF8JsonGenerator0.writeRaw('j');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("");
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(3);
      TokenFilter tokenFilter3 = tokenFilter2.includeElement(0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter3, true, true);
      filteringGeneratorDelegate0.writeArray((double[]) null, (int) (byte)31, (-5107));
      System.setCurrentTimeMillis(55296);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      iOContext0.releaseConcatBuffer((char[]) null);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString(charArray0, 3, 1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = ";wc@r&;wCQ.w+I6Gh";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";wc@r&;wCQ.w+I6Gh", false);
      byte[] byteArray0 = new byte[0];
      mockFileOutputStream0.getChannel();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      byte[] byteArray1 = iOContext1.allocReadIOBuffer();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      byte[] byteArray0 = serializedString0.asQuotedUTF8();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-958), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 10, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("+kG>fKt_:d,?le3", "+kG>fKt_:d,?le3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3593), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)28, false);
      uTF8JsonGenerator0.writeString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, (-2330));
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Split surrogate on writeRaw() input (last character)");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 31, true);
//      try { 
        uTF8JsonGenerator0.writeRaw('R');
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "mY", false);
      iOContext0.releaseConcatBuffer((char[]) null);
      iOContext0.allocNameCopyBuffer(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[8];
      char char0 = '/';
      char char1 = '[';
      int int0 = 23;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 512, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 23, true);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[11];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 57343;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 2;
      intArray0[7] = 55296;
      uTF8JsonGenerator0.writeArray(intArray0, 3, 3);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) 56319);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(1888);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 48, 3159);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("m$Y");
      bufferRecycler0.allocByteBuffer(1);
      char[] charArray0 = new char[2];
      charArray0[1] = '>';
      charArray0[1] = '}';
      uTF8JsonGenerator0.writeRaw('[');
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3054.7486);
      doubleArray0[1] = (double) 2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m$Y");
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      // Undeclared exception!
//      try { 
        filteringGeneratorDelegate0.writeArray(doubleArray0, 953, 56320);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 953
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)79;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)31, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Object object0 = new Object();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 983, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.getOutputTarget();
      PipedInputStream pipedInputStream0 = new PipedInputStream(125);
      uTF8JsonGenerator0.writeRaw("XhI$\"}\"1+!#");
      uTF8JsonGenerator0.writeNumberField("XhI$\"}\"1+!#", 0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(512);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6066, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1420, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('0');
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      iOContext0.allocReadIOBuffer(1774);
      uTF8JsonGenerator0.writeNumber("]m+8v{");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(1110L);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-26);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-1));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)31, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Object object0 = new Object();
      uTF8JsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonParser");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 2);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeNumber((short)48);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2795, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2647, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeObjectField("", ">!1/4OKT\"t[b>j<");
      jsonGenerator0.writeRaw('d');
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 56320;
      doubleArray0[1] = (double) 56319;
      doubleArray0[2] = (double) 56320;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 56320;
      doubleArray0[6] = (double) 1;
      // Undeclared exception!
//      try { 
        filteringGeneratorDelegate0.writeArray(doubleArray0, 0, 55296);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[11];
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 953, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "e$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      iOContext0.allocReadIOBuffer(1774);
      uTF8JsonGenerator0.writeNumber("]m+8v{");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = '/';
      charArray0[2] = '[';
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1543, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1543
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)54;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1772), (ObjectCodec) null, pipedOutputStream0, byteArray0, (-472), false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-1772), (-472));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -472
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "kRXY", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[14];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      SerializedString serializedString0 = new SerializedString("kRXY");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1, defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter2);
      uTF8JsonGenerator0.writeString("P%xBc[\"`-wFZ");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.writeNumberField("kRXY", (-3664));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 322, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeString("B';5{G3BYK8v5n");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeRaw("B';5{G3BYK8v5n");
      uTF8JsonGenerator0.writeString("@");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeNumberField("QUOTE_FIELD_NAMES", 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
      uTF8JsonGenerator0.writeString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeRaw(" ");
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 3);
      String string0 = " (version: ";
      String string1 = "";
      char char0 = '}';
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant(" (version: ", "", false, '}', (-3));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFile mockFile0 = new MockFile("+kG>fKt_:d,?le3");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "+kG>fKt_:d,?le3", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)31, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Object object0 = new Object();
      String string0 = "com.fasterxml.jackson.core.JsonParser";
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeObjectField("", object1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed java.io.ByteArrayOutputStream)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "m$Y";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.constructTextBuffer();
      int int0 = 1752;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-104);
      byte byte0 = (byte) (-22);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)101;
      byte byte1 = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 7965, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("-1");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      Object object0 = new Object();
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (-3059), true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3059
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not write a field name, expecting a value");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "e):hK7}O:,";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e):hK7}O:,");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e):hK7}O:,", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("2");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, 126, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      Object object0 = new Object();
      String string0 = "a7\"CZ<VoQ";
      // Undeclared exception!
      uTF8JsonGenerator0.writeObjectField("a7\"CZ<VoQ", fileDescriptor0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("+kG>fKt_:d,?le3", "+kG>fKt_:d,?le3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("write a raw (unencoded) value");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeRaw("UTF16_BE");
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 2743);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 2734 bytes (out of 2743)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "e$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[11];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-7));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-896), (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "myYU";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator1._writePPFieldName("myYU");
//      try { 
        uTF8JsonGenerator0.writeObjectField("?1Q}fd&31cX--|#", (Object) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1752, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1752, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName("\"2");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "m$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      int int0 = 11;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(11);
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1219), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string1 = "";
      String string2 = "q7a!,8";
      boolean boolean0 = true;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, pipedInputStream0, byteArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("myYU");
      jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        jsonGenerator0.writeFieldName("}");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("m$Y");
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber("\"");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.allocReadIOBuffer(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 983, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(125);
      uTF8JsonGenerator0.writeNumber((short)37);
      uTF8JsonGenerator0._releaseBuffers();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 7);
      byteArrayOutputStream0.write(364);
      uTF8JsonGenerator0.writeNumber(5525L);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 4000, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 55296, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.close();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("e$Y");
      Object object0 = new Object();
      uTF8JsonGenerator0.writeStartObject(object0);
      uTF8JsonGenerator0.writeNumberField("Tr;!+^&;)mA*eomO+C", 1);
      StringWriter stringWriter0 = new StringWriter(65);
      System.setCurrentTimeMillis(7L);
      uTF8JsonGenerator0.writeRaw('~');
//      try { 
        uTF8JsonGenerator0.writeString("e$Y");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      char[] charArray0 = new char[7];
      charArray0[4] = 'q';
      charArray0[1] = 'i';
      charArray0[3] = 'X';
      charArray0[4] = 'q';
      charArray0[5] = 'i';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeNumber(3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[11];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '\\';
      charArray0[2] = 'K';
      charArray0[3] = 'E';
      uTF8JsonGenerator0.writeString(charArray0, 1, 3);
      System.setCurrentTimeMillis(0);
      SerializedString serializedString1 = new SerializedString("[-_./;:]");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      BigDecimal bigDecimal0 = null;
//      try {
        bigDecimal0 = new BigDecimal((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.math.BigDecimal", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendUnquotedUTF8(byteArray0, 3);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("e$Y");
      Object object0 = new Object();
      uTF8JsonGenerator0.writeStartObject(object0);
      uTF8JsonGenerator0.writeNumberField("Tr;!+^&;)mA*eomO+C", 1);
      StringWriter stringWriter0 = new StringWriter(65);
      System.setCurrentTimeMillis(7L);
      uTF8JsonGenerator0.writeRaw('~');
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 65);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[13];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString("P%xBc[\"`-wFZ");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      uTF8JsonGenerator0.writeNumberField("", (-3664));
      SerializedString serializedString0 = new SerializedString("write a number");
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeBinaryField("5D[e\"y920}#'", byteArray0);
      uTF8JsonGenerator0.getCurrentValue();
      objectOutputStream0.writeObject((Object) null);
      uTF8JsonGenerator0.writeNumber((-2954L));
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("2+DI7w3~");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not 2+DI7w3~, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "e$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[18];
      TextBuffer textBuffer0 = iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      uTF8JsonGenerator0.writeObject((Object) null);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeObjectField("e$Y", textBuffer0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.util.TextBuffer)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      int int0 = 0;
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      int int1 = 953;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("e$Y");
      Object object0 = new Object();
      uTF8JsonGenerator0.writeStartObject(object0);
      uTF8JsonGenerator0.writeNumberField("Tr;!+^&;)mA*eomO+C", 1);
      StringWriter stringWriter0 = new StringWriter(65);
      // Undeclared exception!
//      try { 
        stringWriter0.append((CharSequence) "Tr;!+^&;)mA*eomO+C", 85, 20);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "m$Y";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ObjectCodec objectCodec0 = null;
      int int0 = 11;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(11);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1219), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      jsonGenerator0.writeFieldName("-2(b+8)");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArrayOutputStream0.reset();
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("e$Y");
      Object object0 = new Object();
      uTF8JsonGenerator0.writeStartObject(object0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeRaw("e$Y");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[11];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, dataInputStream0);
      uTF8JsonGenerator0.writeRaw("UTF16_BE");
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("UTF16_BE", 14);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(618);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      jsonGenerator0.writeRaw("write a raw (unencoded) value");
      jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-323));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, objectOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[18];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeRaw("T95cPZ+");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 56320, 2780);
      jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1700));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-1);
      byteArray0[1] = (byte)106;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-1);
      byte byte0 = (byte)79;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("m$Y");
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeNumber("e$Y");
      Object object0 = new Object();
      uTF8JsonGenerator0.writeStartObject(object0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputTarget();
//      try { 
        uTF8JsonGenerator0._outputSurrogates((-32768), 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xffff8000, second 0x0
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.writeStartObject();
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      uTF8JsonGenerator0.writeObjectField("", "");
//      try { 
        uTF8JsonGenerator0.writeNumber((short)102);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte byte0 = (byte) (-79);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-79);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 4, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumberField("", 1126);
      short short0 = (short) (-147);
      uTF8JsonGenerator0.writeNumber((short) (-147));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "+q2AD#v4?V?", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-96);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (-1), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(103);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      Object object0 = uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0, byteArray0, 12, false);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.allocReadIOBuffer(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 983, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("m$Y");
      uTF8JsonGenerator0.getOutputTarget();
      PipedInputStream pipedInputStream0 = new PipedInputStream(125);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 108, (byte)57);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (-3345L);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeArray(longArray0, 6, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 83, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeString("");
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\\';
      charArray0[2] = '9';
      charArray0[3] = 'G';
      charArray0[4] = '@';
      charArray0[5] = 'S';
      charArray0[6] = '-';
      uTF8JsonGenerator0.writeRaw(charArray0, (-1796), 0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[11];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (-148));
      uTF8JsonGenerator0.writeNumber((-2488L));
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a raw (unencoded) value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 80, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(56319);
      tokenFilter1.filterStartObject();
      BigDecimal bigDecimal0 = new BigDecimal(953);
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(122);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.allocReadIOBuffer(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 983, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("m$Y");
      uTF8JsonGenerator0.writeRaw("!,zMYCGYLnK");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 110);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 78, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 206, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeBinary((InputStream) pushbackInputStream1, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      String string0 = "+kG>fKt_:d,?le3";
      MockFile mockFile0 = new MockFile("+kG>fKt_:d,?le3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('}');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, printStream0);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(0);
      iOContext0.constructTextBuffer();
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2795, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2647, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeObjectField("", ">!1/4OKT\"t[b>j<");
      uTF8JsonGenerator0.writeNumber((short)456);
//      try { 
        uTF8JsonGenerator0.writeNumberField("m$Y", 983);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("<'3R3Ui$KX");
      uTF8JsonGenerator0.writeNumberField("", 1);
      uTF8JsonGenerator0.writeNumber((short) (-714));
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeString("ryQm!jdy,%&'DX6T ,");
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.allocReadIOBuffer(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      uTF8JsonGenerator0.writeRaw("write a raw (unencoded) value");
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 62);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 54 bytes (out of 62)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.writeStartObject();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, true);
      uTF8JsonGenerator0.writeRaw("");
      int int0 = (-1949);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-1949), (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      int int1 = 65;
//      try { 
        uTF8JsonGenerator1.writeBinary((InputStream) dataInputStream0, 65);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 58 bytes (out of 65)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileDescriptor0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 627, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1994, false);
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("m$Y");
      uTF8JsonGenerator0.writeNumberField("8hC", 110);
      uTF8JsonGenerator0.writeNumber((short) (byte)79);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte)104, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw('<');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      jsonGenerator0.writeRaw("write a raw (unencoded) value");
      jsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-323));
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, objectOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("]m+8v{");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = '_';
      charArray0[2] = 'f';
      charArray0[3] = '0';
      charArray0[4] = 'R';
      charArray0[5] = 'm';
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-119);
      boolean boolean1 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 253, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)19, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, dataInputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("o%PA");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      String string0 = " of 4-char base64 unit: padding only legal as 3rd or 4th character";
      uTF8JsonGenerator0.writeRaw(" of 4-char base64 unit: padding only legal as 3rd or 4th character");
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) dataInputStream0, (int) (byte)89);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 81 bytes (out of 89)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "e$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[11];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("e$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.allocReadIOBuffer(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.getOutputTarget();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      uTF8JsonGenerator0.writeRaw("m$Y");
      uTF8JsonGenerator0.writeNumberField("Invalid custom escape definitions; custom escape not found for character code 0x", (int) (byte)101);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "m$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray1 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, dataInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayOutputStream0, false);
      uTF8JsonGenerator0.writeRaw("!BfdES.JF#iwyIEgDvY");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 1 bytes (out of 1)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 83, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 6, true);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)89;
      byteArray0[1] = (byte)89;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 289, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      bufferRecycler0.allocByteBuffer(0);
      SerializedString serializedString0 = new SerializedString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2403), (byte)0);
      jsonGenerator0.writeNumber(0L);
      jsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "PUkvQfVa:^7o", true, '9', (-282));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 12)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeString("m$Y");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.writeRaw("G0/0Ft?T");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-20);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, (-572), (int) (byte) (-20));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)89;
      byteArray0[1] = (byte)89;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 289, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      bufferRecycler0.allocByteBuffer(0);
      SerializedString serializedString0 = new SerializedString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2403), (byte)0);
      jsonGenerator0.writeNumber(0L);
      jsonGenerator0.writeStartObject();
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '~';
      charArray0[2] = '9';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 57343, 12);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("m$Y");
      tokenFilter1.filterStartObject();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      System.setCurrentTimeMillis(928L);
      SerializedString serializedString0 = new SerializedString("m$Y");
      SerializedString serializedString1 = new SerializedString("Split surrogate on writeRaw() input (last character)");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("m$Y", 29);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 2);
      uTF8JsonGenerator0._verifyValueWrite("m$Y");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("m$Y", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)89;
      byteArray0[1] = (byte)89;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 289, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      jsonGenerator0.writeRaw("");
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, 3503);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 3495 bytes (out of 3503)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      char[] charArray0 = new char[7];
      charArray0[4] = 'q';
      charArray0[1] = '9';
      charArray0[3] = 'X';
      charArray0[4] = 'q';
      charArray0[5] = 'i';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (int) (byte)0);
      System.setCurrentTimeMillis(663L);
      SerializedString serializedString0 = new SerializedString(") out of range of int");
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)89;
      byteArray0[1] = (byte)89;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 289, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      uTF8JsonGenerator0.writeStartObject((Object) "line.separator");
      iOContext0.withEncoding(jsonEncoding0);
      bufferRecycler0.allocByteBuffer(0);
      SerializedString serializedString0 = new SerializedString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2403), (byte)0);
//      try { 
        jsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      jsonGenerator0.writeStartObject();
      jsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "m$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 2, 0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      iOContext1.allocTokenBuffer();
      iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, (byte)63, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNull();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.allocReadIOBuffer(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("m$Y");
      uTF8JsonGenerator0.getOutputTarget();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1857);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      uTF8JsonGenerator0.writeRaw("Can not write a field name, expecting a value");
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 16);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("*IS@ZNJP(hM+!^c,`Q0");
      uTF8JsonGenerator0.writeNumber((-1176.8445F));
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 56319);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      uTF8JsonGenerator0.writeRaw("*IS@ZNJP(hM+!^c,`Q0");
      uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 0);
      uTF8JsonGenerator0.writeNumber((-692.5985F));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("*IS@ZNJP(hM+!^c,`Q0", 56319);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 2, 0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      char[] charArray0 = iOContext2.allocTokenBuffer();
      byte[] byteArray2 = iOContext1.allocReadIOBuffer();
      iOContext2.releaseTokenBuffer(charArray0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, 9);
      SerializedString serializedString0 = new SerializedString("m$Y");
      jsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(charArray0, 0, 83);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeUTF8String(byteArray2, 2, 68);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "m$Y", true, 't', 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("m$Y");
      bufferRecycler0.allocByteBuffer(1);
      char[] charArray0 = new char[20];
      charArray0[1] = '>';
      charArray0[1] = '}';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 41);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 20
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream(0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(40);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 111, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
//      try { 
        uTF8JsonGenerator0.writeNumber("START_OBJECT");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("m$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 75, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator1.writeNumber("m$Y");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 953);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFile mockFile0 = new MockFile("+kG>fKt_:d,?le3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('}');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      uTF8JsonGenerator0.writeRaw("+kG>fKt_:d,?le3");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-128);
      iOContext1.allocBase64Buffer();
      byteArray0[7] = (byte) (-2);
      iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString(")");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString(")");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((float) 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "m$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(23);
      tokenFilter1.includeProperty("m$Y");
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = new BigDecimal(13);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((short) (byte)57);
      SerializedString serializedString0 = new SerializedString("m$Y");
      uTF8JsonGenerator0.writeStartArray();
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 2, 0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      char[] charArray0 = iOContext2.allocTokenBuffer();
      byte[] byteArray2 = iOContext1.allocReadIOBuffer();
      uTF8JsonGenerator0.overrideStdFeatures(0, 9);
      uTF8JsonGenerator0.writeString(charArray0, 0, 83);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray2, 2, 68);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "m$Y", true, 't', 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "kRXY", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("kRXY");
      uTF8JsonGenerator0.writeString("P%xBc[\"`-wFZ");
      uTF8JsonGenerator0.writeNumberField("Hr0&2u", 3);
      StringReader stringReader0 = new StringReader("P%xBc[\"`-wFZ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
//      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser((IOContext) null, 56320, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "m$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      iOContext0.allocReadIOBuffer(0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)119;
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("m$Y");
      uTF8JsonGenerator0.getOutputTarget();
      PipedInputStream pipedInputStream0 = new PipedInputStream(125);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      uTF8JsonGenerator0.writeRaw("m$Y");
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) sequenceInputStream0, (-62));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("m$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.setHighestNonEscapedChar(76);
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeFieldName("m$Y");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor1);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      char char0 = 'i';
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)82, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      uTF8JsonGenerator0._characterEscapes = null;
      charArray0[1] = 'q';
      SerializedString serializedString0 = new SerializedString(">cJm=%2`t;e `8");
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.allocBase64Buffer();
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-104);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)65;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumberField(">wf4g!\"YD=dvS", (int) (byte)110);
      uTF8JsonGenerator0.writeNumber((short) (byte)110);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("Invalid cus`om escape definitions; custom escap not found for character code 0x");
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeObjectField("?1Q}fd&31cX--|#", (Object) null);
      uTF8JsonGenerator0.writeNumber("GoBP@\"CQP*-=%0");
      jsonGenerator0.writeRaw('{');
      jsonGenerator0.writeString("Duplicate field '");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("?1Q}fd&31cX--|#");
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)53;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      char[] charArray0 = iOContext3.allocTokenBuffer();
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4201, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((byte) (-79), 2967);
      uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte) (-90));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      jsonGenerator0.writeString(charArray0, 421, 115);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 56320, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeUTF8String(byteArray0, 115, (byte)53);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 115
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "P%xBc[\"`-wFGZ";
      uTF8JsonGenerator0.writeString("m$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((short) (byte)119);
      uTF8JsonGenerator0.writeNumberField("", (int) (byte)119);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = new SerializedString("r-L8x0ZObkI!DL'm?");
      byteArrayOutputStream0.reset();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)82;
      byte byte0 = (byte) (-51);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte) (-61);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 63, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)82, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeObjectField("", (Object) null);
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)124;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2738, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeElement(120);
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("X}_QZjZhy[1WZz");
      tokenFilter1.filterStartObject();
      BigDecimal bigDecimal0 = new BigDecimal(1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)8;
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.appendQuotedUTF8(byteArrayBuilder0.NO_BYTES, 3);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '^';
      charArray0[2] = '';
      charArray0[3] = '}';
      charArray0[4] = '';
      charArray0[5] = '/';
      charArray0[6] = 'W';
      charArray0[7] = 'b';
      charArray0[8] = 'A';
      uTF8JsonGenerator0.writeRaw(charArray0, 108, (-4374));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)49;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      int int0 = 33;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator1._outputTail = 1;
      uTF8JsonGenerator1._verifyPrettyValueWrite("GoBP@\"CQP*-=%0", 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumberField("GoBP@\"CQP*-=%0", (float) (byte)111);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "P%xBc[\"`-wFGZ";
      uTF8JsonGenerator0.writeString("m$Y");
      uTF8JsonGenerator0.writeNumberField("P%xBc[\"`-wFGZ", (int) (byte)119);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("P%xBc[\"`-wFGZ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(21);
      TokenFilter tokenFilter2 = tokenFilter1.includeProperty("m$Y");
      tokenFilter2.filterStartObject();
      BigDecimal bigDecimal0 = new BigDecimal(56320);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeNumber((short) (byte)119);
      uTF8JsonGenerator0.writeNumber((long) (short) (-90));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)44;
      byteArray0[1] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 289, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeObjectField(">!1/4OKT\"t[b>j<", ">!1/4OKT\"t[b>j<");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)53;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      char[] charArray0 = iOContext3.allocTokenBuffer();
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4201, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.overrideStdFeatures((byte) (-79), 2967);
      uTF8JsonGenerator0.writeString(charArray0, 3, (int) (byte) (-90));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 1954);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 25
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[10];
      byteArray0[5] = (byte)79;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1648, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("m$Y");
      int int0 = GeneratorBase.SURR2_FIRST;
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeFieldName("write a string");
      SerializedString serializedString0 = new SerializedString("mn(X\"dmq$");
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byteArrayBuilder0.appendTwoBytes((-1737));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)48, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      iOContext1.allocWriteEncodingBuffer(4);
      int int0 = (-1195);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(3, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byteArrayBuilder0.appendTwoBytes((-1737));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)48, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      int int0 = (-1195);
      BigDecimal bigDecimal0 = new BigDecimal((-1195));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw("*IS@ZNJP(hM+!^c,`Q0");
      uTF8JsonGenerator0.writeNumber((-1176.8445F));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer();
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      uTF8JsonGenerator0.overrideStdFeatures((-760), 0);
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1954);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byteArrayBuilder0.appendTwoBytes((-1737));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)48, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      BigDecimal bigDecimal0 = new BigDecimal((-1195));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("@v?B)#8jS");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("*IS@ZNJP(hM+!^c,`Q0");
      uTF8JsonGenerator0.writeNumber((-1176.8445F));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.flush();
      byteArrayOutputStream0.write(55296);
      uTF8JsonGenerator0.writeNumberField("S", 1);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1888, 35);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("/0$_}cVW$ol", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, filterOutputStream0, byteArray0, 128, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)82, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1311, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.writeStartObject();
      String string0 = ", although was supposed to have one";
      filteringGeneratorDelegate0.writeNumberField(", although was supposed to have one", (float) 3);
      filteringGeneratorDelegate0.getCodec();
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)101);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("nJ&h]q^n#VI$\b");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'O';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = 'w';
      charArray0[5] = 'j';
      charArray0[6] = 'W';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 58, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 33, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 82, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('w');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("*IS@ZNJP(hM+!^c,`Q0");
      uTF8JsonGenerator0.writeNumber((-1176.8445F));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.flush();
      byteArrayOutputStream0.write(55296);
      uTF8JsonGenerator0.writeNumberField("S", 1);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1888, 35);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = ';';
      SerializedString serializedString0 = new SerializedString(")");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeString(")");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeObjectField("?1Q}fd&31cX--|#", (Object) null);
      uTF8JsonGenerator0.writeNumber("GoBP@\"CQP*-=%0");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator1._rootValueSeparator;
//      try { 
        uTF8JsonGenerator1._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, filterOutputStream0, byteArray0, (byte)82, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeString("m$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '}';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 58);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "m$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 29, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("m$Y", 29);
//      try { 
        uTF8JsonGenerator0.writeStringField(")Ikkg88Wr", ")Ikkg88Wr");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeRaw("*IS@ZNJP(hM+!^c,`Q0");
      uTF8JsonGenerator0.writeNumber((-1176.8445F));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = iOContext1.allocTokenBuffer();
      iOContext1.allocReadIOBuffer();
      uTF8JsonGenerator0.writeString(charArray0, 1, 1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2747);
      iOContext0.constructTextBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)119;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)119, false);
      String string0 = "P%xBc[\"`-wFGZ";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("}=$9fjyMf=BgHR<(~");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0._verifyPrettyValueWrite("&yX[&Yt:)}~it%", (byte)0);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor1);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.flush();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, Integer.MAX_VALUE);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)8;
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 15, (byte)3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)82, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'q';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'i';
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      charArray0[7] = 'X';
      charArray0[8] = 'i';
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 953, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2, false);
      String string0 = "P%xBc[\"`-wFGZ";
      uTF8JsonGenerator0.writeString("m$Y");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumberField("", (int) (byte)119);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("1");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)89;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)44, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte)89, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", 30);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = true;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      String string0 = "^nIynh*#p7\\";
      // Undeclared exception!
      filteringGeneratorDelegate0.writeNumberField("^nIynh*#p7", (float) (byte)81);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not write a field name, expecting a value");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = ';';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'q';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (int) (byte)0);
      SerializedString serializedString0 = new SerializedString("Can not write a field name, expecting a value");
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeObjectField("?1Q}fd&31cX--|#", (Object) null);
      uTF8JsonGenerator0.writeNumber("GoBP@\"CQP*-=%0");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)53;
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("P%xBc[\"`-wFZ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumberField("@gA+:c]/, |`]o\"", 1888);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1114111, 224);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)53;
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("P%xBc[\"`-wFGZ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumberField("@gA+:c]/, |`]o\"", 1888);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("@gA+:c]/, |`]o\"");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "myYU", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "?1Q}fd&31cX--|#";
      uTF8JsonGenerator0.writeObjectField("?1Q}fd&31cX--|#", (Object) null);
      String string1 = "GoBP@\"CQP*-=%0";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-128);
      iOContext1.allocBase64Buffer();
      byteArray0[7] = (byte) (-2);
      iOContext0.allocWriteEncodingBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      SerializedString serializedString0 = new SerializedString(")");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = 'E';
      charArray0[2] = '(';
      charArray0[3] = 'J';
      charArray0[4] = '%';
      serializedString0.appendQuoted(charArray0, (byte)34);
      uTF8JsonGenerator0.writeString(")");
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 255, (ObjectCodec) null, (OutputStream) null, byteArray1, 2780, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("m$Y");
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)49;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator1._outputTail = 1;
      uTF8JsonGenerator1._verifyPrettyValueWrite("GoBP@\"CQP*-=%0", 1);
      int int0 = GeneratorBase.SURR2_FIRST;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)49, 13);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      boolean boolean1 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byteArrayBuilder0.appendTwoBytes((-1737));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)48, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, objectOutputStream0, byteArray1, (-1), false);
      uTF8JsonGenerator1.useDefaultPrettyPrinter();
      String string0 = "P`";
      uTF8JsonGenerator1._verifyPrettyValueWrite("P`", 0);
      int int0 = GeneratorBase.SURR2_FIRST;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, (-1737), 33);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)53;
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("P%xBc[\"`-wFZ");
      iOContext0.allocWriteEncodingBuffer(2095);
      SerializedString serializedString0 = new SerializedString("");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 13, 0);
      uTF8JsonGenerator0.writeNumber(867L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)70, 32767);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      byte byte0 = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 240, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 57, false);
      uTF8JsonGenerator0._verifyValueWrite("iB]h");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
      filteringGeneratorDelegate0.getCodec();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)13);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("write a string", "/HFn[ra{:mO$zh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)102;
      byteArray0[7] = (byte) (-128);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1216), (-2647));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer((-1216));
      SerializedString serializedString0 = new SerializedString("");
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1, (byte)102, (-458));
      byte[] byteArray2 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-458), (ObjectCodec) null, mockFileOutputStream0, byteArray2, 97, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeObjectField("?1Q}fd&31cX--|#", (Object) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = 127;
      byteArrayBuilder0.appendTwoBytes((-1737));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)48, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartObject();
      String string0 = ")Fca;CGtLa >$9.x";
      SerializedString serializedString0 = new SerializedString(")Fca;CGtLa >$9.x");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[7];
      int int0 = 2560;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3075, (ObjectCodec) null, (OutputStream) null, byteArray0, 2560, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[6] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1840, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("", 127);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)0, (-1328));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockFile mockFile0 = new MockFile("write a string", "/HFn[ra{:mO$zh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/HFn[ra{:mO$zh", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)102;
      byteArray0[7] = (byte) (-128);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 561, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)4, true);
      uTF8JsonGenerator0.writeString((String) null);
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(57343);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3305), (-1385));
      uTF8JsonGenerator0.writeNumber(867L);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)67);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 7, (-1216));
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, false);
      iOContext1.allocTokenBuffer(56319);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 57343, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      uTF8JsonGenerator1.writeNumber((double) 57343);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("write a raw (unencoded) value");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 3283, (-3697));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "/HFn[ra{:mO$zh";
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.util.JsonParserSequence", "write a string");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, ";T$HsR", false);
      iOContext0.allocTokenBuffer((int) (byte)102);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3711), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 51, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber(266.6618825569);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("write a string");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)8;
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, (byte)122);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0._releaseBuffers();
      String string0 = "8c6";
      SerializedString serializedString0 = new SerializedString("8c6");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, (byte)122);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = ';';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'q';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)34, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.writeStartObject();
      filteringGeneratorDelegate0.getCodec();
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)65);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      mockFileOutputStream0.flush();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)82, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'q';
      charArray0[4] = 'i';
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite("GoBP@\"CQP*-=%0", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)44;
      byteArray0[1] = (byte)89;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 289, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((short)224);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 37, 97);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer((-1532));
      SerializedString serializedString0 = new SerializedString("LlGj4%`%{7^CA?N");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 1684, 824);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pushbackInputStream0, 3431);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1746), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0._verifyValueWrite("iB]h");
      byteArrayBuilder0.append(2104);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((short)1205);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-112);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1851), 50);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)82, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(56320);
      TokenFilter tokenFilter2 = tokenFilter1.filterStartArray();
      TokenFilter tokenFilter3 = tokenFilter2.includeRootValue(57343);
      String string0 = "Unrecognized character escape ";
      TokenFilter tokenFilter4 = tokenFilter3.includeProperty("Unrecognized character escape ");
      TokenFilter tokenFilter5 = tokenFilter4.filterStartObject();
      tokenFilter4.includeElement((-1468));
      tokenFilter1.filterStartArray();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter5, true, true);
      filteringGeneratorDelegate0.getCodec();
      short short0 = (short)1799;
//      try { 
        uTF8JsonGenerator0.writeNumber((short)57);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 255;
      boolean boolean0 = false;
      iOContext0.allocTokenBuffer();
      IOContext iOContext2 = new IOContext(bufferRecycler0, uTF8JsonGenerator0, true);
      iOContext2.allocReadIOBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      Object object0 = uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0, byteArray0, 12, true);
      uTF8JsonGenerator2.getOutputTarget();
      uTF8JsonGenerator1._outputSurrogates((byte)122, 56320);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator2.writeNumber((long) 12);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-90);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("", 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-18), 21);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      SerializedString serializedString0 = new SerializedString("=:#FK@]%qTD|Lbz");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("^<xT,3j'u,t'>@", 3446);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)82, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      iOContext1.withEncoding(jsonEncoding0);
      charArray0[1] = 'q';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'i';
      charArray0[5] = 'X';
      charArray0[6] = 'X';
      charArray0[7] = 'X';
      charArray0[8] = 'i';
      int int0 = 2619;
//      try { 
        uTF8JsonGenerator0.writeFieldName(">s|h(4p'~5>$U?/)1H");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = "No Base64Variant with name ";
      SerializedString serializedString0 = new SerializedString("No Base64Variant with name ");
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)30, (-5687));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1746), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0._verifyValueWrite("iB]h");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((short)1205);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeEndArray();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("P%xBc[\"`-wFZ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      iOContext1.allocWriteEncodingBuffer((-947));
      SerializedString serializedString0 = new SerializedString("m$Y");
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      iOContext1.allocNameCopyBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, (-1474), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 48, 15);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1474
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("P%xBc[\"`-wFZ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer(2095);
      SerializedString serializedString0 = new SerializedString("");
      iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1746), (ObjectCodec) null, byteArrayBuilder0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-58);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 45, 843);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 45
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "m$Y";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[1] = (byte) (-18);
      iOContext0.allocBase64Buffer();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-75);
      byteArray1[1] = (byte)63;
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte)30;
      byteArray1[4] = (byte) (-18);
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte) (-79);
      byteArray1[7] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-109), (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 4563, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-18);
      byteArray0[4] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-122);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1587, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '/';
      charArray0[2] = 'N';
      charArray0[3] = '@';
      charArray0[4] = 'w';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-1695), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1695
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("^<xT,3j'u,t'>@", (-3699));
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      mockPrintStream0.println((float) 57343);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("write a raw (unencoded) value");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 74, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber(0L);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      MockFile mockFile0 = new MockFile("+kG>fKt_:d,?le3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('}');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      uTF8JsonGenerator0.writeNumberField("Too few bytes available: missing ", (double) 1);
      uTF8JsonGenerator0.writeRaw("Jm5Zl-XNi}'t6hGRW_");
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 127, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((double) 1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "y", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1474, (ObjectCodec) null, byteArrayOutputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      iOContext0.withEncoding(jsonEncoding0);
      BigDecimal bigDecimal0 = new BigDecimal(0.8);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)67;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      iOContext0.allocNameCopyBuffer(92);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 336, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, (-1598));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeNumber((float) 1L);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-165), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber((short) (-806));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("8c6");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, (byte)122);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "write a string";
      String string1 = "/HFn[ra{:mO$zh";
      MockFile mockFile0 = new MockFile("write a string", "/HFn[ra{:mO$zh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-128);
      byteArray0[7] = (byte) (-128);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1216), (-2647));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      iOContext0.allocTokenBuffer(902);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)4, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
//      try { 
        uTF8JsonGenerator0.writeNumber((-1412.9387));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("m$Y", 2);
      uTF8JsonGenerator0.writeNumber((short) (byte)44);
      uTF8JsonGenerator0._releaseBuffers();
      String string0 = "\\qYevG26B`Xd*";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-2356.53839));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("m$Y", 2);
      uTF8JsonGenerator0.writeNumber((short) (byte)44);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeBoolean(false);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'W';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 2);
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 1, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeNumber((long) 1);
      String string0 = "";
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0.writeNumber((float) 1L);
      uTF8JsonGenerator0.close();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(6);
      TokenFilter tokenFilter2 = tokenFilter1.includeRootValue(0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter2, true, true);
      filteringGeneratorDelegate0.getCodec();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)691);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      Object object0 = uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      byteArrayBuilder0.appendThreeBytes(57343);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0, byteArray0, 12, true);
      uTF8JsonGenerator2.getOutputTarget();
      uTF8JsonGenerator1._outputSurrogates((byte)122, 56320);
      uTF8JsonGenerator0._releaseBuffers();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1746), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) 2);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0._verifyValueWrite("iB]h");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 31, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber((-2169.0F));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)82, (ObjectCodec) null, filterOutputStream0, byteArray0, 2, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'q';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'i';
      charArray0[5] = 'X';
      uTF8JsonGenerator0.writeBoolean(false);
//      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator0.writeBinaryField("5D[e\"y920}#'", byteArray0);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 91, 55);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockFile mockFile0 = new MockFile("write a string", "/HFn[ra{:mO$zh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-128);
      byteArray0[7] = (byte) (-128);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1216), (-2647));
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      iOContext0.allocTokenBuffer(902);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)4, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeNumber((-1412.9387));
      uTF8JsonGenerator0.writeString("write a string");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayInputStream0, (byte[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 31, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getPrettyPrinter();
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("m$Y", 2);
      uTF8JsonGenerator0.writeNumber((short) (byte)44);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName("$rxder2g76*{)$");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 31, false);
      uTF8JsonGenerator0._outputTail = 0;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, false);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      filteringGeneratorDelegate0.writeNumber(bigDecimal0);
      filteringGeneratorDelegate0.getPrettyPrinter();
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      MockFile mockFile0 = new MockFile("+kG>fKt_:d,?le3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('}');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      uTF8JsonGenerator0.writeNumberField("Too few bytes available: missing ", (double) 1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 46, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 32755, true);
      uTF8JsonGenerator0.writeRaw("Jm5Zl-XNi}'t6hGRW_");
//      try { 
        uTF8JsonGenerator1.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)67);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("", 2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, false);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((short)116);
      SerializedString serializedString0 = new SerializedString("A~4mz=)1YNrn;ufz");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)67);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'N';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      charArray0[7] = ')';
      uTF8JsonGenerator0.writeString(charArray0, 3, 3);
      uTF8JsonGenerator0.writeRaw(')');
      uTF8JsonGenerator0.writeString("uR&fY.D");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("17Km>EK8%kFw%k1*5\"");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      byte[] byteArray0 = bufferRecycler0.allocByteBuffer(3, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      Object object0 = uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 20, (ObjectCodec) null, objectOutputStream0, byteArray0, 12, true);
      uTF8JsonGenerator2.getOutputTarget();
      uTF8JsonGenerator1._outputSurrogates((byte)122, 56320);
      BigDecimal bigDecimal0 = new BigDecimal((long) 56320);
      uTF8JsonGenerator2.writeNumber(bigDecimal0);
      uTF8JsonGenerator2.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 926, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      uTF8JsonGenerator1.configure(jsonGenerator_Feature0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
//      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 59, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 125, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 4500, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("Jm5Zl-XNi}'t6hGRW_");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CANONICALIZE_FIELD_NAMES");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2438), (ObjectCodec) null, mockPrintStream1, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      Object object0 = uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      SerializedString serializedString0 = new SerializedString("write a raw (unencoded) value");
      uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator1.writeFieldName("St.^ EE[[_");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-363), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "write a raw (unencoded) value";
      uTF8JsonGenerator0._verifyValueWrite("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      uTF8JsonGenerator1.writeBinaryField("5D[e\"y920}#'", byteArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(56319);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 91, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 33, 0, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
//      try { 
        uTF8JsonGenerator1.copyCurrentEvent(jsonParser0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // No current event to copy
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1398, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[2] = (byte)45;
      iOContext0.allocNameCopyBuffer(40);
      byteArray0[4] = (byte)114;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      String string0 = "jD0&#@7}Ksz";
      uTF8JsonGenerator0.writeRaw("jD0&#@7}Ksz");
      uTF8JsonGenerator0.writeNumber((float) 0);
      MockFile mockFile0 = new MockFile("jD0&#@7}Ksz");
      mockFile0.toURL();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 3068);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("5hMrT>1sM59Z");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'm';
      charArray0[2] = 'K';
      charArray0[3] = 'k';
      charArray0[4] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2797, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 10, (-694), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("5hMrT>1sM59Z", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 10);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)52, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 13, true);
      SerializedString serializedString0 = new SerializedString("5hMrT>1sM59Z");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 250, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0._verifyValueWrite("[NX=|G:3jd&^");
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-41);
      byteArray1[1] = (byte)67;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 70, (ObjectCodec) null, byteArrayOutputStream0, byteArray1, (byte)67, true);
      uTF8JsonGenerator1.getOutputTarget();
//      try { 
        uTF8JsonGenerator1._outputSurrogates((-879), (byte)67);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xfffffc91, second 0x43
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      byte byte0 = (byte)48;
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byteArrayBuilder0.appendTwoBytes((-1737));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)48, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue(3);
      String string0 = ")Fca;CGtLa >$9.x";
      SerializedString serializedString0 = new SerializedString(")Fca;CGtLa >$9.x");
      BigDecimal bigDecimal0 = new BigDecimal((-1195));
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Jh=_TDvRiSw>~evaq=[");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      int int0 = (-1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)67;
      byteArray1[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)30, (ObjectCodec) null, (OutputStream) null, byteArray1, 57, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("Jh=_TDvRiSw>~evaq=[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "write a number";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "write a number");
      uTF8JsonGenerator0._verifyValueWrite("write a number");
      uTF8JsonGenerator0.writeNumber(1.0F);
      uTF8JsonGenerator0.close();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, objectOutputStream0);
      Object object0 = uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 12, true);
      uTF8JsonGenerator2.getOutputTarget();
      uTF8JsonGenerator1._outputSurrogates((byte)122, 56320);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("write a number");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-128);
      iOContext1.allocBase64Buffer();
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeString(")");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) 3);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0._verifyValueWrite("M-l)dgwf9#k2jy4");
      uTF8JsonGenerator0.writeNumber((float) 1L);
      uTF8JsonGenerator0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-165), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 84, false);
      uTF8JsonGenerator1.getOutputTarget();
//      try { 
        uTF8JsonGenerator0._outputSurrogates(3257, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xcb9, second 0x2
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)127, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeObjectField("UTF-32BE", bufferRecycler0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.util.BufferRecycler)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(439);
      byteArrayBuilder0.completeAndCoalesce(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byteArrayBuilder0.setCurrentSegmentLength(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 1146, true);
      iOContext0.constructTextBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-1956.5105F));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)30, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3106), (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'W';
      charArray0[3] = 'i';
      charArray0[4] = 't';
      charArray0[5] = ')';
      charArray0[6] = 'W';
      charArray0[7] = 'W';
      charArray0[8] = ')';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      byte byte0 = (byte)0;
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byteArrayBuilder0.appendTwoBytes((-1737));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeRootValue(3);
      String string0 = ")Fca;CGtLa >$9.x";
      SerializedString serializedString0 = new SerializedString(")Fca;CGtLa >$9.x");
      BigDecimal bigDecimal0 = new BigDecimal((-1195));
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1860), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      char char0 = ')';
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)67);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char char1 = 'W';
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      char char2 = 'N';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 240);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeString(")");
      uTF8JsonGenerator0._flushBuffer();
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockFile mockFile0 = new MockFile("write a string", "/HFn[ra{:mO$zh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-128);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1216), 1024);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      iOContext0.allocTokenBuffer(902);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)30, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 11, false);
      uTF8JsonGenerator0.writeNumber((-1412.9387));
      uTF8JsonGenerator0.writeString("write a string");
      uTF8JsonGenerator0.writeNumber((double) 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("/HFn[ra{:mO$zh");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      byteArray0[6] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 128, (ObjectCodec) null, filterOutputStream0, byteArray0, (-1733), true);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      iOContext0.constructTextBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      char[] charArray0 = iOContext0.allocNameCopyBuffer((byte)53);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1581, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (-1070));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("m$Y", 2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((short) (byte)44);
      SerializedString serializedString0 = new SerializedString("m$Y");
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber(2175);
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(49);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferedInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler1, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder1.NO_BYTES, 48, true);
      uTF8JsonGenerator0.writeRaw("@_uY;zM;V/.r1#U#&>", (-1242), (-1242));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1057, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 128, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = '\u0017';
      charArray0[2] = '=';
      charArray0[3] = 'A';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1057, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 128, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = '(';
      charArray0[2] = '=';
      charArray0[3] = 'A';
      uTF8JsonGenerator1.getOutputBuffered();
      uTF8JsonGenerator1.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte byte0 = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) (byte)30);
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0._verifyValueWrite("M-l)dgwf9#k2jy4");
      uTF8JsonGenerator0.writeNumber(2273.7373F);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.completeAndCoalesce(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext1.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 127, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(3);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("'\"8AP5");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("IH)~(V+nD%");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1057, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 128, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = '(';
      charArray0[2] = '=';
      charArray0[3] = 'A';
      uTF8JsonGenerator1.getOutputBuffered();
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeNumber((-1829L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((float) (byte)30);
      uTF8JsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, (-1), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("}tg11O");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'A';
      charArray0[2] = 'p';
      charArray0[3] = '';
      charArray0[4] = '9';
      charArray0[5] = 'Y';
      charArray0[6] = '/';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2254, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 117, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      File file0 = MockFile.createTempFile("}tg11O", "6}5LrdDQ4}W58");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)40, 939);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, (-201));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~58");
      uTF8JsonGenerator0._outputTail = 0;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, false);
      filteringGeneratorDelegate0.getPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((float) (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-2195), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)30, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      char[] charArray0 = null;
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("}tg11O");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'A';
      charArray0[2] = 'p';
      charArray0[3] = '';
      charArray0[4] = '9';
      charArray0[5] = 'Y';
      charArray0[6] = '/';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2254, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 117, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      File file0 = MockFile.createTempFile("}tg11O", "6}5LrdDQ4}W58");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, mockFileOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = '(';
      charArray0[2] = 't';
      charArray0[3] = 'A';
      charArray0[4] = ']';
      charArray0[5] = ')';
      uTF8JsonGenerator0.writeString(charArray0, (-2207), (-899));
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeRaw('(');
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3106), (ObjectCodec) null, byteArrayOutputStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'X';
      charArray0[2] = 'W';
      charArray0[3] = 'i';
      charArray0[4] = 't';
      charArray0[5] = ')';
      charArray0[6] = 'W';
      charArray0[7] = 'W';
      charArray0[8] = ')';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 5, 128);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 510, (ObjectCodec) null, byteArrayOutputStream0);
      String string0 = "*IS@ZNJP(=MW!^c,`Q0";
      uTF8JsonGenerator0.writeRaw("*IS@ZNJP(=MW!^c,`Q0");
      uTF8JsonGenerator0.writeNumber((-1176.8445F));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.flush();
      byteArrayOutputStream0.write(55296);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'c';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      uTF8JsonGenerator0.writeStartArray();
      charArray0[8] = 'n';
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = new SerializedString("No Base64Variant with name ");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockFile mockFile0 = new MockFile("write a string", "/HFn[ra{:mO$zh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-128);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1216), 1024);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)30, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 11, false);
      uTF8JsonGenerator0.writeNumber((-1412.9387));
      uTF8JsonGenerator0.writeString("write a string");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(46);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-75);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeString(")");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1057, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      uTF8JsonGenerator0.configure(jsonGenerator_Feature0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 128, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = '(';
      charArray0[2] = '=';
      charArray0[3] = 'A';
      uTF8JsonGenerator1.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber(2273.7373F);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("m$Y", 2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((short) (byte)44);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = new SerializedString("qYevG26B`Xd*");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)67, 13);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)99;
      iOContext0.allocNameCopyBuffer(40);
      byteArray0[4] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 2, 4);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Y!MT;>fJOXp;(>@tL.");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)67;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 18, false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((float) (byte)67);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)67, (ObjectCodec) null, (OutputStream) null, byteArray0, 1138, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[5];
      byteArrayBuilder0.appendTwoBytes(57343);
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeNumber((short) (byte)99);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 55296, 23);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 55296
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'c';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      uTF8JsonGenerator0.writeStartArray();
      charArray0[8] = 'n';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-4185), (int) (byte)67);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4185
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 510, (ObjectCodec) null, byteArrayOutputStream0);
      iOContext1.constructTextBuffer();
      String string0 = "*IS@ZNJP(=MW!^c,`Q0";
      uTF8JsonGenerator0.writeRaw("*IS@ZNJP(=MW!^c,`Q0");
      uTF8JsonGenerator0.writeNumber((-1176.8445F));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.allocTokenBuffer();
      iOContext2.allocReadIOBuffer();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.flush();
      byteArrayOutputStream0.write(55296);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 54, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1615;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      int int1 = 4096;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (byte)119, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2865, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1245), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '=';
      charArray0[3] = 'n';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = '=';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 7994, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("a8$:2cd2Fl{~(", "", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)116;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeNumberField("m$Y", 2);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.getCodec();
      uTF8JsonGenerator0.writeNumber((short) (byte)44);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)27;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, (byte[]) null, 33, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)117;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (byte)6, 63);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 1057;
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)114;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, (-883), 23);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -883
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1057, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 128, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = '(';
      charArray0[2] = '=';
      charArray0[3] = 'A';
      charArray0[4] = ')';
      charArray0[5] = 'n';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeString(charArray0, 3, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("a8$:2cd2Fl{~(", "", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-43);
      byte byte1 = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)116;
      byte byte2 = (byte)44;
      byteArray0[8] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1365), (ObjectCodec) null, mockFileOutputStream0);
//      try { 
        uTF8JsonGenerator0._outputSurrogates(3, 362);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x3, second 0x16a
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile(";2U/QTQE?", ";2U/QTQE?");
      MockFile mockFile1 = new MockFile(mockFile0, ",;me");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2438, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 344, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      iOContext1.constructTextBuffer();
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeNumber((-1.0F));
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.flush();
      byteArrayOutputStream0.write(224);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.close();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Trying to release buffer not owned by the context");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = '6';
      charArray0[2] = '\\';
      charArray0[3] = '`';
      charArray0[4] = 'D';
      charArray0[5] = '1';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 58, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 6, (ObjectCodec) null, (OutputStream) null, byteArray0, 777, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 6, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("a8$:2cd2Fl{~(", "", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-843), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 16, true);
      SerializedString serializedString0 = new SerializedString(")Fca;CGtLa >$9.x");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m$Y", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte)119;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 12000, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      String string0 = "";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("", 3, 1021);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1615, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
//      try { 
        uTF8JsonGenerator0._outputSurrogates(4096, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x1000, second 0x0
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)117;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0, 2, 630);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1057, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 601);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 1272, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }
}
