/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 15:24:32 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile("sxmg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sxmg");
      iOContext0.allocReadIOBuffer();
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-228), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = new SerializedString("sxmg");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 0);
      uTF8JsonGenerator0.writeNumber((-3149.6445137945));
      uTF8JsonGenerator0.writeRawValue("Aa.BY}MQ{*");
//      try { 
        uTF8JsonGenerator0._writePPFieldName("Aa.BY}MQ{*");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFile mockFile0 = new MockFile("sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("sxmg");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.completeAndCoalesce(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-16);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 4304, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4304
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 213, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-16);
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte)87;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      byteArray1[6] = (byte) (-16);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 2, (-1848));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFile mockFile0 = new MockFile("sxmg", "mE{K{3|o]}!");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)59;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 806, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeNumber(2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("EWkl3r?7DAcISpM");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not EWkl3r?7DAcISpM, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumberField("PL", Double.NEGATIVE_INFINITY);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer.allocate(108);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a null, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, true);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 893, true);
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0._charBuffer = null;
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(Double.NaN);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile("`4iVKh/^h}4x-", "`4iVKh/^h}4x-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println(1);
      mockPrintStream0.print('L');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      mockPrintStream0.print((double) 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "`4iVKh/^h}4x-", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1050, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream2);
      uTF8JsonGenerator1.writeString("`4iVKh/^h}4x-");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator1.writeNumber(88);
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumberField("PL", Double.NEGATIVE_INFINITY);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(108);
      serializedString0.putQuotedUTF8(byteBuffer0);
      SerializedString serializedString2 = new SerializedString("");
      serializedString0.asQuotedChars();
      char char0 = 'v';
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, pipedOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("bDf5ZeVBfuCP$CVz}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.print(1283.7648962870248);
      SerializedString serializedString0 = new SerializedString("bDf5ZeVBfuCP$CVz}");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 3);
      MockPrintStream mockPrintStream2 = new MockPrintStream("((_KTPc.c#a:>Z");
      mockPrintStream1.print('b');
      uTF8JsonGenerator0.writeNumberField("a~:W|C%", (double) 1);
      SerializedString serializedString1 = new SerializedString("ALLOW_COMMENTS");
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString("ALLOW_COMMENTS");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2118, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      SerializedString serializedString0 = new SerializedString("2 B9WIVW");
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[13];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 931, false);
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)105;
      byteArray0[0] = (byte)105;
      byte byte1 = (byte) (-49);
      byteArray0[1] = (byte) (-49);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-3857), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("S<FwcB.");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFile mockFile0 = new MockFile("sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print('9');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream0.print((double) 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1356), (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0._verifyPrettyValueWrite("sxmg", 0);
      StringWriter stringWriter0 = new StringWriter();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      StringWriter stringWriter0 = new StringWriter();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      char[] charArray0 = new char[7];
      charArray0[1] = 'Z';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      mockFile0.toURI();
      SerializedString serializedString1 = new SerializedString("write a null");
      uTF8JsonGenerator0.close();
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 858, false);
      Base64Variant base64Variant0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, 70);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "s1fiUs,5UNfV33", true);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)101;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 180, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeString("write a string");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeFieldName("s1fiUs,5UNfV33");
      uTF8JsonGenerator0.close();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-4430), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.close();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "zcj0:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1889, (ObjectCodec) null, filterOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(3);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "mE{K{3|o]}!");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 690, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeNumber(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)48);
      uTF8JsonGenerator0.writeRaw('|');
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeRaw('D');
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      boolean boolean0 = false;
      mockPrintStream0.print('A');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      String string0 = "write a null";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockPrintStream0.print('A');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream0.print((double) 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("write a null", 0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[1] = 'Z';
      charArray0[2] = 'A';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      SerializedString serializedString0 = new SerializedString("write a null");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      byte[] byteArray0 = new byte[9];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "sxmg";
      MockFile mockFile0 = new MockFile("sxmg", "mE{K{3|o]}!");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte byte0 = (byte)59;
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 808, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 4, 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "s1fiUs,5UNfV33", true);
      CharsToNameCanonicalizer.createRoot();
      iOContext1.allocWriteEncodingBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 54, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 3, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byteArrayBuilder0.reset();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((-2325.2607F));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("sxmg");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 66, (ObjectCodec) null, mockPrintStream0, byteArray0, 91, false);
      uTF8JsonGenerator0.setHighestNonEscapedChar(108);
      uTF8JsonGenerator1.writeFieldName("sxmg");
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator0.writeString("): only regular white space (\r, \n, \t) is allowed between tokens");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "mE{K{3|o]}!");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 816, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeNumber(2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = 'l';
      charArray0[4] = '_';
      charArray0[5] = '8';
      charArray0[6] = '_';
      uTF8JsonGenerator0.writeString(charArray0, (-710), 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("write a ra (9nencoded) value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a ra (9nencoded) value");
      byte[] byteArray0 = new byte[23];
      byteArray0[2] = (byte)81;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-28);
      byteArray0[8] = (byte)6;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 895, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((byte)0);
      uTF8JsonGenerator0.writeFieldName("): only regular white space (\r, \n, \t) is allowed between tokens");
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      jsonGenerator0.writeNumber(101);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.print('A');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("write a null", 0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'Z';
      charArray0[2] = 'A';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 97);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.println((float) 1);
      File file0 = MockFile.createTempFile(" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`", "[Wl$h47gY 2");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, (-208));
      char char0 = '%';
      MockPrintStream mockPrintStream1 = null;
//      try {
        mockPrintStream1 = new MockPrintStream("[Wl$h47gY 2", " You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         //  You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ");
      uTF8JsonGenerator0._verifyValueWrite("");
      uTF8JsonGenerator0._verifyValueWrite("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeFieldName("\"UbkPZ:[");
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = 'T';
      charArray0[2] = '\'';
      charArray0[4] = '+';
      charArray0[6] = '2';
      charArray0[7] = '_';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-2994), 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2994
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.resetAndGetFirstSegment();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2194), (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeString("mT-QfVF9)=PQ`?L%V");
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeFieldName("MIME-NO-LINEFEEDS");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile("sxmg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sxmg");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("sxmg");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-228), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("sxmg");
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("WRITE_BIGDECIMAL_AS_PLAIN", ", although was supposed to have one");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.print((-2.147483648E9));
      SerializedString serializedString0 = new SerializedString(", although was supposed to have one");
      mockPrintStream1.println(0.8F);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 423, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 1);
      MockPrintStream mockPrintStream2 = new MockPrintStream("((_KTPc.c#a:>Z");
      mockPrintStream2.print('b');
      uTF8JsonGenerator0.writeNumberField(", although was supposed to have one", 1414.731168174716);
      SerializedString serializedString1 = new SerializedString("oVG>|");
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 4000, (ObjectCodec) null, mockPrintStream2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFile mockFile0 = new MockFile("sxmg", "mE{K{3|o]}!");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 818, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeNumber(2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.resetAndGetFirstSegment();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1088, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = "com.fasterxml.jackson.core.JsonProcessingException";
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.JsonProcessingException", (double) 3);
      byteArrayBuilder0.finishCurrentSegment();
      SerializedString serializedString1 = new SerializedString("_ZDINgemw30qwv~");
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 3, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "zc2j0:{");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2455, true);
      uTF8JsonGenerator0.writeString("");
      mockPrintStream0.flush();
      uTF8JsonGenerator0.writeNumber((long) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.print('A');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 64, 65536);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = new SerializedString("sxmg");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(3);
      uTF8JsonGenerator0._verifyValueWrite("sxmg");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 2);
//      try { 
        uTF8JsonGenerator0.writeString("VALUE_STRING");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      int int0 = 70;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 70, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "zc2j0:{");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)39, false);
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)98);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.resetAndGetFirstSegment();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 248, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-795), false);
      String string0 = "7G\",r/U";
      uTF8JsonGenerator0._verifyValueWrite("7G\",r/U");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFile mockFile0 = new MockFile("c{.*v0Y", "z");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 13, true);
      uTF8JsonGenerator0.writeString("Z-Y");
      System.setCurrentTimeMillis(1);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeFieldName("y_ee#P;Qn");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2253), false);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "jL6sgFMT4sN:";
      MockFile mockFile0 = new MockFile("jL6sgFMT4sN:", "jL6sgFMT4sN:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, mockPrintStream0, byteArray0, 1552, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('O');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      MockFile mockFile0 = new MockFile("sxmg", "mE{K{3|o]}!");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 818, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("write a raw (unencoded) value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a raw (unencoded) value");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 895, false);
      uTF8JsonGenerator0.setHighestNonEscapedChar((byte)39);
      uTF8JsonGenerator0.writeFieldName("): only regular white space (\r, \n, \t) is allowed between tokens");
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("write a raw (unencoded) value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a raw (unencoded) value");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print('A');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      mockPrintStream0.print((double) 1);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3039, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-83);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, (byte) (-83), 3039);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "- X\"vFN:a'O$.7(g");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)3;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2087, true);
      int int0 = 34;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 128, 34);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "10");
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream1.print('E');
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      mockPrintStream1.print(false);
      MockPrintStream mockPrintStream2 = new MockPrintStream(byteArrayBuilder0, false);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 8000, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("", "");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "zc2j0:{", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3812);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1458, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      short short0 = (short)4949;
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile1);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 95);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 95 bytes (out of 95)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.getCurrentSegment();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 127);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeNumber((long) 3);
      SerializedString serializedString0 = new SerializedString("f#Sm&,el8>\"x\"F.)mH");
      uTF8JsonGenerator0.writeBinaryField("f#Sm&,el8>\"x\"F.)mH", byteArray0);
//      try { 
        uTF8JsonGenerator0.writeFieldName("f#Sm&,el8>\"x\"F.)mH");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "zc2j0:{");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2455, true);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis((-784L));
      uTF8JsonGenerator0.writeStartArray();
      mockFile0.setExecutable(true, true);
      uTF8JsonGenerator0.writeNumber(3);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "+", false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)117, (ObjectCodec) null, (OutputStream) null, byteArray0, 770, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (-2788));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFile mockFile0 = new MockFile("c{.*v0Y", "c{.*v0Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2281, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)123, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c{.*v0Y");
      FileSystemHandling.createFolder(evoSuiteFile0);
      uTF8JsonGenerator0.writeString("Z-Y");
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[2] = 'E';
      charArray0[4] = 'E';
      charArray0[6] = '3';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-1487));
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((-76));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 375, (ObjectCodec) null, pipedOutputStream0, byteArray0, 240, true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = '%';
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.println((float) 2);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 683);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 679 bytes (out of 683)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("c{.*v0Y", "c{.*v0Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '3';
      charArray0[2] = 'E';
      charArray0[4] = '3';
      charArray0[4] = 'E';
      charArray0[6] = '3';
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-965), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      SerializedString serializedString0 = new SerializedString("c{.*v0Y");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFile mockFile0 = new MockFile("c{.*v0Y", "c{.*v0Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2281, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)123, false);
      uTF8JsonGenerator0.writeString("Z-Y");
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '3';
      charArray0[2] = 'E';
      charArray0[4] = '3';
      charArray0[4] = 'E';
      charArray0[6] = '3';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-1487));
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-82);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.gcd(bigInteger1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, (OutputStream) null, byteArray1, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "zc2j0:{");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, mockPrintStream0);
      mockPrintStream0.println((float) 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, (-1926));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFile mockFile0 = new MockFile("c{.*v0Y", "c{.*v0Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2281, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)123, false);
      uTF8JsonGenerator0.writeString("Z-Y");
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '3';
      charArray0[2] = 'E';
      charArray0[3] = '3';
      charArray0[4] = 'E';
      charArray0[5] = '3';
      charArray0[6] = '3';
      uTF8JsonGenerator0.writeString(charArray0, 0, (-1487));
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1088, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeString("mT-QfVF9)=PQ`?L%V");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("write a raw (unencoded) value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a raw (unencoded) value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 42, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 536870908, true);
      uTF8JsonGenerator0.writeFieldName("write a raw (unencoded) value");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 42;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      uTF8JsonGenerator0.writeArray(intArray0, 42, 0);
      uTF8JsonGenerator0.writeString("write a raw (unencoded) value");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.print('-');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I0vp22Ojr#X}");
      mockFile0.toURI();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 39, (ObjectCodec) null, mockPrintStream0, byteArray1, 23, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      String string0 = "c{.*v0Y";
      MockFile mockFile0 = new MockFile("c{.*v0Y", "c{.*v0Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 118, true);
      uTF8JsonGenerator0.writeBinaryField("c{.*v0Y", byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'i';
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 14, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-904), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumber("");
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("`4iVKh/^h}4x-", "`4iVKh/^h}4x-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.println(1);
      mockPrintStream1.print('L');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, true);
      mockPrintStream0.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 'L', (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("sxmg", "mE{K{3|o]}!");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[4] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 818, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2816), (-2816));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      iOContext0.allocNameCopyBuffer(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = bigDecimal0.abs();
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, ", expecting field name", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)127, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 8000, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(", expecting field name");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.print('A');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 893, false);
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2513), (ObjectCodec) null, mockPrintStream0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((long) 0);
      uTF8JsonGenerator0.getOutputTarget();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      StringReader stringReader0 = new StringReader("sxmg");
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeString("sxmg");
      uTF8JsonGenerator0.writeNumber((short) (-1742));
      uTF8JsonGenerator0.writeString((char[]) null, 0, 0);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-465), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.JsonProcessingException", (double) 3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = new SerializedString("com.fasterxml.jackson.core.JsonProcessingException");
      serializedString0.asQuotedChars();
      uTF8JsonGenerator0.writeRaw('n');
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      String string0 = "\"8I,qt=iT:mIiDY\\}S";
      int int0 = 683;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte) (-96);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1675, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeString("B:z#Q7");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArray0, 55296, true);
//      try { 
        uTF8JsonGenerator1.writeNumber((short)3464);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      uTF8JsonGenerator0.writeBinaryField("sxmg", byteArray0);
      SerializedString serializedString0 = new SerializedString("sxmg");
      SerializedString serializedString1 = new SerializedString("sxmg");
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3401), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 57343);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFile mockFile0 = new MockFile("c{.*v0Y", "c{.*v0Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2281, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)123, false);
      uTF8JsonGenerator0.writeString("Z-Y");
      System.setCurrentTimeMillis((-1911L));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeFieldName("0v-VC6D\"o;uO>");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3401), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.print('-');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      mockFile0.toURI();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1569, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("sxmg");
      String string0 = ",i";
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-997), (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("R^\"z6\"");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      mockPrintStream0.print((double) 3);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      String string0 = "Can not write a field name, expecting a value";
      StringReader stringReader0 = new StringReader("Can not write a field name, expecting a value");
      int int0 = 130;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.ulp();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      mockPrintStream0.print((double) 1);
      SerializedString serializedString1 = new SerializedString("write raw value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 49, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, filterOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRaw("9W&8", 55296, (-806));
      StringReader stringReader0 = new StringReader("start an object");
      CharsToNameCanonicalizer.createRoot();
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("`4iVKh/^h}4x-", "b/RM($#v");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream1.println(1);
      mockPrintStream1.print('L');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, true);
      mockPrintStream0.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-853), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)117;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream0.print((-857.455868655));
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      String string0 = "hpm";
      StringReader stringReader0 = new StringReader("hpm");
      int int0 = (-1163);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1163), (ObjectCodec) null, pipedOutputStream0, byteArray0, 130, false);
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("write a raw (unencoded) value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a raw (unencoded) value");
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 42, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 536870908, true);
      uTF8JsonGenerator0.writeFieldName("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      uTF8JsonGenerator0._verifyPrettyValueWrite("d#fr:ibgMe#D3", 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1309), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      int int0 = 5;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 5, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeBinary(byteArrayBuilder0.NO_BYTES);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-1309), true);
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.appendTwoBytes(512);
      uTF8JsonGenerator0.writeRaw('p');
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("write a raw (unencoded) value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a raw (unencoded) value");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, pipedOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFile mockFile0 = new MockFile("c{.*v0Y", "c{.*v0Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2281, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)123, false);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("Z-Y");
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)117;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream0.print((-857.455868655));
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 122, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[0] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("EV^Pu[=De");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString("5_Jr@#]95`");
      SerializedString serializedString1 = new SerializedString("; 3Il");
      uTF8JsonGenerator0._verifyPrettyValueWrite(".%J+N$u~B9U%v^mrPmj", (byte)0);
      StringWriter stringWriter0 = new StringWriter();
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3401), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)1;
      MockFile mockFile0 = new MockFile((String) null, "tt");
      mockFile0.toURI();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3259, (ObjectCodec) null, pipedOutputStream0, byteArray0, 0, true);
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 74, 1023);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1;
      String string0 = "g}";
      StringReader stringReader0 = new StringReader("g}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)116;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartObject();
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'b';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 97);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 7, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeBooleanField("uv>", true);
      UTF8JsonGenerator uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 542, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator2._rootValueSeparator;
      uTF8JsonGenerator2.writeStartObject();
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext4 = new IOContext(bufferRecycler0, uTF8JsonGenerator1, false);
      UTF8JsonGenerator uTF8JsonGenerator3 = null;
//      try {
        uTF8JsonGenerator3 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream0.print((-857.455868655));
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 122, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeNumber(0.0F);
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '!';
      charArray0[2] = 'l';
      charArray0[3] = '}';
      charArray0[4] = 'a';
      charArray0[5] = 'M';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2828, (-2808));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.writeNumber((long) 2);
      uTF8JsonGenerator1.writeBoolean(false);
      uTF8JsonGenerator1.writeRaw("mT-QfVF9)=PQ`?L%V");
      uTF8JsonGenerator1.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.print('-');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1, byteArray0, 893, false);
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString0;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)116;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 200, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-799), (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      uTF8JsonGenerator0.writeString(charArray0, 1981, (-799));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      iOContext0.allocWriteEncodingBuffer((int) (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream0.print((-857.455868655));
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 122, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeNumber(0.0F);
//      try { 
        uTF8JsonGenerator0.writeRaw('R');
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-46);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream2, byteArray0, (-1806), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1806
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("sxmg", "mE{K{3|o]}!");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 818, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeNumber(2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(18);
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.writeRaw('8');
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 2, 3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.constructTextBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 63, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.appendQuotedUTF8(byteArray0, 56319);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeNumber((long) 2);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 57343, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((long) 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._flushBuffer();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      bigDecimal0.plus();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((long) 2);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((short)2048);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'WeX)XFP1rOoh8/+b");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-79);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1858), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2444, false);
      uTF8JsonGenerator0.writeRaw('V');
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(941.877379981655);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("write a raw (unencoded) value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2056, true);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 240, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      int int0 = (-360);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-360), (ObjectCodec) null, pipedOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-128);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1130, false);
      uTF8JsonGenerator0.writeString("kn@Yp=g");
      uTF8JsonGenerator0.writeNumber((long) 1);
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = 'h';
      charArray0[2] = 'U';
      charArray0[3] = 'W';
      charArray0[4] = '7';
      charArray0[5] = 'U';
      charArray0[6] = 'K';
      charArray0[7] = '_';
      charArray0[8] = 'l';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeString(charArray0, (int) (byte)17, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)123;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-16), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeString("xBX+u~");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-16);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1891), (ObjectCodec) null, pipedOutputStream0, byteArray1, 0, true);
      uTF8JsonGenerator0.getOutputBuffered();
      byteArray0[2] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2676), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
//      try { 
        uTF8JsonGenerator1.writeString("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2118, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)123;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 12, (ObjectCodec) null, pipedOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = '3';
      uTF8JsonGenerator0.writeString(charArray0, 225, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      MockFile mockFile0 = new MockFile("yfnf}AW~0&,}hs[A;~x", "yfnf}AW~0&,}hs[A;~x");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-84), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)59, true);
      uTF8JsonGenerator0.getCurrentValue();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object1 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler1, object1, false);
      StringReader stringReader0 = new StringReader("': expected '");
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)2048);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("write a raw (unencoded) value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 988, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)68, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      StringWriter stringWriter0 = new StringWriter();
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "9@.xAQDsb!";
      StringReader stringReader0 = new StringReader("9@.xAQDsb!");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      int int0 = 8;
      int int1 = 512;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 512, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      byteArrayBuilder0.append((-1506));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[0] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-104);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray1, 3, true);
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream1, byteArray0, 893, false);
      uTF8JsonGenerator0.overrideStdFeatures(1, 52);
      uTF8JsonGenerator0.writeNumber((long) 3);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber(2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3401), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      String string0 = "u=Op])#*";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 67, false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = 'E';
      charArray0[7] = '3';
      charArray0[8] = 'a';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 1810, 1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[0] = (byte)0;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1107), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumberField("write a binary value", (double) 2);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, (byte)0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("write a raw (unencoded) value");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)68, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 73);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeNumber(2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2133);
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.writeRaw('8');
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-971), (ObjectCodec) null, pipedOutputStream0);
      iOContext1.releaseReadIOBuffer((byte[]) null);
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.JsonProcessingException", (double) (byte)0);
      uTF8JsonGenerator0.writeRaw('V');
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("k -noPsl$;hQ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "2 B9WIVW");
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 67, false);
      uTF8JsonGenerator0.writeStartObject((Object) iOContext1);
      String string0 = null;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 56320;
      doubleArray0[1] = (double) (byte)68;
      doubleArray0[2] = (double) 33;
      doubleArray0[3] = (double) 56320;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 56319;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 56319;
//      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, (int) (byte)123, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("sxmg/sxmg/sxmg");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\"RJ)");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("sxmg/sxmg/sxmg");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("sxmg");
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 2144);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 15
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)123, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 2130);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, false);
      mockPrintStream1.print((double) 1);
      SerializedString serializedString0 = new SerializedString("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockPrintStream1, byteArray0, 893, false);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      MockFile mockFile0 = new MockFile("qZ%c");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-449), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 87, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2676), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 67, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 16, 127);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, (OutputStream) null, byteArray1, (-1070), true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1070
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)49, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-971), (ObjectCodec) null, pipedOutputStream0);
      iOContext1.releaseReadIOBuffer((byte[]) null);
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.JsonProcessingException", (double) (byte)0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (int) (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[3] = (byte)123;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 69, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 618, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      OutputStream outputStream0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 33, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.ulp();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString1 = new SerializedString("write a null");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 911, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(763.14307F);
//      try { 
        uTF8JsonGenerator1._outputSurrogates(114, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x72, second 0x2
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeString("H+y-!t\"");
      uTF8JsonGenerator0.writeNumber((short)55);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)49;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 25, (ObjectCodec) null, (OutputStream) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[3] = (byte)123;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 69, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBinaryField("^6/gGzlbH}h", byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("?Y)cSB42h'");
      uTF8JsonGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString("5_Jr@#]95`");
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString1 = new SerializedString("; 3Il");
      String string0 = "Can not ";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringReader stringReader0 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3486), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-2532), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(33);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2500), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumber(0);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1140), (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      char char0 = 'e';
      char char1 = '%';
      char char2 = '\\';
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 101);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      byteArrayBuilder0.append(2);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString("Unexpected end-of-input");
      String string0 = "<m}Vy}k>@.";
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((String) null, "<m}Vy}k>@.", false, 'x', 2038);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 10)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.ulp();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString1 = new SerializedString("write a null");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 911, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite("ef%(fs}+2S", 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      mockFile0.toURI();
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 67, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeStartArray();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 39, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber((long) 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("g}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)45;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      byteArrayBuilder0.append(2263);
      SerializedString serializedString1 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString("");
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("<m}Vy}k>@.", (String) null, false, ' ', 1130);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{Bd~}<d");
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, "Mga", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(33);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayBuilder0);
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeString("sxmg");
      uTF8JsonGenerator0.writeNumber((short) (byte)59);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[0] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("EV^Pu[=De");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString("5_Jr@#]95`");
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString1 = new SerializedString("; 3Il");
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Can not ", (byte)0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringReader stringReader0 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3486), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-2532), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(33);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2500), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumber("FAIL_ON_SYMBOL_HASH_OVERFLOW");
      uTF8JsonGenerator0.writeString("q/{(\"zASJt=");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 1350, 6);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 22, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("?Y)cSB42h'");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeObjectField("': was expecting ", (Object) null);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 123);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("?Y)cSB42h'", 2440);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeRaw(",3[D?k{GSV>", 854, 0);
      uTF8JsonGenerator0.writeNumber(80);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 56320, true);
      iOContext2.allocTokenBuffer(55296);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw('3');
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 324, (ObjectCodec) null, pipedOutputStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-628), (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      String string0 = "";
//      try { 
        uTF8JsonGenerator0.writeBinaryField("", byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      uTF8JsonGenerator0.writeBinary((InputStream) null, 0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = '%';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      charArray0[5] = '\\';
      charArray0[6] = '%';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Mga";
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 126, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      byteArrayBuilder0.append(844);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator1.writeNumber((long) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 3, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 22, (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "?Y)cSB42h'";
      uTF8JsonGenerator0._verifyValueWrite("?Y)cSB42h'");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.getCurrentValue();
      uTF8JsonGenerator0.writeObjectField("': was expecting ", (Object) null);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 123);
//      try { 
        uTF8JsonGenerator0.writeFieldName(".");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "g@1sL4U~V9", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 30, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("Xp}ru$w");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, true);
      StringReader stringReader0 = new StringReader("sxmg");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      byteArrayBuilder0.toByteArray();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 54, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((float) 0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      File file0 = MockFile.createTempFile("AUTO_CLOSE_SOURCE", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3120), (ObjectCodec) null, mockFileOutputStream0);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1277, true);
      uTF8JsonGenerator1.getCurrentValue();
      Object object2 = uTF8JsonGenerator1.getOutputTarget();
      IOContext iOContext3 = new IOContext(bufferRecycler1, object2, true);
      StringReader stringReader0 = new StringReader(": was expecting closing ''' for name");
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream0.print((-857.455868655));
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 122, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      StringReader stringReader0 = new StringReader("Mga");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray1, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[3] = (byte)123;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 69, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeBinaryField("^6/gGzlbH}h", byteArray0);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      uTF8JsonGenerator0.writeNumber((long) 3);
      SerializedString serializedString0 = new SerializedString("f#Sm&,el8>\"x\"F.)mH");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3401), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      bigDecimal0.abs();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject((Object) bigDecimal0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.setHighestNonEscapedChar(125);
      uTF8JsonGenerator1.writeNumber((long) 56320);
      uTF8JsonGenerator1.close();
      uTF8JsonGenerator1.close();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 2, 15);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-978), (ObjectCodec) null, pipedOutputStream0, byteArray0, 1000, false);
//      try { 
        uTF8JsonGenerator0.writeRaw(": was expecting closing '\"' for name");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-971), (ObjectCodec) null, pipedOutputStream0);
      iOContext1.releaseReadIOBuffer((byte[]) null);
      uTF8JsonGenerator0.writeNumberField("com.fasterxml.jackson.core.JsonProcessingException", (double) (byte)0);
      SerializedString serializedString0 = new SerializedString("tx={1'L+M7?`DOe'");
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'e';
      charArray0[2] = '%';
      charArray0[3] = 'y';
      charArray0[4] = '_';
      charArray0[5] = '\\';
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 33);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream1, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((long) 33);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      mockFile0.toURI();
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 67, true);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((String) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      File file0 = MockFile.createTempFile("AUTO_CLOSE_SOURCE", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3120), (ObjectCodec) null, mockFileOutputStream0);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object1, true);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext3 = new IOContext(bufferRecycler2, (Object) null, false);
      StringReader stringReader0 = new StringReader("AUTO_CLOSE_SOURCE");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler2);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext4, (-5659), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 966, true);
      uTF8JsonGenerator0.writeString("(C!{0h iEgXdpQ");
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite(")");
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'W';
      charArray0[2] = 'S';
      charArray0[3] = '^';
      charArray0[4] = '*';
      charArray0[5] = '+';
      charArray0[6] = 'H';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      MockFile mockFile0 = new MockFile("sxmg", "sxmg");
      MockFile mockFile1 = new MockFile(mockFile0, "sxmg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)59;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6000, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("xBX+u~");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator1.writeNumber((long) 2);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      uTF8JsonGenerator1.writeNumber(bigDecimal1);
      uTF8JsonGenerator0.writeNumber(3668L);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringReader stringReader0 = new StringReader(" in a comment");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1040), (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString(" in a comment");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeRaw(" in a comment");
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'S';
      jsonGenerator0.setRootValueSeparator((SerializableString) null);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeRaw(charArray0, 827, 4823);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 827
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "2 B9WIVW";
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      mockPrintStream0.print(0.0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter1, false, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1368, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-2959));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 22, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("?Y)cSB42h'");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 123);
      uTF8JsonGenerator0.writeFieldName(".");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 56, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 102;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 102, (ObjectCodec) null, (OutputStream) null, byteArray0, 102, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      mockFileOutputStream0.close();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 67, true);
      String string0 = null;
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue(57343);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1934, (ObjectCodec) null, byteArrayBuilder0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = bigDecimal0.abs();
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(".%J+N$u~B9U%v^mrPmj", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1675, (ObjectCodec) null, pipedOutputStream0);
      iOContext2.allocReadIOBuffer(26);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator1.writeString("");
//      try { 
        uTF8JsonGenerator1.writeNumber((long) 1675);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator1.writeNumber((long) 2);
      uTF8JsonGenerator1.writeRaw("mT-QfVF9)=PQ`?L%V");
      uTF8JsonGenerator1.close();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '';
      charArray0[2] = 'S';
      charArray0[3] = 'l';
      charArray0[4] = '_';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeString(charArray0, 532, 15);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = (-3401);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3401), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("u=Op])#*");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      mockPrintStream0.print((-3600.7005));
      SerializedString serializedString0 = new SerializedString("SR&{X&");
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2320), (ObjectCodec) null, pipedOutputStream0, byteArray1, 2, true);
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[11];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = '7';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 14, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-24), (ObjectCodec) null, (OutputStream) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 33);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 11
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator1.writeNumber((long) 2);
      String string0 = "mT-QfVF9)=PQ`?L%V";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 3, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      CharsToNameCanonicalizer.createRoot();
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = '7';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 14, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 71, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName(";8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 67, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((String) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      Object object0 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2447, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(56320);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-3299), (-3));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("'-O}Pi7mt^#-");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-856), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-856), false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -856
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      String string0 = " in a comment";
      StringReader stringReader0 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[1] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3486), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-2532), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(33);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2500), (ObjectCodec) null, dataOutputStream0);
      String string1 = "FAIL_ON_SYMBOL_HASH_OVERFLOW";
      uTF8JsonGenerator0._outputBuffer = byteArrayBuilder0.NO_BYTES;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("FAIL_ON_SYMBOL_HASH_OVERFLOW");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.base.GeneratorBase");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.writeNumber((long) 2);
      uTF8JsonGenerator0.writeString("mT-QfVF9)=PQ`?L%V");
      uTF8JsonGenerator0.writeNumber(2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("8!");
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'g';
      charArray0[2] = 'j';
      charArray0[3] = ',';
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 3, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      String string0 = "'^ZE-";
      uTF8JsonGenerator0.writeNumberField("'^ZE-", (double) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, (byte)0, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1675, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray1 = iOContext2.allocReadIOBuffer(26);
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 4471, 6);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1675, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
//      try { 
        uTF8JsonGenerator0.writeNumber(3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 56320, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 7, true);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("NL.");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.writeStartArray();
      uTF8JsonGenerator1.writeNumber((long) 2);
      uTF8JsonGenerator1.writeRaw("mT-QfVF9)=PQ`?L%V");
      uTF8JsonGenerator1.close();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 14, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("2 B9WIVW");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-917), (ObjectCodec) null, dataOutputStream0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.abs();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(".%J+N$u~B9U%v^mrPmj", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)4;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "xBX+u~", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)117;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)117;
      byteArray1[6] = (byte)0;
      iOContext0.allocReadIOBuffer(101);
      byteArray1[7] = (byte)4;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 262144, 262144);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 262144
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "2 B9WIVW";
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = '7';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 14, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 4219, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("id:ern", "", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2857, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeStartArray();
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = ':';
      charArray0[2] = 'p';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (-2));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fn*S");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("fn*S", 812, 0);
      byteArrayOutputStream0.reset();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeRaw('8');
      uTF8JsonGenerator0._flushBuffer();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((int) (byte) (-64));
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("AUTO_CLOSE_SOURCE", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-3120), (ObjectCodec) null, mockFileOutputStream0);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object1, true);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext3 = new IOContext(bufferRecycler2, (Object) null, false);
      StringReader stringReader0 = new StringReader("AUTO_CLOSE_SOURCE");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler2);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext4, (-5659), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 966, true);
      uTF8JsonGenerator0.writeString("(C!{0h iEgXdpQ");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[7] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1675, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("xBX+u~");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      MockFile mockFile0 = new MockFile("k -noPsl$;hQ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 120, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      uTF8JsonGenerator0.writeNumber((long) 1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 22, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("?Y)cSB42h'");
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("?Y)cSB42h'");
      uTF8JsonGenerator0.writeRaw((char[]) null, 57, 0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1130, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeNumber(bigDecimal0);
      uTF8JsonGenerator1.writeNumber((long) 2);
      uTF8JsonGenerator1.writeRaw("mT-QfVF9)=PQ`?L%V");
      uTF8JsonGenerator1.close();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringReader stringReader0 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3486), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-2532), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(33);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2500), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumber("FAIL_ON_SYMBOL_HASH_OVERFLOW");
      uTF8JsonGenerator0._verifyPrettyValueWrite("FAIL_ON_SYMBOL_HASH_OVERFLOW", 0);
      StringWriter stringWriter0 = new StringWriter();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000000, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2596), true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("2 B9WIVW");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("ndq0mBr :fi", "2 B9WIVW");
      MockFile mockFile1 = new MockFile("");
      mockFile0.renameTo(mockFile1);
      MockFile mockFile2 = new MockFile("write a raw (unencoded) value");
      mockFile0.setWritable(false, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile2, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec((ObjectCodec) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartArray();
      uTF8JsonGenerator0.writeStringField("WRITE_NUMBERS_AS_STRINGS", "ndq0mBr :fi");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2FJI=>9rd", false);
      File file0 = MockFile.createTempFile("Split surrogate on writeRaw() input (last character)", "2FJI=>9rd");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)78;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 24, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1000, (byte) (-1), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(48);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 127, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[0] = (byte)0;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1107), (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "g@1sL4U~V9", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1406, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("Too few bytes available: missing ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((-1L));
      uTF8JsonGenerator0.writeRaw("mT-QfVF9)=PQ`?L%V");
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Mga");
      CharsToNameCanonicalizer.createRoot();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)102;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2624, (ObjectCodec) null, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("sb(4vU%t{v^\"4x");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber(1L);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'i';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 14, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("2 B9WIVW");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-904), (ObjectCodec) null, dataOutputStream0);
      SerializedString serializedString0 = new SerializedString("2 B9WIVW");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((long) 1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)42;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-2403), 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2403
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-35);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-195), (ObjectCodec) null, pipedOutputStream0, byteArray0, 4214, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte)49;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 31, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'i';
      charArray0[3] = 'a';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("2 B9WIVW");
      uTF8JsonGenerator0.writeNull();
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
      
      SerializedString serializedString0 = new SerializedString("2 B9WIVW");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'i';
      charArray0[3] = 'a';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, false);
//      try { 
        uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringReader stringReader0 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3486), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-2527), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(33);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeShort(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2500), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumber("FAIL_ON_SYMBOL_HASH_OVERFLOW");
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'i';
      charArray0[3] = 'a';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._verifyValueWrite("2 B9WIVW");
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyValueWrite("2 B9WIVW");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      charArray0[2] = 'i';
      MockFile mockFile0 = new MockFile("start an array", "start an array");
      MockFile mockFile1 = new MockFile("start an array");
      mockFile1.renameTo(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockFileOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 57343, false);
      uTF8JsonGenerator1._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g@1sL4U~V9");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("id:ern", 2399, (-1394));
      uTF8JsonGenerator0.writeRaw('7');
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      charArray0[2] = 'i';
      charArray0[3] = 'a';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      charArray0[2] = 'i';
      MockFile mockFile0 = new MockFile("start an array", "start an array");
      MockFile mockFile1 = new MockFile("start an array");
      mockFile1.renameTo(mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = new SerializedString("write a raw (unencoded) value");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal1);
      uTF8JsonGenerator0.writeNumber((long) 1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1675, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
//      try { 
        uTF8JsonGenerator0.writeString("xBX+u~");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      String string0 = "2 B9WIVW";
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = '7';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 14, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("2 B9WIVW");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-917), (ObjectCodec) null, dataOutputStream0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.abs();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(".%J+N$u~B9U%v^mrPmj", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringReader stringReader0 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3486), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-2532), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(33);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2500), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeNumber("FAIL_ON_SYMBOL_HASH_OVERFLOW");
      uTF8JsonGenerator0.writeString("ALLOW_UNQUOTED_FIELD_NAMES");
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      MockFile mockFile0 = new MockFile("", "X5Fbh=7G{csQzT");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(800.945792);
      uTF8JsonGenerator0.writeNumber("X5Fbh=7G{csQzT");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)8;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)6, (byte) (-79));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      StringReader stringReader0 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3486), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-2532), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(33);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2500), (ObjectCodec) null, dataOutputStream0);
      uTF8JsonGenerator0.writeString(" in a comment");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer(895);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 5, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)55, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.toByteArray();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("g@1sL4U~V9");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[1] = '7';
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("2 B9WIVW", 18, 1);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'i';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      charArray0[3] = 'a';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(110);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.shortValueExact();
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 7, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("id:ern", "", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      mockFile0.getAbsolutePath();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2857, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 6);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 110, 54, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(4615);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4615, (ObjectCodec) null, filterOutputStream0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)4;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-109);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)117, 65);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeObjectField("N[#x+(#wA'|/6yk'n", jsonEncoding0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed com.fasterxml.jackson.core.JsonEncoding)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'i';
      iOContext0.constructTextBuffer();
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 14, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("2 B9WIVW");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-904), (ObjectCodec) null, dataOutputStream0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((long) 1);
      assertEquals(7, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'i';
      charArray0[3] = 'a';
      charArray0[4] = 'p';
      charArray0[5] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 14, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-904), (ObjectCodec) null, dataOutputStream0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int int0 = (-2368);
      char[] charArray0 = new char[2];
      MockFile mockFile0 = new MockFile("TF", "p@");
      File file0 = MockFile.createTempFile("B6-:SC1bu-", "B6-:SC1bu-", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "B6-:SC1bu-";
      objectArray0[2] = (Object) "B6-:SC1bu-";
      objectArray0[3] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.printf("m!X?`", objectArray0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, objectArray0[3], true);
      byte[] byteArray0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2368), (ObjectCodec) null, printStream0, (byte[]) null, (-2368), false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/%I!dvf/%I!dvf");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)64;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("/%I!dvf", "/%I!dvf");
      MockFile mockFile1 = new MockFile((String) null, "/%I!dvf");
      mockFile0.renameTo(mockFile1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("start an array");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("2 B9WIVW");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '7';
      charArray0[2] = 'i';
      charArray0[3] = 'a';
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.toByteArray();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("2 B9WIVW");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("/%I!dvf", "/%I!dvf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 2);
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeNumber("");
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-325), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 116, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@50c+BZF[)}L>$il8>", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-871), (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      iOContext0.allocNameCopyBuffer(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 51, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeRaw("id:ern", 2399, (-1394));
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 101, (ObjectCodec) null, stringWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 57343);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("??aM<RsdWE%%kO#", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1737, (ObjectCodec) null, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-4452), true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0);
      pipedOutputStream0.flush();
      pipedOutputStream0.close();
      pipedOutputStream0.flush();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getSchema();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.setSchema((FormatSchema) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-109);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-195), (ObjectCodec) null, pipedOutputStream0, byteArray0, 4214, true);
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }
}
