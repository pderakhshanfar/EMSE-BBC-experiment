/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 05:42:16 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArrayBuilder0.write(byteArray0);
      byteArray0[1] = (byte)124;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)124, (ObjectCodec) null, byteArrayBuilder0);
      char char0 = '\u0082';
      char[] charArray0 = new char[22];
      charArray0[0] = '\u0082';
      int[] intArray0 = new int[7];
      intArray0[1] = (int) '\u0000';
      intArray0[3] = 3;
      intArray0[4] = 56320;
      intArray0[6] = 0;
      int int0 = (-3498);
      uTF8JsonGenerator0.writeArray(intArray0, (int) (byte)124, (-3498));
      charArray0[2] = '\u0082';
      charArray0[4] = '\u0082';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 1);
      String string0 = null;
      String string1 = "30D!YWQ";
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((String) null, "30D!YWQ", true, '\u0082', 84);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 8)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2194), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArrayBuilder0.NO_BYTES, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("name");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "R+@2");
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = null;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 0, 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pushbackInputStream0, 1563);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 1563 bytes (out of 1563)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      iOContext1.constructTextBuffer();
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (-2));
      SerializedString serializedString0 = new SerializedString("<");
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "DOUBLE", false, 'Q', 55296);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 6)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "write a number";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-43);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, objectArray0[0], false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1314, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)34);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNullField("");
      int int0 = 2046;
//      try { 
        uTF8JsonGenerator0.writeNumber((BigInteger) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 119, false);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-694.4F));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("#+z");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      iOContext1.constructTextBuffer();
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (-2));
      SerializedString serializedString0 = new SerializedString("#+z");
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.releaseTokenBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 10, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (-951), 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "write a number";
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1314, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)34);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber(1211L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.finishCurrentSegment();
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1032), (ObjectCodec) null, byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeNumber("d|D/.xl6/8\"C$!iYD");
      uTF8JsonGenerator0.writeNumber(512L);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeFieldName("d|D/.xl6/8\"C$!iYD");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rJa'l3vN", false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "rJa'l3vN", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)47;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0, 34);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte byte0 = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-497L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      iOContext0.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1032), (ObjectCodec) null, byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer");
      uTF8JsonGenerator0.writeNumber((-3140.38));
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("aGs}3~n");
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("name");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "R+@2");
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1836), (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[20];
      charArray0[0] = '\u0082';
      uTF8JsonGenerator0.writeString(charArray0, 0, 1);
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.finishCurrentSegment();
      iOContext0.allocReadIOBuffer();
      byteArrayBuilder0.append(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      uTF8JsonGenerator0.writeStartObject();
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
//      try { 
        uTF8JsonGenerator0.writeNumber(">Nhc");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = '\u0082';
      charArray0[3] = '\u0082';
      uTF8JsonGenerator0.writeString(charArray0, 2, 1);
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("name");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "R+@2");
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1836), (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[20];
      charArray0[0] = '\u0082';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 69);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 20
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      char[] charArray0 = iOContext2.allocNameCopyBuffer(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1010), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((float) (byte) (-116));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-1010), 1000000000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1010
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[19];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) "write a number";
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      byteArray0[13] = (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 394, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      String string0 = "+[K/t$(Ec3+/5d9P";
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a null, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder1);
      Locale locale0 = Locale.ROOT;
      String string0 = "ALLOW_COMMENTS";
      mockPrintStream0.println(0.0F);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) bufferRecycler0;
      mockPrintStream0.format(locale0, "ALLOW_COMMENTS", objectArray0);
      mockPrintStream0.println((Object) "ALLOW_COMMENTS");
      Object object1 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string1 = "i>6}H=2cbjE4|Y!";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("i>6}H=2cbjE4|Y!");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder1.NO_BYTES, 45, false);
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("#+z");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      iOContext1.constructTextBuffer();
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (-2));
      SerializedString serializedString0 = new SerializedString("#+z");
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2078, false);
      uTF8JsonGenerator0._verifyPrettyValueWrite("4`.k\")]&l1", (byte)0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0F);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)124;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)124, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      int int0 = 114;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 114);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      OutputStream outputStream0 = null;
      int int0 = 48;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 48, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(12);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.println((Object) "write a number");
      Object object1 = new Object();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object1, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "write a number");
      iOContext1.allocReadIOBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 36, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeString("");
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      iOContext0.constructTextBuffer();
      char[] charArray0 = new char[2];
      char char0 = 'o';
      charArray0[0] = 'o';
      charArray0[1] = '[';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, 0);
      SerializedString serializedString0 = new SerializedString("<");
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)124;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)124, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0082';
      charArray0[1] = '\u0082';
      charArray0[2] = '\u0082';
      charArray0[3] = '\u0082';
      charArray0[4] = '\u0082';
      int int0 = 114;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 114);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1836), (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0082';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 69);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      System.setCurrentTimeMillis(0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("name");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler1, sequenceInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("name", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeEndArray();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "", false, ']', 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[19];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) "write a number";
      mockPrintStream0.print("write a number");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      mockPrintStream1.flush();
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      byteArray0[13] = (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 394, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      String string0 = "+[K/t$(Ec3+/5d9P";
      uTF8JsonGenerator0.writeStringField("Q$p&wI*aZDu<zvZ", "12G");
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNullField("+[K/t$(Ec3+/5d9P");
//      try { 
        uTF8JsonGenerator0.writeNumber(2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.finishCurrentSegment();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1032), (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeNullField("2y+7u+");
      uTF8JsonGenerator0.writeNumber(0);
      jsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNullField("_QY24?\"");
//      try { 
        jsonGenerator0.writeNumber(57343);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[4] = (byte) (-42);
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1314, (ObjectCodec) null, mockPrintStream0, byteArray0, 876, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)34);
      uTF8JsonGenerator0.writeNumber((double) 2);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 91, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, true);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a numVber");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "write a string");
      mockPrintStream0.print("write a numVber");
      mockPrintStream0.format("write a numVber", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("write a numVber");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("`Zbmg^Yg4_binW>x");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      mockPrintStream0.println(true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-4340), (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      uTF8JsonGenerator0.writeString((String) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.write(byteArray0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0._verifyPrettyValueWrite("z", 0);
      uTF8JsonGenerator0.writeFieldName("z");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      iOContext1.constructTextBuffer();
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (-2));
      SerializedString serializedString0 = new SerializedString("<");
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      System.setCurrentTimeMillis(0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("name");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockPrintStream1, false);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1, byteArrayBuilder0.NO_BYTES, 46, true);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0._rootValueSeparator = (SerializableString) serializedString1;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.finishCurrentSegment();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-995), (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeNullField("2y+7u+");
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      byteArrayBuilder0.setCurrentSegmentLength(1);
      uTF8JsonGenerator1.writeUTF8String(byteArray0, 1, 98);
      uTF8JsonGenerator0.writeNumber(0);
//      try { 
        uTF8JsonGenerator1._writePPFieldName("2y+7u+");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      byte byte0 = (byte)124;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)44;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)2, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((short)4);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)124;
      byte[] byteArray1 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1376, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 2, true);
      uTF8JsonGenerator0.writeBoolean(true);
      String string0 = "9|3>!RC\"G92";
      uTF8JsonGenerator0.writeFieldName("9|3>!RC\"G92");
      MockPrintStream mockPrintStream0 = new MockPrintStream("9|3>!RC\"G92");
      mockPrintStream0.print((-4610));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)35, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-4610), true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      String string0 = "expected padding character '";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 97, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 512, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.finishCurrentSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1032), (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "";
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeElement(55296);
      uTF8JsonGenerator0.writeRaw('');
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI is not absolute
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)44, (ObjectCodec) null, (OutputStream) null, byteArrayBuilder0.NO_BYTES, 1400, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 18, (-1951));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("jeSE9+");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, evoSuiteFile0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      Locale locale0 = Locale.KOREAN;
      IOContext iOContext2 = new IOContext(bufferRecycler2, locale0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 75, false);
//      try { 
        uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)124;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)87;
      byteArray1[6] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1596), (ObjectCodec) null, byteArrayBuilder0, byteArray1, 4, true);
      uTF8JsonGenerator0.writeFieldName(";G!T6aO@I6=s%7`Y_W");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(";G!T6aO@I6=s%7`Y_W", (-2033));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      mockPrintStream0.close();
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "write a number";
      objectArray0[3] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "write a number", objectArray0);
      mockPrintStream0.println((Object) "write a number");
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectArray0[0], false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-274), (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("write a number");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)87;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)2, false);
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-799), 13);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      mockPrintStream0.println((-1.0));
      mockPrintStream0.print(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected padding character '", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-82);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray1, 3, true);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.println((Object) "write a number");
      Object object1 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 97, false);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler2, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeString("': was expecting ");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = 'f';
      charArray0[2] = 'p';
      charArray0[3] = '-';
      charArray0[4] = 'e';
      charArray0[5] = 'j';
      charArray0[6] = '(';
      charArray0[7] = 'F';
      uTF8JsonGenerator1.writeRaw(charArray0, 0, 3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 6, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(17L);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[4] = (byte) (-42);
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      mockPrintStream0.println(2651L);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1314, (ObjectCodec) null, mockPrintStream0, byteArray0, 876, true);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("write a number");
      uTF8JsonGenerator0.writeBoolean(false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write a raw (unencoded) value", (-3566));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a number");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      mockPrintStream0.println((Object) "write a number");
      Object object1 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 36, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a number", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-42), (ObjectCodec) null, mockPrintStream0, byteArray0, 11, false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "write a number", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 11, (ObjectCodec) null, mockPrintStream0, byteArray0, 1536, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRawUTF8String(byteArray0, 46, (byte)34);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      SerializedString serializedString0 = new SerializedString("[9R{IbtNU%)bC|8X");
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1194, (ObjectCodec) null, (OutputStream) null, byteArray0, 1194, true);
      uTF8JsonGenerator0.writeString((char[]) null, 3, 0);
      uTF8JsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-31);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a number", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)67, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeRaw(',');
      uTF8JsonGenerator0.writeNumber(0.0F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("@fP>mMy");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, Integer.MAX_VALUE, 33, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-115);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4096, (ObjectCodec) null, (OutputStream) null, byteArray0, 4891, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder1);
      Locale locale0 = Locale.ROOT;
      mockPrintStream0.println(0.0F);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      mockPrintStream0.print(false);
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) iOContext0;
      mockPrintStream0.format(locale0, "ALLOW_COMMENTS", objectArray0);
      mockPrintStream0.println((Object) "ALLOW_COMMENTS");
      Object object1 = new Object();
      mockPrintStream0.print("PaYh57b_O'lMo H9jy:");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler3 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, byteArrayBuilder1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder1.NO_BYTES, 1, false);
      int int0 = (-2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      mockFileOutputStream0.write(byteArray0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0._verifyPrettyValueWrite("z", 0);
      mockFileOutputStream0.close();
      uTF8JsonGenerator0.writeFieldName("z");
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, mockPrintStream0, byteArray0, 195, true);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 195);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-22);
      byte[] byteArray1 = new byte[5];
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 0, true);
      uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)34, (int) (byte)0);
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[4];
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 192, true);
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1120, 52);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "write a number";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      mockPrintStream0.format("write a number", objectArray0);
      mockPrintStream0.format(locale0, "write a number", objectArray0);
      mockPrintStream0.println((Object) "write a number");
      Object object1 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 4, false);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-2089L));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      iOContext1.constructTextBuffer();
      uTF8JsonGenerator0.writeNumber((double) 2);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)67;
      uTF8JsonGenerator0.writeBinary(byteArray1);
      uTF8JsonGenerator0.writeRaw('g');
      uTF8JsonGenerator0.writeNumber(1.0F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("%rHAO4TP+yB12\u0001=");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1016), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 117, 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      iOContext0.releaseNameCopyBuffer((char[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%rHAO4TP+yB12\u0001=");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)92;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3489, false);
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, (-3595), 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("write a number");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1314, (ObjectCodec) null, mockPrintStream0, byteArray0, 876, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)34);
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'w';
      charArray0[2] = '8';
      charArray0[3] = '-';
      charArray0[4] = '|';
      charArray0[5] = '`';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 1163);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[19];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) "write a number";
      mockPrintStream0.print("write a number");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1, byteArray0, 1, false);
      String string0 = "write a binary value";
      uTF8JsonGenerator0.writeNumber("write a binary value");
      uTF8JsonGenerator0.writeBoolean(false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'n';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.println(true);
      mockPrintStream0.close();
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "write a number";
      objectArray0[2] = (Object) "write a number";
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object1 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((-83));
      uTF8JsonGenerator0.writeNumber(1762.9039283323);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 42, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      SerializedString serializedString0 = new SerializedString("[9R{IbtNU%)bC|8X");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.finishCurrentSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1032), (ObjectCodec) null, byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBinaryField("[9R{IbtNU%)bC|8X", byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 1, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "write a number";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      mockPrintStream0.format(locale0, "write a number", objectArray0);
      mockPrintStream0.println((Object) "write a number");
      Object object1 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeString((char[]) null, 91, 0);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("write a number", 2054);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = byteArrayBuilder0.finishCurrentSegment();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder1.finishCurrentSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 392, (ObjectCodec) null, byteArrayBuilder1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      String string0 = "38w~r9jAP$C2";
      Object[] objectArray0 = new Object[2];
      PrintStream printStream0 = mockPrintStream0.format("38w~r9jAP$C2", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 28);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)49;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pushbackInputStream0, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2801, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeArray((double[]) null, 2981, (-1973));
      uTF8JsonGenerator0.writeNumber((-4215L));
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.asQuotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)35;
      iOContext0.allocBase64Buffer();
      byteArray0[3] = (byte) (-22);
      byte[] byteArray1 = new byte[5];
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)2;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)124, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 0, true);
      uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)34, (int) (byte)0);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", (byte)35);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((double) 2);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeNumber((-2989L));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      mockPrintStream0.flush();
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)53, false);
      mockPrintStream0.flush();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "write a number", false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 829, (ObjectCodec) null, mockPrintStream1, byteArray0, 3, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber(21);
      uTF8JsonGenerator0.writeNumber(0.0);
      BigDecimal bigDecimal0 = null;
      SerializedString serializedString0 = new SerializedString("write a number");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "write a number";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[19];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) "write a number";
      mockPrintStream0.print("write a number");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      objectArray0[0] = (Object) (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 394, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      uTF8JsonGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = new BigDecimal((double) 2);
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[19];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) "write a number";
      mockPrintStream0.print("write a number");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)69, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2389, 12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2776, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('x');
      uTF8JsonGenerator0.writeArray((double[]) null, 2981, (-1973));
      uTF8JsonGenerator0.writeNumber((-4215L));
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString1.asQuotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)124;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)2, (ObjectCodec) null, (OutputStream) null, byteArray0, 8, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)87);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder1);
      Locale locale0 = Locale.ROOT;
      mockPrintStream0.println(0.0F);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      mockPrintStream0.print(false);
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) iOContext0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "ALLOW_COMMENTS", objectArray0);
      mockPrintStream0.println((Object) "ALLOW_COMMENTS");
      Object object1 = new Object();
      mockPrintStream0.print("PaYh57b_O'lMo H9jy:");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, bufferRecycler2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler3 = new BufferRecycler();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1645, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumberField("ALLOW_COMMENTS", bigDecimal0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 91, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, true);
      uTF8JsonGenerator0.writeNumber("NRFe,w1;-=V&?N'7A");
      uTF8JsonGenerator0.writeBoolean(true);
      char[] charArray0 = new char[4];
      charArray0[1] = 'U';
      charArray0[2] = '/';
      charArray0[3] = 'B';
      uTF8JsonGenerator0.writeNumber((long) 3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      mockPrintStream0.close();
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeRaw('d');
      String string0 = "";
      uTF8JsonGenerator0.writeNumber("write a number");
      uTF8JsonGenerator0.writeBoolean(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W#(OhCX*O6~qcnSe");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[4];
      String string0 = "<";
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("<");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder1);
      Locale locale0 = Locale.ROOT;
      Object object1 = new Object();
      mockPrintStream0.print("[?");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 0, 759);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1314, (ObjectCodec) null, mockPrintStream0, byteArray0, 876, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)34);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 8, 1963);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 13
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("nm");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      SerializedString serializedString0 = new SerializedString("");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNullField("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      PrintStream printStream0 = mockPrintStream0.format("38w~r9jAP$C2", objectArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArray0, (byte)0, 19);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("z%TN[z/u$Muqp*!#A");
      mockPrintStream0.close();
      Object object0 = new Object();
      mockPrintStream0.print("z%TN[z/u$Muqp*!#A");
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format("z%TN[z/u$Muqp*!#A", objectArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      mockPrintStream0.print(1.0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-42);
      byteArray0[5] = (byte) (-42);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeStartObject((Object) printStream0);
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder1);
      Locale locale0 = Locale.ROOT;
      mockPrintStream0.println(0.0F);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) null;
      mockPrintStream0.print(false);
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[5] = (Object) iOContext0;
      mockPrintStream0.format(locale0, "ALLOW_COMMENTS", objectArray0);
      mockPrintStream0.println((Object) "ALLOW_COMMENTS");
      Object object1 = new Object();
      mockPrintStream0.print("PaYh57b_O'lMo H9jy:");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, bufferRecycler2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler3 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler2, byteArrayBuilder1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 43, (ObjectCodec) null, byteArrayBuilder1, byteArrayBuilder1.NO_BYTES, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      iOContext1.constructTextBuffer();
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (-2));
      SerializedString serializedString0 = new SerializedString("<");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString2);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("write a number");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2776, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('x');
      byte[] byteArray0 = new byte[0];
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeArray((double[]) null, 2981, (-1973));
      uTF8JsonGenerator0.writeNumber((-4215L));
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeFieldName("");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, printStream0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-978), (ObjectCodec) null, filterOutputStream0, byteArray0, 21, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("write a number");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) (byte) (-64);
      PrintStream printStream0 = mockPrintStream0.format("38w~r9jAP$C2", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0, byteArray0, 46, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)124;
      int int0 = 55;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)87;
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 4, true);
      uTF8JsonGenerator0.writeNumber((short) (-3693));
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "write a number";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[19];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) "write a number";
      mockPrintStream0.print("write a number");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1961, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNullField("+[K/t$(Ec3+/5d9P");
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      mockPrintStream0.print("write a number");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "write a number";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 25, (ObjectCodec) null, printStream0, byteArray0, 2151, false);
      uTF8JsonGenerator0.writeNumber("NRFe,w1;-=V&?N'7A");
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("NRFe,w1;-=V&?N'7A");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      String string0 = "start an array";
      MockPrintStream mockPrintStream0 = new MockPrintStream("start an array");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      int int0 = 394;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 14, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      String string1 = "+[K/t$(Ec3+/5d9P";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      System.setCurrentTimeMillis(0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("name");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, sequenceInputStream0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("name", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((double) 1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 876, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1963);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 13
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("[");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("[");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      int int0 = 2606;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2606, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1314, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a nQmber");
      mockPrintStream0.write(6);
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a nQmber");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a nQmber");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1850), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 56, false);
      uTF8JsonGenerator0.writeRaw('#');
      uTF8JsonGenerator0.writeNumber("write a nQmber");
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-1660), (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-96));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-647), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (byte)18, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1418, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 2, false);
      uTF8JsonGenerator0._outputTail = 56;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      iOContext1.constructTextBuffer();
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (-2));
      SerializedString serializedString0 = new SerializedString("<");
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("expected padding character '");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      mockPrintStream0.println((Object) bufferRecycler0);
      Object object0 = new Object();
      mockPrintStream0.print("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream("name");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 114, 1212, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)58, (ObjectCodec) null, pipedOutputStream0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeRaw('d');
      uTF8JsonGenerator0.writeNumber("cWQ:^<>3");
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      uTF8JsonGenerator0.writeRaw(charArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      MockPrintStream mockPrintStream1 = new MockPrintStream("b");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5643), (ObjectCodec) null, mockPrintStream0, byteArray0, 51, true);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 40, 1696);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((float) 40);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber(4156);
      uTF8JsonGenerator0.writeNumber((double) 4156);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 55, 0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0._releaseBuffers();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("[");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("[");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Zr\"#98ch_MOG>R", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      SerializedString serializedString0 = new SerializedString("^d/So=D");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "write a number";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      mockPrintStream0.format(locale0, "write a number", objectArray0);
      mockPrintStream0.println((Object) "write a number");
      Object object1 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object1, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 36, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[19];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) "write a number";
      mockPrintStream0.print("write a number");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      byteArray1[3] = (byte) (-62);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      objectArray0[0] = (Object) (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 394, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      String string0 = "+[K/t$(Ec3+/5d9P";
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNullField("+[K/t$(Ec3+/5d9P");
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      mockPrintStream0.println((Object) "write a number");
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-654), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      int int0 = 65535;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 57343;
      doubleArray0[1] = 3044.60815514942;
      doubleArray0[2] = (-526.0);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 2;
      // Undeclared exception!
      uTF8JsonGenerator0.writeArray(doubleArray0, 1, 34);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3205, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 3205, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 2, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      mockPrintStream0.println((Object) "write a number");
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-700), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      StringWriter stringWriter0 = new StringWriter(255);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 49, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "write a number";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) "write a number";
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      byteArray1[3] = (byte) (-62);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      objectArray0[0] = (Object) (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 394, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      String string1 = "+[K/t$(Ec3+/5d9P";
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "write a number";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2036), (ObjectCodec) null, mockPrintStream0, byteArray0, 55296, true);
      uTF8JsonGenerator0.writeRaw('i');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) (byte)0;
      mockPrintStream0.format("38w~r9jAP$C2", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-707), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (-2450), 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      sequenceInputStream0.read();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 34, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1314, (ObjectCodec) null, mockPrintStream0, byteArray0, 876, true);
      uTF8JsonGenerator0.writeNumber((int) (byte)34);
      uTF8JsonGenerator0.writeNumber((double) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 8, 1963);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 13
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(", although was supposed to have one");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "write a number";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      mockPrintStream0.format(locale0, "write a number", objectArray0);
      mockPrintStream0.println((Object) "write a number");
      Object object1 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeString("write a number");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("z%TN[z/u$Muqp*!#A");
      mockPrintStream0.close();
      Object object0 = new Object();
      mockPrintStream0.print("z%TN[z/u$Muqp*!#A");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "z%TN[z/u$Muqp*!#A";
      objectArray0[1] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) null;
      mockPrintStream0.format("z%TN[z/u$Muqp*!#A", objectArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-42);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 23, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'S';
      charArray0[2] = 'm';
      charArray0[3] = '*';
      charArray0[4] = 'm';
      charArray0[5] = 'i';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 397, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1), 397, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 397, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a nQmber");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-62);
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a nQmber");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a nQmber");
      PrintStream printStream0 = mockPrintStream0.format("write a nQmber", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumberField(")", bigDecimal0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1435, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('1');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-53);
      mockFileOutputStream0.write(byteArray0);
      uTF8JsonGenerator0.writeFieldName("z");
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("L`<(]WXg3");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)124;
      byteArrayBuilder0.write(2);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)124, (ObjectCodec) null, byteArrayBuilder0, byteArray1, 0, true);
      uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)34, (-464));
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis((-1L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.asQuotedUTF8();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("BIG_INTEGER", (byte)2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a nQmber");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a nQmber");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a nQmber");
      PrintStream printStream0 = mockPrintStream0.format("write a nQmber", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumberField("write a nQmber", 3);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeRaw('d');
      uTF8JsonGenerator0.writeNumber("3\"2aW6");
      uTF8JsonGenerator0.writeBoolean(false);
//      try { 
        uTF8JsonGenerator0.writeFieldName("write a raw (unencoded) value");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1767), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('$');
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (-2603.774);
      doubleArray0[3] = (double) 57343;
      doubleArray0[4] = (double) '$';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)2, (-1007));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0._releaseBuffers();
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '!';
      charArray0[2] = '5';
      charArray0[3] = 'i';
      charArray0[4] = '*';
      charArray0[5] = '';
      charArray0[6] = '?';
      charArray0[7] = 'O';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 11, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 11
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream0.print("name");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) byteArrayBuilder0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      int int0 = (-1024);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2151, (ObjectCodec) null, mockPrintStream1, byteArrayBuilder0.NO_BYTES, (-1024), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)92);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1024
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1650, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber((-1004L));
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber((short) (-958));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      String string0 = "name";
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream0.print("name");
      String string1 = "]#wD5[Dj%5:8JV2/U";
      MockPrintStream mockPrintStream2 = new MockPrintStream("]#wD5[Dj%5:8JV2/U");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]#wD5[Dj%5:8JV2/U", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2998, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      char[] charArray0 = new char[9];
      charArray0[6] = 'X';
      charArray0[1] = '\u0000';
      charArray0[2] = 'n';
      charArray0[3] = '=';
      charArray0[4] = '>';
      charArray0[5] = ':';
      System.setCurrentTimeMillis(0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("name");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler1, sequenceInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("name", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 15, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)58, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-448), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a nQmber");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a nQmber");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a nQmber");
      PrintStream printStream0 = mockPrintStream0.format("write a nQmber", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expected padding character '", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 192, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      iOContext1.constructTextBuffer();
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRaw(charArray0, 3, (-2));
      SerializedString serializedString0 = new SerializedString("<");
      serializedString0.asQuotedUTF8();
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext2 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      SerializedString serializedString0 = new SerializedString("write a null");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("o~?<Q%v0E8AbG!Z=n");
      mockPrintStream0.print((Object) "<");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 5650, false);
      uTF8JsonGenerator0.writeNumber((double) 108);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("<", 996);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a nQmber");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a nQmber");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a nQmber", false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1628, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 78, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("write a nQmber");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCodec();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.BufferedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.JsonParser");
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")*j", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2047, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-3302.31553030466));
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonParser");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((-127L));
      uTF8JsonGenerator0.writeNumber((long) (byte)0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      byte[] byteArray0 = new byte[5];
      pipedOutputStream0.write(2223);
      byteArray0[0] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 224, (ObjectCodec) null, pipedOutputStream0, byteArray0, 16, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 92, (byte)77);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1650, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1650, Integer.MAX_VALUE);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2000
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-38);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      objectArray0[1] = (Object) '9';
      objectArray0[0] = (Object) '{';
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 13, 2725);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0._verifyPrettyValueWrite("z", 0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 6, 0);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(512);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1314, (ObjectCodec) null, mockPrintStream0, byteArray0, 876, true);
      uTF8JsonGenerator0.writeNumber((double) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 8, 1963);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 13
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "write a number";
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-3801), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3801
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream1, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Numeric value (", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 325, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 3, 218);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      mockPrintStream0.println((Object) "write a number");
      Object object0 = new Object();
      mockPrintStream0.print("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      int int0 = 58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, mockPrintStream0, byteArray0, 58, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString((char[]) null, 0, 58);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)91;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)91, (ObjectCodec) null, pipedOutputStream0, byteArray0, 53, true);
//      try { 
        uTF8JsonGenerator0.writeNumber(1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0._verifyPrettyValueWrite("z", 0);
      uTF8JsonGenerator0.writeFieldName("z");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1767), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('$');
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (-2603.774);
      doubleArray0[3] = (double) 57343;
      doubleArray0[4] = (double) '$';
      doubleArray0[5] = (double) 3;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 1, 65535);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0._verifyPrettyValueWrite("z", 0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 6, 0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" - ", false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 228, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0._verifyValueWrite("write a number");
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeRaw("com.fasterxml.jackson.core.JsonParser$Feature");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext3, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-3579), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray1 = new byte[8];
      byteArray1[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-654), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1628, (ObjectCodec) null, mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      uTF8JsonGenerator0.writeNumber((double) 2138);
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)77;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)108, 432);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 108
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "write a number";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      byteArray1[3] = (byte) (-62);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      byteArray1[6] = (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 394, (ObjectCodec) null, printStream0, byteArray0, 0, false);
      String string1 = "+[K/t$(Ec3+/5d9P";
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
      uTF8JsonGenerator0.writeNullField("+[K/t$(Ec3+/5d9P");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream0.print("name");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) byteArrayBuilder0;
      objectArray0[4] = (Object) bufferRecycler0;
      mockPrintStream1.format("name", objectArray0);
      mockPrintStream0.append((CharSequence) "name");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 1, 401);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2085, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1628, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 401, 2048);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray1 = new byte[9];
      byteArray1[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-654), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 57343);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)101;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 49, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 4000, 55, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 55, (ObjectCodec) null, pipedOutputStream0, byteArray0, 49, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a number");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      byteArray1[6] = (byte) (-62);
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-62);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-654), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("write a number");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray1 = new byte[9];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      byteArray1[6] = (byte) (-62);
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-62);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-654), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("?e(k_N7X-YrpcV67,6");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 8, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("name", 3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      System.setCurrentTimeMillis((byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      objectArray0[1] = (Object) '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = 'z';
      charArray0[7] = 'z';
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2725, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator1.writeStartObject();
//      try { 
        uTF8JsonGenerator1.writeNumber(6000);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a raw (unencoded) value", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 890, (ObjectCodec) null, byteArrayOutputStream0, byteArrayBuilder0.NO_BYTES, 116, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a number", false);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeString((char[]) null, 0, (-4718));
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("name");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      Locale locale0 = Locale.CANADA;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-25);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, (ObjectCodec) null, mockPrintStream0, byteArray0, 1239, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) (byte) (-25));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      String string0 = "name";
      byteArrayBuilder0.release();
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3291, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 108);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      byteArrayBuilder0.setCurrentSegmentLength(0);
      objectArray0[0] = (Object) null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-4766), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-833), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw('$');
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 63, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte) (-1), (-682));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0al");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a raw (unencoded) value", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 419, (ObjectCodec) null, mockPrintStream1);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("0al");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((float) 2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = '=';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 56, 419);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 56
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw('$');
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '$';
      uTF8JsonGenerator0.writeArray(doubleArray0, 2, (-2990));
      uTF8JsonGenerator0.writeNumber(0L);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 7, 2138);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      SerializedString serializedString0 = new SerializedString("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = '+';
      charArray0[2] = 'n';
      charArray0[3] = '=';
      charArray0[4] = '>';
      charArray0[5] = ':';
      charArray0[6] = '=';
      charArray0[7] = 'v';
      charArray0[8] = 'o';
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 57, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "write a number";
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      byteArray1[3] = (byte) (-62);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      byteArray1[6] = (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 394, (ObjectCodec) null, printStream0, byteArray0, 0, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNullField("+[K/t$(Ec3+/5d9P");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 108, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      objectArray0[1] = (Object) '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = 'z';
      charArray0[7] = 'z';
      charArray0[8] = '9';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 127);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler1);
      String string0 = "name";
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2343), (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      iOContext0.allocNameCopyBuffer((-5163));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-2.147483648E9));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1623), (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 114, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, (-94), (-2725));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      mockPrintStream0.print("name");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) byteArrayBuilder0;
      objectArray0[4] = (Object) bufferRecycler0;
      mockPrintStream1.format("name", objectArray0);
      mockPrintStream0.append((CharSequence) "name");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 1, 401);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2085, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1628, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 37, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1183, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 1, (-1937));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3291, true);
      SerializedString serializedString0 = new SerializedString("name");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3237, (ObjectCodec) null, mockPrintStream1);
      mockPrintStream1.println((Object) bufferRecycler0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1650, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2082, (ObjectCodec) null, byteArrayBuilder0);
      char char0 = '9';
      char char1 = 'z';
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("#", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3205, (ObjectCodec) null, mockPrintStream1);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '+';
      charArray0[2] = 'n';
      charArray0[3] = '=';
      charArray0[4] = '>';
      charArray0[5] = ':';
      charArray0[6] = '=';
      charArray0[7] = 'H';
      uTF8JsonGenerator0.writeNumber(0.0F);
      charArray0[8] = 'o';
      uTF8JsonGenerator0.writeString(charArray0, 0, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1437, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString("X|9b>");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'Z';
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      charArray0[2] = 'C';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      filteringGeneratorDelegate0.enable(jsonGenerator_Feature0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator1.writeNumber((long) (byte) (-62));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 108, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)98);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      uTF8JsonGenerator0.getCurrentValue();
      objectArray0[1] = null;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNullField("write a number");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 224, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = '9';
      charArray0[3] = 'z';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = 'z';
      charArray0[7] = 'z';
      charArray0[8] = '9';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 127);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 7, 2138);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("34C<E=>");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3205, (ObjectCodec) null, mockPrintStream1);
      uTF8JsonGenerator0.writeNumber(55);
      uTF8JsonGenerator0.writeRaw("34C<E=>");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte) (-62);
      byteArray1[3] = (byte) (-62);
      byteArray1[4] = (byte) (-62);
      byteArray1[5] = (byte) (-62);
      byteArray1[6] = (byte) (-62);
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-62);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-654), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (-2611));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "write a number";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "write a number", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("dSjo5m]> zD");
      int int0 = 3205;
      SerializedString serializedString0 = new SerializedString("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3205, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockFileOutputStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = '9';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 46, 17);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 46
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3205, (ObjectCodec) null, mockPrintStream1);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("K2PYY\"7Ss3R{");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      String string0 = "name";
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 108, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(37);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = null;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "name", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 62, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumberField("name", (-746));
      Object object0 = new Object();
      mockPrintStream0.println((-681.9));
      uTF8JsonGenerator0.getCurrentValue();
      mockPrintStream0.print("");
      MockPrintStream mockPrintStream1 = null;
//      try {
        mockPrintStream1 = new MockPrintStream(byteArrayBuilder0, false, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = null;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "name", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, printStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("name");
      FileSystemHandling.createFolder(evoSuiteFile0);
      uTF8JsonGenerator0.writeNumberField("name", (-746));
      Object object0 = new Object();
      mockPrintStream0.println((-681.9));
      uTF8JsonGenerator0.getCurrentValue();
      String string0 = "";
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream1, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1968), 110, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 589, sequenceInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte)0, true);
      JsonParserDelegate jsonParserDelegate1 = new JsonParserDelegate(uTF8StreamJsonParser0);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(uTF8StreamJsonParser1, (TokenFilter) null, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, (ObjectCodec) null, byteArrayOutputStream0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeRaw('d');
      uTF8JsonGenerator0.writeNumber("cWQ:^<>3");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2611), (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeRaw('d');
      uTF8JsonGenerator0.writeNumber("Leading zeroes not allowed");
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("write a raw (unencoded) value");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(",", 740);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      String string0 = "name";
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      byteArrayBuilder0.write((int) (byte)2);
      byte byte0 = (byte) (-1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 1958, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 3, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 65, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 281, 55296);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 224, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, (int) (byte)58, 48);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.appendTwoBytes(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 108, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 3092, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = 'F';
      charArray0[7] = 'F';
      charArray0[8] = '1';
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1475, (ObjectCodec) null, byteArrayBuilder0, byteArray0, 114, true);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) 3;
      int int0 = (-467);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray(longArray0, 80, (-467));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)55, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(127);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintStream0.print("write a number");
      mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-654), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocNameCopyBuffer(3);
      iOContext1.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0._verifyPrettyValueWrite("z", 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 87, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[13];
      mockPrintStream0.close();
      byteArray0[0] = (byte) (-42);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.print("write a number");
      PrintStream printStream0 = mockPrintStream0.format("write a number", objectArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      MockPrintStream mockPrintStream1 = new MockPrintStream("write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, mockPrintStream1, byteArray0, 0, true);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object1, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1958, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeRaw(' ');
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator1.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("");
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      PrintStream printStream1 = printStream0.printf("Invalid custom escape definitions; custom escape not found for character code 0x", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
//      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, printStream1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw("write a string", 0, (-32768));
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1000, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeRootValue((byte)0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter1, false, false);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      mockPrintStream0.print((Object) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((-2130.31));
      String string0 = " bytes (out of ";
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-2880), (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3291, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 108);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream1, true);
      ByteQuadsCanonicalizer.createRoot();
      iOContext0.allocBase64Buffer();
      String string0 = "jeSE9+";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      StringReader stringReader0 = new StringReader("Aj2 B&0~wm/-L4z(^");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = ';';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1980), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 50, (-2546), true);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((-1522.0));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 57343, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream0.close();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream2, true);
      iOContext1.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("jeSE9+", (-2307));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber(Double.POSITIVE_INFINITY);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite(" bytes (out of ", (-1));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = null;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "name", (Object[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 49, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumberField("name", (-746));
      Object object0 = new Object();
      mockPrintStream0.println((-681.9));
      uTF8JsonGenerator0.getCurrentValue();
      mockPrintStream0.print("");
      MockPrintStream mockPrintStream1 = null;
//      try {
        mockPrintStream1 = new MockPrintStream(byteArrayBuilder0, false, "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      iOContext0.allocBase64Buffer();
      byte[] byteArray1 = new byte[0];
      boolean boolean1 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-927), (ObjectCodec) null, byteArrayOutputStream0, byteArray1, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1212), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (byte)6, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(10);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 114, 1212, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)58, (ObjectCodec) null, pipedOutputStream0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw("^<Ld", (-149), (-32768));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 102, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, false);
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 's';
      charArray0[2] = '>';
      charArray0[3] = '>';
      uTF8JsonGenerator0.writeRaw(charArray0, 1346, (-3689));
      String string0 = "A;(W~6QkG-$0\\u[@GG";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(string0, 58, 67);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) iOContext0;
      objectArray0[1] = (Object) (byte)0;
      PrintStream printStream0 = mockPrintStream0.format("38w~r9jAP$C2", objectArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeNullField("38w~r9jAP$C2");
      uTF8JsonGenerator0.writeNumber((-1295));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = new SerializedString(", expecting field name");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      iOContext0.constructTextBuffer();
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0);
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_NUMBER_INT");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2940, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("5_w}lo8(TN}H9u?", "VALUE_NUMBER_INT");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2940, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNull();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)15;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 128, 33);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      SerializedString serializedString0 = new SerializedString(", expecting field name");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 326, (ObjectCodec) null, byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 13, (ObjectCodec) null, (Writer) null);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream1, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1968), 110, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, (TokenFilter) null, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1980), (ObjectCodec) null, byteArrayOutputStream0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Invalid custom escape definitions; custom escape not found for character code 0x";
      String string1 = "write a number";
      MockFile mockFile0 = new MockFile("write a number");
      File file0 = MockFile.createTempFile("Invalid custom escape definitions; custom escape not found for character code 0x", "write a number", (File) mockFile0);
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeNumber((short)0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
//      try { 
        uTF8JsonGenerator0._outputSurrogates(2, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x2, second 0x0
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q_y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, (-2668), true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      iOContext0.constructTextBuffer();
      iOContext1.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-32768), false);
      uTF8JsonGenerator0._flushBuffer();
      String string0 = "";
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", "", false, '=', 3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 0)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 44);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 44, (ObjectCodec) null, pipedOutputStream0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
//      try { 
        uTF8JsonGenerator0._outputSurrogates(44, 4383);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x2c, second 0x111f
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_NUMBER_INT");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2940, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("5_w}lo8(TN}H9u?", "VALUE_NUMBER_INT");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2940, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNull();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jeSE9+", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNumber((double) 3);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 3, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile(", expecting field name");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)38;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2449), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)38, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      SerializedString serializedString0 = new SerializedString(", expecting field name");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 2078, false);
      uTF8JsonGenerator0._verifyPrettyValueWrite("4`.k\")]&l1", (byte)0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.util.TextBuffer", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "write a number";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "write a number", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a number");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      mockPrintStream0.println((Object) "write a number");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (-1295), true);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumberField("; line: ", 0);
  }
}
