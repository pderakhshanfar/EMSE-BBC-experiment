/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 09:51:41 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.URI;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(2229L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "write a boolean value";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byte byte0 = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 7980, true);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocReadIOBuffer(9);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 10, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      String string0 = "Too few bytes available: missing ";
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(775, (-1938));
      uTF8JsonGenerator1._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("G:yL");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN02+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN02+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN02+{t|#2u");
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN02+{t|#2u", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 35, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeObjectFieldStart("os2I;\"e");
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a null, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN02+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN02+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN02+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-168), (ObjectCodec) null, printStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumberField("", (float) 1);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.io.CharacterEscapes");
      SerializedString serializedString0 = new SerializedString("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeNumber((short) (-374));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) bufferedInputStream0, 3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      MockPrintStream mockPrintStream1 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "tyN0+{t|#2u");
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 3, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("tyN0+{t|#2u");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      iOContext1.allocReadIOBuffer();
      mockFileInputStream0.skip(0L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      BigDecimal bigDecimal0 = new BigDecimal((long) 57343);
      uTF8JsonGenerator0.writeNumber((BigDecimal) null);
      uTF8JsonGenerator0.writeNumber((long) 2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      iOContext1.allocReadIOBuffer();
      mockFileInputStream0.skip(0L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/8{cj/*08{cj/*");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "8{cj/*");
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeBinary((InputStream) mockFileInputStream0, 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 56320, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      MockPrintStream mockPrintStream1 = new MockPrintStream("tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeString("tyN0+{t|#2u");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("tyN0+{t|#2u");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("Generator of type ", "Generator of type ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, dataOutputStream0, byteArray0, 2, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = "";
      // Undeclared exception!
      uTF8JsonGenerator0._writePPFieldName("Generator of type ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[5];
      int int0 = 0;
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-1240));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 15);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 10 bytes (out of 15)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Op3<rTnxm_OpndA.H]", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, objectOutputStream0, byteArray0, 494, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN02+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN02+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN02+{t|#2u");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[7] = (byte)0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2203), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeString("f.+");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
//      try { 
        uTF8JsonGenerator0._writePPFieldName(";f%'EAuu^@xb9");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "BRFJxq", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0);
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = 'I';
      charArray0[2] = 'r';
      charArray0[3] = '+';
      charArray0[4] = '9';
      charArray0[5] = '';
      charArray0[6] = '6';
      charArray0[7] = 'y';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 115);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2%");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2%");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2%", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      StringWriter stringWriter0 = new StringWriter(1237);
      uTF8JsonGenerator0.writeStartObject();
      jsonGenerator0.close();
      BigDecimal bigDecimal0 = new BigDecimal((-789L));
//      try { 
        jsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, printStream0, byteArray0, 121, true);
      uTF8JsonGenerator0.writeNumberField("", 3349.7856F);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeRaw("tyN0+{t|#2u");
      uTF8JsonGenerator0.writeString("");
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN02+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN02+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN02+{t|#2u");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[7] = (byte)0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)93, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.writeNumber((-1L));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3, 1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-33);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw("%N\"NEALus)csU ");
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.writeUnquotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeFieldName("%N\"NEALus)csU ");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._verifyValueWrite("%N\"NEALus)csU ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, printStream0, byteArray0, 121, false);
      uTF8JsonGenerator0.writeNumberField("", 3349.7856F);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRaw('\u008D');
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hargXn0[/+;~}c6^nd:");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      BigDecimal bigDecimal0 = new BigDecimal((long) 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN02+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN02+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN02+{t|#2u");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = new SerializedString("h");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 467, true);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN02+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN02+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN02+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN02+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN02+{t|#2u");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 56320, (ObjectCodec) null, pipedOutputStream0, byteArray0, 3486, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tyN0+{t|#2u");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      byte[] byteArray0 = new byte[8];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-616), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeBoolean(true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator1._writePPFieldName("");
//      try { 
        uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2%";
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2%");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2%");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2%", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "tyN0+{t|#2%", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, (-3272), false);
      jsonGenerator0.writeNumber(1L);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber(bigInteger0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3272
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      StringReader stringReader0 = new StringReader("lWh");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = '`';
      charArray0[2] = 'm';
      charArray0[3] = '?';
      charArray0[4] = '(';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, (-1037));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "8{cj/*", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8{cj/*", true);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.flush();
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-911), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((-1L));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0._verifyValueWrite("8{cj/*");
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(1.0F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      byte[] byteArray0 = new byte[13];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, false);
      uTF8JsonGenerator0.writeString("tyN0+{t|#2u");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      serializedString0.asUnquotedUTF8();
      uTF8JsonGenerator0.writeStartObject((Object) serializedString0);
      SerializedString serializedString1 = new SerializedString("tyN0+{t|#2u");
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte) (-73);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0._verifyValueWrite("tyN0+{t|#2u");
      uTF8JsonGenerator0.writeRaw("EQ&@r*6[6W");
      char[] charArray0 = new char[3];
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0._characterEscapes;
      uTF8JsonGenerator0._characterEscapes = null;
      charArray0[0] = 'D';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte) (-73);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0._verifyValueWrite("tyN0+{t|#2u");
      uTF8JsonGenerator0.writeRaw("EQ&@r*6[6W");
      char[] charArray0 = new char[3];
      charArray0[2] = 'D';
      uTF8JsonGenerator0.writeString(charArray0, 0, 2);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8000, (ObjectCodec) null, objectOutputStream0, byteArray0, 240, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("9z8y))t{iD^H");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      mockPrintStream0.println((double) 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeString("m$/N");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 0);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.close();
      String string0 = "No native support for writing Object Ids";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeBoolean(true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(2229L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "write a boolean value";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 121, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(2229L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "write a boolean value";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("write a boolean value", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 121, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeStartArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeString("");
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeStringField("", (String) null);
      int int0 = 2120;
      uTF8JsonGenerator0.writeString(charArray0, 2120, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      byte[] byteArray0 = new byte[13];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.filterStartObject();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, false);
      filteringGeneratorDelegate0.overrideStdFeatures(11, 0);
      filteringGeneratorDelegate0.writeNumber((-1602));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      MockPrintStream mockPrintStream1 = new MockPrintStream("tyN0+{t|#2u");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      char[] charArray0 = iOContext0.allocTokenBuffer();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream2.format("tyN0+{t|#2u", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-125), (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 3);
      uTF8JsonGenerator0.getOutputBuffered();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeString("tyN0+{t|#2u");
      uTF8JsonGenerator0.writeString(charArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1882, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1463), true);
      uTF8JsonGenerator0.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      iOContext0.allocReadIOBuffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      byte[] byteArray1 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray1, 643, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeString("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 1483, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M.a");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(116);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2392, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 57343, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("M.a");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeObjectFieldStart("tyN0+{t|#2u");
//      try { 
        uTF8JsonGenerator0.writeNumber(2111L);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeStartArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeFieldName("Can not ");
      uTF8JsonGenerator0.writeNumber((short)703);
      uTF8JsonGenerator0.writeRaw('Y');
//      try { 
        uTF8JsonGenerator0._writePPFieldName("tyN0+{t|#2u");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-71);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0._verifyValueWrite("tyN0+{t|#2u");
      uTF8JsonGenerator0.writeRaw("EQ&@r*6[6W");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, printStream0, byteArray0, 102, true);
      uTF8JsonGenerator0.writeNumberField("", 0.0F);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      SerializedString serializedString1 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0, byteArray0, 102, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-7);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(923);
      uTF8JsonGenerator0.writeRaw("%N\"NEALus)csU ");
      uTF8JsonGenerator0.writeFieldName("%N\"NEALus)csU ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      int int0 = GeneratorBase.SURR1_LAST;
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1133), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeFieldName("_GO|}g)zP{");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeFieldName("8{cj/*");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeNumberField("", 0.0F);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRaw('');
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeFieldName("Can not ");
      uTF8JsonGenerator0.writeNumber((short)703);
      uTF8JsonGenerator0.writeRaw('T');
//      try { 
        uTF8JsonGenerator0._writePPFieldName("tyN0+{t|#2u");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2785, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((short)255);
      uTF8JsonGenerator0.writeStartArray();
      String string0 = "4";
      uTF8JsonGenerator0.writeRawValue("4");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      uTF8JsonGenerator1.writeStartObject((Object) pipedOutputStream0);
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 57343);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
//      try { 
        uTF8JsonGenerator1.writeString("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeBinaryField("w-)z4*K!>N\"", byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      SerializedString serializedString1 = new SerializedString("w-)z4*K!>N\"");
      uTF8JsonGenerator0.writeNull();
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString3 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString3);
      uTF8JsonGenerator0.flush();
      System.setCurrentTimeMillis(5509L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeFieldName("Can not ");
      uTF8JsonGenerator0.writeNumber((short)703);
      uTF8JsonGenerator0.writeRaw('Y');
//      try { 
        uTF8JsonGenerator0._writePPFieldName("tyN0+{t|#2u");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile mockFile0 = new MockFile("8{cj/*", "8{cj/*");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("8{cj/*");
      mockPrintStream0.append((CharSequence) "8{cj/*");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 1986, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName(", expecting field name");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 2517;
      iOContext1.allocNameCopyBuffer(2517);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 111, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN02+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN02+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN02+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[7] = (byte)0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1217), (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeString("<U$3/7b'0Bx?! m&f-]");
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '\\';
      charArray0[2] = '*';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 1041);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      MockPrintStream mockPrintStream1 = new MockPrintStream("tyN0+{t|#2u");
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)69;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 13, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3955, (byte)63);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "8{cj/*", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8{cj/*", true);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.flush();
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-911), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((-1L));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 101, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ObjectCodec objectCodec0 = null;
      String string0 = "qaD5;TN\"2B";
      MockPrintStream mockPrintStream0 = new MockPrintStream("qaD5;TN\"2B");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "qaD5;TN\"2B");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, printStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-67));
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((-94));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)20;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)20, (ObjectCodec) null, (OutputStream) null, byteArray0, (-181), false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -181
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 61);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SP5>QmJt~r");
      mockPrintStream0.append((CharSequence) "SP5>QmJt~r");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      int int0 = GeneratorBase.SURR2_LAST;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 57343, (-3));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeNumberField("", 0.0F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 102);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeStartArray();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeString("");
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeString(charArray0, 2120, 0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", (String) null, false, 'd', 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale.forLanguageTag("S;\"w|,_");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)8;
      uTF8JsonGenerator0._outputBuffer = byteArray0;
      uTF8JsonGenerator0.writeNull();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("S;\"w|,_");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2433), (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((long) 102);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.abs();
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigInteger1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2785, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((short)255);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue("4");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 57343);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator1.writeString("");
      uTF8JsonGenerator0.writeString("4");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-9);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeNumberField("", 0.0F);
      uTF8JsonGenerator0.writeString("tyN0+{t|#2u");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString1);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 30, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      int int0 = (-2430);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)18;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 57, (ObjectCodec) null, (OutputStream) null, byteArray0, 1060, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8{cj/*", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-911), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((-1L));
      String string0 = "";
      uTF8JsonGenerator0.writeNumber(0L);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.abs();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1000, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-71);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeBinaryField("w-)z4*K!>N\"", byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-71);
      byteArray1[4] = (byte) (-71);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-71);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray1, 1000000, (byte)0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      int int0 = (-1125);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, printStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((long) 3);
      String string1 = "dBJAAW^Kh[W`R";
      uTF8JsonGenerator0.writeBinaryField("dBJAAW^Kh[W`R", byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-5204), 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -5204
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 58, 1024, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "UTF-32LE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3125, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)11;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string1 = "";
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 92, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)11, false);
      String string2 = " bytes (out of ";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumberField(" bytes (out of ", (float) 92);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeNumberField("", 0.0F);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      SerializedString serializedString1 = new SerializedString("");
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 102);
      SerializedString serializedString2 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      uTF8JsonGenerator0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte)87;
      byteArray1[5] = (byte)101;
      byteArray1[6] = (byte)108;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, bufferedInputStream0, byteArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-71);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0._verifyValueWrite("tyN0+{t|#2u");
      uTF8JsonGenerator0.writeRaw("EQ&@r*6[6W");
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      uTF8JsonGenerator0.writeString("l#jM'uv P|tZ$E");
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hClW/J9ZG");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 428.510524;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      uTF8JsonGenerator0.writeArray(doubleArray0, 1, 2);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X)+qIQb'bk(-\"ivq)", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeNumber(732L);
      uTF8JsonGenerator0.writeBinaryField("w-)z4*K!>N\"", byteArray0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)101, 3);
      SerializedString serializedString0 = new SerializedString("7Gy^V}y}\"IN3t7 5_*x");
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream(88);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = "\\vdbRWI(mE;PBps=Y\\1g";
      Locale locale0 = Locale.forLanguageTag(" $FIzb9V8^vB\"q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" $FIzb9V8^vB\"q");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      mockPrintStream0.print((long) 3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, mockPrintStream0, byteArray0, 12, true);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 61);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SP5>QmJt~r");
      mockPrintStream0.append((CharSequence) "SP5>QmJt~r");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mE;PBps=Y\u0001g");
      Object[] objectArray0 = new Object[10];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("vdbRWI(mE;PBps=Y\u0001g");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      mockPrintStream0.print((long) 2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
      mockPrintStream0.println(object0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 61);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SP5>QmJt~r");
      mockPrintStream0.append((CharSequence) "SP5>QmJt~r");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 55296);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 55290 bytes (out of 55296)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2433), (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeString("");
      printStream0.println(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0._verifyValueWrite("tyN0+{t|#2u");
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, (int) (byte)117);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "8{cj/*", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8{cj/*", true);
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.flush();
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-911), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((-1L));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("8{cj/*");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 61);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SP5>QmJt~r");
      mockPrintStream0.append((CharSequence) "SP5>QmJt~r");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, (-1659));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8{cj/*", true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)101;
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte) (-21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-911), (ObjectCodec) null, mockFileOutputStream0, byteArray1, 123, true);
      uTF8JsonGenerator0.writeNumber((-1L));
      String string0 = "";
      // Undeclared exception!
      uTF8JsonGenerator0.writeBinaryField("8{cj/*", byteArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      iOContext2.allocNameCopyBuffer(0);
      IOContext iOContext3 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 1, (ObjectCodec) null, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      StringWriter stringWriter0 = new StringWriter(91);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCodec();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 5071, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRawValue("`~^;6rBr9nccQl7");
      BigInteger bigInteger0 = BigInteger.TEN;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2788, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((short)255);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeRawValue("4");
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeFieldName("4");
      uTF8JsonGenerator0.writeNumber((short) (-32768));
      uTF8JsonGenerator0.writeRaw('m');
//      try { 
        uTF8JsonGenerator0._writePPFieldName("4");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2%", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2%");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2%");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      char[] charArray0 = iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) (byte)0);
      uTF8JsonGenerator0.writeString(charArray0, 121, 2691);
      uTF8JsonGenerator0.getOutputBuffered();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0._verifyPrettyValueWrite("", (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2%", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2%");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2%");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      iOContext0.allocTokenBuffer();
      byteArray0[3] = (byte)0;
      iOContext0.allocNameCopyBuffer(91);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2%", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 41, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2%");
      StringWriter stringWriter0 = new StringWriter(1237);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRawValue("tyN0+{t|#2%");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      BigInteger bigInteger0 = BigInteger.TEN;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      jsonGenerator0.writeNumberField("", bigDecimal0);
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      String string0 = "8{cj/*";
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocReadIOBuffer();
      mockFileInputStream0.skip(0L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      byteArrayBuilder0.appendThreeBytes(2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/8{cj/*08{cj/*");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "8{cj/*");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 21, 3);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 743);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 737 bytes (out of 743)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-575), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((long) 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      uTF8JsonGenerator0.writeBinaryField("Operation not supported by generator of type ", byteArray0);
      int int0 = (-3116);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-3116), (-3116));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      iOContext1.allocTokenBuffer(11);
      uTF8JsonGenerator0.writeNumber((double) 2);
      StringWriter stringWriter0 = new StringWriter(2000);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRawValue("write a number");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      BigInteger bigInteger0 = BigInteger.TEN;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      uTF8JsonGenerator0.writeNumberField("", bigDecimal0);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 61);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SP5>QmJt~r");
      mockPrintStream0.append((CharSequence) "SP5>QmJt~r");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 722, 1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-61));
//      try { 
        uTF8JsonGenerator0._writePPFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 263);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      ObjectCodec objectCodec0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[NG9-a~O{4+H");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]1#FG", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("]1#FG");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "]1#FG");
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = "iiy,`aTFq!T=?BKC";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iiy,`aTFq!T=?BKC");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-441), (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 224, 262144);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-441), (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-85);
      int int0 = 255;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 255, true);
      uTF8JsonGenerator0.writeNumber((long) 2);
      uTF8JsonGenerator0.writeStartArray();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M.a");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-750), (ObjectCodec) null, objectOutputStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.writeString((String) null);
      char[] charArray0 = new char[2];
      charArray0[1] = '~';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 536870910);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      pipedInputStream0.close();
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mE;PBps=Y\u0001g");
      Object[] objectArray0 = new Object[10];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("vdbRWI(mE;PBps=Y\u0001g");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      mockPrintStream0.print((long) 2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0._releaseBuffers();
      mockPrintStream0.println(object0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("?^>5&pAqQ6#V;.");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hClW/J9ZG");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("/'?$4WukmR");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 61);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SP5>QmJt~r");
      mockPrintStream0.append((CharSequence) "SP5>QmJt~r");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      uTF8JsonGenerator0.writeNumber((-1694));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-633), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("DOMay4xa");
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeRaw('D');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("=bhby8QG", 21);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("write a binary value");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '+';
      charArray0[2] = 'G';
      charArray0[3] = 'R';
      charArray0[4] = 'O';
      charArray0[5] = '(';
      charArray0[6] = 'H';
      charArray0[7] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 65535, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2520), 0, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 43, (ObjectCodec) null, mockPrintStream0, byteArray0, 33, true);
      BigDecimal bigDecimal0 = new BigDecimal(6582L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-6408);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(readerBasedJsonParser0, readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-6408), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-804), true);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -804
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short)2485);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 51;
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 51);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = "Operation not supported by generator of type ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      mockPrintStream0.println((double) 2);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (-2374), true);
      uTF8JsonGenerator0.flush();
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hClW/J9ZG");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputBuffered();
      StringWriter stringWriter0 = new StringWriter(35);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.getOutputBuffered();
      iOContext0.setEncoding(jsonEncoding0);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("Operation not supported by generator of type ");
      uTF8JsonGenerator0.writeNumber(8);
//      try { 
        uTF8JsonGenerator0.writeFieldName("Operation not supported by generator of type ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]1#FG", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("]1#FG");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "]1#FG");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[3] = (byte)0;
      String string0 = "iiy,`aTFq!T=?BKC";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iiy,`aTFq!T=?BKC");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-441), (ObjectCodec) null, printStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, 224, 262144);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      int int0 = (-1125);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, printStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((long) 3);
      String string1 = "dBJAAW^Krh[W`R";
      uTF8JsonGenerator0.writeBinaryField("dBJAAW^Krh[W`R", byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-5204), 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -5204
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = new Locale("Operation not supported by generator of type ", "Operation not supported by generator of type ", "Operation not supported by generator of type ");
      Object[] objectArray0 = new Object[12];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Operation not supported by generator of type ", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      short short0 = (short)1944;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)1944);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      String string0 = "rm$C2k";
      uTF8JsonGenerator0.writeString("rm$C2k");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 0);
      printStream0.println(false);
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)93, true);
      uTF8JsonGenerator0.writeNumber((long) 1);
      uTF8JsonGenerator0.writeBinaryField("tyN0+{t|#2u", byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-5204), (byte)0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      uTF8JsonGenerator0.writeString("tyN0+{t|#2u");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      StringWriter stringWriter0 = new StringWriter(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 57343, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 1490);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      int int0 = (-1125);
      iOContext0.allocNameCopyBuffer(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-2876), (ObjectCodec) null, printStream0, byteArray0, 12, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      uTF8JsonGenerator0.writeBinary(byteArray0, 1, (-1938));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      String string0 = "8{cj/*";
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocReadIOBuffer();
      mockFileInputStream0.skip(1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/8{cj/*08{cj/*");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Can not ");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 21, 3);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 743);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 736 bytes (out of 743)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2788, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((short)255);
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1._flushBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0._charBuffer = charArray0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8JsonGenerator0.writeNumber((short)55);
      uTF8JsonGenerator1.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeNumber("><5rAt2");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-71);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeNumber((double) 2);
      uTF8JsonGenerator0._verifyValueWrite("tyN0+{t|#2u");
      uTF8JsonGenerator0.writeRaw("EQ&@r*6[6W");
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[1] = '%';
      uTF8JsonGenerator0.writeNumber((short) (byte)52);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("%qiL6!:LNpa]V2$V7");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2%", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2%");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2%");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      iOContext0.allocNameCopyBuffer(91);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2%", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      StringWriter stringWriter0 = new StringWriter(1237);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRawValue("tyN0+{t|#2%");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      BigInteger bigInteger0 = BigInteger.TEN;
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2433), (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0.writeString((String) null);
      char[] charArray0 = new char[5];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, (int) (byte)117);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 2);
      char[] charArray0 = new char[2];
      char char0 = 'K';
      charArray0[0] = 'K';
      uTF8JsonGenerator0.writeString(charArray0, 2788, (-95));
      uTF8JsonGenerator0.getOutputBuffered();
      String string0 = "name";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue(charArray0, 3, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-3297), (ObjectCodec) null, (OutputStream) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte)0);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
//      try { 
        jsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 2);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (-1037), (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeStartArray();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", true);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext1.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      uTF8JsonGenerator0.writeString("tyN0+{t|#2u");
      BigInteger bigInteger0 = BigInteger.ZERO;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2177, (ObjectCodec) null, pipedOutputStream0);
      uTF8JsonGenerator1.writeNumber(bigInteger0);
      uTF8JsonGenerator1.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2%", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2%");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2%");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      iOContext0.allocNameCopyBuffer(91);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2%", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 41, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      StringWriter stringWriter0 = new StringWriter(1237);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRawValue("tyN0+{t|#2%");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      BigInteger bigInteger0 = BigInteger.TEN;
      MathContext mathContext0 = MathContext.DECIMAL64;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      jsonGenerator0.writeNumberField("", bigDecimal0);
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocNameCopyBuffer(13);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-3297), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      uTF8JsonGenerator0.writeBinary(byteArray0, 2, 3);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._writePPFieldName(serializedString1);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (byte)0);
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-34);
      byte byte0 = (byte)56;
      byteArray0[5] = (byte)56;
      iOContext1.allocNameCopyBuffer((-2529));
      byteArray0[6] = (byte) (-128);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byteArray0[7] = (byte)0;
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeBinary(byteArray0, 38, 58);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 38
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0, byteArray0, 472, false);
      uTF8JsonGenerator0.writeString("s\"fk");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 23, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 23
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      boolean boolean1 = false;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)5;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray1, 4116, false);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = true;
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("rm$C2k");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1947, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 61);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SP5>QmJt~r");
      mockPrintStream0.append((CharSequence) "SP5>QmJt~r");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, 722, 1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(32);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      mockFileInputStream0.skip(0L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1921), (ObjectCodec) null, byteArrayBuilder0, byteArray0, 743, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      mockPrintStream0.println(true);
      SerializedString serializedString0 = new SerializedString("8{cj/*");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps=Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps=Y\u0001g", objectArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 13, (ObjectCodec) null, printStream0, byteArray0, 1, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("?^>5&pAqQ6#V;.");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 61);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("SP5>QmJt~r");
      mockPrintStream0.append((CharSequence) "SP5>QmJt~r");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 7, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short) (-1));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext0.allocTokenBuffer();
      int int0 = 2788;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      uTF8JsonGenerator0.writeString(charArray0, 2788, (-95));
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hClW/J9ZG");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.close();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-2617), (ObjectCodec) null, stringWriter0);
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2788, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((short)255);
      uTF8JsonGenerator0.writeStartArray();
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator1._flushBuffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0._charBuffer = charArray0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      uTF8JsonGenerator1.writeString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 119);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2433), (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      uTF8JsonGenerator0.writeString((String) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, (int) (byte)34);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("\"l65GQTMD~4-ne3;}", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      bufferRecycler0.allocByteBuffer(3, 3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-4", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNull();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-71);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeNumber(2111L);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeNumber((short)703);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte) (-21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1373, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1735, true);
//      try { 
        uTF8JsonGenerator0.writeNumber((-1L));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, (-1125), false);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = true;
      boolean boolean2 = false;
      String string1 = "rm$C2k";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("rm$C2k");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1125
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2433), (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeString("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)3420);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 56319, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Nm");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 100, (byte)76);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      int int0 = 3955;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext1.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber((short)1854);
      uTF8JsonGenerator0.writeRaw('D');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("2Lp]l6NN>  oy", 2177);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2433), (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeString("");
      String string0 = "Can not ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-1420), 12);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 50, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 50);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Too few bytes available: missing ");
      char[] charArray1 = new char[3];
      charArray1[0] = 'm';
      charArray1[1] = 'm';
      charArray1[2] = '~';
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      uTF8JsonGenerator0.writeString("rm$C2k");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, 0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1944);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)1944);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      char[] charArray0 = new char[0];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4376, (ObjectCodec) null, (OutputStream) null, byteArray0, (-2785), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('^');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2785
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(Double.NaN);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 0, 1000000014);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) tokenFilter0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)43;
      SerializedString serializedString0 = new SerializedString("vdbRWI(mEBps='Y\u0001g");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 927, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0._writePPFieldName("vdbRWI(mEBps='Y\u0001g");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Locale locale0 = Locale.GERMANY;
      locale0.getScript();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-97);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 121, (ObjectCodec) null, (OutputStream) null, byteArray0, 2353, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      int int0 = (-1125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 107, 18);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocReadIOBuffer();
      mockFileInputStream0.skip(0L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/8{cj/*08{cj/*");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Can not ");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 21, 3);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeBinary((InputStream) mockFileInputStream0, 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1._verifyPrettyValueWrite("Can not write a field name, expecting a value", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeString(charArray0, 0, 11);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-55), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      uTF8JsonGenerator0.writeBoolean(false);
//      try { 
        uTF8JsonGenerator0._outputSurrogates((-1125), 696);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xfffffb9b, second 0x2b8
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      File file0 = MockFile.createTempFile("8{Cj/*", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("|_ayS|3ik~1>C@f~/.");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '&';
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("HY\"K");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.configure(jsonGenerator_Feature0, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 121, (ObjectCodec) null, mockFileOutputStream0);
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2433), (ObjectCodec) null, printStream0, byteArray0, 102, false);
      uTF8JsonGenerator0.writeString("");
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (-1968), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      iOContext0.allocTokenBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator1.writeNumber(0.0);
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
//      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 158, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null, byteArray0, 48, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hClW/J9ZG");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-1);
      byte byte0 = (byte) (-15);
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte)54;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2782), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("hClW/J9ZG");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2782
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      uTF8JsonGenerator0.writeString("rm$C2k");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      StringWriter stringWriter0 = new StringWriter(573);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "VdP:c>!\".N";
      writerBasedJsonGenerator0.writeRawValue("VdP:c>!\".N");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
//      try { 
        uTF8JsonGenerator0.writeNumber(56320);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      uTF8JsonGenerator0.writeString("rm$C2k");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      StringWriter stringWriter0 = new StringWriter(573);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRawValue("VdP:c>!\".N");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
//      try { 
        uTF8JsonGenerator0.writeNumber(56320);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeString(charArray0, 0, 11);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString(charArray0, 2, 2);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("Operation not supported by generator of type ");
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("fXuU$e64#N");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "fXuU$e64#N");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber(1L);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1944);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.close();
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = '5';
      charArray0[2] = 'Q';
      uTF8JsonGenerator0.writeRaw(charArray0, 2897, (-866));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      char[] charArray0 = WriterBasedJsonGenerator.HEX_CHARS;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of tpe ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeString(charArray0, 0, 11);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeBoolean(true);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-68), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 56320);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 263);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hargXn0[/+;~}c6^nd:");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      File file0 = MockFile.createTempFile("8{Cj/*", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("|_ayS|3ik~1>C@f~/.");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '&';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 116, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2097, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw("WN*[{", 512, (-3));
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      iOContext1.allocBase64Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding2);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(57343);
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '\"';
      charArray0[2] = 'X';
      charArray0[3] = 't';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3942, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 94, (ObjectCodec) null, printStream0, byteArray0, 11, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = '';
      charArray0[2] = 's';
      charArray0[3] = '';
      charArray0[4] = 'U';
      charArray0[5] = 'e';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator1.writeRaw(charArray0, 94, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 94
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      uTF8JsonGenerator0.writeNumber((-1060L));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeQuotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)16960);
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1034, (int) (short)16960);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1034
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.core.json.UTF8JsonGenerator", "/QL#6![wxFx<v");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-26);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, objectOutputStream0, byteArray0, (byte) (-2), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      StringWriter stringWriter0 = new StringWriter(573);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext2, 1, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      String string0 = "VdP:c>!\".N";
      writerBasedJsonGenerator0.writeRawValue("VdP:c>!\".N");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
//      try { 
        uTF8JsonGenerator0.writeNumber(56320);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      iOContext0.allocNameCopyBuffer(91);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 41, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      StringWriter stringWriter0 = new StringWriter(1237);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRawValue("tyN0+{t|#2u");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an array, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("fXuU$e64#N");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "fXuU$e64#N");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber(1L);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      short short0 = (short)1944;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeElement((byte)0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, true);
//      try { 
        filteringGeneratorDelegate0.writeNullField("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      String string0 = "8{cj/*";
      File file0 = MockFile.createTempFile("8{cj/*", "8{cj/*");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "8{cj/*", true);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocReadIOBuffer();
      mockFileInputStream0.skip(0L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 21);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/8{cj/*08{cj/*");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Can not ");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 21, 3);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 743);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 735 bytes (out of 743)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Operation not supported by generator of type ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeString(charArray0, 0, 11);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._verifyPrettyValueWrite("4+q/(N4fD}i]", 0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-[)");
      Locale locale0 = Locale.JAPANESE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale1 = Locale.forLanguageTag("Operation not supported by generator of type ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) evoSuiteFile0;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) evoSuiteFile0;
      objectArray0[4] = (Object) byteQuadsCanonicalizer0;
      mockPrintStream1.printf(locale1, "?m?,*sJ}S2WCB}.\"", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(byteArrayOutputStream0);
      SerializedString serializedString0 = new SerializedString(" (from ");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      iOContext1.allocBase64Buffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (int) (byte)43);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      StringReader stringReader0 = new StringReader("tyN0+{t|#2u");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      int int0 = 1;
      boolean boolean0 = false;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1567), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 1, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1567), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("VALUE_STRING", 0, 92);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("HwLvF,{@cGQ(a");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = 'I';
      charArray0[2] = '(';
      charArray0[3] = 'W';
      charArray0[4] = 'y';
      charArray0[5] = '&';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 325, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1567), 1803, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2236), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw("AUTO_CLOSE_SOURCE", (-2236), (-2076));
      BigInteger bigInteger0 = BigInteger.ZERO;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 49, (ObjectCodec) null, pipedOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, (-546));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      mockPrintStream1.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1504, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("tyN0+{t|#2u");
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter1, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 89, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.getOutputTarget();
      byte byte0 = (byte)0;
      uTF8JsonGenerator1.writeNumber(0L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 887);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      File file0 = MockFile.createTempFile("8{cj/*", "");
      iOContext0.allocBase64Buffer();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      byte[] byteArray0 = ByteArrayBuilder.NO_BYTES;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 1006);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 743, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeNumber((long) 0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) mockFileInputStream0, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 1 bytes (out of 1)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocReadIOBuffer(60);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      byteArrayBuilder0.completeAndCoalesce(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((-86.57719650317));
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '*';
      charArray0[2] = '2';
      charArray0[3] = 'e';
      charArray0[4] = 'm';
      charArray0[5] = 'N';
      charArray0[6] = 'y';
      uTF8JsonGenerator0.writeString(charArray0, 120, (-82));
      uTF8JsonGenerator0.writeNumber((-82));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("");
      Locale locale1 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "vdbRWI(mEBps='Y\u0001g";
      objectArray0[2] = (Object) jsonEncoding0;
      objectArray0[3] = (Object) "fXuU$e64#N";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "Operation not supported by generator of type ", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-22);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0, byteArray0, (-739), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -739
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)110;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)0;
      uTF8JsonGenerator0.writeNumber((-1060L));
      uTF8JsonGenerator0.writeUTF8String(byteArray1, 3, (byte)0);
      SerializedString serializedString0 = new SerializedString("tyN0+{t|#2u");
      serializedString0.writeQuotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      uTF8JsonGenerator0.writeString(charArray0, 2788, (-95));
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("name", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-68), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      iOContext2.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("Generator of type ", 0);
      uTF8JsonGenerator0.writeNumber(12);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Generator of type ");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 5, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 123, (ObjectCodec) null, printStream0, byteArray0, 4, false);
      uTF8JsonGenerator0.writeNumber((long) 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 2, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      iOContext0.allocNameCopyBuffer(91);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 41, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      int int0 = 1237;
      StringWriter stringWriter0 = new StringWriter(1237);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 56320, (ObjectCodec) null, stringWriter0);
      uTF8JsonGenerator0.writeStartObject();
      writerBasedJsonGenerator0.writeRawValue("tyN0+{t|#2u");
      SerializableString serializableString0 = writerBasedJsonGenerator0._currentEscape;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale.forLanguageTag("S;\"w|,_");
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3454, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName("S;\"w|,_");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      char[] charArray0 = new char[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Too few bytes available: missing ");
      uTF8JsonGenerator0.writeString("0lx.^MvzOP66),!\"");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 117, 1337);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 117
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = '7';
      uTF8JsonGenerator0.writeRaw(charArray0, 60, (int) (byte)0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 887, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)86;
      byte byte0 = (byte)55;
      byteArray0[3] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1000000000, (byte)55);
      IOContext iOContext3 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      iOContext3.allocReadIOBuffer(92);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayBuilder0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 42);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 42 bytes (out of 42)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("tyN0+{t|#2u");
      Locale locale0 = Locale.forLanguageTag("Ke=[}_||<6cx u");
      String string0 = "\n";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "vdbRWI(mEBps='Y\u0001g";
      objectArray0[1] = (Object) printStream0;
      objectArray0[2] = (Object) "Ke=[}_||<6cx u";
      PrintStream printStream1 = mockPrintStream0.printf(locale0, "\n", objectArray0);
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber(0.0F);
      SerializedString serializedString1 = new SerializedString("W,;-<Dz@SE<{gNMpgR");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      Base64Variant base64Variant0 = null;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext3.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 0, (ObjectCodec) null, mockFileOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((double) 2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = '`';
      uTF8JsonGenerator0.writeString(charArray0, 2788, (-95));
      uTF8JsonGenerator0.getOutputBuffered();
      StringWriter stringWriter0 = new StringWriter(224);
      StringWriter stringWriter1 = stringWriter0.append('K');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = null;
//      try {
        writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 590, (ObjectCodec) null, stringWriter1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)43, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)16960);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1163);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("nXu]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '!';
      charArray0[2] = 'F';
      charArray0[3] = '*';
      charArray0[4] = '_';
      charArray0[5] = 'Y';
      charArray0[6] = '7';
      charArray0[7] = 'q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-339), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 34, (-339), true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, true, true);
      filteringParserDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 34, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1096), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(703);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1096
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(9.223372036854776E18);
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '.';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 703, 2047);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 703
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) tokenFilter0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)43;
      locale0.getScript();
      byteArray0[7] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0, byteArray0, (byte)43, true);
      uTF8JsonGenerator0.writeNumber(0.0);
      uTF8JsonGenerator0.writeNumber(0L);
      uTF8JsonGenerator0.writeFieldName("7ZDDlY7Np)\"");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("fXuU$e64#N");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "fXuU$e64#N");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext0 = new IOContext(bufferRecycler0, printStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag(")");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, ")", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, true);
      SerializedString serializedString0 = new SerializedString(")");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      printStream0.write(byteArray0, 10, 127);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (-1108));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2788, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((-86.57719650317));
      char[] charArray0 = new char[0];
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("p]l6NN>  oy", 2177);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 117, 1337);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 117
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext1.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      uTF8JsonGenerator0.writeNumber((short)1854);
      uTF8JsonGenerator0.writeRaw('D');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("p]l6NN>  oy", 2177);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-71);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeBoolean(false);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "write a binary value";
      int int0 = 1559;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1559, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("write a binary value");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      mockPrintStream0.println((Object) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      uTF8JsonGenerator0.writeNumber((-1060L));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeQuotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)16960);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputBuffered();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[4] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 15);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 2);
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockFileOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(56319);
      uTF8JsonGenerator0.writeRaw("k{[jS0'OG");
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, (int) (byte)112);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      String string0 = "!X]h.EiS-6HDb ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("!X]h.EiS-6HDb ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, pipedOutputStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber((-1322L));
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 123, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = "Operation not supported by generator of type ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2048, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(0L);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("p]l6NN>  oy", 2177);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-55), (ObjectCodec) null, (OutputStream) null);
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = '7';
      charArray0[2] = '/';
      charArray0[3] = '.';
      charArray0[4] = '/';
      charArray0[5] = '/';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, 2);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, (OutputStream) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2788, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((-86.57719650317));
      char[] charArray0 = new char[0];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 156);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)43, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeNumber((float) 0);
      SerializedString serializedString1 = new SerializedString("!N64A");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (-1108));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("Generator of type ", "Generator of type ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      iOContext0.allocNameCopyBuffer((-634));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0, byteArray0, 91, false);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (-634));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)64;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2264), (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)42, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 2, 57343);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps=Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps=Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((-1.0));
      uTF8JsonGenerator0._verifyValueWrite("Sppq&hy<LdGW");
      uTF8JsonGenerator0.writeRaw("EQ&@r*6[6W");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-55), (ObjectCodec) null, (OutputStream) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      iOContext1.allocNameCopyBuffer(0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 795, 114);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("Generator of type ", "Generator of type ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-1);
      iOContext1.allocNameCopyBuffer(9);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)11, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 5310);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(9);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1652), (ObjectCodec) null, (OutputStream) null, byteArray0, (-3608), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocReadIOBuffer(9);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 10, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      String string0 = "Too few bytes available: missing ";
      uTF8JsonGenerator0.overrideStdFeatures(775, (-1938));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("G:yL");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocReadIOBuffer(9);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 743);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) null, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocReadIOBuffer(9);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 10, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeNumber((short) (-398));
      uTF8JsonGenerator0.overrideStdFeatures(775, (-1938));
      uTF8JsonGenerator0.writeFieldName("Too few bytes available: missing ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 1954, 4037);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1125), (ObjectCodec) null, mockPrintStream0, byteArray0, 3955, false);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = '\'';
      charArray0[2] = 's';
      charArray0[3] = '7';
      charArray0[4] = '.';
      charArray0[5] = 's';
      charArray0[6] = '7';
      charArray0[7] = '.';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 1, 47);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      uTF8JsonGenerator0.writeNumber((-1060L));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeQuotedUTF8(mockPrintStream0);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)16960);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("fXuU$e64#N");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "fXuU$e64#N");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeNumber(1L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-98);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 3);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)1944);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short) (byte) (-98));
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-55), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      iOContext1.allocNameCopyBuffer(0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 795, 114);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegal white space character (code 0x");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)54;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 512, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1112, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-71);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-71);
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) "tyN0+{t|#2u";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) printStream0;
      objectArray0[5] = (Object) iOContext0;
      mockPrintStream0.printf(locale0, "g.\";7*\"0\\x", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1974), (ObjectCodec) null, printStream0);
      SerializedString serializedString1 = new SerializedString("tyN0+{t|#2u");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2788, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '\'';
      charArray0[2] = 'X';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 114, 3278);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 114
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 33, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, true);
      SerializedString serializedString0 = new SerializedString("vdbRWI(mEBps='Y\u0001g");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("tyN0+{t|#2u");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 1765, (ObjectCodec) null, (OutputStream) null, (byte[]) null, (-3780), false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      uTF8JsonGenerator0.writeNumber((-1060L));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.writeNumber((short)16960);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      uTF8JsonGenerator0.writeNumber((-1060L));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)43, (ObjectCodec) null, printStream0);
      SerializedString serializedString1 = new SerializedString("!N64A");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) pipedInputStream0, (-1108));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("!X]h.EiS-6HDb ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, (-33), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue("", 3, 224);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) tokenFilter0;
      mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)43;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1283), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      mockPrintStream0.write(byteArray0, (-2883), 3);
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)43, (ObjectCodec) null, printStream0);
      SerializedString serializedString1 = new SerializedString("!N64A");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '4';
      charArray0[2] = '{';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocReadIOBuffer(9);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 743);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3145, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      iOContext0.allocNameCopyBuffer(3);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 0, 0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 48, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "tyN0+{t|#2u";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-71);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)93, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.writeNumber((-1L));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (byte)117);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) tokenFilter0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, printStream0, byteArray0, (byte)43, true);
      uTF8JsonGenerator0.writeNumber(0.0);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("!X]h.EiS-6HDb ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 63, (ObjectCodec) null, mockPrintStream0, byteArray0, (-33), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartArray();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -33
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer((-865));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-55), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      uTF8JsonGenerator0.writeNumber((-1060L));
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, (byte)0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, printStream0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-69);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 117, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = iOContext0.allocReadIOBuffer(48);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, (-1080));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, byteArrayOutputStream0);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, (int) (byte)0);
      String string0 = "Can not write a field name, expecting a value";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, pipedOutputStream0, byteArray0, 55296, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-128);
      uTF8JsonGenerator0.writeNumber((long) (byte) (-34));
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3818, (byte)56);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3818
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-55), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      iOContext1.allocNameCopyBuffer(0);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T/'LhgjgrRH>buZ8V?");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-128);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray1, 512, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 192, 4000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-55), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte)0;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, byteArrayOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 18, 2056);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((-1.0));
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-39);
      uTF8JsonGenerator0.flush();
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Operation not supported by generator of type ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[7] = (Object) iOContext0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((double) 56320);
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2788, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber((-86.57719650317));
      assertEquals(22, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-34);
      byte byte0 = (byte)56;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)0;
      byte byte1 = (byte)0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        iOContext0.releaseConcatBuffer(charArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("hargXn0[");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      iOContext0.releaseTokenBuffer((char[]) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hargXn0[/+;~}c6^nd:", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((char[]) null, 1, 36);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-55), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (byte)0, 907);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)56;
      iOContext1.allocNameCopyBuffer((-2529));
      byteArray0[6] = (byte) (-128);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0._writePPFieldName(serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3818, (byte)56);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3818
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      iOContext0.allocReadIOBuffer(48);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      filteringGeneratorDelegate0.writeStartObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "T/'LhgjgrRH>buZ8V?";
      MockPrintStream mockPrintStream0 = new MockPrintStream("T/'LhgjgrRH>buZ8V?");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-530));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 8000, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 0, 5);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 116, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)56;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-3266), (byte)0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)43;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-258), 0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operation not supported by generator of type ");
      Locale locale0 = Locale.forLanguageTag("vdbRWI(mEBps='Y\u0001g");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) uTF8StreamJsonParser0;
      objectArray0[1] = (Object) uTF8StreamJsonParser0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) iOContext0;
      objectArray0[4] = (Object) pipedInputStream0;
      objectArray0[5] = (Object) bufferRecycler0;
      objectArray0[6] = (Object) tokenFilter0;
      objectArray0[7] = (Object) iOContext1;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "vdbRWI(mEBps='Y\u0001g", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1);
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) "CCi>D&+{QEw9";
      objectArray0[3] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "CCi>D&+{QEw9", objectArray0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, printStream0, byteArray0, 0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "tyN0+{t|#2u", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("tyN0+{t|#2u");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "tyN0+{t|#2u");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
      uTF8JsonGenerator0.getOutputTarget();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-39);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte) (-39), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      String string0 = "";
      Object[] objectArray0 = new Object[9];
      bufferedOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      objectArray0[0] = (Object) mockPrintStream0;
      uTF8JsonGenerator0.getCurrentValue();
      objectArray0[1] = null;
      objectArray0[2] = (Object) bufferedOutputStream0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) bufferedOutputStream0;
      objectArray0[5] = (Object) bufferedOutputStream0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) filteringGeneratorDelegate0;
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 3818, (byte)56);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3818
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "hargXn0[/+;~}c6^nd:";
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.releaseTokenBuffer((char[]) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hargXn0[/+;~}c6^nd:", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      int int0 = 0;
//      try { 
        uTF8JsonGenerator0._outputSurrogates(1, 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x1, second 0x0
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 56319, (byte)123);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, sequenceInputStream0, byteArray0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2529), true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2529
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArrayBuilder0.NO_BYTES, 2, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Current context not an ARRAY but ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("K?");
      char char0 = '\'';
      mockPrintStream0.println('\'');
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 477);
      byte[] byteArray0 = new byte[0];
      mockPrintStream0.println((float) 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 420, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 1000000000, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1000000000, 49);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) filterOutputStream0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2908, (ObjectCodec) null, bufferedOutputStream0);
      Object object1 = uTF8JsonGenerator0.getOutputTarget();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) bufferRecycler0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) bufferedOutputStream0;
      objectArray0[6] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, printStream0, byteArrayBuilder0.NO_BYTES, 2908, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 125);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      filteringGeneratorDelegate0.getCodec();
      filteringGeneratorDelegate0.writeStartObject();
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-55), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0._flushBuffer();
      String string0 = "Generator of type ";
      uTF8JsonGenerator0.writeFieldName("Generator of type ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      uTF8JsonGenerator0.writeBinary((InputStream) pipedInputStream0, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Can not write a field name, expecting a value", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "/", true);
      StringWriter stringWriter0 = new StringWriter(2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "/PMl7cet0yNP";
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "/PMl7cet0yNP", true);
      int int0 = 0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/PMl7cet0yNP", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("T/'LhgjgrRH>buZ8V?");
      PrintStream printStream0 = mockPrintStream0.append('J');
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byte byte1 = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 458, (ObjectCodec) null, printStream0, byteArray0, 192, true);
      uTF8JsonGenerator0.writeStartArray();
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("", (String) null, false, 'J', (-3));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNull();
      uTF8JsonGenerator0.writeNumber(0.0);
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
  }
}
