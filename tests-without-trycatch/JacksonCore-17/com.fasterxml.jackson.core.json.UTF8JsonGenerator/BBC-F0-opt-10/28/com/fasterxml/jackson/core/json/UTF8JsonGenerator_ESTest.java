/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 15:32:38 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8JsonGenerator_ESTest extends UTF8JsonGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[0] = (byte)95;
      SerializedString serializedString0 = new SerializedString("xdF6xU3[F>m ?");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1447);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 831, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-942), 3, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, pipedOutputStream0, byteArray0, 110, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 65599);
      OutputStream outputStream0 = null;
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 1 bytes (out of 1)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-90), (ObjectCodec) null, mockPrintStream0, byteArray0, 11, true);
      char[] charArray0 = new char[1];
      char char0 = '1';
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("Too few bytes available: missing ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, mockFileInputStream0, byteArray0, (-5184));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      String string0 = "L|^<fR/XAx^ FtIf";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1480, (-330));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-985), (ObjectCodec) null, (OutputStream) null);
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 763);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Too few bytes available: missing 763 bytes (out of 763)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray0, 1868, true);
      String string0 = "com.fasterxml.jackson.core.json.UTF8JsonGenerator";
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte) (-105);
      byteArray1[3] = (byte) (-105);
      byteArray1[4] = (byte) (-105);
      byteArray1[5] = (byte) (-105);
      byteArray1[6] = (byte) (-105);
      byteArray1[7] = (byte) (-105);
      byteArray1[8] = (byte) (-105);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-2866), 263);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((InputStream) byteArrayInputStream0, 1000);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Spill-over slots in symbol table with ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1744, (ObjectCodec) null, pipedOutputStream0, byteArray0, 33, true);
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("akB5kJ0vt6,F/8I`5");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 5362, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, true);
      String string0 = "V]nsKG^!/8Fjo";
//      try { 
        uTF8JsonGenerator0.writeRaw("V]nsKG^!/8Fjo");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("akB5kJ0vt6,F/8I`5");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1, true);
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1398, 240);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "oo few ytesvailable: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oo few ytesvailable: missing ");
      byte[] byteArray0 = new byte[1];
      iOContext0.allocWriteEncodingBuffer(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      mockPrintStream0.print(93.3538);
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeNumber("oo few ytesvailable: missing ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Trying to release buffer not owned by the context
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes aailable: missing ", false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes aailable: missing ");
      byte[] byteArray0 = new byte[15];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55, (ObjectCodec) null, mockPrintStream0, byteArray0, (-8), false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"+R)jt30!k", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2602, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      defaultPrettyPrinter0.writeArrayValueSeparator(jsonGenerator0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)32;
      doubleArray0[1] = (double) 56319;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 55296;
      doubleArray0[5] = 1.0;
      uTF8JsonGenerator0.writeArray(doubleArray0, 56319, (-3200));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes avalable missing ", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes avalable missing ");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeStartObject();
      mockPrintStream0.checkError();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[18];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2006), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, serializedString0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeUTF8String(byteArray0, 2, 55296);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 18
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("-4");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      filteringParserDelegate0.getCodec();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 58, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, (byte)60);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[12];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 53, (ObjectCodec) null, mockPrintStream0, byteArray0, 1472, false);
      uTF8JsonGenerator0.writeNumber("tEqa");
      uTF8JsonGenerator0.flush();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeNumber((float) 2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      char[] charArray0 = new char[5];
      charArray0[1] = 'T';
      charArray0[3] = 'T';
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-102), (ObjectCodec) null, mockPrintStream0, byteArray0, 2248, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeFieldName("=aNj.S0B\"Eru");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"+R)jt30!k", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      iOContext0.withEncoding(jsonEncoding0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"R)jt30!k");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 27, false);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (byte)63);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2006), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      defaultPrettyPrinter0.writeStartObject(uTF8JsonGenerator0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, serializedString0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeFieldName("-NxP<u=@k");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("Too few bytes available: missing ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 127, (ObjectCodec) null, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      defaultPrettyPrinter0.writeEndArray(jsonGenerator0, 14);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      defaultPrettyPrinter0.writeArrayValueSeparator(uTF8JsonGenerator0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[10];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2006), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, serializedString0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeFieldName("-NxP<u=@k");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too fewlbytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too fewlbytes available: missing ");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 91, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("^", (double) 1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"+R)jt30!k", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 73, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      defaultPrettyPrinter0.writeEndArray(uTF8JsonGenerator0, (byte) (-105));
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      defaultPrettyPrinter0.writeArrayValueSeparator(jsonGenerator0);
      uTF8JsonGenerator0.writeString((SerializableString) defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
      mockPrintStream0.checkError();
      uTF8JsonGenerator0._writePPFieldName(defaultPrettyPrinter1.DEFAULT_ROOT_VALUE_SEPARATOR);
//      try { 
        uTF8JsonGenerator0._outputSurrogates(1, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0x1, second 0x2
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too fewlbytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2363, (ObjectCodec) null, filterOutputStream0, byteArray0, 15, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too fewlbytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too fewlbytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 56, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = '!';
      charArray0[2] = '\"';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 2, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes avalable missing ", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes avalable missing ");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeStartObject();
      mockPrintStream0.checkError();
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '`';
      charArray0[2] = 'z';
      charArray0[3] = 'R';
      charArray0[4] = '';
      charArray0[5] = '!';
      charArray0[6] = '&';
      charArray0[7] = '}';
      charArray0[8] = ' ';
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 4278);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = 'd';
      charArray0[2] = '~';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.finishCurrentSegment();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 58, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(3491L);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes avalable missing ", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes avalable missing ");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeStartObject();
      mockPrintStream0.checkError();
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (-579));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "oo few ytesvailable: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("oo few ytesvailable: missing ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-90);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 103, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 118, 44);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too fewlbytes available: missing ";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)8;
      byte byte0 = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)127;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 100, (ObjectCodec) null, pipedOutputStream0, byteArray0, 694, false);
//      try { 
        uTF8JsonGenerator0.writeNumber((short)17);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[10];
      mockPrintStream0.flush();
      mockPrintStream0.println();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 369, true);
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(2840);
      uTF8JsonGenerator0.writeStartObject((Object) mockPrintStream0);
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a boolean value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-105);
      SerializedString serializedString0 = new SerializedString("");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-105));
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeString("start an object");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        iOContext0.releaseReadIOBuffer(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[10];
      mockPrintStream0.flush();
      mockPrintStream0.println();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1741, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[2] = '1';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 1, 369);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too fewlbytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too fewlbytes available: missing ");
      byte[] byteArray0 = new byte[9];
      mockPrintStream0.println((double) 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3139, 512);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"+R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"+R)jt30!k");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 73, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      jsonGenerator0.writeStartObject((Object) defaultPrettyPrinter0);
      iOContext0.withEncoding(jsonEncoding1);
      jsonGenerator0.writeFieldName("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite((String) null, (-1677));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Too few bytes available: missing ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 115, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRawValue("akB5kJ0vt6,F/8I`5");
      SerializedString serializedString0 = new SerializedString("akB5kJ0vt6,F/8I`5");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._outputSurrogates((-1784), 57343);
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes avalable missing ", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes avalable missing ");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeStartObject();
      int int0 = 54;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "L|^<fRXAx^ FtIf";
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeNull();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      iOContext0.allocTokenBuffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)86;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 42, (ObjectCodec) null, mockPrintStream0, byteArray0, 110, true);
      uTF8JsonGenerator0.writeNumber("fFFT!u;HC7Xk");
      String string0 = "P4%@fp?GCog`";
      uTF8JsonGenerator0.writeRaw("P4%@fp?GCog`");
      uTF8JsonGenerator0.writeString((String) null);
      SerializedString serializedString0 = null;
//      try {
        serializedString0 = new SerializedString((String) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Null String illegal for SerializedString
//         //
//         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Too few bytes available: missing ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)63;
      byteArray0[5] = (byte) (-94);
      byteArray0[2] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)63, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      SerializedString serializedString0 = new SerializedString("9");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)108);
      uTF8JsonGenerator0.writeFieldName("9");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (short)108);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-27), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeRaw('\u0086');
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"R)jt30!k", (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charsetName
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3384, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)30, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)4;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3631), (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("Illegal character (code 0x", (-1631.72));
      uTF8JsonGenerator0.writeEndObject();
      uTF8JsonGenerator0.writeBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("akB5kJ0v,F/8I`5", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 14, (ObjectCodec) null, byteArrayBuilder0);
      Object object0 = uTF8JsonGenerator0.getOutputTarget();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      int int0 = 97;
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 97, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRawValue("");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator1.writeRawValue((SerializableString) serializedString0);
      byteArrayBuilder0.finishCurrentSegment();
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
//      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext1, 63, (ObjectCodec) null, mockFileOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes avalable missing ", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes avalable missing ");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      mockPrintStream0.println();
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("", (double) 1);
      uTF8JsonGenerator0.writeEndObject();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missiSg ");
      byte[] byteArray0 = new byte[10];
      char[] charArray0 = new char[5];
      charArray0[3] = 'i';
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missiSg ", true);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-118);
      byteArray1[4] = (byte) (-17);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, (InputStream) null, byteArray1, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Too few bytes available: missing ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byte[] byteArray0 = new byte[9];
      int int0 = 50;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, filterOutputStream0, byteArray0, 10, false);
      mockPrintStream0.println((-539.2833853));
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.FilterOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too fewlbytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too fewlbytes available: missing ");
      mockPrintStream0.flush();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 25, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (byte) (-105), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -105
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("A_?^tC9(i1.kH?((3");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)16;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, (-167), false);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) (byte) (-49));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -167
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Too few bytes available: missing ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)63;
      byteArray0[5] = (byte) (-94);
      byteArray0[2] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)63, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      SerializedString serializedString0 = new SerializedString("9");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)108);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte)63, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator1.writeNumber((long) 3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, serializedString0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext2.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeFieldName(" bytes (out of ");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("was expecting comma to separate ");
      mockPrintStream0.println(864L);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, 2048, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("jQKwu%|\"#0&_");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray0, 11, true);
      uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.UTF8JsoGenerator");
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0._verifyValueWrite("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not , expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "#%I'TAce~V\"R)jt30!k";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      jsonGenerator0.writeFieldName("");
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext1.setEncoding(jsonEncoding2);
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fR/XAx^ FtIf");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)35;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 108, (ObjectCodec) null, mockPrintStream0, byteArray0, 1853, true);
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeRaw("");
      uTF8JsonGenerator0.writeString("");
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      iOContext1.allocReadIOBuffer(2);
      byteArray0[0] = (byte) (-105);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Too few bytes available: missing ", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 115, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRawValue("akB5kJ0v,F/8I`5");
      SerializedString serializedString0 = new SerializedString("akB5kJ0v,F/8I`5");
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      byte[] byteArray1 = byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._outputSurrogates((-1770), 57343);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeString("Ue,#nXD2a[");
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray1, 57343, 57343);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      mockPrintStream0.println((double) 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 53, false);
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, (-1725));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes avalable missing ", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes avalable missing ");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("", (double) 1);
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext1.setEncoding(jsonEncoding2);
      uTF8JsonGenerator1.writeRaw('e');
      uTF8JsonGenerator1._writePPFieldName("");
//      try { 
        uTF8JsonGenerator0._writePPFieldName(defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte byte0 = (byte) (-105);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      mockPrintStream0.println(3431L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray0, 11, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      uTF8JsonGenerator0.writeFieldName("teiEJQ};kTW}=");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("A4X*\"JMy@jkt6+N8", 2582.2);
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a binary value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fR/XAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext1.setEncoding(jsonEncoding2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 842, true);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      String string0 = "teiEJQ};kTW}=";
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
//      try { 
        uTF8JsonGenerator0.writeFieldName("L|^<fR/XAx^ FtIf");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      iOContext1.setEncoding(jsonEncoding0);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      uTF8JsonGenerator1._writePPFieldName("L|^<fRXAx^ FtIf");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte byte0 = (byte) (-105);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      mockPrintStream0.println((double) 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 53, false);
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = '2';
      charArray0[2] = '(';
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte) (-105), (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "#%I'TAce~V\"R)jt30!k";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeNumber("UJ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1024), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext2.setEncoding(jsonEncoding2);
      uTF8JsonGenerator0.writeString((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      iOContext2.setEncoding(jsonEncoding1);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
//      try { 
        jsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Too few bytes available: missing ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byte[] byteArray0 = new byte[9];
      int int0 = 3234;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1541), (ObjectCodec) null, mockPrintStream0, byteArray0, 3234, false);
      String string0 = "";
      uTF8JsonGenerator0.writeRawValue("");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeBooleanField("", true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("F9azcz:2+M=S4>u", 16);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Too few bytes available: missing ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)63;
      byteArray0[5] = (byte) (-94);
      char[] charArray0 = iOContext1.allocTokenBuffer();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte)63;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte) (-94);
      byteArray1[4] = (byte) (-94);
      byteArray1[5] = (byte)63;
      byteArray1[6] = (byte)63;
      byteArray1[7] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray1, 571, true);
      uTF8JsonGenerator0.writeString(charArray0, (int) (byte)63, (-1185));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, (-3260));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      mockPrintStream0.println((double) 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '(';
      charArray0[2] = ']';
      charArray0[3] = 'L';
      charArray0[4] = ':';
      charArray0[5] = 'd';
      uTF8JsonGenerator0.writeString(charArray0, 35, (-292));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, (InputStream) null, (int) (byte)34);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 182, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.flush();
      BigDecimal bigDecimal0 = new BigDecimal((-4545.59714953));
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fR/XAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-896), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber("L|^<fR/XAx^ FtIf");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("UJ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 22);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-34), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.flush();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 55296;
      doubleArray0[1] = (double) 0;
      System.setCurrentTimeMillis((-803L));
      PipedInputStream pipedInputStream0 = new PipedInputStream(3935);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writeBinary((Base64Variant) null, pipedInputStream0, byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)t30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3518, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding3 = JsonEncoding.UTF16_LE;
      iOContext1.setEncoding(jsonEncoding3);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString2 = new SerializedString("\"CF| 8PVRe++!");
      iOContext1.withEncoding(jsonEncoding2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext1.setEncoding(jsonEncoding2);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.writeRaw('H');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 3, (ObjectCodec) null, mockPrintStream0, (byte[]) null, 202, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNullField("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeNumber("");
      uTF8JsonGenerator0.writeNumber((-24L));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)0, (ObjectCodec) null, mockPrintStream0);
      int int0 = GeneratorBase.SURR1_LAST;
      uTF8JsonGenerator0.writeBinaryField("", byteArray0);
      uTF8JsonGenerator0.writeString("");
      System.setCurrentTimeMillis(1189L);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber("CyJ{=76$BFV(&y");
      int int0 = GeneratorBase.SURR1_LAST;
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('n');
//      try { 
        uTF8JsonGenerator0._writePPFieldName("CyJ{=76$BFV(&y");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      mockPrintStream0.println((double) 1);
      uTF8JsonGenerator0.writeNumber("Can not ");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("?");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      uTF8JsonGenerator0.writeRawValue("#%I'TAce~V\"R)jt30!k");
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField("L|^<fRXAx^ FtIf", false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      mockPrintStream0.println((double) 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3139, 776);
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
      ByteBuffer.wrap(byteArray0);
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 3);
      uTF8JsonGenerator0.getOutputBuffered();
      SerializedString serializedString1 = new SerializedString("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 11, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber("UTF-16BE");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '(';
      charArray0[7] = '1';
      charArray0[8] = '1';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, (-4711), 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4711
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeNumber("`lp)%urF'KtyJ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 211, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      String string0 = "L|^<fRXAx^ FtIf";
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "5<~", objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, printStream0, byteArray0, 109, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('H');
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, (byte) (-105), (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray0, 11, true);
      uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((-1339));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      mockPrintStream0.println((double) 1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 512, (ObjectCodec) null, objectOutputStream0, byteArray0, 3, false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-34), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.flush();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 0, 1750);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((BigDecimal) null);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("^bl:P[u$");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 23, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.setEncoding(jsonEncoding1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('H');
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ", (-2299), (-1077));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a raw (unencoded) value, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext2.setEncoding(jsonEncoding2);
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRaw('H');
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0._writePPFieldName("'pa\"5X");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray0, 11, true);
      uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      uTF8JsonGenerator0.writeRaw("Current context not an object but ");
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      SerializedString serializedString0 = new SerializedString("8}Mu*)`5J9xQVk2FR ");
      int int0 = 52;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 52, (ObjectCodec) null, mockPrintStream0, byteArray0, 3640, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-445), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 48, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-1151.26F));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      char[] charArray0 = new char[5];
      charArray0[3] = 'g';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Too few bytes available: missing ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2248, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeString("qo&y]}x_lwQ");
      // Undeclared exception!
//      try { 
        jsonGenerator0.writeUTF8String(byteArray0, 0, 56319);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("Too few bytes available: missing ", 2.147483647E9);
      uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ", (-2299), (-1109));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte) (-83);
      mockPrintStream0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1425), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-83), true);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -83
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext2.setEncoding(jsonEncoding2);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2619, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      // Undeclared exception!
      uTF8JsonGenerator1.writeNumber(492.6005F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Too few bytes available: missing ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)63;
      byteArray0[2] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)63, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = new SerializedString("9");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)115);
      uTF8JsonGenerator0.writeFieldName("9");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (short)115);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, (OutputStream) null, byteArray0, 0, true);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("|]\u0007u01Zg&{N");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      mockPrintStream0.println((double) 1);
      uTF8JsonGenerator0.writeNumber("Can not ");
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber("?");
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.JsonParseException");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1058), (ObjectCodec) null, mockPrintStream0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 3);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 2048, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      char[] charArray0 = new char[5];
      charArray0[3] = 'g';
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray1 = iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2248, true);
      uTF8JsonGenerator0.writeRaw("#X'8Ydx;jZalP)");
      uTF8JsonGenerator0.writeString(charArray1, 51, 92);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      byte byte0 = (byte) (-105);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, jsonEncoding0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, (ObjectCodec) null, mockPrintStream0, byteArray0, 2963, false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeRaw((char[]) null, (-431), (int) (byte) (-83));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-4246), 68);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4246
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      MockPrintStream mockPrintStream1 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[2];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.releaseConcatBuffer((char[]) null);
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2006), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      charArray0[3] = 'g';
      charArray0[4] = 'T';
      uTF8JsonGenerator0.writeRaw(charArray0, 142, (-2006));
      char[] charArray1 = new char[7];
      charArray1[0] = 'g';
      charArray1[1] = 'P';
      charArray1[2] = 't';
      charArray1[3] = 'T';
      charArray1[2] = 'g';
      charArray1[5] = ')';
      charArray1[6] = 'T';
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 1134, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_BE;
      iOContext2.setEncoding(jsonEncoding2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('H');
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      uTF8JsonGenerator0.writeStartObject();
      int int0 = (-2299);
      uTF8JsonGenerator0.writeRaw(charArray0, (-2299), (-992));
      uTF8JsonGenerator0.writeRaw(charArray0, 0, (int) (byte) (-83));
      iOContext0.allocBase64Buffer();
//      try { 
        uTF8JsonGenerator0.writeNumber("y:WK");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      MockPrintStream mockPrintStream1 = new MockPrintStream("?D}B4blRu'");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray0, 512, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext2.setEncoding(jsonEncoding2);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      String string0 = "was expecting either '*' or '/' for a comment";
      SerializedString serializedString2 = new SerializedString("was expecting either '*' or '/' for a comment");
      JsonEncoding jsonEncoding3 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      char char0 = 'P';
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.writeNumberField("Too few bytes available: missing ", 2.147483647E9);
      uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ", (-2299), (-1077));
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("Internal error: failed to locate expected buffered tokens", "C}V(v:Pr%#O:#", true, 'P', (-797));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 13)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "CyJ{=76$BFV(&y";
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-105);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-105);
      byteArray2[1] = (byte) (-105);
      byteArray2[2] = (byte) (-105);
      mockPrintStream0.println(0.0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray2, 4574, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray2, 192, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      char[] charArray0 = new char[5];
      charArray0[3] = 'g';
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      iOContext0.allocTokenBuffer();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte)0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2248, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      uTF8JsonGenerator0.writeString("qo&y]}x_lwQ");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray0, 11, true);
      uTF8JsonGenerator0.writeNumber("com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      uTF8JsonGenerator0.writeString(charArray0, 1, 0);
      uTF8JsonGenerator0.writeStartObject();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      System.setCurrentTimeMillis(375L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "$Bd$:GB9>b(x.Uy", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$Bd$:GB9>b(x.Uy", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-64);
      mockFileOutputStream0.write(byteArray0, 5, 3);
      byteArray0[7] = (byte)109;
      byteArray0[8] = (byte)103;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)16, true);
      uTF8JsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fRXAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 110, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      JsonEncoding jsonEncoding3 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding3);
      JsonEncoding jsonEncoding4 = JsonEncoding.UTF16_BE;
      iOContext2.setEncoding(jsonEncoding4);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
      uTF8JsonGenerator0.writeRaw('H');
//      try { 
        uTF8JsonGenerator0._writePPFieldName((String) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      mockPrintStream0.println((double) 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4055, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 3139, 776);
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      serializedString0.putQuotedUTF8(byteBuffer0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("W@zg6#]3ZWDCTh}");
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 48, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, false);
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 7, (byte) (-105));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-105), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('+');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0._verifyPrettyValueWrite("Too few bytes available: missing ", (byte)0);
      System.setCurrentTimeMillis(0);
      uTF8JsonGenerator0.writeFieldName("FI}KS]yj}@K//");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.flush();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.setEncoding(jsonEncoding1);
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'T';
      charArray0[2] = 'P';
      charArray0[3] = 'g';
      IOContext iOContext2 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, (byte) (-83), (ObjectCodec) null, mockPrintStream0, byteArray0, 2248, true);
      uTF8JsonGenerator1.writeString("qo&y]}x_lwQ");
      UTF8JsonGenerator uTF8JsonGenerator2 = null;
//      try {
        uTF8JsonGenerator2 = new UTF8JsonGenerator(iOContext2, 56319, (ObjectCodec) null, mockPrintStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)15);
      System.setCurrentTimeMillis(56319);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 23, 49);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 23
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[8] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)63, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      String string0 = "";
      uTF8JsonGenerator0.writeStartObject((Object) iOContext1);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      short short0 = (short)115;
//      try { 
        uTF8JsonGenerator0.writeNumber((short)115);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "U(!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("U(!<F");
      Locale locale0 = Locale.UK;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)122, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[27];
      charArray0[0] = 'R';
      iOContext1.setEncoding(jsonEncoding0);
      charArray0[1] = 'P';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = '<';
      charArray0[5] = 'R';
      charArray0[6] = 'T';
      charArray0[7] = 'g';
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("?");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[8] = (byte)63;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)63, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)115);
      uTF8JsonGenerator0.writeFieldName("");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2, (short)115);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, byteArrayBuilder0);
      String string0 = "";
      uTF8JsonGenerator0.writeArrayFieldStart("");
      uTF8JsonGenerator0.writeRaw("#%I'TAce~V\"R)jt30!k");
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName("oQjUQp9\">bl828Ly\"<c");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.flush();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 55296;
      doubleArray0[1] = (double) 0;
      mockPrintStream0.append('V');
      uTF8JsonGenerator0.writeArray(doubleArray0, 595, (-1780));
      uTF8JsonGenerator0.writeNumber((double) 3);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too Tew bytez available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too Tew bytez available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      double[] doubleArray0 = new double[5];
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 57343;
      doubleArray0[4] = (double) 56319;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 3, 50);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.JsonParser$Feature");
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.core.JsonParser$Feature");
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.fasterxml.jackson.core.JsonParser$Feature");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "com.fasterxml.jackson.core.JsonParser$Feature");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, (-866), false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator0.getOutputTarget();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(bigDecimal0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte) (-105);
      byteArray1[3] = (byte) (-105);
      byteArray1[4] = (byte) (-105);
      byteArray1[5] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0, byteArray1, 2, true);
      short short0 = (short)4103;
      uTF8JsonGenerator0.writeNumber((short)4103);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String((byte[]) null, (-2872), 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string1 = "Qm6IPNW^1&<su/";
      MockPrintStream mockPrintStream0 = new MockPrintStream("Qm6IPNW^1&<su/");
      Locale locale0 = Locale.UK;
      MockPrintStream mockPrintStream1 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 80, (ObjectCodec) null, mockPrintStream1, byteArray0, 2, false);
      uTF8JsonGenerator0.writeNumber((short)1260);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (byte)48, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      mockPrintStream0.print((float) 2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.flush();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 55296;
      uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ", 3, 3);
      uTF8JsonGenerator0.writeStartArray();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-94);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)63, (ObjectCodec) null, mockPrintStream0, byteArray0, 617, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)6);
      uTF8JsonGenerator0.writeFieldName("`}6< '^");
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1328), 13);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1328
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.flush();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 55296;
      doubleArray0[1] = (double) 0;
      uTF8JsonGenerator0.writeArray(doubleArray0, 595, (-1780));
      // Undeclared exception!
      uTF8JsonGenerator0.writeNumber((double) 3);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      uTF8JsonGenerator0.writeRaw("#%I'TAce~V\"R)jt30!k");
      MockRandom mockRandom0 = new MockRandom();
      uTF8JsonGenerator0.writeFieldName("oQjUQp9\">bl828Ly\"<c");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
//      try { 
        uTF8JsonGenerator0.writeFieldName("");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("W@zg6#]3ZWDCTh}");
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber("W@zg6#]3ZWDCTh}");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 316, 128);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(" - ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 11, false);
      uTF8JsonGenerator0.writeNumber(" - ");
      uTF8JsonGenerator0.writeBinary(byteArray0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 50, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 50
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("W@zg6#]3ZWDCTh}");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 128);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 619, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 4, true);
      uTF8JsonGenerator0.writeNumber("UJ");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("REQZPLsXx+}=:W");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[4] = (byte)0;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      uTF8JsonGenerator0.writeString(charArray0, 0, 3);
      System.setCurrentTimeMillis(0);
      uTF8JsonGenerator0.writeNumber((BigInteger) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-94);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)63, (ObjectCodec) null, mockPrintStream0, byteArray0, 617, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)6);
      uTF8JsonGenerator0.writeFieldName("`}6< '^");
      BigInteger bigInteger0 = BigInteger.ONE;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      MockPrintStream mockPrintStream1 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[2];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2006), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      charArray0[3] = 'g';
      charArray0[4] = 'T';
      uTF8JsonGenerator0.writeRaw(charArray0, 142, (-2006));
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = new SerializedString("Too few bytes available: missing ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 255, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = 'w';
      charArray0[2] = 'G';
      charArray0[3] = 'T';
      charArray0[4] = 'P';
      charArray0[5] = 'T';
      uTF8JsonGenerator0.writeRaw(charArray0, 5, (int) (byte) (-94));
      uTF8JsonGenerator0.writeString(charArray0, (-2749), (int) (byte) (-94));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" bytes");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext3, 3, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, 3);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String((byte[]) null, 717, 2061);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "CyJ{=76$BFV(&y";
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(0.0);
      String string1 = "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ";
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", "Too few bytes available: missing ", false, '}', 1018);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Base64Alphabet length must be exactly 64 (was 33)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(", although was supposed to have one");
      byte[] byteArray0 = new byte[2];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2006), (ObjectCodec) null, mockPrintStream1, byteArray0, 0, false);
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      charArray0[3] = 'g';
      charArray0[4] = 'T';
      uTF8JsonGenerator0.writeRaw(charArray0, 142, (-2006));
      char[] charArray1 = new char[7];
      charArray1[0] = 'g';
      charArray1[1] = 'P';
      charArray1[2] = 't';
      charArray1[3] = 'T';
      charArray1[4] = 'g';
      charArray1[5] = ')';
      charArray1[6] = 'T';
      uTF8JsonGenerator0.writeString(charArray1, 56, 0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("W@zg6#]3ZWDCTh}");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 128);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte) (-105), (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeArrayFieldStart("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ");
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(81, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.writeEndArray();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1685));
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('n');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      String string0 = "";
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)0;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocNameCopyBuffer(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'a';
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeRaw('L');
//      try { 
        uTF8JsonGenerator0._writePPFieldName("]X");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a field name, expecting a value
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      iOContext0.allocNameCopyBuffer(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 790, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
      uTF8JsonGenerator0._releaseBuffers();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte)48, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator1.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      String string0 = "com.fasterxml.jackson.core.json.UTF8JsonGenerator";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber("Can not ");
      int int0 = 9;
      int int1 = (-2429);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary(byteArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      BigDecimal bigDecimal0 = new BigDecimal(817L);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short)484);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "Too few bytes available: missing ", true, 'Q', 127);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.flush();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.setEncoding(jsonEncoding1);
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'T';
      charArray0[2] = 'P';
      charArray0[3] = 'g';
      charArray0[4] = 't';
      uTF8JsonGenerator0.writeRaw(charArray0, 3, 0);
      uTF8JsonGenerator0.writeString(charArray0, 2, 3);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeString((String) null);
      uTF8JsonGenerator0.writeNumber(985L);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("NKr+iVq.dm");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 39, (ObjectCodec) null, mockPrintStream0, byteArray0, 39, true);
      uTF8JsonGenerator0.writeNumber("~4%z{6pSH>]");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, (-1), 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 53, (ObjectCodec) null, mockPrintStream0, byteArray0, 34, false);
      uTF8JsonGenerator0.flush();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.setEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeNumber(2);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber(0.0F);
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ux!<F");
      Locale locale0 = Locale.UK;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)122, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.flush();
      iOContext1.setEncoding(jsonEncoding0);
      uTF8JsonGenerator0.writeNumber((int) (byte)0);
      uTF8JsonGenerator0.writeBoolean(true);
      uTF8JsonGenerator0.writeNumber((-3533.0137F));
      uTF8JsonGenerator0.writeString("");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockPrintStream0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, mockPrintStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      uTF8JsonGenerator0.writeRaw(charArray0, 2, 2);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeStartArray();
      uTF8JsonGenerator0.flush();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ux!<F");
      Locale locale0 = Locale.UK;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)122, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.flush();
      iOContext1.setEncoding(jsonEncoding0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((int) (byte)0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber((short)710);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeRawUTF8String(byteArray0, 5683, 2236);
      iOContext0.allocTokenBuffer();
      SerializedString serializedString0 = new SerializedString(") in numeric value");
      uTF8JsonGenerator0.writeNumber("ALLOW_UNQUOTED_CONTROL_CHARS");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      int int0 = 32;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNullField("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
//      try { 
        uTF8JsonGenerator0.writeString("Can not ");
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a string, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      System.setCurrentTimeMillis((-1427L));
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      mockPrintStream0.print((long) 3);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)34;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, '+', (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(false);
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[0] = '+';
      uTF8JsonGenerator0.writeRaw('+');
      uTF8JsonGenerator0.writeStartObject();
//      try { 
        uTF8JsonGenerator0.writeNumber((-1L));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not write a number, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      iOContext1.allocReadIOBuffer(2);
      byteArray0[0] = (byte) (-105);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CyJ{=76$BFV(&y", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 115, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.writeRawValue("akB5kJ0v,F/8I`5");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      byteArrayBuilder0.finishCurrentSegment();
      uTF8JsonGenerator0._outputSurrogates((-1770), 57343);
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNullField("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
//      try { 
        uTF8JsonGenerator0.writeEndArray();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an ARRAY but OBJECT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((long) 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 116, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8JsonGenerator0.writeNumber(2);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBoolean(false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1772, (ObjectCodec) null, (OutputStream) null);
      char char0 = 'l';
      uTF8JsonGenerator0.writeRaw('');
      String string0 = "QUOTE_NON_NUMERIC_NUMBERS";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("f^Nhe<>", "QUOTE_NON_NUMERIC_NUMBERS");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // QUOTE_NON_NUMERIC_NUMBERS
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 9, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("");
      uTF8JsonGenerator0.writeRaw("#%I'TAce~V\"R)jt30!k");
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(11, mockRandom0);
      uTF8JsonGenerator0.writeNumber(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, mockPrintStream1, byteArray0, 3628, false);
      uTF8JsonGenerator0.writeRawValue("QWZSmQM");
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeBooleanField("", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'X';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 80, 123);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("k\"fE1l+");
      mockPrintStream0.println('l');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 55296, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 55296, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((long) 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Too few bytes available: missing ", 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 790, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
      uTF8JsonGenerator0.getCurrentValue();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((char[]) null, 37, 38);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 2);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0.writeNumber(" entries; now have ");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      iOContext1.allocReadIOBuffer(2);
      byteArray0[0] = (byte) (-105);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("akB5kJ0v,F/8I`5", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1166, (ObjectCodec) null, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, (byte)34, true);
//      try { 
        uTF8JsonGenerator0.writeBoolean(true);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ux!<F");
      Locale locale0 = new Locale("Ux!<F", "Ux!<F", "Ux!<F");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1802), (ObjectCodec) null, mockPrintStream0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1158.81459967037;
      iOContext0.constructTextBuffer();
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeBooleanField("write a null", true);
      uTF8JsonGenerator0.writeStartObject((Object) locale0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((char[]) null, 0, 22);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-643);
      MockPrintStream mockPrintStream0 = new MockPrintStream("O v!@W5");
      PrintStream printStream0 = mockPrintStream0.append('\"');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-643), (ObjectCodec) null, printStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      serializedString0.writeUnquotedUTF8(printStream0);
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeNumber((short)109);
      uTF8JsonGenerator0.writeFieldName((SerializableString) serializedString0);
      String string0 = null;
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant("O v!@W5", (String) null, true, 'Q', 17);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 990, (ObjectCodec) null, byteArrayBuilder1, byteArray0, (-1486), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("Invalid custom escape definitions; custom escape not found for character code 0x");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1486
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-83);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-83));
      uTF8JsonGenerator0.writeString((char[]) null, (-1800), (int) (byte) (-83));
      uTF8JsonGenerator0.flush();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 0);
      uTF8JsonGenerator0.writeRaw('+');
      SerializedString serializedString1 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString1);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Too few bytes available: missing ", (byte)43);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("W@zg6#]3ZWDCTh}");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 128);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 619, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 4, true);
      uTF8JsonGenerator0.writeNumber("UJ");
      // Undeclared exception!
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 1, 127);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      int int0 = 20;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, 20, false);
      uTF8JsonGenerator0.getOutputTarget();
      uTF8JsonGenerator0.writeBooleanField("", false);
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
//      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 20);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      System.setCurrentTimeMillis((-1427L));
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)73;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 335, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeBoolean(false);
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[6] = '+';
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      char char0 = '+';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('+');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("", 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = '?';
      charArray0[2] = '!';
      charArray0[3] = 'u';
      charArray0[4] = '\'';
      charArray0[5] = '?';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 127, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, bufferedOutputStream0);
      uTF8JsonGenerator0.writeBooleanField("Too few bytes available: missing ", true);
      uTF8JsonGenerator0.writeStartObject((Object) null);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 50, 50);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 50
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ux!<F");
      Locale locale0 = Locale.UK;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)122, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      iOContext1.setEncoding(jsonEncoding0);
      charArray0[1] = 'i';
      charArray0[2] = 'R';
      charArray0[3] = '0';
      charArray0[4] = '<';
      charArray0[5] = 'R';
      charArray0[6] = 'T';
      charArray0[7] = 'g';
      charArray0[8] = '&';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)11, (int) (byte)0);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString(charArray0, (-801), 1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      String string0 = "com.fasterxml.jackson.core.json.UTF8JsonGenerator";
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 50, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeNumber("Can not ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 9, (-2429));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"R)jt30!k");
      StringReader stringReader0 = new StringReader("#%I'TAce~V\"R)jt30!k");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("write a number");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1561), (ObjectCodec) null, mockPrintStream0);
      short short0 = (short)15;
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber((-1561));
      SerializedString serializedString0 = new SerializedString("expected a digit for number exponent");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte byte0 = (byte) (-105);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 85, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 92, 5769);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 3578, 4266);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 32, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNullField("Too few bytes available: missing ");
      uTF8JsonGenerator0.writeStartObject();
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, (ObjectCodec) null, mockPrintStream0, byteArray0, 4364, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)34);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray((double[]) null, (-235), (int) (byte)32);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1738, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[5] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)98;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 905, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CyJ{=76$BFV(&y", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0._flushBuffer();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      filteringParserDelegate0.getCodec();
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter1, false, true);
      filteringParserDelegate1.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 34, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short) (-3165));
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.getCurrentValue();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding2);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fR/XAx^ FtIf");
      int int0 = 125;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, (ObjectCodec) null, mockPrintStream0, byteArray0, 3, false);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField("L|^<fR/XAx^ FtIf", false);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byte[] byteArray1 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 13, (ObjectCodec) null, mockPrintStream0, byteArray1, 377, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-105), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeRaw('+');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      uTF8JsonGenerator0._verifyPrettyValueWrite("Null String illegal for SerializedString", (byte)0);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.flush();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 55296;
      doubleArray0[1] = (double) 0;
      uTF8JsonGenerator0.writeArray(doubleArray0, 595, (-1770));
      uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ", (-822), (-1418));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"R)jt30!k");
      StringReader stringReader0 = new StringReader("#%I'TAce~V\"R)jt30!k");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("write a number");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1561), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)15);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      uTF8JsonGenerator0.getOutputTarget();
      SerializedString serializedString0 = (SerializedString)uTF8JsonGenerator0._rootValueSeparator;
      uTF8JsonGenerator0.writeString((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      BigDecimal bigDecimal0 = new BigDecimal((-2292L));
      int int0 = 506;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 506, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber(bigDecimal0);
      uTF8JsonGenerator0.writeNumber((short) (-1089));
      char char0 = 'b';
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "Too few bytes available: missing ", false, 'b', 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"R)jt30!k");
      StringReader stringReader0 = new StringReader("#%I'TAce~V\"R)jt30!k");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("write a number");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1561), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber((-1561));
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "Ki)m", false, 'l', (-2281));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=Ax}([:VR\"* xcV");
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 64, (ObjectCodec) null, mockPrintStream0, byteArray0, 1041, true);
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"R)jt30!k");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CyJ{=76$BFV(&y", false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      IOContext iOContext3 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockFileOutputStream0);
      uTF8JsonGenerator0.close();
      uTF8JsonGenerator1.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      String string0 = "CyJ{=76$BFV(&y";
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      iOContext1.allocReadIOBuffer(2);
      byteArray0[0] = (byte) (-105);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("akB5kJ0v,F/8I`5", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRawValue("Too few bytes available: missing ");
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      byteArrayBuilder0.finishCurrentSegment();
//      try { 
        uTF8JsonGenerator0._outputSurrogates(57343, (byte) (-105));
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Incomplete surrogate pair: first char 0xdfff, second 0xffffff97
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte) (-83);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '4';
      charArray0[2] = 'k';
      charArray0[3] = 'w';
      charArray0[4] = '4';
      charArray0[5] = 'e';
      charArray0[6] = '|';
      charArray0[7] = 'a';
      mockPrintStream0.println(charArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1491, (ObjectCodec) null, mockPrintStream0, byteArray0, 25, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 15, 11);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 15
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 35, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 790, (ObjectCodec) null, mockPrintStream0, byteArray0, 0, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)49);
      uTF8JsonGenerator0.getCurrentValue();
      mockPrintStream0.print((Object) null);
      uTF8JsonGenerator0._releaseBuffers();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding1);
      uTF8JsonGenerator0.writeRaw('G');
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("Too few bytes available: missing ");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-105), false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -105
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fR/XAx^ FtIf");
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2265, (ObjectCodec) null, mockPrintStream0, byteArray0, 60, true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2265;
      uTF8JsonGenerator0.writeArray(doubleArray0, (-1770), (-3245));
      uTF8JsonGenerator0.writeRaw("Current context not an ARRAY but ", 140, (int) (byte) (-105));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ux!<F");
      Locale locale0 = new Locale("Ux!<F", "Ux!<F", "Ux!<F");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1802), (ObjectCodec) null, mockPrintStream0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1158.81459967037;
      iOContext0.constructTextBuffer();
      doubleArray0[3] = (double) 57343;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[7] = (double) 56319;
      uTF8JsonGenerator0.writeArray(doubleArray0, 50, (-1802));
      uTF8JsonGenerator0.writeRaw("$F~Ptt\"w`S*e.");
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'V';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString(charArray0, 27, 121);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 27
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(", although was supposed to have one");
      byte byte0 = (byte) (-105);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeRawValue(", although was supposed to have one");
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
      uTF8JsonGenerator0.writeBooleanField(", although was supposed to have one", true);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Ux!<F";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1548), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((-208.2937F));
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 668, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte) (-105);
      byteArray1[3] = (byte) (-105);
      byteArray1[4] = (byte) (-105);
      mockPrintStream0.write(byteArray1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1907), (ObjectCodec) null, mockPrintStream0, byteArray0, 30, true);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((short) (byte)52);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Too few bytes available: missing ");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 276, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      short short0 = (short)97;
      SerializedString serializedString0 = new SerializedString("Too few bytes available: missing ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"R)jt30!k");
      StringReader stringReader0 = new StringReader("#%I'TAce~V\"R)jt30!k");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("write a number");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1561), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.writeNull();
      BigInteger bigInteger0 = BigInteger.TEN;
      uTF8JsonGenerator0.writeNumber(bigInteger0);
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = 'f';
      charArray0[2] = 'n';
      charArray0[3] = 'a';
      charArray0[4] = '3';
      charArray0[5] = 'R';
      charArray0[6] = 'V';
      charArray0[7] = '/';
      uTF8JsonGenerator0.writeRaw(charArray0, 1, (-2240));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1907), (ObjectCodec) null, mockPrintStream0, byteArray0, 30, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeFieldName((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-83);
      iOContext0.releaseNameCopyBuffer((char[]) null);
      byteArray0[8] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-83));
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 0);
      uTF8JsonGenerator0.writeRaw('+');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._verifyPrettyValueWrite("Too few bytes available: missing ", (byte) (-83));
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // Internal error: this code path should never get executed
//         //
//         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0._flushBuffer();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.close();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("CyJ{=76$BFV(&y");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("akB5kJ0v,F/8I`5", true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 57343, (ObjectCodec) null, byteArrayBuilder0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "CyJ{=76$BFV(&y", true);
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext2, 1, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator1.close();
      uTF8JsonGenerator1.getOutputBuffered();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1907), (ObjectCodec) null, mockPrintStream0, byteArray0, 30, true);
      uTF8JsonGenerator0.writeString("");
      uTF8JsonGenerator0.writeNumber((long) 0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("C R", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-248), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.getOutputBuffered();
      uTF8JsonGenerator0._flushBuffer();
      uTF8JsonGenerator0.close();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2834, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      uTF8JsonGenerator0.flush();
      String string0 = null;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ux!<F");
      Locale locale0 = new Locale("Ux!<F", "Ux!<F", "Ux!<F");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1802), (ObjectCodec) null, mockPrintStream0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1158.81459967037;
      doubleArray0[3] = (double) 57343;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[7] = (double) 56319;
      uTF8JsonGenerator0.writeArray(doubleArray0, 50, (-1802));
      uTF8JsonGenerator0.writeRaw("$F~Ptt\"w`S*e.", 3, 1);
      uTF8JsonGenerator0.writeFieldName("Ux!<F");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-83));
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawUTF8String(byteArray0, (-120), 29);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-105), false);
      uTF8JsonGenerator0.writeString("Too few bytes available: missing ");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-83));
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 0);
      uTF8JsonGenerator0.writeRaw('+');
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRaw((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 276, (ObjectCodec) null, mockPrintStream0, byteArray0, 1, true);
      uTF8JsonGenerator0.writeNumber((short)97);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 44, 3651);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 44
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ux!<F");
      Locale locale0 = Locale.UK;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)122, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short)15);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      double[] doubleArray0 = new double[0];
      uTF8JsonGenerator0.writeArray(doubleArray0, 1, (-1291));
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw((String) null, 1771, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-105));
      uTF8JsonGenerator0._releaseBuffers();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (byte) (-105), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-105), false);
      uTF8JsonGenerator0.writeString("Too few bytes available: missing ");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((double) 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"R)jt30!k");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)14;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (-1069), (int) (byte)34);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("L|^<fR/XAx^ FtIf");
      int int0 = 23;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-851), (ObjectCodec) null, mockPrintStream0, byteArray0, (byte) (-105), false);
      uTF8JsonGenerator0.getOutputTarget();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBooleanField("L|^<fR/XAx^ FtIf", false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -105
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.writeNumber((short) (byte)0);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeUTF8String(byteArray0, 5, 0);
      Base64Variant base64Variant0 = null;
//      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "StY9|ZclW#41", (byte) (-83));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 14, (ObjectCodec) null, mockPrintStream0, byteArray0, (-740), false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, (-1859), (-64));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -740
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber("Too few bytes available: missing ");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.flush();
      char char0 = '0';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('0');
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-105));
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArray0, 2283, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2283
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw("Too few bytes available: missing ", 0, 8000);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 57343;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 56319;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 55296;
      uTF8JsonGenerator0.writeArray(doubleArray0, 3, (-2101));
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
//      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9, (ObjectCodec) null, mockPrintStream0, byteArray0, 80, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("A];1?\"QM");
      byte[] byteArray0 = iOContext1.allocReadIOBuffer(1077);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 256, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      uTF8JsonGenerator0.writeString("Too few bytes available: missing ");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-105), (ObjectCodec) null, objectOutputStream0, byteArray0, 71, false);
      StringReader stringReader0 = new StringReader("Too few bytes available: missing ");
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("Too few bytes available: missing ");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1278, (ObjectCodec) null, mockPrintStream0, byteArray0, 23, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'g';
      charArray0[2] = 'T';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 1202);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 7, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._releaseBuffers();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArray0, (-419), true);
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 2047, (int) (byte)7);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2047
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 80, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'T';
      charArray0[2] = '&';
      charArray0[3] = '|';
      charArray0[4] = '|';
      charArray0[5] = '|';
      charArray0[6] = '&';
      charArray0[7] = 'T';
      charArray0[8] = '&';
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw(charArray0, 0, 2047);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      int int0 = 2;
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";nW\"B)", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 2, false);
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Error in writing to file
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ux!<F");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) jsonEncoding0;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) iOContext0;
      mockPrintStream0.printf(locale0, "Ux!<F", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)122, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'i';
      charArray0[2] = 'Z';
      charArray0[3] = '0';
      charArray0[4] = '|';
      charArray0[5] = 'R';
      charArray0[6] = 'T';
      charArray0[7] = 'g';
      charArray0[8] = '&';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)11, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1738, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)98;
      byteArrayBuilder0.write(byteArray0, 0, 1);
      SerializedString serializedString0 = new SerializedString("Tq@*?)0Qk,W:^j");
      uTF8JsonGenerator0.getOutputTarget();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-105), (ObjectCodec) null, objectOutputStream0, byteArray0, 71, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber("S~S.uON");
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ObjectOutputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 55296, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-694), false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 948, (-832));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -694
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-1.0F));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler1, object0, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ux!<F");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)51;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 58, (ObjectCodec) null, mockPrintStream0, byteArray0, 63, false);
      // Undeclared exception!
      uTF8JsonGenerator0.writeString("Ux!<F");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.writeNumber((short) (byte) (-105));
      uTF8JsonGenerator0._releaseBuffers();
      uTF8JsonGenerator0.writeRaw('G');
      assertArrayEquals(new byte[] {(byte)45, (byte)49, (byte)48, (byte)53, (byte)71, (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105)}, byteArray0);
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 80, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0.writeNumber("");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("write a boolean value");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream0);
      short short0 = (short) (-3879);
      uTF8JsonGenerator0.writeNumber((short) (-3879));
      uTF8JsonGenerator0.writeStartObject();
      uTF8JsonGenerator0.getOutputBuffered();
//      try { 
        uTF8JsonGenerator0.writeStartObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Can not start an object, expecting field name
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = (-1524);
      byteArrayBuilder0.write(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1524), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 32768, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeArrayFieldStart("~[4;iyw]20j");
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      assertEquals(92, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw("Invalid custom escape definitions; custom escape not found for character code 0x");
      uTF8JsonGenerator0.writeNumber(9);
      uTF8JsonGenerator0.flush();
      assertEquals(81, byteArrayBuilder0.getCurrentSegmentLength());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 57343;
      doubleArray0[4] = (double) 56319;
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeArray(doubleArray0, 3, 50);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber((float) 1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-101);
      // Undeclared exception!
//      try { 
        byteArrayBuilder0.write(byteArray0, 55296, 1225);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("C R", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-248), (ObjectCodec) null, byteArrayBuilder0);
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertEquals(0, int0);
      
      uTF8JsonGenerator0._flushBuffer();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", expecting field name");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) jsonEncoding0;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) iOContext0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 100, (ObjectCodec) null, mockPrintStream0, byteArray0, 224, false);
      uTF8JsonGenerator0.flush();
      uTF8JsonGenerator0._verifyValueWrite(", expecting field name");
//      try { 
        uTF8JsonGenerator0.writeEndObject();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Current context not an object but ROOT
//         //
//         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)15);
      assertEquals(2, uTF8JsonGenerator0.getOutputBuffered());
      
      System.setCurrentTimeMillis(0L);
      uTF8JsonGenerator0.writeRaw('\"');
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", expecting field name");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) iOContext1;
      objectArray0[1] = (Object) jsonEncoding0;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) jsonEncoding0;
      objectArray0[4] = (Object) iOContext0;
      mockPrintStream0.printf(locale0, "Ux!<F", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte)122, (ObjectCodec) null, mockPrintStream0, byteArray0, (byte)0, false);
      uTF8JsonGenerator0.flush();
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'i';
      charArray0[2] = 'n';
      charArray0[3] = '0';
      charArray0[4] = '|';
      charArray0[5] = 'M';
      charArray0[6] = 'T';
      charArray0[7] = 'g';
      charArray0[8] = '&';
      uTF8JsonGenerator0.writeRaw(charArray0, (int) (byte)11, (int) (byte)0);
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-106);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (byte) (-106), (ObjectCodec) null, (OutputStream) null, byteArray0, 1, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.flush();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 80, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeUTF8String(byteArrayBuilder0.NO_BYTES, 2, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 9, false);
      uTF8JsonGenerator0.flush();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeBinary((Base64Variant) null, byteArray0, 1738, (-2957));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", false);
      OutputStream outputStream0 = null;
      ObjectCodec objectCodec0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1548), (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((-208.2937F));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#%I'TAce~V\"R)jt30!k", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("#%I'TAce~V\"R)jt30!k");
      StringReader stringReader0 = new StringReader("#%I'TAce~V\"R)jt30!k");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = tokenFilter0.includeProperty("write a number");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter1, false, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext2, (-1561), (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)15);
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.flush();
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1738, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2774), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      tokenFilter0.includeProperty("MrOM1+#w-NC=9A");
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, false);
      filteringParserDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, (-2665), (ObjectCodec) null, byteArrayBuilder0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((short) (-896));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "Too few bytes available: missing ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber(67);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0.writeStartObject();
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Current context not an ARRAY but ", true);
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("?>mHKX95Cmp1X{b");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8000, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)15);
      uTF8JsonGenerator0._releaseBuffers();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRaw('a');
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1738, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)98;
      byteArrayBuilder0.write(byteArray0, 0, 1);
      SerializedString serializedString0 = new SerializedString("Tq@*?)0Qk,W:^j");
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName(serializedString0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw("JFSM&_S$");
      assertEquals(8, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockPrintStream0);
      uTF8JsonGenerator0.writeNumber((short)15);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeRawValue((SerializableString) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Too few bytes available: missing ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Too few bytes available: missing ");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 2, true);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("Too few bytes available: missing ");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeRaw("");
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", false);
      iOContext0.allocTokenBuffer((-4565));
      MockPrintStream mockPrintStream0 = new MockPrintStream(", expecting field name");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "Ux!<F";
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, ", expecting field name", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-110);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, printStream0, byteArray0, (byte)122, false);
      assertEquals(122, uTF8JsonGenerator0.getOutputBuffered());
      
      uTF8JsonGenerator0.flush();
      int int0 = uTF8JsonGenerator0.getOutputBuffered();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("C R", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1942), (ObjectCodec) null, mockFileOutputStream0);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0._writePPFieldName("Expected space separating root-level values");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 115, (ObjectCodec) null, (Writer) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      filteringGeneratorDelegate0.getCodec();
      String string0 = "DGA^r2Vqkn";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DGA^r2Vqkn");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 18, (ObjectCodec) null, dataOutputStream0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, byteArrayBuilder0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Ux!<F", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(", expecting field name");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "Ux!<F";
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, ", expecting field name", objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-110);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, (byte) (-24), false);
      uTF8JsonGenerator0.flush();
      assertEquals((-24), uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-42);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, (ObjectCodec) null, (OutputStream) null, byteArray0, 1408, false);
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeString("Bw'03S/0o");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = null;
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-120);
      boolean boolean0 = false;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 2, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 3, true);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Trying to call same allocXxx() method second time
//         //
//         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 102, (ObjectCodec) null, objectOutputStream0, byteArrayBuilder0.NO_BYTES, (-3), true);
      String string0 = ">],v";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)98;
      // Undeclared exception!
//      try { 
        byteArrayBuilder0.write(byteArray0, 0, (int) (byte)86);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.close();
      // Undeclared exception!
//      try { 
        uTF8JsonGenerator0.writeNumber((float) 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1649), (ObjectCodec) null, stringWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, true);
      filteringGeneratorDelegate0.getCodec();
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
//      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, (OutputStream) null, (byte[]) null, 1, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
//      }
  }
}
