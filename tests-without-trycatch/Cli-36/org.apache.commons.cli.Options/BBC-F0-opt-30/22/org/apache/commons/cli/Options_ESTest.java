/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 05:13:56 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      List<Option> list0 = options0.helpOptions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup0 = options0.getOptionGroup(option0);
      assertNull(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = options0.getOptionGroup(option0);
      assertNotNull(optionGroup2);
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("K", true, "K");
      option0.setRequired(true);
      options0.addOption(option0);
      Option option1 = options0.getOption("K");
      assertEquals((-1), Option.UNINITIALIZED);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator('I');
      options0.addOption(option0);
      Option option1 = options0.getOption((String) null);
      assertFalse(option1.isRequired());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("dqNO_ARGS_ALWED", "&{+u,(6kXKl'.D`", true, "%");
      Option option0 = options1.getOption("dqNO_ARGS_ALWED");
      option0.setOptionalArg(true);
      Option option1 = options0.getOption("dqNO_ARGS_ALWED");
      assertEquals("%", option1.getDescription());
      assertEquals("&{+u,(6kXKl'.D`", option1.getLongOpt());
      assertTrue(option1.hasArg());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("dqNO_ARGS_ALWED", "&{+u,(6kXKl'.D`", true, "%");
      Option option0 = options1.getOption("dqNO_ARGS_ALWED");
      assertEquals(1, option0.getArgs());
      
      option0.setArgs((-2));
      Option option1 = options0.getOption("dqNO_ARGS_ALWED");
      assertEquals("%", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("M", ")J", false, ")J");
      Option option0 = options0.getOption("M");
      option0.setArgName("M");
      Option option1 = options0.getOption("M");
      assertEquals(")J", option1.getLongOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals(")J", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption((String) null, "");
      Option option0 = options0.getOption((String) null);
      assertNotNull(option0);
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption((String) null, "2YuCE");
      List<Option> list0 = options0.helpOptions();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "@5*F.ykSIU", false, "[ Options: [ short ");
      // Undeclared exception!
//      try { 
        options1.getMatchingOptions((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("_P^i $YNjSL5x^F", false, "2-QL$z |5rVTbfVV=");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '_P^i $YNjSL5x^F' contains an illegal character : '^'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("uB}@tH?jt]9!", "org.apache.commons.cli.AlreadySelectedException", true, " ]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option 'uB}@tH?jt]9!' contains an illegal character : '}'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ]", true, "");
      Option option0 = options1.getOption("");
      options1.addOption(option0);
      assertEquals("", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals(" ]", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("dqNO_ARGS_ALWED", "&{+u,(6kXKl'.D`", true, "%");
      boolean boolean0 = options0.hasShortOption("dqNO_ARGS_ALWED");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasShortOption(" ]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "");
      boolean boolean0 = options1.hasLongOption("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasLongOption("52!f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", ")N$MnTt<jiZ%[", false, "h;v|f?n4G_`vijS|");
      boolean boolean0 = options0.hasOption(")N$MnTt<jiZ%[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", " ]", true, "");
      boolean boolean0 = options0.hasOption("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasOption("%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", " ]", true, "");
      List<String> list0 = options0.getMatchingOptions("");
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("dqNO_ARGS_ALWED", "&{+u,(6kXKl'.D`", true, "%");
      List<String> list0 = options0.getMatchingOptions("'");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("dqNO_ARGS_ALWED", "&{+u,(6kXKl'.D`", true, "%");
      List<String> list0 = options0.getMatchingOptions("&{+u,(6kXKl'.D`");
      assertTrue(list0.contains("&{+u,(6kXKl'.D`"));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("dqNO_ARGS_ALWED", "&{+u,(6kXKl'.D`", true, "%");
      Option option0 = options1.getOption("dqNO_ARGS_ALWED");
      assertEquals(1, option0.getArgs());
      assertNotNull(option0);
      
      option0.setArgs(0);
      Option option1 = options0.getOption("dqNO_ARGS_ALWED");
      assertEquals("&{+u,(6kXKl'.D`", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("2YuCE", false, "2YuCE");
      option0.setRequired(true);
      options0.addOption(option0);
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "7", false, "J'");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = options1.getOptionGroup(option0);
      assertFalse(option0.isRequired());
      assertNotNull(optionGroup2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      Collection<OptionGroup> collection0 = options0.getOptionGroups();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = options0.getOption("7");
      // Undeclared exception!
//      try { 
        options0.getOptionGroup(option0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      String string0 = options0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      List list0 = options0.getRequiredOptions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      Collection<Option> collection0 = options0.getOptions();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("]Ue^.~^jE/y'", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ']Ue^.~^jE/y'' contains an illegal character : ']'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "6hG;{N}SEMhu");
      assertSame(options0, options1);
  }
}
