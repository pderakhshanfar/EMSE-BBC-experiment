/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:03:41 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      List<Option> list0 = options0.helpOptions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "$3W:V", true, "");
      List<Option> list0 = options1.helpOptions();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("sTwbeVYT36cX2WfdPu", "kI7s@ul^/]44/jG8", false, "$3W:V");
      OptionGroup optionGroup0 = options0.getOptionGroup(option0);
      assertNull(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = options1.getOptionGroup(option0);
      assertFalse(option0.isRequired());
      assertNotNull(optionGroup2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = options1.getOptionGroup(option0);
      assertFalse(option0.isRequired());
      assertNotNull(optionGroup2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("sTwbeVYT36cX2WfdPu", "kI7s@ul^/]44/jG8", false, "$3W:V");
      option0.setValueSeparator('6');
      options0.addOption(option0);
      Option option1 = options0.getOption("sTwbeVYT36cX2WfdPu");
      assertFalse(option1.hasOptionalArg());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("lyL9h", " ] [ long 1/),l]6mOu)@!A5o{#P#gbeCZ',Y", true, "e");
      option0.setOptionalArg(true);
      Options options1 = options0.addOption(option0);
      Option option1 = options1.getOption(" ] [ long 1/),l]6mOu)@!A5o{#P#gbeCZ',Y");
      assertEquals((-1), Option.UNINITIALIZED);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("A", "[ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]", false, "[ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]");
      option0.setArgs(1572);
      Options options1 = options0.addOption(option0);
      Option option1 = options1.getOption("[ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]");
      assertEquals((-1), Option.UNINITIALIZED);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", true, "kI7s@ul^/]44/jG8");
      Options options1 = options0.addOption(option0);
      option0.setArgName("peb");
      Option option1 = options1.getOption("");
      assertTrue(option1.hasArg());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      options0.addOption(option0);
      option0.setArgs(0);
      Option option1 = options0.getOption((String) null);
      assertFalse(option1.isRequired());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "");
      assertSame(options0, options1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", "", true, "Yt^H5+65[nRv7KM^h.");
      // Undeclared exception!
//      try { 
        options0.getMatchingOptions((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("]", false, (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal option name ']'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("[ option: A [ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]  :: [ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ] :: class java.lang.String ]", "5h%/@WgI]6*{i7TD2", false, "[ option: A [ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]  :: [ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ] :: class java.lang.String ]");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ option: A [ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]  :: [ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ] :: class java.lang.String ]' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      options0.addOption(option0);
      boolean boolean0 = options0.hasShortOption("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasShortOption("kI7s@ul^/]44/jG8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", "", true, "Yt^H5+65[nRv7KM^h.");
      boolean boolean0 = options0.hasLongOption("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasLongOption("sTwbeVYT36cX2WfdPu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "$3W:V", true, "");
      boolean boolean0 = options1.hasOption("$3W:V");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("lyL9h", " ] [ long 1/),l]6mOu)@!A5o{#P#gbeCZ',Y", true, "e");
      options0.addOption(option0);
      boolean boolean0 = options0.hasOption("lyL9h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasOption("$3W:V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "5h%/@WgI]6*{i7TD2", false, ")w[]yM!q.>`");
      List<String> list0 = options1.getMatchingOptions("");
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption((String) null, "1/),l]6mOu)@!A5o{#P#gbeCZ',Y", false, "Dvm*>V0>kSCplK");
      List<String> list0 = options0.getMatchingOptions("1/),l]6mOu)@!A5o{#P#gbeCZ',Y");
      assertTrue(list0.contains("1/),l]6mOu)@!A5o{#P#gbeCZ',Y"));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      List<String> list0 = options0.getMatchingOptions("\"");
      assertFalse(list0.contains("\""));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("CjP", false, "rKP#e(g");
      option0.setRequired(true);
      options0.addOption(option0);
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("sTwbeVYT36cX2WfdPu", "kI7s@ul^/]44/jG8", false, "$3W:V");
      option0.setRequired(true);
      options0.addOption(option0);
      Option option1 = options0.getOption("sTwbeVYT36cX2WfdPu");
      assertEquals("sTwbeVYT36cX2WfdPu", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "$3W:V", true, "");
      List<String> list0 = options1.getMatchingOptions("\"");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      Collection<OptionGroup> collection0 = options0.getOptionGroups();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = options0.getOption("sTwbeVYT36cX2WfdPu");
      // Undeclared exception!
//      try { 
        options0.getOptionGroup(option0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      String string0 = options0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      List list0 = options0.getRequiredOptions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      Collection<Option> collection0 = options0.getOptions();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption(" ]", "$3W:V");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option ' ]' contains an illegal character : ' '
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("A", false, "[ option: A [ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]  :: [ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ] :: class java.lang.String ]");
      assertSame(options0, options1);
  }
}
