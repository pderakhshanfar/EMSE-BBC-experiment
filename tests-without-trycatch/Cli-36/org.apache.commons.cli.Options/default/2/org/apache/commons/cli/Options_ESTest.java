/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:09:58 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      List<Option> list0 = options0.helpOptions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("fW", "J|[tGBqa", false, "K-&");
      List<Option> list0 = options1.helpOptions();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("V2B9", "-", true, " ] [ long ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = options0.getOptionGroup(option0);
      assertFalse(option0.isRequired());
      assertNotNull(optionGroup2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("d", "d", true, "d");
      option0.setRequired(true);
      Options options1 = options0.addOption(option0);
      Option option1 = options1.getOption("d");
      assertEquals("d", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("_GW92", "$e<4#xi(6iI7F\"f!n", true, "$e<4#xi(6iI7F\"f!n");
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator(',');
      Option option1 = options1.getOption("_GW92");
      assertEquals("$e<4#xi(6iI7F\"f!n", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("_GW2", "Pe<4dxi(6iIF\"f!n", true, "Pe<4dxi(6iIF\"f!n");
      options0.addOption(option0);
      option0.setOptionalArg(true);
      Option option1 = options0.getOption("Pe<4dxi(6iIF\"f!n");
      assertEquals("Pe<4dxi(6iIF\"f!n", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("d", "d", true, "d");
      option0.setArgs((-2));
      options0.addOption(option0);
      Option option1 = options0.getOption("d");
      assertEquals("d", option1.getOpt());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", false, "[ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]");
      option0.setArgName("AChM=c4Skw0$`h'{[");
      Options options1 = options0.addOption(option0);
      Option option1 = options1.getOption("");
      assertEquals((-1), Option.UNINITIALIZED);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("_GW2", "Pe<4dxi(6iIF\"f!n", true, "Pe<4dxi(6iIF\"f!n");
      options0.addOption(option0);
      option0.setArgs(0);
      Option option1 = options0.getOption("Pe<4dxi(6iIF\"f!n");
      assertTrue(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.getOptionGroup((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, ".X*E#rxpBm+:aB//X/", false, (String) null);
      // Undeclared exception!
//      try { 
        options1.getMatchingOptions((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOptionGroup((OptionGroup) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption((Option) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.cli.Options", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("?8jYOj>|[we8aVj", "", true, "NO_ARGS_ALLOWED");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '?8jYOj>|[we8aVj' contains an illegal character : '?'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
//      try { 
        options0.addOption("|nH<:CF4t=\"LH[1,_9r", (String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '|nH<:CF4t=\"LH[1,_9r' contains an illegal character : '|'
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption((String) null, " ] [ long ");
      boolean boolean0 = options0.hasShortOption((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasShortOption((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("_GW2", "Pe<4dxi(6iIF\"f!n", true, "Pe<4dxi(6iIF\"f!n");
      options0.addOption(option0);
      boolean boolean0 = options0.hasLongOption("Pe<4dxi(6iIF\"f!n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasLongOption((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("u4fw", "85B", false, "<%00m*';");
      boolean boolean0 = options0.hasOption("85B");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("1IWC", "1IWC");
      boolean boolean0 = options0.hasOption("1IWC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasOption("]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "~/", false, "");
      List<String> list0 = options1.getMatchingOptions("");
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("_GW2", "Pe<4dxi(6iIF\"f!n", true, "Pe<4dxi(6iIF\"f!n");
      Options options1 = options0.addOption(option0);
      List<String> list0 = options1.getMatchingOptions("]");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("_GW2", "Pe<4dxi(6iIF\"f!n", true, "Pe<4dxi(6iIF\"f!n");
      options0.addOption(option0);
      List<String> list0 = options0.getMatchingOptions("Pe<4dxi(6iIF\"f!n");
      assertTrue(list0.contains("Pe<4dxi(6iIF\"f!n"));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = options0.getOption("Pe<4dxi(6iIF\"f!n");
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("d", "d", true, "d");
      option0.setRequired(true);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      assertSame(options2, options0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("V2B9", "-", true, " ] [ long ");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = options0.getOptionGroup(option0);
      assertFalse(option0.isRequired());
      assertNotNull(optionGroup1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      Collection<OptionGroup> collection0 = options0.getOptionGroups();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("85B", false, "u4fw");
      OptionGroup optionGroup0 = options0.getOptionGroup(option0);
      assertNull(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      String string0 = options0.toString();
      // Undeclared exception!
//      try { 
        options0.addOption(string0, true, string0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The option '[ Options: [ short java.util.LinkedHashMap@0000000002 ] [ long {} ]' contains an illegal character : '['
//         //
//         verifyException("org.apache.commons.cli.OptionValidator", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      List list0 = options0.getRequiredOptions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      Collection<Option> collection0 = options0.getOptions();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("3G", true, "[kOvsIO<");
      Option option0 = options0.getOption("3G");
      assertNotNull(option0);
      
      options0.addOption(option0);
      assertFalse(option0.hasLongOpt());
      assertEquals("[kOvsIO<", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
  }
}
