/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 15:48:01 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(149);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(33, node0, node0, node0, node1, 42, 148);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // CONST is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(110, node0, node0, node0, node0, 55, 102);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SWITCH 55 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(38);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NAME is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("+(5[1k");
      CompilerInput compilerInput0 = new CompilerInput(syntheticAst0, false);
      Node node0 = compilerInput0.getAstRoot((AbstractCompiler) null);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) null);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createGlobalScope(node0);
      TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
      TypeInference typeInference0 = null;
//      try {
        typeInference0 = new TypeInference((AbstractCompiler) null, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, treeMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(35, node0, node0, node0, node0, (-10), 8);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(31);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DELPROP : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(20, node0, node0, node0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(37, node0, node0, node0, node0, (-111), 57);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("r$", "r$", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(30, node0, node0, node0, node0, 54, 41);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(22, node0, node0, node0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(12, node0, node0, node0, node0, 12, (-460));
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(116);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("/Re]uFS!t%XbV'i9N_W", "/Re]uFS!t%XbV'i9N_W", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(101);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(130);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(32, node0, node0, node0, node0, (-2413), 0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("u", "u", "u");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = Node.newString("u");
      Node node2 = StatementFusion.fuseExpressionIntoExpression(node0, node1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(18, node0, node0, node0, node0, 43, (-3501));
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(33);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      // Undeclared exception!
//      try { 
        TypeInference.getBooleanOutcomes((BooleanLiteralSet) null, booleanLiteralSet0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(51);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node2 = new Node(100, node1, node0, node0, node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // OR does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPasConfig$17", "com.google.javascript.jscomp.DefaultPasConfig$17", "com.google.javascript.jscomp.DefaultPasConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Node node1 = new Node(37, node0, node0, node0, node0, 40, 57);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("$Ff4$", jSTypeNative0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("$Ff4$", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // CALL 40 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[1];
      NamedType namedType0 = jSTypeRegistry0.createNamedType("com.google.javascript.jscomp.TypeInference", "_BbUo[O]:eh", (-50), (-2236));
      jSTypeArray0[0] = (JSType) namedType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(4, node0, node0, node0, node0, 29, 57);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(1, node0, node0, node0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 1
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(155, node0, node0, node0, node0, 4, 46);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // CAST 4 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(154, node0, node0, node0, node0, 4, 2);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // STRING_KEY 4 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(153, node0, node0, 153, 147);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // LABEL_NAME 153 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPssConfig$17", "com.google.javascript.jscomp.DefaultPssConfig$17", "com.google.javascript.jscomp.DefaultPssConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(152, node0, node0, node0, node0, 143, 3);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DEBUGGER 143 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(151, node0, node0, node0, node0, 4, 2);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 151
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(150, node0, node0, node0, node0, 12, 57);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(148, node0, node0, node0, node0, (-43), 0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SETTER_DEF does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = Node.newString(147, "Function literal argument refers to undefined this argument", 43, 32);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(146, node0, node0, node0, node0, 31, 42);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.InlineVariables$Mode", "", "h");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(145, node0, node0, node0, node0, 57, 52);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 145
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(144, node0, node0, node0, node0, 54, 12);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 144
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(143);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 143
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(142, node0, node0, 109, 10000);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 142
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(141);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 141
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(140);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 140
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(139, node0, node0, node0, node0, 116, 1930);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 139
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.InlineVariables$Mode", "com.google.javascript.jscomp.InlineVariables$Mode", "com.google.javascript.jscomp.InlineVariables$Mode");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(138, node0, node0, node0, node0, 0, 0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 138
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(137);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 137
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(116);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = node0;
      nodeArray0[1] = node1;
      Node node2 = new Node(136, nodeArray0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 136
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(135);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 135
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Node node1 = new Node(134);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 134
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("prototype", "prototype", "prototype");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = Node.newString(133, "com.google.javascript.jscomp.DefaultPassConfig$17", 123, 36);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 133
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = Node.newString(131, "", 32, 42);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 131
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(130, node0, node0, node0, node0, 53, 132);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("", jSTypeNative0);
      ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("com.google.javascript.jscomp.DefaultPassConfig$17", codingConvention_AssertionFunctionSpec0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableBiMap0, (Comparator<? super String>) comparator0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // EXPR_RESULT 53 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(129, node0, node0, node0, node0, 4095, 1837);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 129
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.InlineVariables$Mode", "com.google.javascript.jscomp.InlineVariables$Mode", "com.google.javascript.jscomp.InlineVariables$Mode");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(128, node0, node0, node0, node0, 57, 40);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 128
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(127, node0, node0, node0, node0, 54, 12);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 127
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(126);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // LABEL does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(125, node0, node0, node0, node0, 54, 36);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BLOCK 54 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPssConfig$17", "com.google.javascript.jscomp.DefaultPssConfig$17", "com.google.javascript.jscomp.DefaultPssConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(124, node0, node0, node0, node0, 143, 3);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // EMPTY 143 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(123, node0, node0, node0, node0, 4, 50);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 123
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascr2pt.jscomp.DefaultPssConfi$17", "com.google.javascr2pt.jscomp.DefaultPssConfi$17");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(122, node0, node0, node0, node0, 50, 1071);
      TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // VOID 50 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(121, node0, node0, node0, node0, 55, (-785));
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(120, node0, node0, node0, node0, 54, 12);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(119, node0, node0, node0, node0, 32, 157);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // WITH 32 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(118);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention((CodingConvention) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // VAR does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(116);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node2 = new Node(100, node1, node1, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(115, node0, node0, node0, node0, 32, 135);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // FOR 32 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(114, node0, node0, 33, 1458);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(113, node0, node0, 37, 16);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // WHILE 37 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(112, 57, (-1671));
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DEFAULT_CASE does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(109);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "this.");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(108, node0, node0, node0, node0, 52, (-916));
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // IF does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("RbM", "RbM", "RbM");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(107, node0, node0, node0, node0, 31, 54);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 107
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(106, node0, node0, node0, node0, 4, 2);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 106
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(105);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // FUNCTION <invalid> does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(103, node0, node0, node0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DEC : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(99, node0, node0, node0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 99
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("\".sa/VLY@<B+", "\".sa/VLY@<B+", "com.google.javascrit.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(98);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(97, node0, node0, node0, node0, 0, (-42));
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(96);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("Function literal argument refers to undefined this argument", "Function literal argument refers to undefined this argument", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(95);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(93);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPasConfig$17", "com.google.javascript.jscomp.DefaultPasConfig$17", "com.google.javascript.jscomp.DefaultPasConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(92);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ASSIGN_URSH : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = Node.newString("com.google.javaGcript.jscomp.DefaultPassConfig$17");
      Node node2 = StatementFusion.fuseExpressionIntoExpression(node0, node1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // COMMA : ? does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(81);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 81
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(80, node0, node0, node0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 80
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(78, node0, node0, node0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 78
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(77, node0, node0, node0, node0, 2, (-1943));
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // TRY does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(76, node0, node0, node0, node0, 15, 131);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 76
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node1 = new Node(75, node0, node0, node0, node0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 75
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("f.sa/VLY5[@<wzB+", "f.sa/VLY5[@<wzB+", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(74);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 74
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(71);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 71
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(69, node0, node0, node0, node0, 224, (-1481));
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 69
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(62);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(57, node0, node0, node0, node0, 4, 42);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 57
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(56, node0, node0, node0, node0, 57, 15);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 56
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(55, node0, node0, node0, node0, 32, 56);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 55
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("/Re]uFS!t%XbV'i9N_W", "/Re]uFS!t%XbV'i9N_W", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(54, node0, node0, node0, node0, (-19), 111);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 54
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(53, node0, node0, node0, node0, 2, 151);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 53
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(52);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // INSTANCEOF : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(50, node0, node0, node0, node0, (-58), 4);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 50
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(49);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // THROW does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(48, node0, node0, node0, node0, 136, 100);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 48
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(47);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // REGEXP does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("/Re]uFS!t%XbV'i9N_W", "/Re]uFS!t%XbV'i9N_W", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"&PWuC9c2@YT");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("/Re]uFS!t%XbV'i9N_W", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      Node node1 = new Node(46, node0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javaGript.jscomp.DefaultPasC;nfig$17", "com.google.javaGript.jscomp.DefaultPasC;nfig$17", "com.google.javaGript.jscomp.DefaultPasC;nfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = new Node(45);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SHEQ : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("/Re]uFS!t%XbV'i9N_W", "/Re]uFS!t%XbV'i9N_W", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(43, node0, node0, node0, node0, 8, (-259));
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // FALSE does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(42, node0, node0, node0, node0, 56, 1388);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // THIS 56 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = Node.newNumber((double) 53);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // NUMBER 53.0 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(36, node0, node0, node0, node0, 51, 50);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 36
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("/Re]uFS!t%XbV'i9N_W", "/Re]uFS!t%XbV'i9N_W", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(29, node0, node0, node0, node0, 49, 33);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // NEG 49 : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(27, node0, node0, node0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BITNOT : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(26);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.InlineVariables$Mode", "com.google.javascript.jscomp.InlineVariables$Mode", "com.google.javascript.jscomp.InlineVariables$Mode");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(25, node0, node0, node0, node0, 52, 155);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.InlineVariables$Mode", "com.google.javascript.jscomp.InlineVariables$Mode", "com.google.javascript.jscomp.InlineVariables$Mode");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(23, node0, node0, node0, node0, 52, 155);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17", "com.google.javascript.jscomp.DefaultPassConfi$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(16, (-4096), (-3545));
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("com.google.javascript.jscomp.DefaultPassConfi$17");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0, "com.google.javascript.jscomp.DefaultPassConfi$17", codingConvention_AssertionFunctionSpec0, "prototype", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // GT : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17", "com.google.javaGcript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(15, 15, 51);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // LE 15 : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Node node1 = new Node(8, node0, node0, node0, node0, (-468), 110);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      Node node1 = new Node(5, node0, node0, node0, node0, (-534), 43);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 5
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "this.");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(4);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("u", "u", "u");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
      controlFlowGraph0.connect(node0, controlFlowGraph_Branch0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, treeMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SCRIPT 1 [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000618] [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000619] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000620] does not have a condition.
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.SYN_BLOCK;
      controlFlowGraph0.connectToImplicitReturn(node0, controlFlowGraph_Branch0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(101, node0, node0, 8, 116);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // AND 8 does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      assertNotNull(flowScope0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17", "com.google.javascript.jscomp.DefaultPassConfig$17");
      JsAst jsAst0 = new JsAst(sourceFile0);
      Node node0 = jsAst0.getAstRoot(compiler0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      Scope scope0 = Scope.createGlobalScope(node0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      Node node1 = new Node(63, node0, node0, node0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ARRAYLIT : Array does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }
}
