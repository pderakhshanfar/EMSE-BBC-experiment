/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 15:49:29 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import com.google.common.collect.LinkedListMultimap;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.CodingConventions;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ExploitAssigns;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeReplaceKnownMethods;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
import com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TreeMap;
import java.util.Vector;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;U+oa+%1z:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node.newString(153, ".", 1328, 5);
      Node node1 = new Node(62);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference1.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("S)", "S)");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Node node1 = new Node(70);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;U+oa+%1z:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      JsAst jsAst1 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst1.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = compiler0.parse(sourceFile0);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;U+oa+%1z:8P?12`", true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap1.headMap(",;U+oa+%1z:8P?12`", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Node.newString(30, ",;U+oa+%1z:8P?12`", 52, 2869);
      Node node2 = new Node(93);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      TypeInference typeInference2 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference2.createInitialEstimateLattice();
      // Undeclared exception!
//      try { 
        typeInference1.flowThrough(node2, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = Node.newString("", 915, 142);
      node0.addChildToBack(node1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, true);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(1331);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableBiMap0);
      Node.newString((-90), ":\"nm>WGPT#^'");
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableBiMap0);
      Node node3 = compiler0.parse(sourceFile0);
      Node node4 = new Node(100, node3, 36, 49);
      // Undeclared exception!
//      try { 
        typeInference1.flowThrough(node4, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("`(", "`(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.subMap("`(", true, "`(", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(10);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"uZ", "\"uZ");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      mockFile0.createNewFile();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(44);
      compiler0.reportCodeChange();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"uZ");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"uZ", "\"uZ");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      mockFile0.createNewFile();
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(22);
      compiler0.reportCodeChange();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("\"uZ");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(linkedFlowScope0, flowScope0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fU`'(", "fU`'(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("fU`'(");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.equals(immutableSortedMap0);
      Node node1 = new Node(64);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      compiler0.check();
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fU`'(", "fU`'(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.tailMap("fU`'(", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(72);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 72
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      scope0.getDeclarativelyUnboundVarsWithoutTypes();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(95);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope2 = LinkedFlowScope.createEntryLattice(scope0);
      typeInference0.flowThrough(node1, linkedFlowScope2);
      // Undeclared exception!
//      try { 
        SimpleDefinitionFinder.getNameNodeFromFunctionNode(node1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[0];
      JSType jSType0 = jSTypeRegistry1.createUnionType(jSTypeArray0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, jSType0, jSType0, jSType0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      JsAst jsAst1 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst1.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      compiler0.getTypeRegistry();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(34);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      FlowScope flowScope0 = linkedFlowScope_FlowScopeJoinOp0.apply((FlowScope) linkedFlowScope0, (FlowScope) linkedFlowScope0);
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap1.tailMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(69);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      TypeInference typeInference2 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      FlowScope flowScope0 = typeInference2.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~:mL", "~:mL");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_TRUE;
      controlFlowGraph0.connectIfNotFound(node0, controlFlowGraph_Branch0, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(155);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      FlowScope flowScope1 = linkedFlowScope_FlowScopeJoinOp0.apply(flowScope0, flowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node0, flowScope1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SCRIPT [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000203] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000204] does not have a condition.
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.javascript.rhino.jstype.SimpleReference", "com.google.javascript.rhino.jstype.SimpleReference");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("com.google.javascript.rhino.jstype.SimpleReference", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(41);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      LinkedList<FlowScope> linkedList0 = new LinkedList<FlowScope>();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // NULL does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap1.tailMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = Node.newString(31, "Object#Key", 4, 37);
      Node node2 = new Node(79);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      FlowScope flowScope0 = typeInference1.flowThrough(node2, linkedFlowScope0);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fU`'(", "fU`'(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(18);
      jsAst0.setSourceFile(sourceFile0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fU`k(", "fU`k(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("fU`k(", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(60);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      Node node2 = new Node(39);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fU`'(", "fU`'(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) treeMap0);
      immutableSortedMap0.tailMap("fU`'(");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(98);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.flowThrough(node0, linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = new Node(85, node0);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.tailMap("");
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".", ".");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(14);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference1.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Stack<JSType> stack0 = new Stack<JSType>();
      stack0.add((JSType) null);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".", ".");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;
      controlFlowGraph0.connectToImplicitReturn(node0, controlFlowGraph_Branch0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(4095);
      Node node2 = compiler0.jsRoot;
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SCRIPT [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000203] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000204] does not have a condition.
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = Node.newString(38, "");
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      ImmutableBiMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      Node node2 = new Node(127);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node2, flowScope0, false);
      FlowScope flowScope2 = typeInference1.flowThrough(node2, flowScope1);
      assertNotSame(flowScope2, flowScope0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      Node node1 = new Node(30, node0, (-1), 1860);
      node0.addChildToBack(node1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(2176);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("2}`({LNB$%pQDxlUq");
      ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("WYQ'n;,'v4$0OZAypo(", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableBiMap0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableBiMap0);
      FlowScope flowScope0 = typeInference1.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("3H", "3H");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(107);
      node0.addChildToBack(node1);
      ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Object#Key", jSTypeNative0);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec1 = new CodingConvention.AssertionFunctionSpec("3H");
      ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("Object#Element", codingConvention_AssertionFunctionSpec0, "Object#Key", codingConvention_AssertionFunctionSpec1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableBiMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      FlowScope flowScope2 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope2, flowScope1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]`(", "]`(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("]`(", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(9);
      typeInference0.flowThrough(node1, linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = LinkedFlowScope.createEntryLattice(scope0);
      assertNotSame(linkedFlowScope2, linkedFlowScope1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Vector<JSType> vector0 = new Vector<JSType>();
      node0.setType(66);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fU`'(", "fU`'(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.tailMap("fU`'(", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(65);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%1z:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Scope scope0 = Scope.createGlobalScope(node0);
      node0.addChildToBack(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.UNCOND;
      controlFlowGraph0.connectToImplicitReturn(node0, controlFlowGraph_Branch0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(43);
      Node node2 = compiler0.jsRoot;
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.tailMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(94);
      Node node2 = new Node(77);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference1.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;U+oa+%1z:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      CodingConventions.Proxy codingConventions_Proxy0 = new CodingConventions.Proxy(closureCodingConvention0);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention(codingConventions_Proxy0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      Node node1 = new Node(134);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 134
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fU`'(", "fU`'(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.tailMap("fU`'(", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(61);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      linkedFlowScope0.createChildFlowScope();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED", "JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = linkedFlowScope1.getRootNode();
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, true);
      node0.children();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      LinkedFlowScope.createEntryLattice(scope0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      Node node2 = new Node(90);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      typeInference0.flowThrough(node2, linkedFlowScope2);
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node node1 = Node.newString(38, "");
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node((-1945));
      Node node3 = compiler0.jsRoot;
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      Node node4 = ControlFlowAnalysis.computeFallThrough(node1);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node4, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // NAME  does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      closureCodingConvention0.isPrototypeAlias(node0);
      Node node1 = new Node(47);
      typeInference0.createEntryLattice();
      Node node2 = new Node(106);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      typeInference0.branchedFlowThrough(node0, flowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 106
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      immutableSortedMap0.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      ControlFlowGraph<Node> controlFlowGraph1 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      MockFile mockFile1 = new MockFile(".disposeInternal", "prototype");
      mockFile1.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(88);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      System.setCurrentTimeMillis(57);
      FlowScope flowScope1 = typeInference0.createEntryLattice();
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(42, nodeArray0);
      node0.addChildToBack(node1);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, false);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(153);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("com.google.javascript.rhino.jstype.TemplateType", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableBiMap0);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED", "JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = linkedFlowScope1.getRootNode();
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      LinkedFlowScope.createEntryLattice(scope0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      Node node2 = new Node(77);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      typeInference0.flowThrough(node2, linkedFlowScope2);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]", "]");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope0.completeScope(scope0);
      Node node1 = new Node(46);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(122);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;$oa+%Q18:8P?'12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node1);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("s'35$t{2)");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(128);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference1.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("fU`'(", "fU`'(");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("fU`'(", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = new Node(35);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node1 = new Node(92);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = compiler0.jsRoot;
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ASSIGN_URSH : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(25);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      ImmutableBiMap<String, CodingConvention.AssertionFunctionSpec> immutableBiMap0 = ImmutableBiMap.of("PO~Ra=V4}1`]Dy9g\"", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableBiMap0);
      FlowScope flowScope0 = typeInference1.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node1 = new Node(104);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = compiler0.jsRoot;
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 104
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(26);
      typeInference0.flowThrough(node1, linkedFlowScope0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      assertTrue(flowScope0.equals((Object)linkedFlowScope0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(116);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BREAK does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      Node node1 = new Node(123);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("com.google.javascript.rhino.JSTypeExpression");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      jsAst0.clearAst();
      Node node2 = new Node((-2447));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOfSorted((SortedMap<String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<FlowScope> vector0 = new Vector<FlowScope>();
      LinkedFlowScope.createEntryLattice(scope0);
      Node node4 = new Node(88, node0);
      FlowScope flowScope0 = typeInference0.flowThrough(node3, linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node4, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ASSIGN_BITXOR : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(138);
      node0.getIntProp(2);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      FlowScope flowScope1 = typeInference1.flowThrough(node1, flowScope0);
      typeInference1.flowThrough(node0, flowScope1);
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotSame(flowScope2, flowScope1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12y`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12y`", false);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node2 = new Node(151);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 151
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~:mL", "~:mL");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      compiler0.getTypeRegistry();
      ClosureCodingConvention closureCodingConvention1 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(114);
      ExploitAssigns exploitAssigns0 = new ExploitAssigns();
      Node node2 = exploitAssigns0.optimizeSubtree(node1);
      ControlFlowGraph<Node> controlFlowGraph1 = new ControlFlowGraph<Node>(node2, false, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph1, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DO does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;$oa+%Q18:8P?'12`", ",;$oa+%Q18:8P?'12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;$oa+%Q18:8P?'12`", false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;$oa+%Q18:8P?'12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureCodingConvention closureCodingConvention1 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      Node node1 = new Node(129);
      System.setCurrentTimeMillis(57);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      Node node2 = new Node(99, node1);
      node0.addChildToBack(node2);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      compiler0.getTypeRegistry();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(57);
      typeInference0.createInitialEstimateLattice();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 99
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;U+oa+%1z:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;U+oa+%1z:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Vector<JSType> vector0 = new Vector<JSType>();
      compiler0.getTypeRegistry();
      scope0.getTypeOfThis();
      Node node1 = new Node(19);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // RSH : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED", "JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node1 = linkedFlowScope1.getRootNode();
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      compiler0.getTypeRegistry();
      LinkedFlowScope.createEntryLattice(scope0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(87);
      System.setCurrentTimeMillis(51);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope2);
      assertNotSame(flowScope0, linkedFlowScope2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      compiler0.getTypeRegistry();
      Node node1 = new Node(80);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Node node2 = compiler0.jsRoot;
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 80
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(11);
      FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap0.headMap("", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node1 = new Node(4);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      ImmutableSortedMap.copyOfSorted((SortedMap<String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<FlowScope> vector0 = new Vector<FlowScope>();
      Node node2 = new Node(119, node1);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap1.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      MockFile mockFile1 = new MockFile("", "hMs FioN+");
      mockFile1.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      jSTypeRegistry0.createNamedType("hMs FioN+", "hMs FioN+", 55, 0);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(91);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      System.setCurrentTimeMillis(48);
      LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ASSIGN_RSH : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      closureCodingConvention0.isPrototypeAlias(node0);
      Node node1 = new Node(47);
      typeInference0.createEntryLattice();
      Node node2 = new Node(133);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      typeInference0.branchedFlowThrough(node0, flowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 133
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph1 = typeInference0.getCfg();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph1, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Vector<JSType> vector0 = new Vector<JSType>();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector1 = new Vector<JSType>();
      typeInference1.createEntryLattice();
      Vector<JSType> vector2 = new Vector<JSType>();
      Node node1 = new Node(150);
      TypeInference typeInference2 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      // Undeclared exception!
//      try { 
        typeInference2.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 150
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      Node node1 = new Node(123);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      ControlFlowGraph<Node> controlFlowGraph1 = new ControlFlowGraph<Node>(node1, true, true);
      ClosureCodingConvention closureCodingConvention1 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      compiler0.getTypeRegistry();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      typeInference0.getCfg();
      Node node2 = new Node(125);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BLOCK does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(closureCodingConvention0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(138);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      FlowScope flowScope2 = linkedFlowScope_FlowScopeJoinOp0.apply(flowScope0, flowScope1);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 138
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.subMap("", "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedListMultimap<CodingConvention.AssertionFunctionSpec, JSType> linkedListMultimap0 = LinkedListMultimap.create();
      List<JSType> list0 = linkedListMultimap0.values();
      jSTypeRegistry0.createParametersWithVarArgs(list0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Node node1 = new Node(144);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Node node2 = new Node(2);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 144
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "\\,;$oa+%Q18:8P?'12`";
      MockFile mockFile0 = new MockFile(",;$oa+%Q18:8P?'12`", ",;$oa+%Q18:8P?'12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;$oa+%Q18:8P?'12`", false);
      immutableSortedMap0.headMap(",;$oa+%Q18:8P?'12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Vector<JSType> vector0 = new Vector<JSType>();
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      mockFile0.getCanonicalFile();
      Node node1 = new Node(124);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      compiler1.getOptions();
      CleanupPasses cleanupPasses0 = new CleanupPasses((CompilerOptions) null);
      Scope scope1 = cleanupPasses0.topScope;
      jSTypeRegistry0.forwardDeclareType("`5\"zi\"");
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // EMPTY does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      Node node1 = new Node(123);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
      ControlFlowGraph<Node> controlFlowGraph1 = new ControlFlowGraph<Node>(node1, true, true);
      ClosureCodingConvention closureCodingConvention1 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      compiler0.getTypeRegistry();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) null, true);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      compiler0.getTypeRegistry();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph2 = typeInference0.getCfg();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph2, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      jsAst0.clearAst();
      Node node2 = new Node(73);
      FlowScope flowScope0 = typeInference1.createEntryLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      FlowScope flowScope2 = typeInference0.createInitialEstimateLattice();
      assertFalse(flowScope2.equals((Object)flowScope1));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      Node node1 = new Node(123);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("com.google.javascript.rhino.JSTypeExpression");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node2 = new Node((-2447));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = new Node(136);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOfSorted((SortedMap<String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<FlowScope> vector0 = new Vector<FlowScope>();
      Node node4 = new Node(103, node0);
      LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node4, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      Vector<JSType> vector0 = new Vector<JSType>();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector1 = new Vector<JSType>();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      Vector<JSType> vector2 = new Vector<JSType>();
      Node node2 = new Node(27);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // BITNOT : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.subMap("", "");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedListMultimap<CodingConvention.AssertionFunctionSpec, JSType> linkedListMultimap0 = LinkedListMultimap.create();
      List<JSType> list0 = linkedListMultimap0.values();
      jSTypeRegistry0.createParametersWithVarArgs(list0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      jsAst0.clearAst();
      Node node1 = Node.newString(149, "");
      Node node2 = new Node(12);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(2);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      typeInference0.createInitialEstimateLattice();
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      assertNotSame(flowScope2, flowScope1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      compiler0.getTypeRegistry();
      Vector<JSType> vector0 = new Vector<JSType>();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Node node1 = new Node(38);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      Node node2 = new Node(12);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter1 = closureReverseAbstractInterpreter0.append(chainableReverseAbstractInterpreter0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter1, scope0, immutableSortedMap0);
      typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(0L);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope1);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NAME is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      compiler0.getTypeRegistry();
      Node node1 = new Node(111);
      jSTypeRegistry0.getObjectIndexKey();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(317L);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      node0.setType(148);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(closureReverseAbstractInterpreter1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      typeInference0.createInitialEstimateLattice();
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
      StatementFusion statementFusion0 = new StatementFusion(false);
      Node node1 = statementFusion0.tryFuseStatementsAggressively(node0);
      List<FlowScope> list1 = typeInference1.branchedFlowThrough(node1, linkedFlowScope0);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~:mL", "~:mL");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      Node node1 = new Node(141);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 141
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      jsAst0.clearAst();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      Node node1 = new Node(110);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(228L);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(63);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ARRAYLIT : Array does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(33);
      System.setCurrentTimeMillis(49);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedDirectedGraph.create();
      Node node1 = new Node(55);
      typeInference0.createEntryLattice();
      controlFlowGraph0.pushEdgeAnnotations();
      Node node2 = new Node(120);
      typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(15);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      Node node1 = new Node(123);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node2 = new Node((-2447));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = new Node(136);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOfSorted((SortedMap<String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Vector<FlowScope> vector0 = new Vector<FlowScope>();
      Node node4 = new Node(78, node0);
      LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope1 = typeInference0.flowThrough(node4, flowScope0);
      FlowScope flowScope2 = typeInference0.flowThrough(node3, flowScope1);
      assertNotSame(flowScope2, flowScope0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("5!aAOk9,*g5Rq2*N{O", "5!aAOk9,*g5Rq2*N{O");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.descendingMap();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap0.headMap("5!aAOk9,*g5Rq2*N{O");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Vector<JSType> vector0 = new Vector<JSType>();
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      Node node1 = new Node(155);
      LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // CAST does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(108);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // IF does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedListMultimap<CodingConvention.AssertionFunctionSpec, JSType> linkedListMultimap0 = LinkedListMultimap.create();
      List<JSType> list0 = linkedListMultimap0.values();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(list0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      jsAst0.clearAst();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      Node node2 = new Node(102);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(0L);
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED", "JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      Node node1 = new Node(123);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node2 = new Node((-2447));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = new Node(136);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOfSorted((SortedMap<String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      Vector<FlowScope> vector0 = new Vector<FlowScope>();
      Node node4 = new Node(78, node0);
      node3.children();
      LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope1 = typeInference0.flowThrough(node4, flowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node3, flowScope1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 136
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(154);
      node1.setType(89);
      typeInference0.createInitialEstimateLattice();
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // ASSIGN_BITAND : number does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      node0.setType(84);
      typeInference0.createInitialEstimateLattice();
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      typeInference0.branchedFlowThrough(node0, flowScope0);
      List<FlowScope> list0 = new Vector<FlowScope>(47, 40);
      System.setCurrentTimeMillis(49);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]", "]");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.descendingMap();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("]");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      linkedFlowScope0.completeScope(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Vector<JSType> vector1 = new Vector<JSType>();
      compiler0.getTypeRegistry();
      Node node1 = new Node(152);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DEBUGGER does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedDirectedGraph.create();
      Node node1 = new Node(3);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      controlFlowGraph0.pushEdgeAnnotations();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods1 = new PeepholeReplaceKnownMethods(true);
      peepholeReplaceKnownMethods1.optimizeSubtree(node1);
      Node node2 = new Node(4);
      Node node3 = AbstractPeepholeOptimization.validateResult(node0);
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node3, flowScope0, true);
      typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(46);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      typeInference0.flowThrough(node3, linkedFlowScope1);
      FlowScope flowScope2 = typeInference0.createEntryLattice();
      FlowScope flowScope3 = typeInference0.flowThrough(node2, flowScope2);
      assertNotSame(flowScope3, flowScope1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedFlowScope.createEntryLattice(scope0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(139);
      typeInference0.createEntryLattice();
      Vector<FlowScope> vector1 = new Vector<FlowScope>();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 139
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(";{j@A0cHH[0aj");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter1, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedDirectedGraph.create();
      Node node1 = new Node(146);
      LinkedFlowScope.createEntryLattice(scope0);
      controlFlowGraph0.pushEdgeAnnotations();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 146
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("", true);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(154);
      node1.setType(118);
      typeInference0.createInitialEstimateLattice();
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // VAR does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED", "JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      Node node1 = new Node(123);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Node node2 = new Node((-2447));
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node3 = new Node(136);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOfSorted((SortedMap<String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      typeInference0.createEntryLattice();
      Vector<FlowScope> vector0 = new Vector<FlowScope>();
      Node node4 = new Node(78, node0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = typeInference0.flowThrough(node4, linkedFlowScope1);
      assertNotSame(flowScope0, linkedFlowScope1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedListMultimap<CodingConvention.AssertionFunctionSpec, JSType> linkedListMultimap0 = LinkedListMultimap.create();
      List<JSType> list0 = linkedListMultimap0.values();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(list0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      jsAst0.clearAst();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      peepholeReplaceKnownMethods0.optimizeSubtree(node1);
      Node node2 = new Node(147);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(0L);
      FlowScope flowScope1 = typeInference0.flowThrough(node2, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter1, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedDirectedGraph.create();
      Node node1 = new Node(68);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      controlFlowGraph0.pushEdgeAnnotations();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Node node2 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      Node node3 = new Node(109);
      Node node4 = AbstractPeepholeOptimization.validateResult(node2);
      closureReverseAbstractInterpreter1.getPreciserScopeKnowingConditionOutcome(node4, flowScope0, true);
      FlowScope flowScope1 = typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(15);
      typeInference0.flowThrough(node3, linkedFlowScope0);
      FlowScope flowScope2 = typeInference0.flowThrough(node2, flowScope1);
      assertNotSame(flowScope2, flowScope0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Stack<JSType> stack0 = new Stack<JSType>();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector1 = new Vector<JSType>();
      compiler0.getTypeRegistry();
      immutableSortedMap0.values();
      Node node2 = new Node(137);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 137
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("JSC_REFLECT_CONSTRUCTOR_EXPECTED", "JSC_REFLECT_CONSTRUCTOR_EXPECTED");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      Node node1 = new Node(123);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      compiler0.getTypeRegistry();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      jsAst0.clearAst();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      Node node2 = new Node(16);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      System.setCurrentTimeMillis(1885L);
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      FlowScope flowScope2 = typeInference0.flowThrough(node1, flowScope1);
      assertNotSame(flowScope2, flowScope0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedListMultimap<CodingConvention.AssertionFunctionSpec, JSType> linkedListMultimap0 = LinkedListMultimap.create();
      List<JSType> list0 = linkedListMultimap0.values();
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(list0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      jSTypeRegistry1.createParameters(list0);
      Node node2 = new Node(121);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 121
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap1.headMap(",;+oa+%Q18:8P?12`", false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap3 = immutableSortedMap2.headMap(",;+oa+%Q18:8P?12`", false);
      immutableSortedMap3.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap4 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap3);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter2 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter2.append(closureReverseAbstractInterpreter1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph1 = typeInference0.getCfg();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph1, closureReverseAbstractInterpreter1, scope0, immutableSortedMap4);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node1 = new Node(37);
      typeInference1.createEntryLattice();
      FlowScope flowScope0 = typeInference1.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ControlFlowGraph<Node> controlFlowGraph1 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph1, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedListMultimap<CodingConvention.AssertionFunctionSpec, JSType> linkedListMultimap0 = LinkedListMultimap.create();
      List<JSType> list0 = linkedListMultimap0.values();
      jSTypeRegistry0.createParameters(list0);
      Node node1 = new Node(101);
      typeInference0.createEntryLattice();
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      typeInference0.branchedFlowThrough(node0, flowScope0);
      Vector<FlowScope> vector0 = new Vector<FlowScope>();
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node2 = peepholeRemoveDeadCode0.tryOptimizeBlock(node1);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node2, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector1 = new Vector<JSType>();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      Node node2 = new Node(74);
      typeInference0.createEntryLattice();
      Vector<JSType> vector2 = new Vector<JSType>();
      Node node3 = new Node(140);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node3, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 140
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(179);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      Node node2 = new Node(31);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DELPROP : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", true);
      Scope scope0 = Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.headMap(",;+oa+%Q18:8P?12`");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node2 = new Node(36);
      FlowScope flowScope0 = typeInference0.flowThrough(node2, linkedFlowScope0);
      assertNotSame(flowScope0, linkedFlowScope0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter1.append(closureReverseAbstractInterpreter0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      Node node2 = new Node(154);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // STRING_KEY does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%1z:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%1z:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      compiler0.getTypeRegistry();
      immutableSortedMap0.values();
      Node node1 = new Node(117);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // CONTINUE does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]", "]");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("]");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      compiler0.getTypeRegistry();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter1, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node1 = new Node(51);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // IN : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector1 = new Vector<JSType>();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      Node node2 = new Node(74);
      typeInference0.createEntryLattice();
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector2 = new Vector<JSType>();
      compiler0.getTypeRegistry();
      Node node3 = new Node(130);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node3, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      compiler0.getTypeRegistry();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      jsAst0.clearAst();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Node node1 = new Node(115);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("TIsL]", jSTypeNative0);
      ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference2 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableMap0);
      typeInference1.branchedFlowThrough(node0, linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // FOR does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector1 = new Vector<JSType>();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      Node node2 = new Node(74);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 74
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      compiler0.getTypeRegistry();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      jsAst0.clearAst();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
      peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      Node node1 = new Node(142);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 142
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", true);
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Vector<JSType> vector0 = new Stack<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(7);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 7
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      MockFile mockFile1 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile1);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      CompilerInput compilerInput0 = new CompilerInput(sourceFile0, true);
      Node node1 = compilerInput0.getAstRoot(compiler0);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node2 = new Node(112);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      Node node3 = new Node(110);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DEFAULT_CASE does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedListMultimap<CodingConvention.AssertionFunctionSpec, JSType> linkedListMultimap0 = LinkedListMultimap.create();
      linkedListMultimap0.values();
      Scope.createGlobalScope(node0);
      boolean boolean0 = false;
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      compiler0.getTypeRegistry();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(29);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      typeInference0.branchedFlowThrough(node0, flowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(126);
      typeInference0.createEntryLattice();
      controlFlowGraph0.pushEdgeAnnotations();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      LinkedFlowScope linkedFlowScope2 = new LinkedFlowScope(linkedFlowScope1);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // LABEL does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      Scope scope1 = Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap2.headMap(",;+oa+%Q18:8P?12`");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(5);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 5
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      Scope scope1 = Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap2.headMap(",;+oa+%Q18:8P?12`");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(48);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 48
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(47);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Node node2 = new Node(12);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // EQ : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(135);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 135
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%1z:8P?12`", "a2>kt6v0*L6R");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%1z:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(43);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // FALSE does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap1);
      immutableSortedMap1.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph1 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(100);
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph1, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      typeInference0.createEntryLattice();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      FlowScope flowScope0 = linkedFlowScope1.createChildFlowScope();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]", "]");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap0.headMap("]");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = new Node(32);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      typeInference0.createEntryLattice();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // TYPEOF : string does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = Node.newString(52, "");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // INSTANCEOF  : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      Scope scope1 = Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap2.headMap(",;+oa+%Q18:8P?12`");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(48);
      Node node3 = new Node(145);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope1);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node3, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 145
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap2.headMap(",;+oa+%Q18:8P?12`");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(48);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Node node3 = new Node(42);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node3, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // THIS does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedFlowScope.createEntryLattice(scope0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(131);
      typeInference0.createEntryLattice();
      typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      Vector<JSType> vector1 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      Node node2 = new Node(50);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 50
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      jsAst0.setSourceFile(sourceFile0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter1, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
      Node node1 = peepholeReplaceKnownMethods0.optimizeSubtree(node0);
      closureReverseAbstractInterpreter1.getPreciserScopeKnowingConditionOutcome(node1, linkedFlowScope0, true);
      jSTypeRegistry1.createParameters((List<JSType>) vector0);
      Node node2 = new Node(8);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 8
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createGlobalScope(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(38);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      controlFlowGraph0.pushEdgeAnnotations();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: UnsupportedOperationException");
      
//      } catch(UnsupportedOperationException e) {
//         //
//         // NAME is not a string node
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      Scope.createGlobalScope(node0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node2 = new Node(46);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SHNE : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node2 = compiler0.externsRoot;
      Node node3 = new Node(49);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry1);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter1, true);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node3, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // THROW does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap1);
      immutableSortedMap2.headMap("20x)<,ppB\"");
      ControlFlowGraph<Node> controlFlowGraph1 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention1 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention1, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry1.createParameters((List<JSType>) vector0);
      Node node1 = new Node(53);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 53
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap1.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureCodingConvention closureCodingConvention1 = new ClosureCodingConvention();
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
      ControlFlowGraph<Node> controlFlowGraph1 = typeInference0.getCfg();
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph1, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap2);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      LinkedDirectedGraph.create();
      Node node1 = new Node(54);
      FlowScope flowScope0 = typeInference1.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 54
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedListMultimap<CodingConvention.AssertionFunctionSpec, JSType> linkedListMultimap0 = LinkedListMultimap.create();
      List<JSType> list0 = linkedListMultimap0.values();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.?XCu;e(j0e");
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(list0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry1 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry1.createParameters(list0);
      Node node2 = new Node(15);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // LE : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      Node node1 = new Node(57);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap1.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node2 = new Node(30);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Stack<JSType> stack0 = new Stack<JSType>();
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope1 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(131);
      typeInference0.createEntryLattice();
      typeInference0.branchedFlowThrough(node0, linkedFlowScope1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Object#Key");
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 131
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter1, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      LinkedDirectedGraph.create();
      Node node1 = new Node(68);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      controlFlowGraph0.pushEdgeAnnotations();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      typeInference0.branchedFlowThrough(node0, flowScope0);
      Node node2 = compiler0.jsRoot;
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter1, scope0, immutableSortedMap1);
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 68
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      Node node1 = new Node(56);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      MockFile mockFile1 = new MockFile(mockFile0, "(K=");
      mockFile1.mkdirs();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      typeInference0.branchedFlowThrough(node1, flowScope0);
      FlowScope flowScope1 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node0, flowScope1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SCRIPT [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000204] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000205] does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", "a2>kt6v0*L6R");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`", false);
      immutableSortedMap0.headMap(",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      LinkedDirectedGraph.create();
      Node node2 = new Node(143);
      typeInference0.createEntryLattice();
      controlFlowGraph0.pushEdgeAnnotations();
      LinkedFlowScope linkedFlowScope1 = new LinkedFlowScope(linkedFlowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 143
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter1, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(39);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Number node not created with Node.newNumber
//         //
//         verifyException("com.google.javascript.rhino.Node", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(16);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // GT : boolean does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      Node node1 = new Node(57);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      MockFile mockFile1 = new MockFile(mockFile0, "(K=");
      mockFile1.mkdirs();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap1);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
      FlowScope flowScope0 = typeInference1.createEntryLattice();
      typeInference0.branchedFlowThrough(node1, flowScope0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.of();
      TypeInference typeInference2 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap2);
      // Undeclared exception!
//      try { 
        typeInference2.branchedFlowThrough(node0, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SCRIPT [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000204] [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000205] does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector1 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector1);
      Node node2 = new Node(55);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap1);
      typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, linkedFlowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 55
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Vector<JSType> vector0 = new Vector<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(47);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0, false);
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry1);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append(semanticReverseAbstractInterpreter0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // REGEXP does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.subMap(",;+oa+%Q18:8P?12`", ",;+oa+%Q18:8P?12`");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      Node node1 = new Node(0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 0
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",;+oa+%Q18:8P?12`", "a2>kt6v0*L6R");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      sourceFile0.isExtern();
      Node node1 = new Node(40);
      node0.addChildToBack(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("_v-");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      MockFile mockFile1 = new MockFile(mockFile0, "(K=");
      mockFile1.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // STRING does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      jSTypeRegistry0.createParameters((List<JSType>) vector0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      Node node1 = new Node(113);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      // Undeclared exception!
//      try { 
        typeInference1.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // WHILE does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      Vector<JSType> vector0 = new Vector<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, linkedFlowScope0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Scope scope0 = Scope.createLatticeBottom(node0);
      node0.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      mockFile0.mkdirs();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      Node node1 = Node.newString(3673, "", 47, (-562));
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, flowScope0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // 3673
//         //
//         verifyException("com.google.javascript.rhino.Token", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      compiler0.setHasRegExpGlobalReferences(true);
      Scope scope0 = Scope.createLatticeBottom(node1);
      node1.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      immutableSortedMap0.headMap("");
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.tailMap("");
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);
      Compiler compiler1 = new Compiler(loggerErrorManager0);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler1.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      ControlFlowGraph<Node> controlFlowGraph1 = typeInference0.getCfg();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      controlFlowGraph0.isConnected(node0, node1);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter1.append(closureReverseAbstractInterpreter0);
      TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph1, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      // Undeclared exception!
//      try { 
        typeInference0.flowThrough(node0, (FlowScope) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      Scope scope0 = Scope.createLatticeBottom(node1);
      node1.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap0.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      GoogleCodingConvention googleCodingConvention1 = new GoogleCodingConvention(googleCodingConvention0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention1, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, semanticReverseAbstractInterpreter0, scope0, immutableSortedMap1);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      linkedFlowScope_FlowScopeJoinOp0.apply((FlowScope) linkedFlowScope0, (FlowScope) linkedFlowScope0);
      typeInference0.flowThrough(node1, linkedFlowScope0);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      typeInference0.flowThrough(node0, flowScope0);
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node1, (FlowScope) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      compiler0.setHasRegExpGlobalReferences(false);
      Scope scope0 = Scope.createLatticeBottom(node1);
      node1.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      assertNotNull(flowScope0);
      
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope0);
      assertEquals(0, list0.size());
      
      FlowScope flowScope1 = typeInference0.createEntryLattice();
      assertFalse(flowScope1.equals((Object)flowScope0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      compiler0.setHasRegExpGlobalReferences(false);
      Scope scope0 = Scope.createLatticeBottom(node1);
      node1.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, true);
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      Node node2 = Node.newString("Object#Element");
      // Undeclared exception!
//      try { 
        typeInference0.branchedFlowThrough(node2, flowScope0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // STRING Object#Element does not exist in graph
//         //
//         verifyException("com.google.javascript.jscomp.graph.Graph", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      compiler0.setHasRegExpGlobalReferences(false);
      Scope scope0 = Scope.createLatticeBottom(node1);
      node1.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.FALSE;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, true);
      assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet2);
      
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(jqueryCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, chainableReverseAbstractInterpreter0, scope0, immutableSortedMap0);
      LinkedFlowScope.FlowScopeJoinOp linkedFlowScope_FlowScopeJoinOp0 = new LinkedFlowScope.FlowScopeJoinOp();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      FlowScope flowScope0 = linkedFlowScope_FlowScopeJoinOp0.apply((FlowScope) linkedFlowScope0, (FlowScope) linkedFlowScope0);
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      assertNotSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      compiler0.setHasRegExpGlobalReferences(false);
      Scope scope0 = Scope.createLatticeBottom(node1);
      node1.addChildToBack(node0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.headMap("");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
      assertSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      MockFile mockFile0 = new MockFile("", "");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      Compiler compiler0 = new Compiler();
      Node node0 = jsAst0.getAstRoot(compiler0);
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      compiler0.setHasRegExpGlobalReferences(false);
      Scope scope0 = Scope.createLatticeBottom(node1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.tailMap("");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap0);
      immutableSortedMap1.headMap("");
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      immutableSortedMap2.floorEntry("Z/Js*");
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      TypeInference typeInference0 = null;
//      try {
        typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      // Undeclared exception!
//      try { 
        TypeInference.getBooleanOutcomes(booleanLiteralSet0, (BooleanLiteralSet) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.TypeInference", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.TRUE;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
      
      Compiler compiler0 = new Compiler();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      Scope scope0 = Scope.createLatticeBottom((Node) null);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of();
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap1 = immutableSortedMap0.tailMap("inlineVariables");
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap2 = ImmutableSortedMap.copyOf((Map<? extends String, ? extends CodingConvention.AssertionFunctionSpec>) immutableSortedMap1);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap3 = immutableSortedMap2.headMap("inlineVariables");
      TypeInference typeInference0 = null;
//      try {
        typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableSortedMap3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.Compiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      Logger logger0 = Logger.getLogger("", (String) null);
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ControlFlowAnalysis controlFlowAnalysis0 = new ControlFlowAnalysis(compiler0, true, true);
      controlFlowAnalysis0.getCfg();
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention(closureCodingConvention0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.getFirst();
      closureReverseAbstractInterpreter0.append(chainableReverseAbstractInterpreter0);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      passConfig_PassConfigDelegate0.getTopScope();
      TypeInference typeInference0 = null;
//      try {
        typeInference0 = new TypeInference((AbstractCompiler) null, (ControlFlowGraph<Node>) null, chainableReverseAbstractInterpreter0, (Scope) null, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.DataFlowAnalysis", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
//      try {
        mockPrintStream0 = new MockPrintStream("com.google.javascript.jscomp.TypeInference$1", "");
//        fail("Expecting exception: UnsupportedEncodingException");
      
//      } catch(Throwable e) {
//         //
//         // 
//         //
//         verifyException("java.io.PrintStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.TRUE;
      TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, true);
      Compiler compiler0 = new Compiler();
      ControlFlowGraph<Node> controlFlowGraph0 = null;
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = null;
      // Undeclared exception!
//      try { 
        SyntacticScopeCreator.generateUntypedTopScope(compiler0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.SyntacticScopeCreator", e);
//      }
  }
}
