/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:56:58 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ConstParamCheck;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ExpandJqueryAliases;
import com.google.javascript.jscomp.FlowSensitiveInlineVariables;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NameReferenceGraph;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PassConfig;
import com.google.javascript.jscomp.PeepholeCollectPropertyAssignments;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.Reader;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionInjector_ESTest extends FunctionInjector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      String string0 = "5eAp";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0);
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      JSModule jSModule0 = new JSModule(compilerOptions0.renamePrefixNamespace);
      CompilerOptions compilerOptions1 = compiler0.newCompilerOptions();
      boolean boolean0 = true;
      boolean boolean1 = true;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, compilerOptions1.extractPrototypeMemberDeclarations, boolean0, boolean1);
      JSModule jSModule1 = null;
      FunctionInjector.Reference[] functionInjector_ReferenceArray0 = new FunctionInjector.Reference[8];
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      functionInjector_ReferenceArray0[0] = functionInjector_Reference0;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      functionInjector_ReferenceArray0[1] = functionInjector_Reference1;
      FunctionInjector.Reference functionInjector_Reference2 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      functionInjector_ReferenceArray0[2] = functionInjector_Reference2;
      FunctionInjector.Reference functionInjector_Reference3 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      functionInjector_ReferenceArray0[3] = functionInjector_Reference3;
      FunctionInjector.Reference functionInjector_Reference4 = new FunctionInjector.Reference(node0, jSModule1, functionInjector_InliningMode0);
      functionInjector_ReferenceArray0[4] = functionInjector_Reference4;
      JSModule jSModule2 = null;
      String string1 = "";
      InputId inputId0 = new InputId(string1);
      CompilerInput compilerInput0 = compiler0.getInput(inputId0);
      boolean boolean2 = true;
      CompilerInput compilerInput1 = new CompilerInput(compilerInput0, inputId0, boolean2);
      jSModule0.add(compilerInput1);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference5 = new FunctionInjector.Reference(node0, jSModule2, functionInjector_InliningMode1);
      functionInjector_ReferenceArray0[5] = functionInjector_Reference5;
      FunctionInjector.InliningMode functionInjector_InliningMode2 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference6 = new FunctionInjector.Reference(node0, jSModule2, functionInjector_InliningMode2);
      functionInjector_ReferenceArray0[6] = functionInjector_Reference6;
      FunctionInjector.Reference functionInjector_Reference7 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      functionInjector_ReferenceArray0[7] = functionInjector_Reference7;
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.copyOf(functionInjector_ReferenceArray0);
      boolean boolean3 = true;
      functionInjector0.inliningLowersCost(jSModule0, node0, immutableList0, compilerOptions0.stripNameSuffixes, boolean3, compilerOptions0.printInputDelimiter);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSCompiler_set");
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      JSModule jSModule0 = new JSModule("");
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      Set<String> set0 = compilerOptions0.stripNameSuffixes;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      JSModule jSModule1 = new JSModule("Decomposable expressions must be decomposed before inlining.");
      // Undeclared exception!
//      try { 
        functionInjector0.inliningLowersCost(jSModule1, node0, immutableList0, set0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(false);
      Node node0 = Node.newNumber((double) (-3856), (-3856), 1201);
      Node node1 = new Node(4, node0, node0, node0);
      Node node2 = Node.newNumber((double) 56, 4095, 32);
      Node node3 = new Node(4095, node1, node2, 48, 2);
      // Undeclared exception!
//      try { 
        functionInjector0.maybePrepareCall(node0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = Node.newNumber((double) (-3856), (-3856), 1201);
      Node node1 = new Node(57, node0, 15, 38);
      Node node2 = Node.newNumber((double) 56, 4095, 32);
      Node node3 = new Node(4095, node1, node2, 48, 2);
      // Undeclared exception!
//      try { 
        functionInjector0.maybePrepareCall(node0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // Unexpected AST structure.
//         //
//         verifyException("com.google.javascript.jscomp.ExpressionDecomposer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      PeepholeSubstituteAlternateSyntax peepholeSubstituteAlternateSyntax0 = new PeepholeSubstituteAlternateSyntax(true);
      Node node0 = Node.newNumber((double) (-3870), (-3870), 1231);
      Node node1 = peepholeSubstituteAlternateSyntax0.optimizeSubtree(node0);
      Node node2 = Node.newNumber((double) 56, 4095, 32);
      Node node3 = new Node(4095, node1, node2, 48, 2);
      // Undeclared exception!
//      try { 
        functionInjector0.maybePrepareCall(node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(inputStreamReader0);
      Set<String> set0 = propertyResourceBundle0.keySet();
      functionInjector0.setKnownConstants(set0);
      // Undeclared exception!
//      try { 
        functionInjector0.setKnownConstants((Set<String>) null);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSCompiler_set");
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      Compiler compiler1 = new Compiler();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler1, supplier0, false, false, false);
      ConstParamCheck constParamCheck0 = new ConstParamCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler1, constParamCheck0);
      // Undeclared exception!
//      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, node0, compilerOptions0.aliasableStrings, functionInjector_InliningMode0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSCompiler_set");
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      compiler0.getUniqueNameIdSupplier();
      JSModule jSModule0 = new JSModule("");
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      Set<String> set0 = compilerOptions0.stripNameSuffixes;
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      // Undeclared exception!
//      try { 
        functionInjector0.inliningLowersCost(jSModule0, node0, immutableList0, compilerOptions0.stripNameSuffixes, true, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      functionInjector0.setKnownConstants((Set<String>) null);
      // Undeclared exception!
//      try { 
        functionInjector0.setKnownConstants((Set<String>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "P8YL=QCk");
      CompilerOptions compilerOptions0 = compiler0.options;
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, compilerOptions0.checkGlobalThisLevel);
      Node node1 = new Node(148, node0, node0);
      node0.addChildToFront(node1);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
      functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node0, node0, compilerOptions0.stripTypePrefixes, functionInjector_InliningMode0, false, true);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = null;
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "P8YL=QCk");
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      compiler0.ensureDefaultPassConfig();
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
//      try { 
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node1, (Node) null, compilerOptions0.stripNamePrefixes, functionInjector_InliningMode0, false, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "DIRECT");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      defaultPassConfig0.getPreprocessorSymbolTable();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.LINE;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      MockFile mockFile0 = new MockFile("");
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);
      functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, (Node) null, compilerOptions0.stripTypePrefixes, functionInjector_InliningMode0, true, false);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
//      try { 
        functionInjector0.inline((Node) null, "", node0, functionInjector_InliningMode1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "P8YL=QCk");
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      DefaultPassConfig defaultPassConfig1 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig1.getPreprocessorSymbolTable();
      PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable((Node) null);
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, compilerOptions0.brokenClosureRequiresLevel);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      ProcessClosurePrimitives processClosurePrimitives1 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
      processClosurePrimitives1.getExportedVariableNames();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      PassConfig.PassConfigDelegate passConfig_PassConfigDelegate0 = new PassConfig.PassConfigDelegate(defaultPassConfig0);
      passConfig_PassConfigDelegate0.getTypedScopeCreator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0, (ScopeCreator) null);
      // Undeclared exception!
//      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node0, (Node) null, compilerOptions0.stripNameSuffixes, functionInjector_InliningMode0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "DIRECT");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, false, false, true);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
//      try { 
        functionInjector1.canInlineReferenceToFunction((NodeTraversal) null, node0, node0, treeSet0, functionInjector_InliningMode0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Compiler compiler1 = new Compiler();
      Supplier<String> supplier0 = compiler1.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      functionToBlockMutator_LabelNameSupplier0.get();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, true, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "P8YL=QCk");
      CompilerOptions compilerOptions0 = compiler1.getOptions();
      compilerOptions0.setRuntimeTypeCheckLogFunction("");
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
//      try { 
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node0, (Node) null, compilerOptions0.stripNamePrefixes, functionInjector_InliningMode0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      MockFile mockFile0 = new MockFile("WHeWoa{12*K-");
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
      Node node0 = new Node(3202, 7, 3);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
//      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, (Node) null, node0, (Set<String>) null, functionInjector_InliningMode0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "DIRECT");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      MockFile mockFile0 = new MockFile("(2");
      FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, false, true, true);
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
//      try { 
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node0, node0, compilerOptions0.stripNameSuffixes, functionInjector_InliningMode0, false, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "DIRECT");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter(compiler0, sourceExcerptProvider_SourceExcerpt0);
      MockFile mockFile0 = new MockFile("(2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, mockPrintStream0);
      Compiler compiler1 = new Compiler(printStreamErrorManager0);
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler1, (PreprocessorSymbolTable) null, checkLevel0);
      processClosurePrimitives0.getExportedVariableNames();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node0, node0, compilerOptions0.stripNameSuffixes, functionInjector_InliningMode0, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0);
      functionInjector0.setKnownConstants(compilerOptions0.stripTypePrefixes);
      assertFalse(compilerOptions0.ambiguateProperties);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "P8YL=QCk");
      CompilerOptions compilerOptions0 = new CompilerOptions();
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      defaultPassConfig0.getPreprocessorSymbolTable();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);
      Set<String> set0 = processClosurePrimitives0.getExportedVariableNames();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
//      try { 
        functionInjector0.canInlineReferenceToFunction((NodeTraversal) null, node0, node0, set0, functionInjector_InliningMode0, false, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      Compiler compiler1 = new Compiler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      compiler1.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler1);
      gatherRawExports0.getExportedVariableNames();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler1, "msg.assn.create.strict");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler1, "msg.assn.create.strict");
      processCommonJSModules0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.aliasableStrings;
      CompilerOptions compilerOptions1 = compiler0.newCompilerOptions();
      Set<String> set1 = compilerOptions1.replaceStringsReservedStrings;
      // Undeclared exception!
//      try { 
        functionInjector0.inliningLowersCost((JSModule) null, node0, immutableList0, compilerOptions1.aliasableStrings, false, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      compiler0.analyzeChangedScopesOnly = false;
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, true);
      double double0 = 50.33290157988255;
      Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
      Node node0 = compiler0.jsRoot;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      // Undeclared exception!
//      try { 
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, (Node) null, (Node) null, compilerOptions0.stripNameSuffixes, functionInjector_InliningMode0, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      ImmutableList.of();
      compiler0.newCompilerOptions();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Node node0 = Node.newNumber(32.0);
      // Undeclared exception!
//      try { 
        functionInjector0.maybePrepareCall(node0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      Compiler compiler1 = new Compiler();
      compiler1.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, true);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      Node node0 = Node.newNumber(Double.NaN, 2147483626, 377);
      Node node1 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
      // Undeclared exception!
//      try { 
        functionInjector0.isDirectCallNodeReplacementPossible(node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l-}ZWP[ f(P0");
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, false);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
//      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, set0, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Node node0 = null;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode1);
      FunctionInjector.InliningMode functionInjector_InliningMode2 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference2 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode2);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      JSModule jSModule0 = new JSModule((String) null);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference1);
      functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, compilerOptions0.stripNameSuffixes, true, false);
      ExpandJqueryAliases expandJqueryAliases0 = null;
//      try {
        expandJqueryAliases0 = new ExpandJqueryAliases(compiler0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.Compiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode1);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference1, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference0, functionInjector_Reference0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      // Undeclared exception!
//      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, compilerOptions0.stripTypes, true, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Node node0 = null;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      String string0 = "Q";
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.replaceStringsReservedStrings;
      nameReferenceGraph_Reference0.setUnknown(true);
      functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, set0, false, false);
      // Undeclared exception!
//      try { 
        functionInjector0.maybePrepareCall((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.FunctionInjector", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode1);
      FunctionInjector.Reference functionInjector_Reference2 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      ImmutableList.of(functionInjector_Reference2, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference1);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      JSModule jSModule0 = new JSModule((String) null);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference2);
      // Undeclared exception!
//      try { 
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, compilerOptions0.aliasableStrings, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Node node0 = null;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      String string0 = "Q";
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.replaceStringsReservedStrings;
      functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, set0, false, false);
      functionInjector0.setKnownConstants(compilerOptions0.stripTypes);
      LineNumberReader lineNumberReader0 = null;
//      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Reader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Node node0 = null;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      JSModule jSModule0 = new JSModule("SIMPLE_CALL");
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode1);
      FunctionInjector.Reference functionInjector_Reference2 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode1);
      FunctionInjector.InliningMode functionInjector_InliningMode2 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference3 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode2);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference3, functionInjector_Reference1, functionInjector_Reference2, functionInjector_Reference0, functionInjector_Reference2, functionInjector_Reference3, functionInjector_Reference3, functionInjector_Reference1);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      Compiler compiler1 = new Compiler();
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler1);
      Set<String> set1 = inlineSimpleMethods0.externMethodsWithoutSignatures;
      // Undeclared exception!
//      try { 
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set1, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Node node0 = null;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      // Undeclared exception!
//      try { 
        functionInjector0.isDirectCallNodeReplacementPossible((Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Node node0 = null;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
      String string0 = "Q";
      LinkedHashSet<FunctionInjector.Reference> linkedHashSet0 = new LinkedHashSet<FunctionInjector.Reference>();
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of();
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.replaceStringsReservedStrings;
      functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, set0, false, false);
      LineNumberReader lineNumberReader0 = null;
//      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.Reader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      Node node0 = null;
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?KGCZY02$");
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode1);
      FunctionInjector.InliningMode functionInjector_InliningMode2 = FunctionInjector.InliningMode.DIRECT;
      FunctionInjector.Reference functionInjector_Reference2 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode2);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference1, functionInjector_Reference2, functionInjector_Reference2, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference2, functionInjector_Reference2, functionInjector_Reference1, functionInjector_Reference1);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      // Undeclared exception!
//      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, true, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      nameReferenceGraph_Reference0.setModule((JSModule) null);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      String string0 = "Q";
      JSModule jSModule0 = new JSModule("Q");
      FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
      ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference0);
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      Set<String> set0 = compilerOptions0.extraAnnotationNames;
      // Undeclared exception!
//      try { 
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      compiler0.resetUniqueNameId();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, false, false, false);
      compiler0.getJsRoot();
      loggerErrorManager0.getErrors();
      String string0 = "SIMPLE_ASSIGNMENT";
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      // Undeclared exception!
//      try { 
        functionInjector0.inline((Node) null, "SIMPLE_ASSIGNMENT", (Node) null, functionInjector_InliningMode0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FunctionInjector.CanInlineResult.values();
      Compiler compiler0 = new Compiler();
      Compiler.getReleaseDate();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      compiler0.setTypeRegistry(jSTypeRegistry0);
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
      Node node0 = Node.newString(",8jpJL/8<rNLf#");
      Node node1 = new Node(114, node0);
      // Undeclared exception!
//      try { 
        functionInjector0.doesFunctionMeetMinimumRequirements("Pl", node1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, false, false);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      PeepholeCollectPropertyAssignments peepholeCollectPropertyAssignments0 = new PeepholeCollectPropertyAssignments();
      Node node0 = Node.newString("<?>_MO.G");
      node0.wasEmptyNode();
      peepholeRemoveDeadCode0.hasBreakOrContinue(node0);
      peepholeCollectPropertyAssignments0.mayHaveSideEffects(node0);
      Node node1 = new Node((-1055), 3, (-1055));
      // Undeclared exception!
//      try { 
        peepholeRemoveDeadCode0.tryFoldFor(node0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FunctionInjector.InliningMode.values();
      NameReferenceGraph.Reference nameReferenceGraph_Reference0 = new NameReferenceGraph.Reference((Node) null, (Node) null);
      nameReferenceGraph_Reference0.getModule();
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, true, false);
      String string0 = "Q";
      // Undeclared exception!
//      try { 
        functionInjector0.doesFunctionMeetMinimumRequirements("Q", (Node) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.NodeUtil", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      Compiler compiler0 = new Compiler();
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = null;
//      try {
        functionInjector0 = new FunctionInjector((AbstractCompiler) null, functionToBlockMutator_LabelNameSupplier0, false, false, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.common.base.Preconditions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      loggerErrorManager0.setTypedPercent((-914.8595715694114));
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier((Supplier<String>) null);
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = new FunctionInjector(compiler0, functionToBlockMutator_LabelNameSupplier0, true, true, true);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      // Undeclared exception!
//      try { 
        tightenTypes0.getTypeRegistry();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("com.google.javascript.jscomp.Compiler", e);
//      }
  }
}
