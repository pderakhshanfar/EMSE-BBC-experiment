/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:47:01 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.Quote");
      stringReader0.close();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('T');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('9', (Character) null, quote0, (Character) null, character0, false, false, "org.apacKe.commone.csv.CSVPar(er", "org.apacKe.commone.csv.CSVPar(er", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("1aP0Z{[G8iK\"+>x", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
      StringReader stringReader0 = new StringReader("clgx{q$");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("k[BQ6<8");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("k[BQ6<8");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVPrinter");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("string", "rZ|5~]JXZ:2+X~3");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Quote quote0 = Quote.NONE;
      Character character0 = Character.valueOf('k');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('H', (Character) null, quote0, character0, character0, false, false, "&n&z1F|z&$y^G", "fe' \"n7-:tci", stringArray0, false);
      // Undeclared exception!
//      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'url' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[7];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
//      try { 
        CSVParser.parse("", cSVFormat1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The header contains duplicate names: [null, null, null, null, null, null, null]
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
//      try { 
        CSVParser.parse("", (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
//      try { 
        CSVParser.parse("\">jp", cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Character character0 = new Character('f');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('%', character0, quote0, (Character) null, character0, false, false, "Fxa]q]J<+dN<Uh", "Fxa]q]J<+dN<Uh", stringArray0, false);
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVParser$2", "org.apache.commons.csv.CSVParser$2");
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('%');
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, cSVFormat1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('%')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('T');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('9', (Character) null, quote0, (Character) null, character0, false, false, "org.apacKe.commone.csv.CSVPar(er", "org.apacKe.commone.csv.CSVPar(er", stringArray0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("RKU~jYysR(n ^~cHUpo/RKU~jYysR(n ^~cHUpo");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "(line ");
      MockFile mockFile0 = new MockFile("RKU~jYysR(n ^~cHUpo", "RKU~jYysR(n ^~cHUpo");
//      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("(line ");
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("org.apacKe.commone.csv.CSVPar(er");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      // Undeclared exception!
//      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G'uF>+PUW=X");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("RecordSeparator=<", "(startline ");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
//      try { 
        cSVParser0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Z');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('Z');
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The escape character and the delimiter cannot be the same ('Z')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("\">jp");
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Character character0 = new Character('f');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('%', character0, quote0, (Character) null, character0, false, false, "Fxa]q]J<+dN<Uh", "Fxa]q]J<+dN<Uh", stringArray0, false);
      StringReader stringReader0 = new StringReader("Fxa]q]J<+dN<Uh");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
      StringReader stringReader0 = new StringReader("clgx{q$");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('T');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('9', (Character) null, quote0, (Character) null, character0, false, false, "org.apacKe.commone.csv.CSVPar(er", "org.apacKe.commone.csv.CSVPar(er", stringArray0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("RKU~jYysR(n ^~cHUpo/RKU~jYysR(n ^~cHUpo");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "(line ");
      MockFile mockFile0 = new MockFile("RKU~jYysR(n ^~cHUpo", "RKU~jYysR(n ^~cHUpo");
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile0, cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Character character0 = new Character('%');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat0 = new CSVFormat('p', character0, quote0, (Character) null, character0, false, true, "Fxa]q]J<+dN<Uh", "Fxa]q]J<+dN<Uh", (String[]) null, true);
      StringReader stringReader0 = new StringReader(" surroundingspaces:ignored");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[ surroundings, aces:ignored]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Character character0 = new Character('f');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('%', character0, quote0, (Character) null, character0, false, false, "Fxa]q]J<+dN<Uh", "Fxa]q]J<+dN<Uh", stringArray0, false);
      StringReader stringReader0 = new StringReader("Fxa]q]J<+dN<Uh");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Character character0 = new Character('f');
      Character character1 = new Character('3');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = new CSVFormat('s', character1, quote0, character0, character1, false, false, "k[BQ6<8", "", stringArray0, true);
      StringReader stringReader0 = new StringReader("k[BQ6<8");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("(line ");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
//      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Quote quote0 = Quote.NONE;
      Character character0 = new Character('T');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('9', (Character) null, quote0, (Character) null, character0, false, false, "org.apacKe.commone.csv.CSVPar(er", "org.apacKe.commone.csv.CSVPar(er", stringArray0, false);
      StringReader stringReader0 = new StringReader("(line ");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("org.apacKe.commone.csv.CSVPar(er", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Character character0 = new Character('f');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('%', character0, quote0, (Character) null, character0, false, false, "Fxa]q]J<+dN<Uh", "Fxa]q]J<+dN<Uh", stringArray0, false);
      StringReader stringReader0 = new StringReader("Fxa]q]J<+dN<Uh");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Character character0 = new Character('f');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('%', character0, quote0, (Character) null, character0, false, false, "Fxa]q]J<+dN<Uh", "Fxa]q]J<+dN<Uh", stringArray0, false);
      StringReader stringReader0 = new StringReader("Fxa]q]J<+dN<Uh");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("RKU~jYysR(n ^~cHUpo", "RKU~jYysR(n ^~cHUpo");
//      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Character character0 = new Character('f');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('%', character0, quote0, (Character) null, character0, false, false, "Fxa]q]J<+dN<Uh", "Fxa]q]J<+dN<Uh", stringArray0, false);
      StringReader stringReader0 = new StringReader("Fxa]q]J<+dN<Uh");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Character character0 = new Character('f');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('%', character0, quote0, (Character) null, character0, false, false, "Fxa]q]J<+dN<Uh", "Fxa]q]J<+dN<Uh", stringArray0, false);
      StringReader stringReader0 = new StringReader("Fxa]q]J<+dN<Uh");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }
}
