/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 22:06:28 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("{<]tq{f8\",\"vt}{pf", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "{F)BN3;Y0x8y");
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, character0, false, false, "g3", "`myeH=", stringArray0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apache.commons.csv.CSVParser/#%x{[_rv");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser", "#%x{[_rv");
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile0, cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("NON_NUMERIC", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[NON_NUMERIC]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, character0, false, false, "3", "`myeH=", stringArray0, false);
      StringReader stringReader0 = new StringReader("`myeH=");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, character0, false, false, "g3", "`my@H=", stringArray0, false);
      StringReader stringReader0 = new StringReader("`my@H=");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, character0, false, false, "3", "`myeH=", stringArray0, false);
      StringReader stringReader0 = new StringReader("`myeH=");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("No more CSV records available", cSVFormat0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("n");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unexpected Token type: ");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "'{_rhn5myls3?");
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('[');
      Character character0 = Character.valueOf('[');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The comment start character and the quoteChar cannot be the same ('[')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Character character0 = new Character('l');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character0, character0, false, false, ";", "The header contains duplicate names: ", (String[]) null, false);
      // Undeclared exception!
//      try { 
        CSVParser.parse((String) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'string' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, character0, false, false, "3", "`myeH=", stringArray0, false);
//      try { 
        CSVParser.parse("^oG(UPMp", cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // EOF whilst processing escape sequence
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      File file0 = MockFile.createTempFile("dlpa)\"z.gnn", "q_-O#',`");
      String[] stringArray0 = new String[6];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, cSVFormat1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The header contains duplicate names: [null, null, null, null, null, null]
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = MockFile.createTempFile("ebg;s", (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('s', (Character) null, quote0, (Character) null, (Character) null, true, false, (String) null, (String) null, stringArray0, true);
//      try { 
        CSVParser.parse(file0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P3");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`myeH=");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      // Undeclared exception!
//      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('Z', character0, quote0, character1, character0, false, false, "g3", "`my@H=", stringArray0, false);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      StringReader stringReader0 = new StringReader("`my@H=");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
//      try { 
        cSVParser0.getRecords(linkedList0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("{jX~.}", cSVFormat0);
      cSVParser0.close();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      File file0 = MockFile.createTempFile("&*Y)ac~H-+q_B'Oh}F", "!!($>3Ax*~In}_&gwQ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
//      try { 
        cSVParser0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@=@[o7^`");
      Character character0 = Character.valueOf('e');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[8];
      CSVFormat cSVFormat0 = new CSVFormat('e', character0, quote0, character0, character0, true, true, (String) null, "@=@[o7^`", stringArray0, true);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('e')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Character character0 = new Character('@');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = Character.valueOf('E');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('\u0080', character0, quote0, character1, character0, true, true, "6r2^zWQS$`H#c^0", "6r2^zWQS$`H#c^0", stringArray0, true);
      StringReader stringReader0 = new StringReader("6r2=^zWQS$`H#c^0");
      stringReader0.close();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("-l|ma>f7pgj(\rg$@i", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertEquals(2, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, character0, false, false, "g3", "`my@H=", stringArray0, false);
      StringReader stringReader0 = new StringReader("`my@H=");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("\r\n", cSVFormat2);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("y]MI");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[4];
      stringArray0[1] = "X";
      stringArray0[2] = "~G`(P";
      stringArray0[3] = "ddqlLnWJ]Gy";
      CSVFormat cSVFormat0 = new CSVFormat('r', (Character) null, quote0, (Character) null, (Character) null, false, false, "`my@h=", "~G`(P", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(4, map0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Character character0 = Character.valueOf('u');
      Character character1 = new Character('[');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Unexpected Quote value: ";
      CSVFormat cSVFormat0 = new CSVFormat('&', character1, quote0, character0, character1, true, false, "Unexpected Quote value: ", "`myeH=", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("NON_NUMERIC", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[NON_NUMERIC]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("{jX~.}", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('*', character0, quote0, character1, character0, true, true, "3", "`myeH=", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("EOF", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, character0, false, false, "g3", "`myeH=", stringArray0, false);
      StringReader stringReader0 = new StringReader("`myeH=");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('Z', character0, quote0, character1, character0, false, false, "g3", "`my@H=", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("g3", cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('*', character0, quote0, character1, character0, true, true, "3", "`myeH=", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("EOF", cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character0, character0, false, false, "g3", "`myeH=", stringArray0, false);
      // Undeclared exception!
//      try { 
        CSVParser.parse("org.apache.commons.csv.CSVParser", cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The comment start character and the quoteChar cannot be the same ('p')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character0, character0, false, false, "g3", "`myeH=", stringArray0, false);
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVParser", "#%x{[_rv");
//      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Character character0 = Character.valueOf('p');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('E');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('m', character0, quote0, character1, character0, false, false, "g3", "`myeH=", stringArray0, false);
      StringReader stringReader0 = new StringReader("`myeH=");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      File file0 = MockFile.createTempFile("org.apache.commons.csv.CSVParser", (String) null);
      URL uRL0 = file0.toURL();
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'charset' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }
}
