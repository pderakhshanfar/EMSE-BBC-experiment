/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 00:49:11 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser1.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ",*xc4;0n#[*@j");
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X,V3meIr`Z@ sjG.7/MoFd{A?}_YCs}~^9_t/ SkipHeaderRecord:");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " SkipHeaderRecord:");
      MockFile mockFile0 = new MockFile("X,V3meIr`Z@ sjG.7", "MoFd{A?}_YCs}~^9_t");
      MockFile mockFile1 = new MockFile(mockFile0, " SkipHeaderRecord:");
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile1, cSVFormat1);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      MockFile mockFile0 = new MockFile("pArH`& /|6Uc#.uHW");
      mockFile0.createNewFile();
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile0, cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.csv.csvparser$1";
      stringArray0[1] = "-3{";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("EOF", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[EOF]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("EOF", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[EOF]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Character character0 = Character.valueOf('N');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('s', character0, quote0, (Character) null, character0, false, true, "2", "the comment start character cannot be a line break", stringArray0, false);
      StringReader stringReader0 = new StringReader("F61d1");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("c", cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("u)|?y|", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LI9");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringReader stringReader0 = new StringReader("2");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('2');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Character character0 = new Character('N');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('s', character0, quote0, (Character) null, character0, false, true, "2", "the comment start character cannot be a line break", stringArray0, false);
      StringReader stringReader0 = new StringReader("-3{");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      stringReader0.reset();
      cSVParser0.getRecords();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ",*xc4;0n#[*@j");
      Character character0 = new Character('\"');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('\"')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
//      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'url' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Character character0 = Character.valueOf('U');
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat0 = new CSVFormat('U', character0, quote0, character0, (Character) null, true, true, "6b\"zb4c?%Jo?G2hC8j(", "7Od", stringArray0, true);
      // Undeclared exception!
//      try { 
        CSVParser.parse(">RJGnAG<x7Df", cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('U')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
//      try { 
        CSVParser.parse((String) null, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'string' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Character character0 = new Character('N');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('s', character0, quote0, (Character) null, character0, false, true, "2", "the comment start character cannot be a line break", stringArray0, false);
//      try { 
        CSVParser.parse("TOKEN", cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // EOF whilst processing escape sequence
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Character character0 = new Character('N');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat0 = new CSVFormat('d', character0, quote0, character0, character0, false, false, "The escape character and the delimiter cannot be the same ('", "Unexpected Quote value: ", stringArray0, false);
      File file0 = MockFile.createTempFile("XVW&&n7O", "the comment ");
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The comment start character and the quoteChar cannot be the same ('N')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/S+]TE(X");
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) mockFile0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(':');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('t', (Character) null, quote0, (Character) null, character0, true, true, "the'commen start3cnaracer canOot be a line bReak", "]!", stringArray0, true);
      File file0 = MockFile.createTempFile("the'commen start3cnaracer canOot be a line bReak", "^Q0_T_kNmH");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/the'commen start3cnaracer canOot be a line bReak0^Q0_T_kNmH");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
//      try { 
        CSVParser.parse(file0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("s", cSVFormat0);
      cSVParser0.close();
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("i.bsdc", cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('2');
      StringReader stringReader0 = new StringReader("Unexpected Token type: ");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
//      try { 
        cSVParser0.getRecords(linkedList0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LI9");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("myQJ4 KWJYXE");
      File file0 = MockFile.createTempFile("myQJ4 KWJYXE", "myQJ4 KWJYXE", (File) mockFile0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
//      try { 
        cSVParser0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%hU,Hm>NPQ{OO");
      Character character0 = Character.valueOf(':');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat(':', character0, quote0, character0, character0, false, false, "6%hU,Hm>NPQ{OO", "6%hU,Hm>NPQ{OO", stringArray0, true);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same (':')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Character character0 = new Character('>');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('#', character0, quote0, (Character) null, character0, true, true, "the comment start character cannot be a line break", " EmptyLines:ignored", stringArray0, true);
      StringReader stringReader0 = new StringReader("vb");
      stringReader0.close();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Character character0 = Character.valueOf('N');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('s', character0, quote0, (Character) null, character0, false, true, "2", "the comment start character cannot be a line break", stringArray0, false);
      StringReader stringReader0 = new StringReader("F61d1");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("c", cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('t');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      StringReader stringReader0 = new StringReader("the comment start \nara\ter cannot be a line break");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.getRecords();
      assertEquals(2L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = new Character(':');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('t', (Character) null, quote0, (Character) null, character0, true, true, "the'commen start3cnaracer canOot be a line bReak", "]!", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("a!tqpnp+qp0v]/?n", cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("c", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Character character0 = new Character('N');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('s', character0, quote0, (Character) null, character0, false, true, "2", "the comment start character cannot be a line break", stringArray0, false);
      StringReader stringReader0 = new StringReader("2");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      Character character0 = new Character('_');
      String[] stringArray0 = new String[1];
      StringReader stringReader0 = new StringReader("e;)m");
      Character character1 = Character.valueOf('H');
      CSVFormat cSVFormat0 = new CSVFormat('_', (Character) null, quote0, character1, character0, true, false, "0{", "e;)m", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('s');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("c", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[1];
      StringReader stringReader0 = new StringReader("e;)m");
      Character character0 = Character.valueOf('H');
      Character character1 = new Character('_');
      CSVFormat cSVFormat0 = new CSVFormat('_', (Character) null, quote0, character0, character1, true, false, "0{", "e;)m", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('s');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Character character0 = new Character('N');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('s', character0, quote0, (Character) null, character0, false, true, "2", "the comment start character cannot be a line break", stringArray0, false);
      StringReader stringReader0 = new StringReader("-3{");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockFile mockFile0 = new MockFile("X,V3meIr`Z@ sjG.7", "MoFd{A?}_YCs}~^9_t");
//      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\"');
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }
}
