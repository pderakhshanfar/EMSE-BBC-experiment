/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 22:16:41 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("\"Dvt", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // org.evosuite.runtime.mock.java.lang.MockThrowable: (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "vy{y^a$7qh");
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("%/]1)0");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      MockFile mockFile0 = new MockFile((String) null, "%/]1)0");
      CSVParser cSVParser0 = CSVParser.parse((File) mockFile0, cSVFormat0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[Delimiter=<, > QuoteChar=<\"> RecordSeparator=<]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("_c5`#)q", cSVFormat0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      StringReader stringReader0 = new StringReader("zkBngC'kq ;:{x");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No more CSV records available");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      StringReader stringReader0 = new StringReader("zkBngC'kq ;:{x");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'charset' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
//      try { 
        CSVParser.parse("", (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
//      try { 
        CSVParser.parse("\"2Y_|pg,OM9", cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = MockFile.createTempFile("#3bCxv4qrk65Y+a7", "#[n$zh`z9fPlh]d.", (File) null);
      Character character0 = new Character('~');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat0 = new CSVFormat('T', character0, quote0, character0, character0, false, false, "#[n$zh`z9fPlh]d.", "org.apache.commons.csv.CSVFormat", stringArray0, true);
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The comment start character and the quoteChar cannot be the same ('~')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("file", "file", (File) null);
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      File file0 = MockFile.createTempFile("o11~gl@'0e% b", "XyVQG2");
      FileSystemHandling.shouldAllThrowIOExceptions();
//      try { 
        CSVParser.parse(file0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, true, "", "", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse("org.apache.comons.csv.token", cSVFormat0);
      cSVParser0.close();
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      CSVParser cSVParser0 = CSVParser.parse("EIh%", cSVFormat0);
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
//      try { 
        cSVParser0.getRecords(linkedList0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("_c5`#)q", cSVFormat0);
      cSVParser0.close();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("=o(ahc=_V7Yilv", "l0`@K_/(_(tw/,TA _:");
      CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      FileSystemHandling.shouldAllThrowIOExceptions();
//      try { 
        cSVParser0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("znVXRgJOuAc.f0A+Z");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('7');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "znVXRgJOuAc.f0A+Z";
      stringArray0[1] = "znVXRgJOuAc.f0A+Z";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The header contains duplicate names: [znVXRgJOuAc.f0A+Z, znVXRgJOuAc.f0A+Z]
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVParser$2");
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Character character0 = Character.valueOf('1');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('y');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, true, true, "U", "U", stringArray0, true);
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVPrinter$1");
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // EOF whilst processing escape sequence
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVParser$1");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      // Undeclared exception!
//      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      StringReader stringReader0 = new StringReader("nUL0YY!wwujl]<Ep5");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('n');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, true, false, "U", "U", stringArray0, false);
      CSVParser cSVParser0 = CSVParser.parse("nLYY!uj]<5", cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*mJJ|Q^g6E]1OZfu%";
      stringArray0[1] = "A3&if|E%;";
      stringArray0[2] = "VlM25tf6";
      stringArray0[3] = "{%[`";
      stringArray0[4] = "org.apache.commons.csv.CSVParser";
      stringArray0[6] = "')";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('J');
      StringReader stringReader0 = new StringReader("reader");
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*mJJ|Q^g6E]1OZfu%";
      stringArray0[1] = "A3&if|E%;";
      stringArray0[2] = "VlM25tf6";
      stringArray0[3] = "{%[`";
      stringArray0[4] = "org.apache.commons.csv.Lexer";
      stringArray0[5] = "string";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("reader");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[reader]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("No more CSV records available");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      StringReader stringReader0 = new StringReader("nUL0YY!wwujl]<Ep5");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("zkBngC'kq ;:{x");
      StringReader stringReader0 = new StringReader("zkBngC'kq ;:{x");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("_c5`#)q", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      File file0 = MockFile.createTempFile("=o(ahc=_V7Yilv", "l0`@K_/(_(tw/,TA _:");
      CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      StringReader stringReader0 = new StringReader("nUL0YY!wwujl]<Ep5");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character0, character0, false, false, "", "", stringArray0, true);
      // Undeclared exception!
//      try { 
        CSVParser.parse("nUL0YY!wwujl]<Ep5", cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The comment start character and the quoteChar cannot be the same ('m')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character0, character0, false, false, "", "", stringArray0, true);
      MockFile mockFile0 = new MockFile((String) null, "%/]1)0");
//      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      StringReader stringReader0 = new StringReader("nUL0YY!wwujl]<Ep5");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character0, character0, false, false, "", "", stringArray0, true);
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Character character0 = Character.valueOf('m');
      Quote quote0 = Quote.NONE;
      Character character1 = new Character('W');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat0 = new CSVFormat('L', character0, quote0, character1, character0, false, false, "", "", stringArray0, true);
      StringReader stringReader0 = new StringReader("nUL0YY!wwujl]<Ep5");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }
}
