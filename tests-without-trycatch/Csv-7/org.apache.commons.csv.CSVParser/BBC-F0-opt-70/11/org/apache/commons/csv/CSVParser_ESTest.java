/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 22:04:36 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("h~IItY(p\"A(");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser1.forEach(consumer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "UU7qJy3,T?JW%Iu");
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("ootan<~{\"&c", cSVFormat1);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wkfI";
      stringArray0[1] = "(#iEkqK#<9F-";
      stringArray0[2] = "0+";
      stringArray0[3] = "o";
      stringArray0[4] = "The header contains duplicate names: ";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("0+", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[0+]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("Q,L(*DK/$\"]k</S", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[Q, L(*DK/$\"]k</S]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("l(*dk/39$\"]k</s", cSVFormat0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fS-#nNz]`j+RT_Y7`g";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
      CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('*');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      List<CSVRecord> list0 = cSVParser0.getRecords();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("Q,L(*DK/$\"]k</S", cSVFormat0);
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fS-#nNz]`j+RT_Y7`g";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("The escape character and the delimiter cannot be the same ('");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      Character character0 = Character.valueOf('4');
      Quote quote0 = Quote.NON_NUMERIC;
      Character character1 = new Character('C');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('\\', character0, quote0, character1, character1, true, true, "CSVParser has been closed", "CSVParser has been closed", stringArray0, true);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('0');
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
//      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'url' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quote quote0 = Quote.MINIMAL;
      Character character0 = Character.valueOf('Z');
      String[] stringArray0 = new String[8];
      CSVFormat cSVFormat0 = new CSVFormat('Z', (Character) null, quote0, character0, (Character) null, false, true, "}SA;FhNiy2+|x", "~MHoJRz`4Pw}", stringArray0, true);
      // Undeclared exception!
//      try { 
        CSVParser.parse("}SA;FhNiy2+|x", cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The comment start character and the delimiter cannot be the same ('Z')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[6];
      CSVFormat cSVFormat0 = new CSVFormat('8', character0, quote0, character0, character0, true, false, (String) null, (String) null, stringArray0, false);
      // Undeclared exception!
//      try { 
        CSVParser.parse((String) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'string' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = "ootan<~{\"&c\\";
//      try { 
        CSVParser.parse(string0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // EOF whilst processing escape sequence
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SlsY");
      File file0 = MockFile.createTempFile("uc!M*1/@", ">)0~lM", (File) mockFile0);
      Character character0 = Character.valueOf('%');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[7];
      CSVFormat cSVFormat0 = new CSVFormat('%', character0, quote0, character0, character0, false, false, "uc!M*1/@", "CSVParser has been closed", stringArray0, false);
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('%')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("charset", "charset", (File) null);
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      File file0 = MockFile.createTempFile("CSVParser has been closed", "CSVParser has been closed");
      FileSystemHandling.shouldAllThrowIOExceptions();
//      try { 
        CSVParser.parse(file0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('*');
      MockFile mockFile0 = new MockFile("$c+J=IbXqgn(XtK}%");
//      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      CSVParser cSVParser0 = CSVParser.parse("T&o]", cSVFormat0);
      cSVParser0.close();
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("Q,L(*DK/$\"]k</S", cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      CSVParser cSVParser0 = CSVParser.parse(">]Yq9'+ r", cSVFormat0);
      cSVParser0.close();
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
//      try { 
        cSVParser0.getRecords(linkedList0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("file");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = MockFile.createTempFile("[U!P>c@;,", "[U!P>c@;,");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
//      try { 
        cSVParser0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fW*PLz?");
      Character character0 = Character.valueOf('6');
      Quote quote0 = Quote.NONE;
      String[] stringArray0 = new String[2];
      CSVFormat cSVFormat0 = new CSVFormat('6', character0, quote0, character0, character0, false, false, "N'Rm}P[lK;Tq7q>C", "9k`ErWdC", stringArray0, false);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('6')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      Quote quote0 = Quote.NON_NUMERIC;
      Character character0 = new Character('C');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(line ";
      CSVFormat cSVFormat0 = new CSVFormat('\\', character0, quote0, (Character) null, (Character) null, true, true, "(line ", "kyyS", stringArray0, true);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('B');
      CSVParser cSVParser0 = CSVParser.parse("&2V2<qobVEv\"Z", cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat0);
      cSVParser0.getRecords(linkedList0);
      assertEquals(2L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("6xQ<'", cSVFormat0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNotNull(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("aX!*lQ'");
      CSVParser cSVParser0 = CSVParser.parse("aX!*lQ'", cSVFormat1);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Q,L(*DK/$\"]k</S");
      CSVParser cSVParser0 = CSVParser.parse("6xQ<'", cSVFormat1);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("h~IItY(p\"A(");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      File file0 = MockFile.createTempFile("CSVParser has been closed", "CSVParser has been closed");
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("h~IItY(p\"A(");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }
}
