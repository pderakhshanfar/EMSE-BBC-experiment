/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 22:16:54 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("char");
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: RuntimeException");
      
//      } catch(RuntimeException e) {
//         //
//         // java.io.IOException: Stream closed
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("Y9:I$r8{>+P]iy&7", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[Y9:I$r8{>+P]iy&7]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("reader");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("reader");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse(" 3wd", cSVFormat0);
      cSVParser0.getRecords();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      URL uRL0 = MockURL.getFtpExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Character character0 = new Character('H');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[9];
      CSVFormat cSVFormat0 = new CSVFormat('~', character0, quote0, character0, character0, false, false, "(f*.ii~n=U", "org.apache.commons.csv.Token", stringArray0, false);
      // Undeclared exception!
//      try { 
        CSVParser.parse((URL) null, (Charset) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'url' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Character character0 = new Character('M');
      Quote quote0 = Quote.NON_NUMERIC;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('M', character0, quote0, character0, character0, true, true, "", "r{qxF2`|aw0>2", stringArray0, true);
      // Undeclared exception!
//      try { 
        CSVParser.parse("", cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('M')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Character character0 = Character.valueOf('');
      Quote quote0 = Quote.MINIMAL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('B', character0, quote0, character0, character0, false, false, (String) null, "", stringArray0, true);
      // Undeclared exception!
//      try { 
        CSVParser.parse((String) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'string' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('g');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
//      try { 
        CSVParser.parse("string", cSVFormat2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // EOF whilst processing escape sequence
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-Z`*bnE !v%v%N[5wi", "-Z`*bnE !v%v%N[5wi");
      File file0 = MockFile.createTempFile("y)u/IJ8j1", "-Z`*bnE !v%v%N[5wi", (File) mockFile0);
      Character character0 = Character.valueOf('U');
      Quote quote0 = Quote.ALL;
      String[] stringArray0 = new String[3];
      CSVFormat cSVFormat0 = new CSVFormat('U', character0, quote0, character0, (Character) null, true, true, "(]qQ7JY/>y#yS1LX[", "-Z`*bnE !v%v%N[5wi", stringArray0, true);
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, cSVFormat0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The quoteChar character and the delimiter cannot be the same ('U')
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = MockFile.createTempFile("!,G", "!,G");
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "2WYG4_=,Ia2|:57u9");
      File file0 = MockFile.createTempFile("@pP^Xme~Nh", "@pP^Xme~Nh", (File) mockFile0);
      Character character0 = new Character(')');
      Quote quote0 = Quote.NONE;
      Character character1 = Character.valueOf('{');
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat0 = new CSVFormat('\\', character0, quote0, character1, character0, true, true, "2WYG4_=,Ia2|:57u9", "lg-(", stringArray0, true);
//      try { 
        CSVParser.parse(file0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("char", cSVFormat0);
      cSVParser0.close();
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse(") invalid char between encapsulated token and delimiter", cSVFormat0);
      // Undeclared exception!
//      try { 
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y)_TP;LYBD@Gl8z1");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      stringReader0.close();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
//      try { 
        cSVParser0.getRecords(linkedList0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("rea#}r");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.close();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("sc(+0lt#rdndlc*@", "sc(+0lt#rdndlc*@");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
//      try { 
        cSVParser0.close();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Simulated IOException
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i\u0001ki");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[5];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // The header contains duplicate names: [null, null, null, null, null]
//         //
//         verifyException("org.apache.commons.csv.CSVFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVParser$1");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
      assertSame(linkedList0, linkedList1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Character character0 = new Character('E');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character(']');
      CSVFormat cSVFormat0 = new CSVFormat(')', (Character) null, quote0, character1, character0, true, true, "lX8a@DEPJbQ", "lX8a@DEPJbQ", (String[]) null, true);
      StringReader stringReader0 = new StringReader("]w`]");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.getRecords();
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      cSVParser0.getRecords();
      assertEquals(2L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader(",m=LKUjGc");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("char", cSVFormat0);
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "2WYG4_=,Ia2|:57u9");
      File file0 = MockFile.createTempFile("@pP^Xme~Nh", "@pP^Xme~Nh", (File) mockFile0);
      Character character0 = new Character(')');
      Quote quote0 = Quote.NONE;
      Character character1 = Character.valueOf('{');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('\\', character0, quote0, character1, character0, true, true, "2WYG4_=,Ia2|:57u9", "lg-(", stringArray0, true);
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      File file0 = MockFile.createTempFile("he8before en", "string", (File) null);
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat1);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Y9:I$r8{>+P]iy&7";
      stringArray0[1] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("Y9:I$r8{>+P]iy&7", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNotNull(cSVRecord0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("Parameter '");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVParser cSVParser0 = CSVParser.parse("string", cSVFormat2);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(1, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Parameter '");
      CSVParser cSVParser0 = CSVParser.parse("]5/`+", cSVFormat1);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringReader stringReader0 = new StringReader("Parameter '");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Parameter '");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      File file0 = MockFile.createTempFile("he8before en", "string", (File) null);
      CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Character character0 = new Character('E');
      Quote quote0 = Quote.MINIMAL;
      Character character1 = new Character(']');
      CSVFormat cSVFormat0 = new CSVFormat(')', (Character) null, quote0, character1, character0, true, true, "lX8a@DEPJbQ", "lX8a@DEPJbQ", (String[]) null, true);
      StringReader stringReader0 = new StringReader("]w`]");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      MockFile mockFile0 = new MockFile("A'm$48a");
//      try { 
        CSVParser.parse((File) mockFile0, cSVFormat0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: foo.bar
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }
}
