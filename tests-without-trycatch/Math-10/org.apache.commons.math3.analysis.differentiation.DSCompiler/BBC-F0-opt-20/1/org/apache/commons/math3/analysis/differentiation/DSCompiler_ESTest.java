/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 21:54:18 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = 3878;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3878);
      assertNotNull(dSCompiler0);
      assertEquals(3878, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3878, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1904.0580790404972);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = null;
      int int0 = 853;
      // Undeclared exception!
//      try { 
        dSCompiler1.atan2(doubleArray0, 0, doubleArray0, 0, (double[]) null, 853);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
//      try { 
        dSCompiler0.cos(doubleArray0, 2, doubleArray0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 2, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[10];
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, (-1188));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1188
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.acosh((double[]) null, 919, (double[]) null, 1004);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.log((double[]) null, 0, (double[]) null, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[10];
      int int1 = 4743;
      // Undeclared exception!
      DSCompiler.getCompiler(0, 4743);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = (-1604);
      // Undeclared exception!
//      try { 
        DSCompiler.getCompiler(Integer.MAX_VALUE, (-2678));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1907, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1907, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p((double[]) null, 17, (double[]) null, (-2423));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 0;
//      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 is larger than the maximum (0)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      // Undeclared exception!
//      try { 
        dSCompiler0.compose(doubleArray0, 336, doubleArray0, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 26);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(26, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 26;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = 0.7853981633974483;
      // Undeclared exception!
//      try { 
        dSCompiler1.asinh(doubleArray0, 0, doubleArray1, 14);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 14
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 14);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(14, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.rootN(doubleArray0, 0, 13, doubleArray0, 14);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 14
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      DSCompiler.getCompiler(4530, 25);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(4, 4);
      assertNotNull(dSCompiler0);
      assertEquals(4, dSCompiler0.getOrder());
      assertEquals(4, dSCompiler0.getFreeParameters());
      assertEquals(70, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(4, int0);
      assertEquals(4, dSCompiler0.getOrder());
      assertEquals(4, dSCompiler0.getFreeParameters());
      assertEquals(70, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 439);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(439, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.asin((double[]) null, 976, (double[]) null, 439);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 3.11611905696257E-10;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.taylor(doubleArray0, 2, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 29);
      assertNotNull(dSCompiler0);
      assertEquals(29, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.add(doubleArray0, 586, doubleArray0, 1794, doubleArray0, (-3183));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 586
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(321, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(321, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.rootN((double[]) null, 51, (-984), (double[]) null, (-1753));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      int int1 = 744;
      // Undeclared exception!
//      try { 
        dSCompiler0.multiply(doubleArray0, 1, doubleArray0, 744, doubleArray0, 744);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 744
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      int int1 = 23;
      int int2 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(23, 1);
      assertNotNull(dSCompiler0);
      assertEquals(24, dSCompiler0.getSize());
      assertEquals(23, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 23;
      // Undeclared exception!
//      try { 
        dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 0, 13, doubleArray0, 13);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 13
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 307.5;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 307.5;
      doubleArray1[5] = 307.5;
      doubleArray1[6] = 307.5;
      doubleArray1[7] = 307.5;
      doubleArray1[8] = 2.1608633995056152;
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination(307.5, (double[]) null, 0, 0.0, doubleArray0, 0, doubleArray1, 1733);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 3;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.003777734030334E-116;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      int int2 = 2248;
      // Undeclared exception!
//      try { 
        dSCompiler1.acos(doubleArray0, 3, doubleArray0, 2248);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2248
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p(doubleArray0, 1050, doubleArray0, 14);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1050
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      int int1 = 3641;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3641);
      assertNotNull(dSCompiler0);
      assertEquals(3641, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3641;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3641;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 3641;
      doubleArray0[6] = (-1377.0562);
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh(doubleArray0, 1183, doubleArray0, 1183);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1183
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
//      try { 
        dSCompiler0.atan(doubleArray0, 3, doubleArray0, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 823;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((double) 0, (double[]) null, 441, (double) 441, (double[]) null, 995, (double) 0, (double[]) null, 441, 898.9, (double[]) null, 1193, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.cosh((double[]) null, (-1), (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertEquals(7, doubleArray0.length);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      //  // Unstable assertion: assertEquals(7, doubleArray0.length);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getSize();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.expm1(doubleArray0, 1, doubleArray0, 1);
      //  // Unstable assertion: assertEquals(7, doubleArray0.length);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(0, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 1;
      int int2 = 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(1, 1);
      //  // Unstable assertion: assertNotSame(dSCompiler1, dSCompiler0);
      //  // Unstable assertion: assertNotNull(dSCompiler1);
      //  // Unstable assertion: assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler1.getOrder());
      //  // Unstable assertion: assertEquals(2, dSCompiler1.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler1.atan(doubleArray0, 0, doubleArray0, 1);
//       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int0 = dSCompiler0.getSize();
      assertEquals(1, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.expm1(doubleArray0, 1, doubleArray0, 1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.pow(doubleArray0, 1, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2(doubleArray0, 1, doubleArray0, 0, doubleArray0, 3507);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.rootN(doubleArray0, 3, 3, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = (-1185);
      dSCompiler0.sinh(doubleArray0, 3, doubleArray0, 3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray0, (-1185));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1185
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, 0.0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int2 = 3906;
      dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((-1235.11882), doubleArray0, 3906, 0.0, doubleArray0, 0, 1069.616876271, doubleArray0, 4, (double) 3906, doubleArray0, 2056, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3906
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (-150.0);
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p(doubleArray0, 3, doubleArray0, 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1627);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1627, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 4524;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-949.9);
      // Undeclared exception!
      dSCompiler1.asinh(doubleArray0, 0, doubleArray0, 3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 765);
      assertNotNull(dSCompiler0);
      assertEquals(765, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 765;
      doubleArray0[0] = (double) 0;
      int int0 = dSCompiler0.getOrder();
      assertEquals(765, int0);
      assertEquals(765, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[2] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      int int1 = 773;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 773);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(773, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 773;
      doubleArray0[1] = (double) 773;
      doubleArray0[0] = (double) 0;
      int int2 = 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.log10(doubleArray0, 0, doubleArray0, (-742));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -742
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, 0.0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, (-2668));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2668
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int[] intArray0 = new int[0];
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, 3.141592653589793, doubleArray0, 0, (-585.5232601386), doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2(doubleArray0, 1, doubleArray0, 0, doubleArray0, 3507);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2340);
      assertNotNull(dSCompiler0);
      assertEquals(2340, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, (-677));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -677
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = 952;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(952, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(952, dSCompiler0.getFreeParameters());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 24;
      intArray0[2] = 952;
      intArray0[3] = 3;
      intArray0[4] = 3;
//      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 5 != 952
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 4);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (-2004);
      doubleArray0[2] = 2440.91965683407;
      dSCompiler0.acosh(doubleArray0, 4, doubleArray0, 0);
      assertEquals(21, doubleArray0.length);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(4, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh(doubleArray0, 3, doubleArray0, (-2960));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2960
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 586);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(586, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, (-2288));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      dSCompiler0.sin(doubleArray1, 0, doubleArray1, 0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = (-1265);
      // Undeclared exception!
//      try { 
        DSCompiler.getCompiler((-1265), 608);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      double double0 = (-1783.441148592051);
      doubleArray0[0] = (-1783.441148592051);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double1 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals((-1783.441148592051), double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1783.441148592051), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int2 = 3;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 952;
      doubleArray1[1] = (double) 952;
      doubleArray1[2] = (-1783.441148592051);
      doubleArray1[3] = (-1783.441148592051);
      doubleArray1[4] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.expm1(doubleArray1, 0, doubleArray0, 952);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 0;
      int int1 = 586;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 586);
      assertNotNull(dSCompiler0);
      assertEquals(586, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.divide((double[]) null, 586, (double[]) null, 3, (double[]) null, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 586;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 586);
      assertNotNull(dSCompiler0);
      assertEquals(586, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      int int0 = 21;
      // Undeclared exception!
//      try { 
        dSCompiler0.acos((double[]) null, 21, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      dSCompiler0.subtract(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      // Undeclared exception!
//      try { 
        dSCompiler0.sin(doubleArray0, 1, doubleArray0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2340);
      assertNotNull(dSCompiler0);
      assertEquals(2340, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      int int1 = 2;
      // Undeclared exception!
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      // Undeclared exception!
//      try { 
        dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.rootN(doubleArray0, 0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.add(doubleArray0, 1, doubleArray0, 1, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((double) 0, doubleArray0, 0, 3047.45624568479, doubleArray0, (-4393), 9.942682855652123E-8, doubleArray0, 86, (-2136.697042413), doubleArray0, 0, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4393
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2340);
      assertNotNull(dSCompiler0);
      assertEquals(2340, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 163);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int[] intArray0 = new int[0];
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2(doubleArray0, 1, doubleArray0, 0, doubleArray0, 3507);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 2010;
      int int1 = 0;
      int int2 = 58;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 58);
      assertNotNull(dSCompiler0);
      assertEquals(58, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int3 = (-400);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[9];
      double double0 = 3067.4344892782055;
      doubleArray1[0] = 3067.4344892782055;
      doubleArray1[1] = (double) 2010;
      doubleArray1[2] = (double) 2010;
      doubleArray1[3] = (double) 2010;
      doubleArray1[4] = (double) 2010;
      doubleArray1[5] = (double) 2010;
      doubleArray1[6] = (double) 58;
      doubleArray1[7] = (double) 2010;
      doubleArray1[8] = (double) (-400);
      int int4 = 2;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow((double[]) null, (-400), (double[]) null, 58, doubleArray1, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.pow(doubleArray0, 1219, 0, doubleArray0, 2);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 2);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int2 = (-1251);
      double double0 = (-864.2121);
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p(doubleArray0, 62, doubleArray0, 829);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 62
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 0;
      int int2 = 2;
      // Undeclared exception!
//      try { 
        dSCompiler0.rootN(doubleArray0, 3, 2, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      dSCompiler1.atanh(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 3);
      assertNotSame(dSCompiler2, dSCompiler0);
      assertNotSame(dSCompiler2, dSCompiler1);
      assertNotNull(dSCompiler2);
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertFalse(dSCompiler2.equals((Object)dSCompiler1));
      assertEquals(1, dSCompiler2.getSize());
      assertEquals(3, dSCompiler2.getOrder());
      assertEquals(0, dSCompiler2.getFreeParameters());
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 387;
      doubleArray1[3] = (double) 387;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (-4422.7907);
      doubleArray1[7] = (-4422.7907);
      doubleArray1[8] = (double) 387;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-4422.7907);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = (-951.810333834);
      doubleArray2[4] = (double) 3;
      // Undeclared exception!
//      try { 
        dSCompiler2.divide(doubleArray0, 387, doubleArray1, 3, doubleArray2, 4);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 387
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int[] intArray0 = new int[0];
      int int0 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-117.84279948924113);
      doubleArray1[4] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.asin(doubleArray1, 0, doubleArray0, (-1110));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination(265.4259132361898, doubleArray0, 4, (double) 0, doubleArray0, 0, 177.65984456627, doubleArray0, (-510), doubleArray0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -510
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1391);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1391, dSCompiler1.getOrder());
      
//      try { 
        dSCompiler1.checkCompatibility(dSCompiler0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1,391 != 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      int int2 = 2613;
      int int3 = 3906;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray1, 0, 2613, doubleArray0, 3906);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[5] = (double) 0;
      dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2588.9);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray1, 6, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2588.9), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.asinh(doubleArray0, 2, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1.5707963267948966, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 3;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 3);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 3.8104773809653514, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.acosh(doubleArray0, 3, doubleArray0, 952);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray0, 0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.getPartialDerivativeIndex((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atan(doubleArray0, 1138, doubleArray0, 321);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1138
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 141);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(141, dSCompiler1.getOrder());
      
      dSCompiler1.pow(doubleArray0, 1, (double) 141, doubleArray0, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(141, dSCompiler1.getOrder());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 0);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(3, dSCompiler1.getOrder());
      
//      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3 != 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 1131;
      double[] doubleArray0 = null;
      int int2 = 3;
      int int3 = 29;
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh((double[]) null, 3, (double[]) null, 29);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int0 = 3;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 3.8104773809653514}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(3, dSCompiler1.getOrder());
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getFreeParameters());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) (-653);
      doubleArray1[4] = (double) 3;
      // Undeclared exception!
//      try { 
        dSCompiler1.pow(doubleArray0, 3, (-653), doubleArray1, (-417));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 2268);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(2268, dSCompiler1.getOrder());
      
//      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 2,268
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[2];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
//      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (double) 0;
      int int1 = 13;
      int int2 = 21;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 1219, 0, doubleArray0, 21);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 21
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atanh(doubleArray1, 3, doubleArray0, 1213);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = 3;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 3);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(21, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      assertEquals(21, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      
//      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 21
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 3.8104773809653514}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = 160;
      // Undeclared exception!
      DSCompiler.getCompiler(952, 160);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-315.87273527001884);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-315.87273527001884);
      doubleArray1[3] = (-315.87273527001884);
      doubleArray1[4] = (-315.87273527001884);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (-315.87273527001884);
      dSCompiler0.sinh(doubleArray1, 0, doubleArray1, 2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-315.87273527001884), (-315.87273527001884), 0.0, (-315.87273527001884)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 478);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray0 = new int[2];
      // Undeclared exception!
//      try { 
        dSCompiler0.acos(doubleArray0, 0, doubleArray0, 983);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = null;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 823);
      assertNotNull(dSCompiler0);
      assertEquals(823, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.tan((double[]) null, 823, (double[]) null, 8);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler1.log(doubleArray0, (-1), doubleArray0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      int int1 = 1244;
      // Undeclared exception!
//      try { 
        dSCompiler0.rootN(doubleArray0, 0, 1244, doubleArray0, (-4882));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int0 = 1360;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1360);
      assertNotNull(dSCompiler0);
      assertEquals(1360, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 1061;
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 1061);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atan((double[]) null, 3820, (double[]) null, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 3);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.cos(doubleArray0, 18, doubleArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 18
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.rootN(doubleArray0, 0, (-671), doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(24, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(24, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.cos((double[]) null, (-1889), (double[]) null, (-407));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 3;
      double[] doubleArray0 = null;
      int int2 = 3505;
      int int3 = 935;
      // Undeclared exception!
//      try { 
        dSCompiler0.expm1((double[]) null, 3505, (double[]) null, 935);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 823;
      // Undeclared exception!
//      try { 
        dSCompiler0.tanh((double[]) null, (-695), doubleArray0, 2276);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 586);
      assertNotNull(dSCompiler0);
      assertEquals(586, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.asinh((double[]) null, 0, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      int int0 = 282;
      // Undeclared exception!
//      try { 
        dSCompiler0.log10((double[]) null, (-3194), (double[]) null, 282);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1321, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1321, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = (-1833);
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((double) 1321, (double[]) null, 3322, (double) 2270, (double[]) null, 0, 2.0, (double[]) null, (-1833), (double[]) null, (-1229));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler1.log10(doubleArray0, 0, doubleArray0, 74);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.pow(doubleArray0, 0, doubleArray0, 2, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 846;
      // Undeclared exception!
//      try { 
        DSCompiler.getCompiler(846, (-562));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 0;
      int int1 = 197;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 197);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(197, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.sin((double[]) null, 197, doubleArray1, 197);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      int int1 = (-2867);
      double double0 = (-1289.833036835);
      double[] doubleArray0 = null;
      int int2 = 564;
      int int3 = 32;
      double[] doubleArray1 = new double[5];
      // Undeclared exception!
//      try { 
        dSCompiler1.log10(doubleArray1, 66, (double[]) null, 564);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 66
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
//      try { 
        dSCompiler0.acosh(doubleArray0, 0, doubleArray0, (-3719));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 952;
      // Undeclared exception!
//      try { 
        dSCompiler0.expm1(doubleArray0, 952, doubleArray0, 952);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 952
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (-315.87273527001884);
      doubleArray0[3] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.rootN(doubleArray0, 193, 0, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 193
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 195);
      assertNotNull(dSCompiler0);
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      int int1 = 868;
      int int2 = 2404;
      // Undeclared exception!
//      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray0, 28);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int0 = 2;
      dSCompiler0.remainder(doubleArray0, 2, doubleArray0, 0, doubleArray0, 2);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 1313;
      // Undeclared exception!
//      try { 
        dSCompiler0.atanh(doubleArray0, (-695), doubleArray0, 1313);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -695
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      int int1 = 952;
      int int2 = 3;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      DSCompiler.getCompiler(952, 160);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 195);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(195, dSCompiler0.getOrder());
      
      int int1 = dSCompiler0.getFreeParameters();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(195, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 195;
      int int2 = 548;
      // Undeclared exception!
//      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, 195);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      int int1 = 586;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 586);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(586, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 36);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 195);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(195, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.compose((double[]) null, 16, (double[]) null, (double[]) null, 1298);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 586);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(586, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      int int0 = (-2004);
      // Undeclared exception!
      dSCompiler0.acosh(doubleArray0, 1, doubleArray0, (-2004));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = (-963);
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 0, 0.0, doubleArray0, (-963));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(321, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(321, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      int int1 = 29;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(321, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 321;
      doubleArray2[1] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.acos(doubleArray0, 321, doubleArray2, 340);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 321
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 197, 171, doubleArray0, 752);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 197
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(6, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      double double0 = (-1.220176214398581E-10);
      int int1 = 1268;
      // Undeclared exception!
//      try { 
        dSCompiler0.sin(doubleArray0, 2, doubleArray0, 1268);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.taylor((double[]) null, 0, (double[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[4];
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.log(doubleArray0, 5, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      int int1 = 195;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 195);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int2 = dSCompiler0.getFreeParameters();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int3 = (-307);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 195;
      doubleArray0[3] = (double) (-307);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      int int4 = 1191;
      // Undeclared exception!
//      try { 
        dSCompiler0.cosh(doubleArray0, 1191, doubleArray0, 195);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1191
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int[] intArray1 = dSCompiler0.getPartialDerivativeOrders(0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = 2503;
      int int1 = 260;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3302);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.acosh(doubleArray1, (-3302), doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3302
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      dSCompiler0.checkCompatibility(dSCompiler1);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-315.87273527001884);
      doubleArray1[1] = (double) 32;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-315.87273527001884);
      doubleArray1[6] = (double) 32;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 32;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (-315.87273527001884);
      doubleArray2[4] = (-315.87273527001884);
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = (-315.87273527001884);
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 32, doubleArray1, 0, doubleArray2, (-1106));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 32
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 195);
      assertNotNull(dSCompiler0);
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 361;
      double[] doubleArray0 = null;
      int int2 = 1298;
      int int3 = (-1303);
      // Undeclared exception!
//      try { 
        dSCompiler0.subtract((double[]) null, 1298, (double[]) null, 0, (double[]) null, (-1303));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      int int2 = 123;
      // Undeclared exception!
//      try { 
        dSCompiler0.asin(doubleArray1, 0, doubleArray0, 2918);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2918
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.getPartialDerivativeOrders((-2989));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2989
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        dSCompiler1.log1p(doubleArray0, 0, doubleArray2, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-315.87273527001884);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int int0 = 666;
      // Undeclared exception!
//      try { 
        dSCompiler0.subtract(doubleArray0, 666, doubleArray0, 0, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 666
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      int int1 = 1;
      int int2 = 0;
      int int3 = 156;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow((double[]) null, 1, 156, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 1971;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1971, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1971, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 1222;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1222);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1222, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      int int1 = 0;
      // Undeclared exception!
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
      DSCompiler.getCompiler(8, 497);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-315.87273527001884);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int int0 = (-2641);
      int int1 = 835;
      // Undeclared exception!
//      try { 
        dSCompiler0.compose(doubleArray0, (-1130), doubleArray0, doubleArray0, 835);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 835
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh(doubleArray0, 0, doubleArray1, 123);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 123
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 195);
      assertNotNull(dSCompiler0);
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
//      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, 1139);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1139
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 1971;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1971, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1971, dSCompiler0.getFreeParameters());
      
      int int1 = 0;
      int int2 = 133;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2((double[]) null, 145, (double[]) null, 133, (double[]) null, 462);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh(doubleArray0, (-1548), doubleArray0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1548
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 1971;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1971, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1971, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 1971, (double) 0, doubleArray0, (-1833), doubleArray0, 2270);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1971
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      int int2 = 1;
      // Undeclared exception!
//      try { 
        dSCompiler0.atanh((double[]) null, (-2315), (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 321;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(321, 0);
      assertNotNull(dSCompiler0);
      assertEquals(321, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      int int2 = 29;
      // Undeclared exception!
//      try { 
        dSCompiler0.taylor(doubleArray0, 29, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 29
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
//      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, (-3673));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3673
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 195);
      assertNotNull(dSCompiler0);
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(0, int0);
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 195;
      doubleArray0[1] = (double) 195;
      // Undeclared exception!
//      try { 
        dSCompiler0.acos(doubleArray0, 195, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 195
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-220.97735435);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, (-3302));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -3302
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      int int1 = 29;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 29, 0.0, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 29
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 0;
      int int1 = 195;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 195);
      assertNotNull(dSCompiler0);
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int2 = dSCompiler0.getSize();
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(195, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.acos(doubleArray0, 195, doubleArray0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 195
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1662, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1662, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1662;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = (-254);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-254);
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, (-254), doubleArray1, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1662.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1662, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int2 = 1189;
      // Undeclared exception!
//      try { 
        dSCompiler0.tanh(doubleArray1, 1662, doubleArray0, 1189);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1662
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[0];
      int int1 = 945;
      int int2 = 0;
      int int3 = 0;
      int int4 = 3;
      // Undeclared exception!
//      try { 
        dSCompiler0.sin(doubleArray0, 0, doubleArray0, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      int int2 = 1;
      int int3 = 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow((double[]) null, 0, (double) 3, (double[]) null, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertSame(dSCompiler0, dSCompiler1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = 667;
      int int2 = 0;
      double double0 = (-1534.17625569);
      double double1 = 1040.0369;
      double double2 = 2155.783909675095;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 667;
      doubleArray1[1] = 2155.783909675095;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p(doubleArray1, (-711), doubleArray0, 667);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -711
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 1971;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1971, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1971, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray1, 1971, doubleArray1, (-400));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1971
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int1 = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
//      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 8 != 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1999);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1999, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1999;
      doubleArray0[1] = (double) 0;
      int int1 = (-1020);
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1999;
      doubleArray1[2] = (double) 1999;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (-1020);
      doubleArray1[5] = (double) (-1020);
      doubleArray1[6] = (double) 0;
      int int2 = 0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (-1020);
      doubleArray2[3] = (double) 0;
      int int3 = 0;
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1999, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.remainder(doubleArray1, 0, doubleArray2, (-793), doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -793
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 0;
      int int1 = 2340;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2340);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 1346;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1346, 0);
      double[] doubleArray0 = new double[1];
      int int2 = 19;
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p(doubleArray0, 19, doubleArray0, 1346);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 19
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-220.97735435);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 133);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 133
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 790);
      double[] doubleArray0 = new double[2];
      int int1 = (-2132);
      int int2 = 2;
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination(0.0, doubleArray0, (-2132), 2.2431576057283144E113, doubleArray0, 0, (double) 0, doubleArray0, (-3188), (double) (-2132), doubleArray0, (-2132), doubleArray0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2132
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = null;
      int int1 = (-3776);
      double[] doubleArray1 = new double[4];
      int int2 = 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.remainder((double[]) null, (-3776), (double[]) null, 0, doubleArray1, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 88;
      // Undeclared exception!
      DSCompiler.getCompiler(88, 88);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 0;
      int int1 = 586;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 586);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 586;
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((double) 586, doubleArray0, 586, (double) 0, doubleArray0, (-2867), doubleArray1, (-2867));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 586
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      int int1 = 952;
      // Undeclared exception!
//      try { 
        dSCompiler0.expm1(doubleArray0, 952, doubleArray0, 952);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 952
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 394;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(394, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 394;
      doubleArray0[3] = (double) 394;
      doubleArray0[4] = (double) 394;
      doubleArray0[5] = (double) 394;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 394;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 394;
      doubleArray1[1] = (double) 394;
      doubleArray1[2] = (double) 394;
      doubleArray1[3] = (double) 394;
      // Undeclared exception!
//      try { 
        dSCompiler0.exp(doubleArray1, (-2343), doubleArray1, (-3144));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -2343
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(321, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.log(doubleArray0, 548, doubleArray0, 548);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 548
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 0;
      int int1 = 1196;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1196);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1196;
      int int2 = 4114;
      // Undeclared exception!
//      try { 
        dSCompiler0.asinh(doubleArray0, (-4215), doubleArray0, 4114);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -4215
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 1110;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1110, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1110;
      doubleArray0[3] = (double) 1110;
      double double0 = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1110;
      doubleArray0[6] = (double) 1110;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.atanh(doubleArray0, 1110, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1110
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 2010;
      // Undeclared exception!
      DSCompiler.getCompiler(2010, 2010);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = (-2248);
      int int1 = (-810);
      // Undeclared exception!
//      try { 
        DSCompiler.getCompiler((-2248), (-810));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = (-2095);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        DSCompiler.getCompiler((-2095), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }
}
