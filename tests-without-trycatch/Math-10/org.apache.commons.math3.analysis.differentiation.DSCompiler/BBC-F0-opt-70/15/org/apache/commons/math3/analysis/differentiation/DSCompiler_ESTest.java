/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 13:43:33 GMT 2021
 */

package org.apache.commons.math3.analysis.differentiation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DSCompiler_ESTest extends DSCompiler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 1, doubleArray0);
      assertEquals(16, doubleArray0.length);
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(1, int0);
      
      int int1 = 9;
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((-1596.5), doubleArray0, 9, (double) 9, doubleArray0, 1, 2.0, doubleArray0, 9, 1.0, doubleArray0, 59, doubleArray0, 8);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 59
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.asinh((double[]) null, 0, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      int int1 = 17;
      int int2 = 1;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(17, 1);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(18, dSCompiler1.getSize());
      assertEquals(17, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getOrder());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      // Undeclared exception!
//      try { 
        dSCompiler1.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1851);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1851, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      dSCompiler1.acos(doubleArray0, 0, doubleArray0, 1851);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh(doubleArray0, 3, doubleArray0, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow((double[]) null, 0, (double[]) null, 0, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.acos((double[]) null, 0, doubleArray0, 23);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.acos(doubleArray0, 3, doubleArray0, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.rootN((double[]) null, 0, 2, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      
      dSCompiler0.linearCombination(2.0, doubleArray0, 1, (double) 1, doubleArray0, 1, 2.0, doubleArray0, 1, doubleArray0, 1);
      //  // Unstable assertion: assertEquals(14, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 1, 1, doubleArray0, 1);
//       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      
      dSCompiler0.linearCombination(2.0, doubleArray0, 1, (double) 1, doubleArray0, 1, 2.0, doubleArray0, 1, doubleArray0, 1);
      //  // Unstable assertion: assertEquals(14, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 1, 1, doubleArray0, 1);
//       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 13);
      assertNotNull(dSCompiler0);
      assertEquals(13, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.4630211329364896, 13.0, 13.0, 13.0}, doubleArray0, 0.01);
      assertEquals(13, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 13;
      doubleArray1[4] = (double) 13;
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p(doubleArray1, 3, doubleArray0, 711);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      
      dSCompiler0.linearCombination(2.0, doubleArray0, 1, (double) 1, doubleArray0, 1, 2.0, doubleArray0, 1, doubleArray0, 1);
      //  // Unstable assertion: assertEquals(14, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[5];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[6];
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray1));
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2.0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (-0.39269908169872414);
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = 2.0;
      // Undeclared exception!
//      try { 
        dSCompiler0.atan(doubleArray1, 1, doubleArray2, 1);
//       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      dSCompiler0.subtract(doubleArray1, 0, doubleArray1, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(0, 2);
      assertNotSame(dSCompiler2, dSCompiler0);
      assertNotSame(dSCompiler2, dSCompiler1);
      assertNotNull(dSCompiler2);
      assertEquals(2, dSCompiler2.getOrder());
      assertEquals(1, dSCompiler2.getSize());
      assertEquals(0, dSCompiler2.getFreeParameters());
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertFalse(dSCompiler2.equals((Object)dSCompiler1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2397.10174279);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      int int0 = 0;
      int int1 = 992;
      // Undeclared exception!
//      try { 
        dSCompiler2.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 992);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      
      double double0 = 2.0;
      dSCompiler0.linearCombination(2.0, doubleArray0, 1, (double) 1, doubleArray0, 1, 2.0, doubleArray0, 1, doubleArray0, 1);
      //  // Unstable assertion: assertEquals(14, doubleArray0.length);
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[5];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 1, 1, doubleArray0, 1);
//       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      int int0 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      
      int int1 = 1;
      // Undeclared exception!
//      try { 
        dSCompiler0.asin(doubleArray0, 1, doubleArray0, 1);
//       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      int int1 = 1261;
      double[] doubleArray0 = new double[1];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1261);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1261, dSCompiler0.getOrder());
      
      // Undeclared exception!
      dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 50);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0.0, double0, 0.01);
      
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      //  // Unstable assertion: assertNotNull(dSCompiler0);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      
      dSCompiler0.linearCombination(2.0, doubleArray0, 1, (double) 1, doubleArray0, 1, 2.0, doubleArray0, 1, doubleArray0, 1);
      //  // Unstable assertion: assertEquals(14, doubleArray0.length);
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getFreeParameters());
      //  // Unstable assertion: assertEquals(2, dSCompiler0.getSize());
      //  // Unstable assertion: assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[5];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 1, 1, doubleArray0, 1);
//       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(3, 3);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(3, dSCompiler1.getFreeParameters());
      assertEquals(20, dSCompiler1.getSize());
      assertEquals(3, dSCompiler1.getOrder());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1670.717399981728);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler1.asinh(doubleArray0, 0, doubleArray0, 29);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 2);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      // Undeclared exception!
//      try { 
        dSCompiler1.acosh(doubleArray0, 3, doubleArray0, 587);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.multiply(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 44);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1223);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1223, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 469;
      // Undeclared exception!
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 469);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      int int1 = 2929;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2929, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(2929, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      int int2 = 432;
      double double0 = 181.8153452;
      // Undeclared exception!
//      try { 
        dSCompiler0.asin((double[]) null, 260, (double[]) null, 432);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 394;
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow((double[]) null, 0, (-914), (double[]) null, 62);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3229);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3229, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
//      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 3,229 != 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 858;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 858);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(858, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0177335739135742;
      int int1 = (-680);
      int int2 = 2;
      // Undeclared exception!
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      dSCompiler0.linearCombination((double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray0, (-1948));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3007.3769327);
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-3007.3769327)}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals((-3007.3769327), double0, 0.01);
      
      // Undeclared exception!
//      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 4316);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2642;
      dSCompiler0.pow(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 2642.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.compose(doubleArray0, 2642, doubleArray0, doubleArray0, 2642);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3643);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(3643, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1261);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1261, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
      dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 1386);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      int int1 = 3636;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3636);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(3636, dSCompiler1.getOrder());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      dSCompiler1.sin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(3636, dSCompiler1.getOrder());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      double[] doubleArray1 = null;
      int int2 = (-1215);
      // Undeclared exception!
//      try { 
        dSCompiler1.cosh(doubleArray0, 1651, (double[]) null, (-1215));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1651
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 1993;
      // Undeclared exception!
//      try { 
        dSCompiler0.getPartialDerivativeOrders(51);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 51
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 2475;
      int int1 = 1993;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 1);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1993;
      int[] intArray0 = dSCompiler0.getPartialDerivativeOrders(0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getSize());
      assertEquals(1, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 1, doubleArray0, 1993);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1993
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      dSCompiler0.tanh(doubleArray0, 0, doubleArray1, 0);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-221);
      doubleArray2[2] = (double) (-221);
      doubleArray2[4] = (double) (-221);
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = 508.27039700320324;
      // Undeclared exception!
//      try { 
        dSCompiler0.log10((double[]) null, 0, doubleArray2, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3171);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3171, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      int int1 = 16;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3171;
      doubleArray1[1] = (double) 16;
      // Undeclared exception!
      dSCompiler0.tan(doubleArray1, 0, doubleArray0, 2429);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = (-1223);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 100;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 100;
      doubleArray1[4] = (double) 100;
      doubleArray1[5] = (double) 100;
      // Undeclared exception!
//      try { 
        dSCompiler0.exp((double[]) null, 8, doubleArray1, (-278));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1.2297127301923986E-8);
      doubleArray1[6] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[0] = (double) 0;
      doubleArray1[6] = (double) 0;
      int int0 = dSCompiler0.getSize();
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, int0);
      
      dSCompiler0.asinh(doubleArray0, 1, doubleArray1, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.2297127301923986E-8), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      dSCompiler0.add(doubleArray0, 1, doubleArray0, 0, doubleArray2, 0);
      assertEquals(1, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1.2297127301923986E-8);
      doubleArray1[6] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[0] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 0.0;
      dSCompiler0.atan2(doubleArray1, 0, doubleArray1, 0, doubleArray1, 0);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1.2297127301923986E-8), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = dSCompiler0.getSize();
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, int0);
      
      dSCompiler0.asinh(doubleArray0, 1, doubleArray1, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.2297127301923986E-8), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.checkCompatibility((DSCompiler) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      dSCompiler0.linearCombination((double) 0, doubleArray0, 1, (double) 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atan(doubleArray0, 4967, doubleArray0, (-807));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4967
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3636);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(3636, dSCompiler1.getOrder());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      int int0 = 1651;
      double[] doubleArray1 = null;
      int int1 = (-1215);
      // Undeclared exception!
//      try { 
        dSCompiler1.asinh((double[]) null, 1651, (double[]) null, 2013);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3636);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(3636, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      double[] doubleArray1 = null;
      int int0 = 25;
      // Undeclared exception!
//      try { 
        dSCompiler1.cosh(doubleArray0, 0, doubleArray0, 25);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      dSCompiler0.divide(doubleArray0, 0, doubleArray0, 864, doubleArray0, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.cos(doubleArray1, 0, doubleArray1, 0);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      dSCompiler0.compose(doubleArray1, 290, doubleArray1, doubleArray1, 0);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[10];
      int int0 = 3;
      int int1 = (-1);
      dSCompiler0.exp(doubleArray0, 0, doubleArray0, 3);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 3, (double) 0, doubleArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[1];
      int int1 = 4141;
      // Undeclared exception!
      DSCompiler.getCompiler(4340, 3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      dSCompiler1.atan2(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertSame(dSCompiler1, dSCompiler0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler1.log(doubleArray0, (-326), doubleArray0, (-326));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -326
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int1 = (-1172);
      int int2 = 6;
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination(0.0, (double[]) null, (-1172), (double) 0, doubleArray0, 156, (-185.69), doubleArray0, 0, (double[]) null, 6);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int0 = 587;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 2);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(2, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      // Undeclared exception!
//      try { 
        dSCompiler1.asin(doubleArray0, 2, doubleArray0, 587);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2929, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(2929, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.acosh((double[]) null, 0, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      double double0 = dSCompiler0.taylor(doubleArray1, 0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 26);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(26, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
      DSCompiler dSCompiler2 = DSCompiler.getCompiler(1, 2);
      assertNotSame(dSCompiler2, dSCompiler0);
      assertNotSame(dSCompiler2, dSCompiler1);
      assertNotNull(dSCompiler2);
      assertEquals(3, dSCompiler2.getSize());
      assertEquals(2, dSCompiler2.getOrder());
      assertEquals(1, dSCompiler2.getFreeParameters());
      assertFalse(dSCompiler2.equals((Object)dSCompiler0));
      assertFalse(dSCompiler2.equals((Object)dSCompiler1));
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 0.0;
      // Undeclared exception!
//      try { 
        dSCompiler2.log1p(doubleArray2, 2, doubleArray1, (-155));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3242);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3242, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 3242;
      intArray0[1] = 0;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 3242;
      doubleArray1[3] = (double) 3242;
      doubleArray1[4] = 1226.20848;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray1, 1, 420, doubleArray0, (-2986));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int int1 = dSCompiler0.getSize();
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      doubleArray0[3] = (-565.600220889);
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-565.600220889)}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int2 = 3;
      int int3 = 3638;
      // Undeclared exception!
//      try { 
        dSCompiler0.multiply(doubleArray1, 3638, doubleArray1, 3, doubleArray1, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3638
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 1251.8663321020163;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.2246467991473532E-16, 1251.8663321020163, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = null;
      int int1 = 195;
      int int2 = (-1694);
      // Undeclared exception!
//      try { 
        dSCompiler0.multiply((double[]) null, 195, (double[]) null, 30, (double[]) null, (-1694));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.tan(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.633123935319537E16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atanh(doubleArray0, 2475, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2475
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int0 = 1531;
      double[] doubleArray0 = null;
      int int1 = 862;
      // Undeclared exception!
//      try { 
        dSCompiler0.cosh((double[]) null, 1531, (double[]) null, 862);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 36;
      doubleArray0[1] = (double) 1531;
      doubleArray0[2] = (double) 1531;
      doubleArray0[3] = (double) 1531;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1531;
      doubleArray0[6] = (double) 1531;
      doubleArray0[7] = (double) 2;
      int int0 = 394;
      int int1 = (-914);
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 2, 394, doubleArray0, (-914));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      dSCompiler0.pow(doubleArray0, 2, (-1), doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atan(doubleArray1, 2, (double[]) null, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(1, dSCompiler1.getSize());
      
      dSCompiler0.compose(doubleArray0, 0, doubleArray0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertSame(dSCompiler0, dSCompiler1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.acosh(doubleArray0, (-1), doubleArray0, 277);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // -1
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(34, 0);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(34, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
//      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 34
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[11];
      // Undeclared exception!
//      try { 
        dSCompiler0.subtract((double[]) null, 3171, (double[]) null, 0, doubleArray0, 3171);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 0;
      int int1 = 3171;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3171);
      assertNotNull(dSCompiler0);
      assertEquals(3171, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3171;
      double double0 = dSCompiler0.taylor(doubleArray0, 0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3171.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3171, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(3171.0, double0, 0.01);
      
      int int2 = 2;
      // Undeclared exception!
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {10.067661995777765, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 3;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray1, 9, (-1157), doubleArray1, 9);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 9
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atanh(doubleArray0, 0, doubleArray0, (-4765));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      
      int int0 = 18;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2891.75569;
      doubleArray0[1] = 3584.447394585857;
      doubleArray0[2] = 2891.75569;
      doubleArray0[3] = (double) (-2323);
      int int1 = 14;
      // Undeclared exception!
//      try { 
        dSCompiler1.linearCombination(2891.75569, doubleArray0, 14, (double) 18, doubleArray0, 3427, (-3.141592653589793), doubleArray0, (-3821), doubleArray0, 18);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 14
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2929, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(2929, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.tan((double[]) null, 2929, (double[]) null, 2929);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 2;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2, 2);
      assertNotNull(dSCompiler0);
      assertEquals(6, dSCompiler0.getSize());
      assertEquals(2, dSCompiler0.getOrder());
      assertEquals(2, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      // Undeclared exception!
//      try { 
        dSCompiler0.multiply(doubleArray0, 2, doubleArray0, 2, doubleArray0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 3;
      int int2 = 1972;
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1430.3071503;
      // Undeclared exception!
//      try { 
        dSCompiler0.taylor((double[]) null, (-3345), doubleArray1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 0);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      
      dSCompiler1.checkCompatibility(dSCompiler0);
      assertSame(dSCompiler0, dSCompiler1);
      assertSame(dSCompiler1, dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(0, dSCompiler1.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.compose(doubleArray0, 2342, doubleArray0, doubleArray0, 2713);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3242);
      assertNotNull(dSCompiler0);
      assertEquals(3242, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 3242);
      assertSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(3242, dSCompiler1.getOrder());
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      
      double[] doubleArray0 = null;
      int int0 = 1356;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1356;
      doubleArray1[1] = (double) 1356;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 1356;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 3242;
      doubleArray1[7] = (-3943.537442534);
      int int1 = 18;
      // Undeclared exception!
//      try { 
        dSCompiler1.rootN((double[]) null, 1356, 1356, doubleArray1, 18);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 17;
      // Undeclared exception!
//      try { 
        dSCompiler0.tan(doubleArray0, 0, doubleArray0, 17);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(11, doubleArray0.length);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.sinh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(11, doubleArray0.length);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p(doubleArray0, 37, doubleArray0, 614);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 37
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {10.067661995777765, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      dSCompiler0.atan(doubleArray1, 0, doubleArray1, 1);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.0, 1.2490457723982544, 0.0, 0.0, 0.0, 3.0, 3.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[3] = (double) 3;
      dSCompiler0.cosh(doubleArray0, 3, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {10.067661995777765, 0.0, 0.0, 3.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int2 = 1972;
      double[] doubleArray2 = new double[19];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.remainder(doubleArray2, 3, doubleArray2, 1972, doubleArray2, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1972
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (-1.2297127301923986E-8);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[0] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = 0.0;
      dSCompiler0.atan2(doubleArray2, 0, doubleArray2, 0, doubleArray2, 0);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1.2297127301923986E-8), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      dSCompiler0.rootN(doubleArray2, 0, 0, doubleArray2, 0);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1.2297127301923986E-8), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 674.94247331;
      doubleArray3[2] = (-1.2297127301923986E-8);
      doubleArray3[3] = (-652.2916433);
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (-1.2297127301923986E-8);
      doubleArray4[2] = 674.94247331;
      // Undeclared exception!
//      try { 
        dSCompiler0.subtract(doubleArray3, 614, doubleArray2, 614, doubleArray4, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 614
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[11];
      int int1 = 2;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = 4.62608152166211E-167;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2(doubleArray1, 0, doubleArray1, 0, doubleArray1, 75);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 75
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 858;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 858);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(858, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0177335739135742;
      int int1 = (-680);
      dSCompiler0.log1p(doubleArray0, 2, doubleArray0, 2);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0177335739135742, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(858, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int2 = 38;
      int int3 = (-1);
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p(doubleArray0, 38, doubleArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 38
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2929, 0);
      assertNotNull(dSCompiler0);
      assertEquals(2929, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.log((double[]) null, 825, doubleArray1, 825);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2929);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(2929, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double double0 = 0.5690577030181885;
      double[] doubleArray0 = null;
      int int0 = 587;
      // Undeclared exception!
//      try { 
        dSCompiler0.remainder((double[]) null, 0, (double[]) null, 0, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1274);
      assertNotNull(dSCompiler0);
      assertEquals(1274, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.rootN(doubleArray0, 0, 1274, doubleArray0, (-307));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1274);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1274, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      int int0 = 297;
      // Undeclared exception!
//      try { 
        dSCompiler0.log10(doubleArray0, 0, doubleArray0, 297);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3107.13325498742;
      // Undeclared exception!
//      try { 
        dSCompiler0.tan(doubleArray0, 46, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 46
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1274);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(1274, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      // Undeclared exception!
      dSCompiler0.atan(doubleArray0, 1, doubleArray0, 2761);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.cos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 3);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 1647;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1647, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1647, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1647;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 1647);
      assertNotSame(dSCompiler1, dSCompiler0);
      assertNotNull(dSCompiler1);
      assertEquals(0, dSCompiler1.getFreeParameters());
      assertEquals(1, dSCompiler1.getSize());
      assertEquals(1647, dSCompiler1.getOrder());
      assertFalse(dSCompiler1.equals((Object)dSCompiler0));
      
//      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 1,647 != 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      int int1 = 3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      dSCompiler0.cosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {10.067661995777765, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      // Undeclared exception!
//      try { 
        dSCompiler0.multiply(doubleArray1, 283, doubleArray1, 0, doubleArray0, 283);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 283
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1647, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1647, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1647;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1647;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.cosh(doubleArray0, 877, doubleArray0, 877);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 877
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2987);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2987, dSCompiler0.getOrder());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.add((double[]) null, 0, (double[]) null, 0, (double[]) null, (-2667));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2929, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(2929, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2929;
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh(doubleArray1, 0, doubleArray1, 2929);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow((double[]) null, (-775), (-3937.68305), doubleArray0, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[11];
      int int0 = 62;
      // Undeclared exception!
//      try { 
        dSCompiler0.tanh(doubleArray0, 62, doubleArray0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 62
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[11];
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.atanh(doubleArray0, 0, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.taylor(doubleArray0, 4337, doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4337
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      // Undeclared exception!
//      try { 
        dSCompiler0.multiply(doubleArray1, 283, doubleArray1, 0, doubleArray0, 283);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 283
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      assertNotNull(dSCompiler0);
      assertEquals(20, dSCompiler0.getSize());
      assertEquals(3, dSCompiler0.getOrder());
      assertEquals(3, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 5193;
      doubleArray0[3] = (double) 3;
      // Undeclared exception!
//      try { 
        dSCompiler0.divide(doubleArray0, 3171, doubleArray0, 1403, doubleArray0, (-3921));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3171
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      dSCompiler0.acosh(doubleArray0, 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (-1.2297127301923986E-8);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[0] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = 0.0;
      dSCompiler0.atan2(doubleArray2, 0, doubleArray2, 0, doubleArray2, 0);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-1.2297127301923986E-8), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atan(doubleArray1, 0, doubleArray1, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.log(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.4515827052894548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2(doubleArray0, 0, doubleArray0, 1649, doubleArray0, 30);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1649
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 2664;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2664, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(2664, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[6];
      int int2 = (-756);
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((-765.389322), doubleArray0, 2664, (double) 2664, doubleArray0, (-756), doubleArray0, 23);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2664
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      dSCompiler0.asin(doubleArray0, 0, doubleArray0, 3);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.cos(doubleArray0, 0, doubleArray0, (-1419));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 3171;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3171);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(3171, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3171;
      int int1 = 2;
      // Undeclared exception!
      dSCompiler0.tanh(doubleArray0, 0, doubleArray0, 2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 858);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(858, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0177335739135742;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      dSCompiler0.pow(doubleArray0, 0, (double) 0, doubleArray0, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.9999999999999998, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(858, dSCompiler0.getOrder());
      
      int int0 = dSCompiler0.getOrder();
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(858, dSCompiler0.getOrder());
      assertEquals(858, int0);
      
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 858, 858, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 858
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1889.4;
      dSCompiler0.expm1(doubleArray0, 0, doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1889.4;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 1889.4;
      doubleArray1[6] = 1889.4;
      doubleArray1[7] = (-259.7584671);
      doubleArray1[8] = 1889.4;
      dSCompiler0.compose(doubleArray1, 0, doubleArray1, doubleArray1, 0);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1889.4, 0.0, 0.0, 1889.4, 1889.4, (-259.7584671), 1889.4}, doubleArray1, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = dSCompiler0.getFreeParameters();
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      int int1 = dSCompiler0.getPartialDerivativeIndex(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1274);
      assertNotNull(dSCompiler0);
      assertEquals(1274, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      int int1 = 2;
      // Undeclared exception!
//      try { 
        dSCompiler0.cos((double[]) null, 0, (double[]) null, 0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[6] = (double) 0;
      int int1 = 3;
      double[] doubleArray1 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.tanh((double[]) null, 0, doubleArray0, (-1));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      dSCompiler0.acos(doubleArray0, 0, doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.5707963267948966, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.log10(doubleArray0, 22, doubleArray0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 22
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      int int1 = 3;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.cos(doubleArray0, 0, doubleArray0, (-1419));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p((double[]) null, (-4178), (double[]) null, (-4178));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      int int1 = 353;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(353, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(353, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      // Undeclared exception!
//      try { 
        dSCompiler0.getPartialDerivativeIndex((int[]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.2297127301923986E-8);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      dSCompiler0.log1p(doubleArray0, 0, doubleArray0, 5);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.2297127301923986E-8), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 1274);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      dSCompiler0.atanh(doubleArray0, 0, doubleArray0, 1274);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      int int1 = 2929;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2929, 0);
      double[] doubleArray0 = null;
      int int2 = 67;
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2((double[]) null, 66, (double[]) null, 67, (double[]) null, 66);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 587;
      dSCompiler0.tanh(doubleArray0, 0, doubleArray1, 0);
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination(3.1415926536, doubleArray0, 1, 0.0, doubleArray0, 12, (double) 0, doubleArray0, 587, (double) 1, doubleArray0, (-920), doubleArray0, (-439));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3;
      dSCompiler0.sin(doubleArray0, 3, doubleArray0, 0);
      // Undeclared exception!
//      try { 
        dSCompiler0.atanh(doubleArray0, 125, doubleArray0, 543);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 125
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[4];
      int int0 = (-136);
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1992;
      intArray0[3] = 1992;
      dSCompiler0.getFreeParameters();
      // Undeclared exception!
//      try { 
        dSCompiler0.remainder(doubleArray0, 1073, doubleArray0, 3569, doubleArray0, 3258);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1073
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2929);
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination(0.5690577030181885, (double[]) null, (-2836), 1149.626, (double[]) null, 3425, 62.73633, (double[]) null, 587, 2.1290855095314206E-220, (double[]) null, 3, (double[]) null, (-1727));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 3;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination((double) 3, (double[]) null, 1738, (-1.0), (double[]) null, 1738, (double[]) null, 1738);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1.2297127301923986E-8);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 0.0;
      dSCompiler0.atan2(doubleArray1, 0, doubleArray1, 0, doubleArray1, 0);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.atan(doubleArray0, 0, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      int int1 = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2665;
      // Undeclared exception!
//      try { 
        dSCompiler0.asinh(doubleArray0, 0, doubleArray0, 2119);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.exp(doubleArray0, 25, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 25
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1889.4;
      // Undeclared exception!
//      try { 
        dSCompiler0.compose(doubleArray0, 2, doubleArray0, doubleArray0, 1410);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int1 = (-1918);
      int int2 = (-680);
      // Undeclared exception!
//      try { 
        dSCompiler0.log1p(doubleArray0, 1993, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1993
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2150, 0);
      // Undeclared exception!
//      try { 
        dSCompiler0.divide((double[]) null, 2150, (double[]) null, 266, (double[]) null, 266);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.log(doubleArray0, 0, doubleArray0, (-3481));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      dSCompiler0.log10(doubleArray0, 0, doubleArray0, 0);
      int int0 = 3;
      int int1 = 4069;
      // Undeclared exception!
//      try { 
        dSCompiler0.remainder(doubleArray0, 0, doubleArray0, 3, doubleArray0, 4069);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4069
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      double[] doubleArray0 = null;
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh((double[]) null, 2076, (double[]) null, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      int int1 = 0;
      int int2 = 2665;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2665;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2665;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.rootN(doubleArray1, 0, 1060, doubleArray0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      dSCompiler0.sin(doubleArray0, 0, doubleArray0, 3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (double) 3;
      dSCompiler0.atanh(doubleArray1, 0, doubleArray1, 2);
      assertArrayEquals(new double[] {3.0, 3.0, Double.NaN, 3.0, 3.0, 3.0}, doubleArray1, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2665;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2665;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2665;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 5, doubleArray0, 2665);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
//      try { 
        dSCompiler0.sin(doubleArray0, 16, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 16
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2929);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.5690577030181885;
      doubleArray0[1] = (double) 2929;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.5690577030181885;
      doubleArray0[4] = (double) 2929;
      doubleArray0[5] = 0.5690577030181885;
      doubleArray0[6] = (double) (-1102);
      // Undeclared exception!
//      try { 
        dSCompiler0.compose(doubleArray0, 1496, (double[]) null, (double[]) null, 1302);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2150, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2150;
      doubleArray0[1] = (double) 2150;
      doubleArray0[2] = 1238.53;
      // Undeclared exception!
//      try { 
        dSCompiler0.expm1(doubleArray0, 820, (double[]) null, 820);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 820
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int int1 = 2665;
      DSCompiler dSCompiler1 = DSCompiler.getCompiler(0, 2665);
//      try { 
        dSCompiler0.checkCompatibility(dSCompiler1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 0 != 2,665
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1889.4;
      // Undeclared exception!
//      try { 
        dSCompiler0.log10(doubleArray0, 0, doubleArray0, 2);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1805;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1805;
      doubleArray1[4] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 1805;
      // Undeclared exception!
//      try { 
        dSCompiler0.acosh(doubleArray1, 1070, doubleArray0, (-1703));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1070
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1.2297127301923986E-8);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 0.0;
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2(doubleArray1, 0, doubleArray1, 0, doubleArray1, 7588);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7588
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 2150;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2150, 0);
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[4];
      intArray0[0] = 2150;
      intArray0[1] = 2150;
      intArray0[2] = 0;
      intArray0[3] = 0;
//      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 4 != 2,150
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      int int1 = 3;
      int int2 = 1993;
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
//      try { 
        dSCompiler0.rootN(doubleArray0, 0, 3, doubleArray0, 63);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      dSCompiler0.rootN(doubleArray1, 0, 0, doubleArray1, 0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.atan2(doubleArray2, 503, doubleArray2, 3, doubleArray2, 487);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 503
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      int int0 = 3;
      int int1 = 1993;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.remainder(doubleArray0, 3, doubleArray0, 1993, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
//      try { 
        dSCompiler0.acos(doubleArray0, 756, doubleArray0, 756);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 756
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      // Undeclared exception!
//      try { 
        dSCompiler0.sinh(doubleArray0, 921, (double[]) null, 921);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 921
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1805;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1805;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1805;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 1805;
      doubleArray1[8] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.add(doubleArray0, 0, doubleArray0, 1805, doubleArray1, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1805
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(2150, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2150;
      doubleArray0[1] = (double) 2150;
      doubleArray0[2] = 1238.53;
      doubleArray0[3] = 0.6249561309814453;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1238.53;
      doubleArray0[7] = 1238.53;
      // Undeclared exception!
//      try { 
        dSCompiler0.linearCombination(1238.53, doubleArray0, 0, 0.0, doubleArray0, 364, (double) 2150, doubleArray0, (-1102), (double) 364, doubleArray0, 0, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 364
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      DSCompiler.getCompiler(2, 2);
      // Undeclared exception!
//      try { 
        dSCompiler0.atan(doubleArray0, 956, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 956
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      dSCompiler0.rootN(doubleArray1, 0, 0, doubleArray1, 0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 0.0;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 0, (-1581.49793), doubleArray1, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      // Undeclared exception!
//      try { 
        dSCompiler0.cos(doubleArray0, 3, doubleArray0, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0177335739135742;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      dSCompiler0.pow(doubleArray0, 0, (double) 0, doubleArray0, 0);
      dSCompiler0.getOrder();
      dSCompiler0.pow(doubleArray0, 0, 0, doubleArray0, 0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 2929);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2929;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-838.58);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2929;
      // Undeclared exception!
//      try { 
        dSCompiler0.expm1(doubleArray0, 2, (double[]) null, 2929);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      int int1 = 3223;
      // Undeclared exception!
//      try { 
        dSCompiler0.asin(doubleArray0, 0, doubleArray1, 3223);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(3, 3);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      // Undeclared exception!
//      try { 
        dSCompiler0.log(doubleArray0, 3, doubleArray0, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 1315;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(1315, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1315;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
//      try { 
        dSCompiler0.pow(doubleArray0, 0, doubleArray0, 1315, doubleArray0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1315
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 1440;
      int int1 = 1918;
      // Undeclared exception!
      DSCompiler.getCompiler(1440, 1918);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
//      try { 
        DSCompiler.getCompiler((-1), (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 1087;
      // Undeclared exception!
      DSCompiler.getCompiler(1087, 1087);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 3242;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 3242);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 3242;
      intArray0[1] = 0;
//      try { 
        dSCompiler0.getPartialDerivativeIndex(intArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 2 != 0
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(0, 0);
      double[] doubleArray0 = null;
      int int2 = 1051;
      // Undeclared exception!
//      try { 
        dSCompiler0.sin((double[]) null, 483, (double[]) null, 1051);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
//      }
  }
}
