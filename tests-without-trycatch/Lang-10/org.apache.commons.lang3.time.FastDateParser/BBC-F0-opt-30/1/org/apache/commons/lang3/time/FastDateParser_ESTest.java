/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 12:33:08 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("HUI", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("7t])-'Zs{DA9");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = new Locale("$\"?/E+R#73`qs0rXm", "s=b3bY$mi!K", "K!SJLO=0}b%8&");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("K!SJLO=0}b%8&", timeZone0, locale0);
      assertEquals("K!SJLO=0}b%8&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(")}yyvv+ab*Iv4SHts", timeZone0, locale0);
      assertEquals(")}yyvv+ab*Iv4SHts", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("46ia]3H)30uSd]=(.5", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("JST");
      FastDateParser fastDateParser0 = new FastDateParser("GMTECT", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2321));
      assertEquals((-321), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      ParsePosition parsePosition0 = new ParsePosition((-147));
      TimeZone timeZone0 = TimeZone.getTimeZone("|WNsg");
      FastDateParser fastDateParser0 = new FastDateParser("|WNsg", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("iB+GN0IBi|tbZjv+bb|", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("$\"?/E+R#73`qs0rXm", "s=b3bY$mi!K", "K!SJLO=0}b%8&");
      FastDateParser fastDateParser0 = new FastDateParser("$\"?/E+R#73`qs0rXm", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("54z+vy<.T^qcf", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-3283));
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("]", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ")ND-AA:o{X6");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("=nxe", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "KUC]t*ub");
      Locale locale0 = new Locale("KUC]t*ub", "KUC]t*ub");
      FastDateParser fastDateParser0 = new FastDateParser("KUC]t*ub", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("}+)", (TimeZone) null, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("\u0001!^< 2U7fM?/I)K", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.CHINA;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("s=b3bY$mi!K", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("Pofm.i`fMY=L2jP", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4882), "AGT");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parse("FastDateParser[");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"FastDateParser[\" does not match (\\p{IsNd}++)(\u5348\u524D|\u5348\u5F8C)(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTCST");
      FastDateParser fastDateParser0 = new FastDateParser("ZRJ\u0002<=)lP'>++", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTCST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTART");
      FastDateParser fastDateParser0 = new FastDateParser("H''][8Pm}:]tgFdMw", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("^oNyf(rmGlP@X4^", timeZone0, locale0);
      assertEquals("^oNyf(rmGlP@X4^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getTimeZone(";D");
      FastDateParser fastDateParser0 = new FastDateParser("<r(t}<?&WXQE2,{%", timeZone0, locale0);
      assertEquals("<r(t}<?&WXQE2,{%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(7);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(";_Pca|L@Zu@<gZ4", timeZone0, locale0);
      assertEquals(";_Pca|L@Zu@<gZ4", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("K6UC]t*ub");
      FastDateParser fastDateParser0 = new FastDateParser("9\"7p,z-E(l.'P", timeZone0, locale0);
      assertEquals("9\"7p,z-E(l.'P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "K6UC]t*ub");
      Locale locale0 = new Locale("K6UC]t*ub", "K6UC]t*ub");
      FastDateParser fastDateParser0 = new FastDateParser("K6UC]t*ub", simpleTimeZone0, locale0);
      assertEquals("K6UC]t*ub", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("54z+vy<.T^qcf", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("4ORvas#m.`0=;]]/co", timeZone0, locale0);
      assertEquals("4ORvas#m.`0=;]]/co", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getTimeZone(";D");
      FastDateParser fastDateParser0 = new FastDateParser("2S0gR:8z#Cl MIH!g`", timeZone0, locale0);
      assertEquals("2S0gR:8z#Cl MIH!g`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("1 ;yTMIW", timeZone0, locale0);
      assertEquals("1 ;yTMIW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("a/2j=m>fE~#<S;~t", timeZone0, locale0);
      assertEquals("a/2j=m>fE~#<S;~t", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("M.7z)<9-K", simpleTimeZone0, locale0);
      assertEquals("M.7z)<9-K", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(",B`0e<jQGj6", timeZone0, locale0);
      assertEquals(",B`0e<jQGj6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("*[&e;^$>\"(oZykSi't", timeZone0, locale0);
      assertEquals("*[&e;^$>\"(oZykSi't", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(121, "y&");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("m[H)", simpleTimeZone0, locale0);
      assertEquals("m[H)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "@");
      FastDateParser fastDateParser0 = new FastDateParser("@", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2000));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("_", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(4859);
      assertEquals(6759, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("EyEO53\")j 3", timeZone0, locale0);
      assertEquals("EyEO53\")j 3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G|H+|K+|M0|S+|W+|Z+|a+|d+|h+|k+|m|s3|w+y+z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale1 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G|H+|K+|M0|S+|W+|Z+|a+|d+|h+|k+|m|s3|w+y+z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      Locale locale2 = Locale.CANADA;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G|H+|K+|M0|S+|W+|Z+|a+|d+|h+|k+|m|s3|w+y+z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale2);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("8}Z-PE0!DZ\"+p)", timeZone0, locale0);
      assertEquals("8}Z-PE0!DZ\"+p)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.KOREAN;
      TimeZone.getAvailableIDs();
      FastDateParser fastDateParser0 = new FastDateParser("Z~dznB,.k>{MK", timeZone0, locale0);
      assertEquals("Z~dznB,.k>{MK", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ZJ2<)N.l'?W>");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("  ", timeZone0, locale0);
      assertEquals("  ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("H{Aq\"I$?EA-?3wO1", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("H{Aq\"I$?EA-?3wO1");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"H{Aq\"I$?EA-?3wO1\" does not match (\\p{IsNd}++)\\{
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("K6UC]t*ub");
      FastDateParser fastDateParser0 = new FastDateParser(":kn!x+}", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("(p{IsNd}{");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"(p{IsNd}{\" does not match :(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("JST");
      FastDateParser fastDateParser0 = new FastDateParser("GMTECT", timeZone0, locale0);
      Locale locale1 = Locale.ROOT;
      FastDateParser fastDateParser1 = new FastDateParser("GMTECT", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone1, locale0);
      FastDateParser fastDateParser1 = new FastDateParser(" not in (", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("K6UC]t*ub");
      FastDateParser fastDateParser0 = new FastDateParser(":kn!x+}", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      Object object0 = fastDateParser0.parseObject("X10[;};jFs$!Ps#Z", parsePosition0);
      boolean boolean0 = fastDateParser0.equals(object0);
      assertEquals(3, parsePosition0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("_", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1888, "IdC ah%=X");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("IdC ah%=X", simpleTimeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("hek`lg}Y", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("9{WK");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("$\"?/E+R#73`qs0rXm", "s=b3bY$mi!K", "K!SJLO=0}b%8&");
      FastDateParser fastDateParser0 = new FastDateParser("$\"?/E+R#73`qs0rXm", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("K!SJLO=0}b%8&", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(121, "y&");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(">wAD`X", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals(">wAD`X", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(111, "org.apache.commons.lang3.time.FastDateParser$4");
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateParser$4", "org.apache.commons.lang3.time.FastDateParser$4", "");
      FastDateParser fastDateParser0 = new FastDateParser("7lk", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(111);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "K6UC]t*ub");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("`IzQX\",E,>*0Gs77", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[`IzQX\",E,>*0Gs77,,K6UC]t*ub]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("$\"?/E+R#73`qs0rXm", "s=b3bY$mi!K", "K!SJLO=0}b%8&");
      FastDateParser fastDateParser0 = new FastDateParser("$\"?/E+R#73`qs0rXm", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(40);
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      fastDateParser0.parse(" locale does not support dates before 1868 AD)\n", parsePosition0);
      assertEquals(42, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=42,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(121, "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("?EDyl0jGMgu+4/ ", simpleTimeZone0, locale0);
      assertEquals("?EDyl0jGMgu+4/ ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4882), "AGT");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=AGT,offset=-4882,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTCST");
      FastDateParser fastDateParser0 = new FastDateParser("ZRJ\u0002<=)lP'>++", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("CST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }
}
