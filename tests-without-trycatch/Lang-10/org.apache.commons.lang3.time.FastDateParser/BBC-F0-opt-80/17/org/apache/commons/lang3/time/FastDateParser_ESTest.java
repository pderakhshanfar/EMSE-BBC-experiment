/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:57:18 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("Invalid field value ");
      FastDateParser fastDateParser0 = new FastDateParser("Wm%`{)xcxpJ/uR", timeZone0, locale0);
      assertEquals("Wm%`{)xcxpJ/uR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(34, ";Cz6OyH%k<=$ )RS%K(");
      FastDateParser fastDateParser0 = new FastDateParser("GMTSST", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("+", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("CA", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("/P56i7[dYa`.Q.V", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|sG|w+|y+|z+|''|'[^'=++(''[^']*+)*+'|[^'A-Zaqz]++", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(43);
      Object object0 = fastDateParser0.parseObject("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|sG|w+|y+|z+|''|'[^'=++(''[^']*+)*+'|[^'A-Zaqz]++", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "v2y1'95rd$g", 0, 0, 0, 0, 0, 0, 0, (-837));
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("v2y1'95rd$g", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("v2y1'95rd$g", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("8Bb-{w vH:<0r", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("8Bb-{w vH:<0r");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "F7x&@t~z;?");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("F7x&@t~z;?", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "F7x&@t~z;?");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("F7x&@t~z;?", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "F7x&@t~z;?");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("F7x&@t~z;?", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("_/Y^U(", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("=q,j;A)QJ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("ZY!wym=u)wsxn_", timeZone0, locale0);
      Locale locale1 = Locale.ITALIAN;
      FastDateParser fastDateParser1 = new FastDateParser("ZY!wym=u)wsxn_", timeZone0, locale1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("", timeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMT");
      Locale locale0 = Locale.forLanguageTag("c}ps>&8h^|VDj9VIc");
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", simpleTimeZone0, locale0);
      assertEquals("(p{IsNd}{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("/P56i7[dYa`.Q.V", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("8Bb-{w vH:<0r", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("=q,j;A)QJ", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("Greenwich Mean Time");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"Greenwich Mean Time\" does not match =
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTMIT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("ZZjUt/7GO29m[\u0000", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTCTT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("ZZjUt/7GO29m[\u0000", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("CST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "SST");
      FastDateParser fastDateParser0 = new FastDateParser("HyCiqg'&", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("955.ITP[E/4E#ztd#");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("yCik-qg'", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("955.ITg[,E/LE#z;d#");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("`bc}*6G", timeZone0, locale0);
      assertEquals("`bc}*6G", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMT");
      Locale locale0 = Locale.forLanguageTag("c}ps>&8h^|VDj9VIc");
      FastDateParser fastDateParser0 = new FastDateParser("(H_xUM{8Q.B+f]@t", simpleTimeZone0, locale0);
      assertEquals("(H_xUM{8Q.B+f]@t", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("@", "^HJZTGA+el5n\"C6");
      FastDateParser fastDateParser0 = new FastDateParser("^HJZTGA+el5n\"C6", timeZone0, locale0);
      assertEquals("^HJZTGA+el5n\"C6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("@", timeZone0, locale0);
      assertEquals("@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("?dI", "VT0eI5lusxX", "eS!*mdVcf{J");
      FastDateParser fastDateParser0 = new FastDateParser("?dI", timeZone0, locale0);
      assertEquals("?dI", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("?dI", "VT0eI5lusxX", "eS!*mdVcf{J");
      FastDateParser fastDateParser0 = new FastDateParser("<Xi", timeZone0, locale0);
      assertEquals("<Xi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("VT0eI5lusxX");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":fa", timeZone0, locale0);
      assertEquals(":fa", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(">Psc@IdYe9`AC$>W~0V");
      FastDateParser fastDateParser0 = new FastDateParser("9(KQ3)Xo8u/!GrZf", timeZone0, locale0);
      assertEquals("9(KQ3)Xo8u/!GrZf", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("8Bb-{w vH:<0r", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("6uMZK8IJR<", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "v2y1'95rd$g", 0, 0, 0, 0, 0, 0, 0, (-837));
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("4/<D4,", simpleTimeZone0, locale0);
      assertEquals("4/<D4,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("22nz", timeZone0, locale0);
      assertEquals("22nz", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9#Uct");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("1P16w<1+`%k", simpleTimeZone0, locale0);
      assertEquals("1P16w<1+`%k", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("0I _}!t.&", timeZone0, locale0);
      assertEquals("0I _}!t.&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1922, "JST");
      Locale locale0 = new Locale("JST");
      FastDateParser fastDateParser0 = new FastDateParser(".tWkpI**'4~05-", simpleTimeZone0, locale0);
      assertEquals(".tWkpI**'4~05-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("m,kFW>ssiy{", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(92);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("PLT", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "GMTBET");
      FastDateParser fastDateParser0 = new FastDateParser("h*L#m6%uFtx-}|u0", simpleTimeZone0, locale0);
      assertEquals("h*L#m6%uFtx-}|u0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GMTBET");
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=GMTBET,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "GMTBET");
      FastDateParser fastDateParser0 = new FastDateParser("GMTBET", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(32);
      assertEquals(2032, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(" m)}<a-H", timeZone0, locale0);
      assertEquals(" m)}<a-H", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|sG|w+|y+|z+|''|'[^'=++(''[^']*+)*+'|[^'A-Zaqz]++", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3573));
      assertEquals((-1573), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("{dz)yK-f", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser(";#|pWjfDci} w_", timeZone0, locale1);
      // Undeclared exception!
//      try { 
        fastDateParser1.parseObject("{dz)yK-f", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("%yyLQ;kWdy)fU", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("IST");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"IST\" does not match %(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("/P56i7[dYa`.Q.V", timeZone0, locale0);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("/P56i7[dYa`.Q.V", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("]uS!Oc3[Unwa}J", timeZone1, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("]uS!Oc3[Unwa}J", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "GMTBET");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("$D3'", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTBET", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("5OK|!Z}Xe*Oo/", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("FastDateParser[5OK|!Z}Xe*Oo/,en_US,GMT]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("@", "^HJZTGA+el5n\"C6");
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("n^A6vP_t%", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(46, "a|4$)v%hJlNK})");
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("955.ITP[,E/4E#z;d#");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "GMTBET");
      FastDateParser fastDateParser0 = new FastDateParser("GMTBET", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\u516C\u5143|\u516C\u5143|\u516C\u5143\u524D|\u516C\u5143\u524D)(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "GMTBET");
      FastDateParser fastDateParser0 = new FastDateParser("GMTBET", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Ho~ m)}<a-H", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("Ho~ m)}<a-H");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"Ho~ m)}<a-H\" does not match (\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("{dz)yK-f", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("{dz)yK-f", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("{MTCNT");
      FastDateParser fastDateParser0 = new FastDateParser("[5yN54} ?]]jUv", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[[5yN54} ?]]jUv,zh,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("C`!P$lu.dD");
      FastDateParser fastDateParser0 = new FastDateParser("KxM6tM%#q8lH&WjdI", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("6~TE3");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Ho~ m)}<a-H", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("2Zl4eBo3\"fT/+`", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.forLanguageTag("v2y1'95rd$g");
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }
}
