/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 12:42:55 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("h", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("1G(TEAT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPST", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">'S%nYJUnzp7%Me@w");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("hO'SAl.DhS'&", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "\"N!4X3*E>)dU6");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("^Le~kc#", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Hv7R");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Hv7R", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("Hv7R", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "mv7LRu");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("mv7LRu", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=mv7LRu,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1789), ":W.;ao");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(":W.;ao", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2910, "");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(2910, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1789), ":W.;ao");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(":W.;ao", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-3813));
      // Undeclared exception!
//      try { 
        fastDateParser0.parse(":W.;ao", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(124, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      ParsePosition parsePosition0 = new ParsePosition(596);
      FastDateParser fastDateParser0 = new FastDateParser("FzF%ZUpwq", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2910, "hO'SAl.DhS'&");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("hO'SAl.DhS'&", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("!(W_J#)<cZhdKMqH_fd");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("!(W_J#)<cZhdKMqH_fd", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "mv7LRu");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("mv7LRu", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("tq D{hykve3.ic", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$4");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("?2%r>/6Eb0c=@uP'H", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("?2%r>/6Eb0c=@uP'H");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("zA{", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTCNT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(125, "\"N!4X3*E>)dU6");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("^Le~kc#", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(")}|S?E73P?0M!n<", timeZone0, locale0);
      assertEquals(")}|S?E73P?0M!n<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2910, "FastDateParser[");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(">X79.*wR^r_C}E;OL~I", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parse("FastDateParser[");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"FastDateParser[\" does not match >
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1943, "A");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("<B\"'S/ckxo.&47CHMV", simpleTimeZone0, locale0);
      assertEquals("<B\"'S/ckxo.&47CHMV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9%*.K@_5ZvRFz");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("9%*.K@_5ZvRFz", timeZone0, locale0);
      assertEquals("9%*.K@_5ZvRFz", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2910, "");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("kWZ817cbD", simpleTimeZone0, locale0);
      assertEquals("kWZ817cbD", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(124, "");
      Locale locale0 = new Locale("7/z4i|\"\"<;8<>", "org.apache.commons.lang3.time.FastDateParser$TextStrategy");
      FastDateParser fastDateParser0 = new FastDateParser("7/z4i|\"\"<;8<>", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2506));
      assertEquals((-506), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("w~a2-}nSl");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("w~a2-}nSl", timeZone0, locale0);
      assertEquals("w~a2-}nSl", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1164, "1`");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("1`", simpleTimeZone0, locale0);
      assertEquals("1`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3248, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("/1< cUyl=v&!2sj=+", simpleTimeZone0, locale0);
      assertEquals("/1< cUyl=v&!2sj=+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("*.K@_5ZvRz");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("-f<)", timeZone0, locale0);
      assertEquals("-f<)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(124, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(")m3~x_!j ?U^>)42", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parse("");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"\" does not match \\)(\\p{IsNd}{1}+)3~
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MMM=|LZt[)//,?", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-1530));
      assertEquals(470, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("w~a2-}nSl");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("6:r^C,'{aqXwHfM>zK", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(275);
      assertEquals(2175, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(124, "");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("{bV.7yr.", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(124);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("\" does not match ", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "mv7LRu");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", simpleTimeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("*.Kd@_5mNF=");
      Locale locale0 = new Locale("GMTBST", "[=yyvXW1D6ixNID%WTb");
      FastDateParser fastDateParser0 = new FastDateParser("[=yyvXW1D6ixNID%WTb", timeZone0, locale0);
      assertEquals("[=yyvXW1D6ixNID%WTb", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9%*.K@_5ZvRFz");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("05?U:ZLDJ7VJF", timeZone0, locale0);
      assertEquals("05?U:ZLDJ7VJF", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1943, "FastDateParser[");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("*8G$LB1<n|D", simpleTimeZone0, locale0);
      assertEquals("*8G$LB1<n|D", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(94, "S;RiKw(p<");
      FastDateParser fastDateParser0 = new FastDateParser(";MY>+$", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parseObject(";MY>+$");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \";MY>+$\" does not match ;(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("`l# l#KSwABWfd", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("'G;y[W)");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"'G;y[W)\" does not match `
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(":W.;ao");
      FastDateParser fastDateParser0 = new FastDateParser(":W.;ao", timeZone0, locale0);
      Locale locale1 = Locale.CANADA;
      FastDateParser fastDateParser1 = new FastDateParser(":W.;ao", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, "Hv7R");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(",", simpleTimeZone0, locale0);
      TimeZone timeZone0 = TimeZone.getTimeZone("r;]M'");
      FastDateParser fastDateParser1 = new FastDateParser(",", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-396), "mv7LRu");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("mv7LRu", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("0<K", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(":W.;ao");
      FastDateParser fastDateParser0 = new FastDateParser(":W.;ao", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("org.apache.commons.lang3.time.FastDateParser$1", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Hv&R", 3, 3, 3, 3, 3, 3, 3, 3);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Hv&R", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("7/z4Ki|\"\"<;8<>");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("h", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("12G(TEAT");
      boolean boolean0 = fastDateParser0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-396), "mv7LRu");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("mv7LRu", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "Hv&R", 3, 3, 3, 3, 3, 3, 3, 3);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Hv&R", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "mv7LRu");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+aF+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|o'|'[^'T++(''[^']*+>*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("JP", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(110, "GMTMIT");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("5'VU>_o`7XJ3Z/f]DR", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("5'VU>_o`7XJ3Z/f]DR", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("5hQje@ly((");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("T3j^'A", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MMM=|LZt[)//,?", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[MMM=|LZt[)//,?,ja,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "mv7LRu");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("mv7LRu", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("8@7*Rd^", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("_  FZSMaQ<h", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1014), "IOUJ|}}/H]g'|Fxy");
      FastDateParser fastDateParser0 = new FastDateParser("zA{", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("NST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }
}
