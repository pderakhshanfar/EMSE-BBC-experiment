/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:53:15 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("H #\"WN}jj#u*-*I;2", timeZone0, locale0);
      assertEquals("H #\"WN}jj#u*-*I;2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2628), "`?Z:L<(mnF> ^F");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("5x0u", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(38);
      assertEquals(1938, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("hh", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("hh", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "-=l#y_|Ak.0#60:|L3");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("-=l#y_|Ak.0#60:|L3", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(728, "`?Z:L<(m> ^F");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTIST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(728, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-546), "FlU.", (-546), 0, (-1), 0, 0, 0, 0, 1456);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("FlU.", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("FlU.", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "-=l#y_|Ak.0#60:|L3");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("-=l#y_|Ak.0#60:|L3", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=-=l#y_|Ak.0#60:|L3,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("[", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4288));
      assertEquals((-2288), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(";=K4%dJ|J=T", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(40);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2182), "MIT");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-546), "FlU.", (-546), 0, (-1), 0, 0, 0, 0, 1456);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("FlU.", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(100);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-546), "FlU.", (-546), 0, (-1), 0, 0, 0, 0, 1456);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("FlU.", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("3-hVvcrQ^e", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("GMTMIT", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = new Locale("gLk7DT}Nul[#O3sDS9>");
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("+aYDj=", (TimeZone) null, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "`?Z:L<(m> ^F", 728, 0, 1, (-2182), 2450, 0, 0, (-2182));
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("`?Z:L<(m> ^F", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(728);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("`?Z:L<(m> ^F", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(39, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(" ]:N(>lHfY:w", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parse("9?s'JxH7agJMIa1QC");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"9?s'JxH7agJMIa1QC\" does not match \\s*+\\]:
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("[", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("[");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "-=l#y_|Ak.0#60:|L3");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("-=l#y_|Ak.0#60:|L3", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser(">pe!]#Njw;~>", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTBST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("NST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("_a`", timeZone0, locale0);
      assertEquals("_a`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-200), "");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("^", simpleTimeZone0, locale0);
      assertEquals("^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-546), "FlU.", (-546), 0, (-1), 0, 0, 0, 0, 1456);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("@E?[=", simpleTimeZone0, locale0);
      assertEquals("@E?[=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("(The ");
      FastDateParser fastDateParser0 = new FastDateParser("<7t$8jRe=ahvG&", timeZone0, locale0);
      assertEquals("<7t$8jRe=ahvG&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(";=K4%dJ|J=T", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("rf4*yRw`1@i5*Xds_~J", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("9tB|exA5;&Dk", timeZone0, locale0);
      assertEquals("9tB|exA5;&Dk", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, ">h6!8e ");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("kW8p`r}D8D", simpleTimeZone0, locale0);
      assertEquals("kW8p`r}D8D", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " not in (", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("D7I`c+L]", simpleTimeZone0, locale0);
      assertEquals("D7I`c+L]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-26), " no in (");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("6~E#jmFy<", simpleTimeZone0, locale0);
      assertEquals("6~E#jmFy<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-546), "FlU.", (-546), 0, (-1), 0, 0, 0, 0, 1456);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("3-hVvcrQ^e", simpleTimeZone0, locale0);
      assertEquals("3-hVvcrQ^e", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ";=K4%dJ|J=T");
      FastDateParser fastDateParser0 = new FastDateParser("2M49O]U", simpleTimeZone0, locale0);
      assertEquals("2M49O]U", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("1y=Cko6`q.", timeZone0, locale0);
      assertEquals("1y=Cko6`q.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " not in (");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("0&@Y0.aL;h", simpleTimeZone0, locale0);
      assertEquals("0&@Y0.aL;h", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("/*ja/HoP", timeZone0, locale0);
      assertEquals("/*ja/HoP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDateParser fastDateParser0 = new FastDateParser("./*p~{n}2c", timeZone0, locale0);
      assertEquals("./*p~{n}2c", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(43, "U,2JkoRrW 5`1[");
      FastDateParser fastDateParser0 = new FastDateParser(",", simpleTimeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", simpleTimeZone0, locale0);
      assertEquals("(p{IsNd}++)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-546), "FlU.", (-546), 0, (-1), 0, 0, 0, 0, 1456);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("4^]}sRg4#afo", timeZone0, locale0);
      assertEquals("4^]}sRg4#afo", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2633), "ECT");
      FastDateParser fastDateParser0 = new FastDateParser("a|ap[ @AUKUF=^GY$", simpleTimeZone0, locale0);
      assertEquals("a|ap[ @AUKUF=^GY$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TimeZone timeZone0 = TimeZone.getTimeZone("D7I`c+L]");
      FastDateParser fastDateParser0 = new FastDateParser("{6Y", timeZone0, locale0);
      assertEquals("{6Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2628), "`?Z:L<(m> ^F");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("`?Z:L<(m> ^F", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("!$Z+X6)4^|", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("&%");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"&%\" does not match !\\$(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische\\s*+Zeit|AFT|AKDT|AKST|Alaska\\s*+Normalzeit|Alaska\\s*+Sommerzeit|Alma\\s*+Ata\\s*+Zeit|ALMT|Amazonas\\s*+Normalzeit|AMT|Anadyr\\s*+Zeit|ANAT|Aqtau\\s*+Zeit|Aqtobe\\s*+Zeit|AQTT|Arabische\\s*+Normalzeit|Argentinische\\s*+Zeit|Armenische\\s*+Zeit|ART|Aserbaidschanische\\s*+Zeit|AST|Atlantik\\s*+Normalzeit|Atlantik\\s*+Sommerzeit|AWST|Azoren\\s*+Sommerzeit|Azoren\\s*+Zeit|AZOST|AZOT|AZT|Bangladesch\\s*+Zeit|BDT|Bhutanische\\s*+Zeit|BNT|Bolivianische\\s*+Zeit|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilianische\\s*+Zeit|Britische\\s*+Sommerzeit|BRT|Brunei\\s*+Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro\\s*+Normalzeit|CHAST|Chatham\\s*+Normalzeit|Chatham\\s*+Sommerzeit|Chilenische\\s*+Sommerzeit|Chilenische\\s*+Zeit|Chinesische\\s*+Normalzeit|Choibalsan\\s*+Zeit|CHOT|Christmas\\s*+Island\\s*+Zeit|ChST|CHUT|Chuuk\\s*+Zeit|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Zeit|Cook-Inseln\\s*+Zeit|COT|CST|CVT|CXT|Davis\\s*+Zeit|DAVT|DDUT|Dumont-d'Urville\\s*+Zeit|EASST|EAST|EAT|ECT|Ecuadorianische\\s*+Zeit|EDT|EGST|EGT|EST|Falkland\\s*+Inseln\\s*+Zeit|Fernando\\s*+de\\s*+Noronha\\s*+Zeit|Fidschi\\s*+Sommerzeit|Fidschi\\s*+Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch\\s*+S\u00FCd-\\s*+u\\.\\s*+Antarktische\\s*+Landzeit|Franz\u00F6sisch-Guiana\\s*+Zeit|Galapagos\\s*+Zeit|GALT|Gambier\\s*+Zeit|GAMT|Georgische\\s*+Zeit|GET|GFT|Ghanaische\\s*+Normalzeit|Gilbert-Inseln\\s*+Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf\\s*+Normalzeit|Greenwich\\s*+Zeit|GST|Guyanische\\s*+Zeit|GYT|Hawaii\\s*+Normalzeit|Hawaii\\s*+Sommerzeit|HDT|HKT|Hongkong\\s*+Zeit|Hovd\\s*+Zeit|HOVT|HST|ICT|IDT|Indische\\s*+Normalzeit|Indischer\\s*+Ozean\\s*+Territorium\\s*+Zeit|Indochina\\s*+Zeit|IOT|Iranische\\s*+Normalzeit|Iranische\\s*+Sommerzeit|IRDT|Irische\\s*+Sommerzeit|IRKT|Irkutsk\\s*+Zeit|IRST|Israelische\\s*+Normalzeit|Israelische\\s*+Sommerzeit|IST|Jakutsk\\s*+Zeit|Japanische\\s*+Normalzeit|Jekaterinburger\\s*+Zeit|JST|Kap\\s*+Verde\\s*+Zeit|KGT|Kirgisische\\s*+Zeit|Kolumbianische\\s*+Zeit|Koordinierte\\s*+Universalzeit|Koreanische\\s*+Normalzeit|Kosrae\\s*+Zeit|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnojarsker\\s*+Zeit|KRAT|KST|Kubanische\\s*+Normalzeit|Kubanische\\s*+Sommerzeit|LHDT|LHST|Line\\s*+Inseln\\s*+Zeit|LINT|Lord\\s*+Howe\\s*+Normalzeit|Lord\\s*+Howe\\s*+Sommerzeit|Macquarieinsel\\s*+Sommerzeit|Macquarieinsel\\s*+Zeit|Magadanische\\s*+Zeit|MAGT|Malaysische\\s*+Zeit|Maledivische\\s*+Zeit|Marquesas\\s*+Zeit|Marshallinseln\\s*+Zeit|MART|Mauritius\\s*+Zeit|Mawson\\s*+Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische\\s*+Sommerzeit|Mitteleurop\u00E4ische\\s*+Zeit|MMT|Moskauer\\s*+Normalzeit|MSK|MST|MUT|MVT|Myanmar\\s*+Zeit|MYT|Nauru\\s*+Zeit|NCT|NDT|Nepalesische\\s*+Zeit|Neufundland\\s*+Normalzeit|Neufundland\\s*+Sommerzeit|Neukaledonische\\s*+Zeit|Neuseeland\\s*+Normalzeit|Neuseeland\\s*+Sommerzeit|NFST|NFT|Niue\\s*+Zeit|Norfolk\\s*+Sommerzeit|Norfolk\\s*+Zeit|NOVT|Nowosibirsker\\s*+Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk\\s*+Zeit|OMST|Oral\\s*+Zeit|ORAT|Ostafrikanische\\s*+Zeit|Osterinseln\\s*+Sommerzeit|Osterinseln\\s*+Zeit|Osteurop\u00E4ische\\s*+Sommerzeit|Osteurop\u00E4ische\\s*+Zeit|Ostgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Ostgr\u00F6nl\u00E4ndische\\s*+Zeit|Ostindonesische\\s*+Zeit|Pakistanische\\s*+Zeit|Palau\\s*+Zeit|Papua-Neuguinea\\s*+Zeit|Paraguay\\s*+Sommerzeit|Paraguay\\s*+Zeit|Pazifische\\s*+Normalzeit|Pazifische\\s*+Sommerzeit|PDT|Peruanische\\s*+Zeit|PET|Petropawlowsk-Kamtschatkische\\s*+Zeit|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Inseln\\s*+Zeit|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Normalzeit|Pierre\\s*+&\\s*+Miquelon\\s*+Sommerzeit|Pitcairn\\s*+Normalzeit|PKT|PMDT|PMST|Pohnpei\\s*+Zeit|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Zeit|RET|Reunion\\s*+Zeit|Rocky\\s*+Mountains\\s*+Normalzeit|Rocky\\s*+Mountains\\s*+Sommerzeit|Rothera\\s*+Zeit|ROTT|Sakhalin\\s*+Zeit|SAKT|Salomoninseln\\s*+Zeit|Samarische\\s*+Zeit|Samoa\\s*+Normalzeit|SAMT|SAST|SBT|SCT|Seychellen\\s*+Zeit|SGT|Singapur\\s*+Zeit|South\\s*+Georgia\\s*+Normalzeit|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Zeit|SYOT|Syowa\\s*+Zeit|S\u00FCdafrikanische\\s*+Normalzeit|Tadschikische\\s*+Zeit|Tahiti\\s*+Zeit|TAHT|TFT|Timor-Leste\\s*+Normalzeit|TJT|TKT|TLT|TMT|Tokelau\\s*+Zeit|Tonga\\s*+Zeit|TOT|Turkmenische\\s*+Zeit|Tuvalu\\s*+Zeit|TVT|Ulaanbaatar\\s*+Zeit|ULAT|Uruguayische\\s*+Zeit|Usbekistan\\s*+Zeit|Ust-Nera\\s*+Zeit|UTC|UYT|UZT|Vanuatu\\s*+Zeit|Venezuelanische\\s*+Zeit|VET|VLAT|VOST|Vostok\\s*+Zeit|VUT|Wake\\s*+Zeit|WAKT|Wallis\\s*+u\\.\\s*+Futuna\\s*+Zeit|WAT|West\\s*+Samoa\\s*+Sommerzeit|West\\s*+Samoa\\s*+Zeit|Westafrikanische\\s*+Zeit|Westeurop\u00E4ische\\s*+Sommerzeit|Westeurop\u00E4ische\\s*+Zeit|Westgr\u00F6nl\u00E4ndische\\s*+Sommerzeit|Westgr\u00F6nl\u00E4ndische\\s*+Zeit|Westindonesische\\s*+Zeit|Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok\\s*+Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche\\s*+Normalzeit\\s*+\\(Australien\\)|Zentralafrikanische\\s*+Zeit|Zentrale\\s*+Normalzeit|Zentrale\\s*+Normalzeit\\s*+\\(Northern\\s*+Territory\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Normalzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentrale\\s*+Sommerzeit|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien\\)|Zentrale\\s*+Sommerzeit\\s*+\\(S\u00FCdaustralien/New\\s*+South\\s*+Wales\\)|Zentraleurop\u00E4ische\\s*+Sommerzeit|Zentraleurop\u00E4ische\\s*+Zeit|Zentralindonesische\\s*+Zeit|\u00D6stliche\\s*+Normalzeit|\u00D6stliche\\s*+Normalzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Queensland\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Normalzeit\\s*+\\(Victoria\\)|\u00D6stliche\\s*+Sommerzeit|\u00D6stliche\\s*+Sommerzeit\\s*+\\(New\\s*+South\\s*+Wales\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Tasmanien\\)|\u00D6stliche\\s*+Sommerzeit\\s*+\\(Victoria\\))\\+
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("  :h-]c|", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("09o{wT?Q6y,4jx2dOkp");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"09o{wT?Q6y,4jx2dOkp\" does not match \\s*+:(\\p{IsNd}++)-\\]
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "m@jegY^c7}Q5<^wT`#f");
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.forLanguageTag("m@jegY^c7}Q5<^wT`#f");
      FastDateParser fastDateParser0 = new FastDateParser("$^rlv", simpleTimeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("$^rlv", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMTART");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("57yk)q", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("57yk)q", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "-=l#y_|Ak.0#60:|L3");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("-=l#y_|Ak.0#60:|L3", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-349), "MIT");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6}p9I:vdLktQl[h&");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-349), "HIxT");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("HIxT", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6}p9I:vdLktQl[h&");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "-=l#y_|Ak.0#60:|L3");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("-=l#y_|Ak.0#60:|L3", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("-=", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "-=l#y_|Ak.0#60:|L3");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("-=l#y_|Ak.0#60:|L3", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("-=l#y_|Ak.0#60:|L3", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("yQ=ek:", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("26v}9{YVfqOx8", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[Z,ko_KR,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("[", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3706, "*Y;tDCOIR");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("KRA;O}H9A2(", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2/jo+J");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("hh", timeZone0, locale0);
      fastDateParser0.parse("1", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(90, "WaksW[HzePa*");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("WaksW[HzePa*", simpleTimeZone0, locale0);
      assertEquals("WaksW[HzePa*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }
}
