/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:50:04 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("djAsSrM(.", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("7'0alsb;*,5");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("yy9-*PO#ZXl7YeuS", timeZone0, locale0);
      assertEquals("yy9-*PO#ZXl7YeuS", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'qGyZ+V^ON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(" #6UL'qGyZ+V^ON", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(118);
      assertEquals(2018, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " #6UL'qGyZ+V^ON", 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("{> b>F+/3: 3~", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("GMT+01:00", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("F@GBxA*e?", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'qGyZ+V^ON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(" #6UL'qGyZ+V^ON", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'qGyZ+VkON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("=-*#__tr2feO!", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("=-*#__tr2feO!", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(109);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'qGyZ+V^ON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(" #6UL'qGyZ+V^ON", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "mZY", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("4P.J/", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2697));
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("4P.J/", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'GyZ+V^ON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(" #6UL'GyZ+V^ON", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'qGyZ+V^ON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(" #6UL'qGyZ+V^ON", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'qGyZ+V^ON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(" #6UL'qGyZ+V^ON", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "f");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser((String) null, simpleTimeZone0, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getDisplayName();
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone1 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("z-}~A#U#LG%.>B90r+m", timeZone1, locale0);
      assertEquals("z-}~A#U#LG%.>B90r+m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, " #6UL'qGyZ+V^ON", 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("K'W_s", simpleTimeZone0, locale0);
      assertEquals("K'W_s", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("zt6Yhfv]lS1{g", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("EAT", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("zt6Yhfv]lS1{g", timeZone0, locale0);
      fastDateParser0.parse("GMTIET", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("`4e,B;<iq3'*vz", timeZone0, locale0);
      assertEquals("`4e,B;<iq3'*vz", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "mZY", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = new Locale("mZY", "mZY");
      FastDateParser fastDateParser0 = new FastDateParser("_Q,hLYmxLQnqP$=-y ", simpleTimeZone0, locale0);
      assertEquals("_Q,hLYmxLQnqP$=-y ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("??@2Mux", timeZone0, locale0);
      assertEquals("??@2Mux", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("4E0<(Z<Jky", timeZone0, locale0);
      assertEquals("4E0<(Z<Jky", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5, "mZY", 5, 5, 5, 5, 5, 5, 5, 5);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(";!=:aY8hSH", simpleTimeZone0, locale0);
      assertEquals(";!=:aY8hSH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":qSNp-", timeZone0, locale0);
      assertEquals(":qSNp-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "=,Z/=kf'R@*m'A\"fj");
      Locale locale0 = new Locale("\" does not match ");
      FastDateParser fastDateParser0 = new FastDateParser("m8TZogib.jwo~69r[", simpleTimeZone0, locale0);
      assertEquals("m8TZogib.jwo~69r[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(" ^Z7Q6:/Ie#J[(+u0", timeZone0, locale0);
      assertEquals(" ^Z7Q6:/Ie#J[(+u0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("6XR97Xw>!_>O9", timeZone0, locale0);
      assertEquals("6XR97Xw>!_>O9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'qGyZ+V^ON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("5[BFUW6h5G@kG", simpleTimeZone0, locale0);
      assertEquals("5[BFUW6h5G@kG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("9[k3`otH$P1", timeZone0, locale0);
      assertEquals("9[k3`otH$P1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "=,Z/=kf'R@*m'A\"fj");
      Locale locale0 = new Locale("\" does not match ");
      FastDateParser fastDateParser0 = new FastDateParser("=,Z/=kf'R@*m'A\"fj", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("D,", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("F");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"F\" does not match (\\p{IsNd}++),
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("*{GAU`n_%k", timeZone0, locale0);
      assertEquals("*{GAU`n_%k", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(")&Jcby[ulL?_L", timeZone0, locale0);
      assertEquals(")&Jcby[ulL?_L", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "mZY", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("4P.J/", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2697));
      assertEquals((-697), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MMMI", timeZone0, locale0);
      assertEquals("MMMI", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("S{(m}#?)?/UO0ck5cDz", timeZone0, locale0);
      assertEquals("S{(m}#?)?/UO0ck5cDz", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateParser fastDateParser0 = new FastDateParser(".$[ I}te", simpleTimeZone0, locale0);
      assertEquals(".$[ I}te", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("^  h>{77lj>YWL", timeZone0, locale0);
      assertEquals("^  h>{77lj>YWL", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("F@GBxA*e?", timeZone0, locale0);
//      try { 
        fastDateParser0.parse(":_;ZR");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \":_;ZR\" does not match (\\p{IsNd}++)@(\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'qGyZ+V^ON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(" #6UL'qGyZ+V^ON", simpleTimeZone0, locale0);
      Locale locale1 = Locale.CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser(" #6UL'qGyZ+V^ON", simpleTimeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "GMTAST");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAST", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTAST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "JST");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("1E=y", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("SST", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      Locale locale0 = new Locale("=A9.CeA/~P");
      FastDateParser fastDateParser0 = new FastDateParser(">VP'U*I", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(">VP'U*I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "JST");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("1E=y", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":QHB|'%b|l");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\s*+", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "ZY", 3, 3, 3, 3, 3, 3, 3, 3);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("ZY", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("Greenwich Mean Time", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("it_IT", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("w2&'E[&eU!:cR%bjT", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("w2&'E[&eU!:cR%bjT", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " #6UL'qGyZ+VkON");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("=-*#__tr2feO!", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("=-*#__tr2feO!", parsePosition0);
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
      assertEquals(6, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":QHB|'%b|l");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[ not in (,en_US,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("0PJCD", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.lang3.time.FastDateParser$1");
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("39'^\u0007h/");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("9hk!<", timeZone0, locale0);
      assertEquals("9hk!<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(718, "[HG( !G");
      FastDateParser fastDateParser0 = new FastDateParser("[HG( !G", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("[HG( !G");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"[HG( !G\" does not match \\[(\\p{IsNd}++)(AD|AD|BC|BC)\\(\\s*+!(AD|AD|BC|BC)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "mZY");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("mZY", simpleTimeZone0, locale0);
      assertEquals("mZY", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }
}
