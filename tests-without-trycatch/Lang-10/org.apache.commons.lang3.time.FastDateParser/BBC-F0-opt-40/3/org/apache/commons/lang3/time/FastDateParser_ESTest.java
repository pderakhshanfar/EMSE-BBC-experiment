/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 12:42:28 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MMMHBE", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("141#'n?\"wEX3-[");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("8 <W#E(Q]a*S/GN\"dR", simpleTimeZone0, locale0);
      assertEquals("8 <W#E(Q]a*S/GN\"dR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("Y");
      FastDateParser fastDateParser0 = new FastDateParser("(~[KF8.r", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("*$Rj0\"nk{N>1", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(5);
      Object object0 = fastDateParser0.parseObject("*$Rj0\"nk{N>1", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("S", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.forLanguageTag("GMT+00:00");
      FastDateParser fastDateParser0 = new FastDateParser("S", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=S,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "S");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("GMT+00:00", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2683));
      assertEquals((-683), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":u-eC.7F|m'");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":u-eC.7F|m'", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(54);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4), "S");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("S", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("GMT+00:00", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("S", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-45), "org.apache.commons.langu.time.FastDateParser$1");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("/9Q9%r\">gypdtXg", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(22, "PST");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("z vs}bnf*:7", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      simpleTimeZone0.getDisplayName();
      Locale locale0 = Locale.CANADA;
      locale0.getUnicodeLocaleAttributes();
      FastDateParser fastDateParser0 = new FastDateParser("S", simpleTimeZone0, locale0);
      Locale locale1 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser1 = new FastDateParser("9Z}CD,tBu9-#L1}w", simpleTimeZone0, locale1);
      Locale locale2 = Locale.ENGLISH;
      FastDateParser fastDateParser2 = new FastDateParser("9Z}CD,tBu9-#L1}w", simpleTimeZone0, locale2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("UOn=k9*j9B5HekQT", (TimeZone) null, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "STz");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("STz", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateParser0.parse("STz", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMTNET");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("z vs}bnf*:7", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTPRT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(22, "PST");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("z vs}bnf*:7", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("PST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yAt>V~Pw9v", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("141\"%#w$'n?X][G");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MMMHBE", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(14);
      fastDateParser0.parse("%/~#=0;4(HF&4x90", parsePosition0);
      assertEquals("java.text.ParsePosition[index=16,errorIndex=-1]", parsePosition0.toString());
      assertEquals(16, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("_g", simpleTimeZone0, locale0);
      assertEquals("_g", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.forLanguageTag("GMT+00:00");
      FastDateParser fastDateParser0 = new FastDateParser("^w+#WJJ_,", simpleTimeZone0, locale0);
      assertEquals("^w+#WJJ_,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4), "S");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("y@g=~(l!hi(kuQDU9y ", simpleTimeZone0, locale0);
      assertEquals("y@g=~(l!hi(kuQDU9y ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("+8d?r f*<.dVjBH", simpleTimeZone0, locale0);
      assertEquals("+8d?r f*<.dVjBH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("S");
      FastDateParser fastDateParser0 = new FastDateParser("<=nUF m3Ra4.f/IlFT", timeZone0, locale0);
      assertEquals("<=nUF m3Ra4.f/IlFT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("%m;!YhI \"|C{b D", simpleTimeZone0, locale0);
      assertEquals("%m;!YhI \"|C{b D", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-31), "org.apache.commons.lang3.time.FastDateParser$1");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("z7vkQUF", simpleTimeZone0, locale0);
      assertEquals("z7vkQUF", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-31), "org.apache.commons.lang3.time.FastDateParser$1");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("62i*~9a@6k XZ'22S3t", simpleTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("W3\"b;}w8qE", simpleTimeZone0, locale0);
      assertEquals("W3\"b;}w8qE", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDateParser$1");
      Locale locale0 = new Locale("/9Q9%r\">gypdtXg", "org.apache.commons.lang3.time.FastDateParser$1");
      FastDateParser fastDateParser0 = new FastDateParser("1/RWm^.&#;0-^", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "5H0crjA}g");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("5H0crjA}g", simpleTimeZone0, locale0);
      assertEquals("5H0crjA}g", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-31), "org.apache.commons.lang3.time.FastDateParser$1");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(".pr#^_,2)]@8kF*.u", simpleTimeZone0, locale0);
      assertEquals(".pr#^_,2)]@8kF*.u", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.forLanguageTag("GMT+00:00");
      FastDateParser fastDateParser0 = new FastDateParser(",&h", simpleTimeZone0, locale0);
      assertEquals(",&h", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(")j@i", simpleTimeZone0, locale0);
      assertEquals(")j@i", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("Y");
      FastDateParser fastDateParser0 = new FastDateParser("(~[KF8.r", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("Y");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"Y\" does not match \\(~\\[(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)8\\.
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getTimeZone("oY");
      FastDateParser fastDateParser0 = new FastDateParser("yAt>V~Pw9v", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2(`hEl}e");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-31), "org.apache.commons.lang3.time.FastDateParser$1");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GDbif,.AU[AM~E#}1");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("}+)", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(122);
      assertEquals(2022, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "{");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("{", simpleTimeZone0, locale0);
      assertEquals("{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4), "S");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("=^'?g>(u5", simpleTimeZone0, locale0);
      assertEquals("=^'?g>(u5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDateParser$1");
      Locale locale0 = new Locale("/9Q9%r\">gypdtXg", "org.apache.commons.lang3.time.FastDateParser$1");
      FastDateParser fastDateParser0 = new FastDateParser("d>)SkJz$2*}[h", simpleTimeZone0, locale0);
      assertEquals("d>)SkJz$2*}[h", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Ti9ym");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("!?[0", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("!?[0", parsePosition0);
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
      assertEquals(4, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MMHBE", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("MMHBE");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"MMHBE\" does not match (\\p{IsNd}{2}+)(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MNl]q3 Jcqrz{Pt9LL", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("MNl]q3 Jcqrz{Pt9LL");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"MNl]q3 Jcqrz{Pt9LL\" does not match (\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("GMT+00:00", simpleTimeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("GMT+00:00", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone1 = TimeZone.getTimeZone("IET");
      FastDateParser fastDateParser0 = new FastDateParser("mr+tGH!Q7F", timeZone1, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("mr+tGH!Q7F", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "S");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("S", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("`g'PxNjv>@lWd8$PK|T", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "4@s+iu2F,tK5;&drzM");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("4@s+iu2F,tK5;&drzM", simpleTimeZone0, locale0);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      boolean boolean0 = fastDateParser0.equals(thaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("mr+tGH!Q7F", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(":u-eC.7F|m'");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":u-eC.7F|m'", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(":", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "4@s+iu2F,tK5;&drzM");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("4@s+iu2F,tK5;&drzM", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "org.apache.commons.lang3.time.FastDateParser$1");
      Locale locale0 = new Locale("/9Q9%r\">gypdtXg", "org.apache.commons.lang3.time.FastDateParser$1");
      FastDateParser fastDateParser0 = new FastDateParser("/9Q9%r\">gypdtXg", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("/9q9%r\">gypdtxg_ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEPARSER$1", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yAt>V~Pw9v", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("yAt>V~Pw9v", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MMMHBE", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(100);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("MMMHBE", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("oY");
      FastDateParser fastDateParser0 = new FastDateParser("yAt>V~Pw9v", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[yAt>V~Pw9v,en_CA,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "r:", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("GMT+00:00", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "STz");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("STz", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateParser0.parse("S}5K}EMk", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MNl]q3 Jcqrz{Pt9LL", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6IBYP'3)^N92E#uXJo-");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getTimeZone("oY");
      FastDateParser fastDateParser0 = new FastDateParser("2(`hEl}e", timeZone0, locale0);
      assertEquals("2(`hEl}e", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("Y");
      FastDateParser fastDateParser0 = new FastDateParser("FZo4agI`[G", timeZone0, locale0);
      assertEquals("FZo4agI`[G", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(39, "E-.7ZE-]|_>i");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("E-.7ZE-]|_>i", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-436));
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("9Bzd", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }
}
