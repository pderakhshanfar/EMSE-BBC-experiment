/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:05:07 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",@[VZh:l&");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(",@[VZh:l&", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("]sYS!", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "]", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1928), "");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTART", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|1apfPxOJjk^/D", 0, 1, 1, 0, 0, 1, 0, 0);
      Locale locale0 = new Locale("|1apfPxOJjk^/D");
      FastDateParser fastDateParser0 = new FastDateParser("|1apfPxOJjk^/D", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(1, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0z8W'%W6:", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2194));
      assertEquals((-194), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0Gv$Y[");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("0Gv$Y[", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(995);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",@s[VZh:l&");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("w57gzJX+]Zw", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("w57gzJX+]Zw", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",@[VZh:l&");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("w57gzJX+]Zw", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("w57gzJX+]Zw");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"w57gzJX+]Zw\" does not match (\\p{IsNd}{1}+)57
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("ki8**E;P", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "]", 0, 0, 0, 0, 2627, 0, 0, 0);
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2627);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("]", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "]", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("]", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("9&{.", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "]", 0, 0, 0, 0, 2627, 0, 0, 0);
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("]", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("&t+%3x");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G$zG[l");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("G$zG[l", timeZone0, locale0);
      assertEquals("G$zG[l", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(":AEX!gV", timeZone0, locale0);
      assertEquals(":AEX!gV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTEAT");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("ZPM2Ka@r2@#", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTEAT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yU", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("641zp'l|AchJ@.umwiY");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2068), "GPxB");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("z'8y~xh)?o\"[VJ;K$", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(2032);
      assertEquals(3932, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("`Blb4z%n@V[pbQO^", timeZone0, locale0);
      assertEquals("`Blb4z%n@V[pbQO^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G$zG[l");
      Locale locale0 = Locale.forLanguageTag("G$zG[l");
      FastDateParser fastDateParser0 = new FastDateParser("_mbLR+Q|1", timeZone0, locale0);
      assertEquals("_mbLR+Q|1", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G$zG[l");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("@TrR# c-9N[|167", timeZone0, locale0);
      assertEquals("@TrR# c-9N[|167", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("?(6NGWUkpyF{sEWZYA", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Date date0 = fastDateParser0.parse("GMTCTT", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("=", timeZone0, locale0);
      assertEquals("=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("<q8{sTMgn@%t2", timeZone0, locale0);
      assertEquals("<q8{sTMgn@%t2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(";HP0>t", timeZone0, locale0);
      assertEquals(";HP0>t", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("k:_syvo}t/", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|1apfPxOJjk^/D", 0, 1, 0, 0, 0, 0, 2444, 0);
      Locale locale0 = new Locale("|1apfPxOJjk^/D");
      FastDateParser fastDateParser0 = new FastDateParser("8W*8<!=OT/Nqo:", simpleTimeZone0, locale0);
      assertEquals("8W*8<!=OT/Nqo:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "]", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("7g^`66d2!v Sk", simpleTimeZone0, locale0);
      assertEquals("7g^`66d2!v Sk", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",@sz[VZh:l&");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("4$", timeZone0, locale0);
      assertEquals("4$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("9G&d31icM%", timeZone0, locale0);
      assertEquals("9G&d31icM%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "2");
      Locale locale0 = Locale.forLanguageTag("|1apfPxOJjk^/D");
      FastDateParser fastDateParser0 = new FastDateParser("2", simpleTimeZone0, locale0);
      assertEquals("2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("1@[hVZh:&");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("1@[hVZh:&", timeZone0, locale0);
      assertEquals("1@[hVZh:&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("/dtU|Y&'4s*4m", timeZone0, locale0);
      assertEquals("/dtU|Y&'4s*4m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("}G.8Y", timeZone0, locale0);
      assertEquals("}G.8Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",@[VZh:l&");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("-@hy*", timeZone0, locale0);
      assertEquals("-@hy*", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(")\"5=WU7", timeZone0, locale0);
      assertEquals(")\"5=WU7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "]", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=],offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$Gl");
      Locale locale0 = new Locale("8[(9@Uza9");
      FastDateParser fastDateParser0 = new FastDateParser("m>/?4E*J1#.6Bns2lP", timeZone0, locale0);
      assertEquals("m>/?4E*J1#.6Bns2lP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("W  U&<J%#,Y", timeZone0, locale0);
      assertEquals("W  U&<J%#,Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G$zG[l");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("k&y6;I\"VV", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("k&y6;I\"VV");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"k&y6;I\"VV\" does not match (\\p{IsNd}++)&(\\p{IsNd}{1}+)6;
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("D''5xB@", "D''5xB@", "J`");
      FastDateParser fastDateParser0 = new FastDateParser("D''5xB@", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("D''5xB@");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"D''5xB@\" does not match (\\p{IsNd}++)'5
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMMTAT");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("GMMTAT", timeZone0, locale0);
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser1 = new FastDateParser("GMMTAT", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yU", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "yU");
      FastDateParser fastDateParser1 = new FastDateParser("yU", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(119, "%OBql.%$7");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCTT", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("]", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yU", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("MTECT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("r Q~2%TFwU", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("MTECT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("3;^wvw<f uWy(q3<Nhm");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("hTB3+ux3fK0", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("8KxR}sevHv7} CTJ");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",@[VZh:l&");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("F0v##BgWOSlY@", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}{1}+)0", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("yyUp", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("1_;W{A.[x");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yU", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32, "GPxB");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("z'8y~xh)?o\"[VJ;K$", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("z'8y~xh)?o\"[VJ;K$", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject(" not in (", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertNotNull(object0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("yU", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[yU,en,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("0Gv$Y[l", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("6H^q{lhNvy");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("HyU", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("789^9J;^eJN");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("+{>wyy^Avm~n", timeZone0, locale0);
      assertEquals("+{>wyy^Avm~n", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "|1apfPxOJjk^/D", 0, 1, 0, 0, 0, 0, 2444, 0);
      Locale locale0 = new Locale("|1apfPxOJjk^/D");
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",@sz[VZh:l&");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(",@sz[VZh:l&", timeZone0, locale0);
      assertEquals(",@sz[VZh:l&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("ZPM2Ka@r2@#", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("CST", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }
}
