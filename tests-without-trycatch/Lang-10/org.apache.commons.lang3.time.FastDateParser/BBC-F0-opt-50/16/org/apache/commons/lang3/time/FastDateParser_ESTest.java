/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:52:50 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateParser0.parse("cI5)p@!\"C$H|>", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("k+yyhXv2y<xy79OXFa", timeZone0, locale0);
      assertEquals("k+yyhXv2y<xy79OXFa", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-29L));
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.forLanguageTag("ECT");
      FastDateParser fastDateParser0 = new FastDateParser("ECT", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(89);
      assertEquals(1889, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[MIT,ja,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("42(`b/C");
      FastDateParser fastDateParser0 = new FastDateParser("42(`b/C", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("42(`b/C", parsePosition0);
      assertEquals(4, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1716, " locale does not support dates before 1868 AD)\n", 1716, 0, 1716, 1716, 1716, 0, 0, (-3018));
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id= locale does not support dates before 1868 AD)\n,offset=1716,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=1716,startDay=0,startDayOfWeek=1716,startTime=1716,startTimeMode=0,endMode=0,endMonth=1716,endDay=0,endDayOfWeek=0,endTime=-3018,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1204), " locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser("y:", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id= locale does not support dates before 1868 AD)\n,offset=-1204,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1716, "w0T5kJuU`6&|hu0;+", 1716, 0, 1716, 1716, 1716, 0, 0, (-3018));
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2628));
      assertEquals((-628), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("*\"");
      FastDateParser fastDateParser0 = new FastDateParser("*\"", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("*\"", parsePosition0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.forLanguageTag("/z~i?Je8Zb");
      FastDateParser fastDateParser0 = new FastDateParser("ECT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(89);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1204));
      // Undeclared exception!
//      try { 
        fastDateParser0.parse(" locale does not support dates before 1868 AD)\n", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("@p{/kH-#z'Cj~f3Zm<wZ", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("Qr", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dT'6~e0BDzK>V");
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("dT'6~e0BDzK>V", timeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("42(`b/C");
      FastDateParser fastDateParser0 = new FastDateParser("42(`b/C", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("GMTSST", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("}Vi!Py4.vj|", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("/ZMnrj'7y.*=");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"/ZMnrj'7y.*=\" does not match \\}
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("ZA\"J=NqB;31Z[|a0", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTNST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("ZA\"J=NqB;31Z[|a0", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("AST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Z`c3sNAF", timeZone0, locale0);
      assertEquals("Z`c3sNAF", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      String string0 = "\\uT.";
      Locale locale0 = Locale.forLanguageTag(string0);
      FastDateParser fastDateParser0 = new FastDateParser(string0, timeZone0, locale0);
      assertEquals("\\uT.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.forLanguageTag("/z~i?Je8Zb");
      FastDateParser fastDateParser0 = new FastDateParser("M=>u=d(", timeZone0, locale0);
      assertEquals("M=>u=d(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Dk<fD]pPzyDNjceQ(#u", timeZone0, locale0);
      assertEquals("Dk<fD]pPzyDNjceQ(#u", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.forLanguageTag(" locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser("!H:/kg", timeZone0, locale0);
      assertEquals("!H:/kg", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("9vPEz['CeRTUGJ", timeZone0, locale0);
      assertEquals("9vPEz['CeRTUGJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      FastDateParser fastDateParser0 = new FastDateParser("k8'O", timeZone0, locale0);
      assertEquals("k8'O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTMIT");
      FastDateParser fastDateParser0 = new FastDateParser("zE6z;5VPGh", timeZone0, locale0);
      assertEquals("zE6z;5VPGh", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(">hh5$B}", timeZone0, locale0);
      assertEquals(">hh5$B}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("7K3oh", timeZone0, locale0);
      assertEquals("7K3oh", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1716, "uxP^X/:25stzaP;", 1716, 0, 1716, 1716, 1716, 0, 0, (-3018));
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("w0GT5kJuU`6&|hu0;+", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.forLanguageTag("/z~i?Je8Zb");
      FastDateParser fastDateParser0 = new FastDateParser("/z~i?Je8Zb", timeZone0, locale0);
      assertEquals("/z~i?Je8Zb", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.forLanguageTag("/z~i?Je8Zb");
      FastDateParser fastDateParser0 = new FastDateParser("W,aA9", timeZone0, locale0);
      assertEquals("W,aA9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("SK-KKUl");
      FastDateParser fastDateParser0 = new FastDateParser(")cVuN+8,o6JZS;W", timeZone0, locale0);
      assertEquals(")cVuN+8,o6JZS;W", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("mhH;;aW[WaJ.-]t", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.forLanguageTag("l^iMcEDS");
      FastDateParser fastDateParser0 = new FastDateParser("][}47|~E_*{G1_d #^", timeZone0, locale0);
      assertEquals("][}47|~E_*{G1_d #^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1716, "w0T5kJuU`6&|hu0;+", 1716, 0, 1716, 1716, 1716, 0, 0, (-3018));
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("^To", simpleTimeZone0, locale0);
      assertEquals("^To", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.lang3.time.FastDateParser$NumberStrategy");
      FastDateParser fastDateParser0 = new FastDateParser("K?f&3", timeZone0, locale0);
      assertEquals("K?f&3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      String string0 = "ZA\"=N;31[|a0";
      FastDateParser fastDateParser0 = new FastDateParser("ZA\"=N;31[|a0", timeZone0, locale0);
      Locale locale1 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser1 = new FastDateParser("ZA\"=N;31[|a0", timeZone0, locale1);
      fastDateParser0.equals(string0);
      int int0 = 111;
      fastDateParser1.adjustYear(int0);
      Locale locale2 = Locale.PRC;
      fastDateParser0.equals(locale2);
      fastDateParser1.equals(locale0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(7, "F;BX~qV");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("F;BX~qV", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("F;BX~qV");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"F;BX~qV\" does not match (\\p{IsNd}++);
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("SSQT", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("SSQT");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"SSQT\" does not match (\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("(It", timeZone0, locale0);
      Locale locale1 = Locale.KOREA;
      FastDateParser fastDateParser1 = new FastDateParser("(It", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("GMTEAT", timeZone1, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTEAT", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("GMTMIT", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("!kf|{'i", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("D*RP^{Pk", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("42(`b/C");
      FastDateParser fastDateParser0 = new FastDateParser("42(`b/C", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("h i}ns&41A-6eL", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("2^h(!fwQ=se**");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("42(`b/C");
      FastDateParser fastDateParser0 = new FastDateParser("42(`b/C", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("42(`b/C");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = new Locale(" locale does not support dates before 1868 AD)\n", " locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals(" locale does not support dates before 1868 ad)\n_ LOCALE DOES NOT SUPPORT DATES BEFORE 1868 AD)\n", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("42(`b/C");
      FastDateParser fastDateParser0 = new FastDateParser("-", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("42(`b/C");
      FastDateParser fastDateParser0 = new FastDateParser("42(`b/C", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Object object0 = fastDateParser0.parseObject("zYO", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" not in (");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("SSQT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("F2!DC.lL~", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(22, "\"F.WDQ~");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("\"F.WDQ~", simpleTimeZone0, locale0);
      assertEquals("\"F.WDQ~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("Sz2(6;~IKP", timeZone0, locale0);
      assertEquals("Sz2(6;~IKP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("ZA\"J=NqB;31Z[|a0", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(0, pattern0.flags());
  }
}
