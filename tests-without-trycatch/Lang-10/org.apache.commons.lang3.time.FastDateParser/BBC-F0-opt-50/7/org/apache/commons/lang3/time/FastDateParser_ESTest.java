/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 12:52:51 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "5^oZd\u0000WuY9em.>*Vw");
      Locale locale0 = new Locale("", "5^oZd\u0000WuY9em.>*Vw", "ne'uMwM/Y3R{V");
      FastDateParser fastDateParser0 = new FastDateParser("5^oZd\u0000WuY9em.>*Vw", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "\"vQ$#\"*[%Ejqjo:v?", 1, 0, 1, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"vQ$#\"*[%Ejqjo:v?", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("\"vQ$#\"*[%Ejqjo:v?");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ">n]4UPdb5");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(">n]4UPdb5", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1581), "");
      Locale locale0 = new Locale("", "", "");
      FastDateParser fastDateParser0 = new FastDateParser("k0-", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-|Q6N4|T{rD{2!i5Y7k");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("-|Q6N4|T{rD{2!i5Y7k", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-6077));
      assertEquals((-4077), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("/I", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(122);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("ZO/,AF.# T@*/", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("GMTPNT", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("[#kWBcj EY", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("[#kWBcj EY");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"[#kWBcj EY\" does not match \\[#(\\p{IsNd}{1}+)(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "pU?aUa", 1, 0, 1, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"vQ$#\"*[%Ejqjo:v?", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("yGjlz,jd+(", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("y.iMCr^[Co", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("ZO/,AF.# T@*/", timeZone0, locale0);
      Locale locale1 = Locale.UK;
      FastDateParser fastDateParser1 = new FastDateParser("ZO/,AF.# T@*/", timeZone0, locale1);
      int int0 = (-1352);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("", (TimeZone) null, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("s*+", timeZone0, locale0);
      assertEquals("s*+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "5^oZd\u0000WuY9em.>*Vw");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("dRG[(.", simpleTimeZone0, locale0);
      fastDateParser0.parse("5^oZd\u0000WuY9em.>*Vw", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("ZO/,AF.# T@*/", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTPNT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("yYiWUBa[ c`17*#jV", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3Z(pNe8#_Z");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("yYiWUBa[ c`17*#jV", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("413Z(pNe8_Z");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("`3-\"`9`s8y_6N&", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("D3Xb+RX", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2445, "-|Q6N4|T{rD{2!i5Y7k");
      Locale locale0 = new Locale("-|Q6N4|T{rD{2!i5Y7k", "-|Q6N4|T{rD{2!i5Y7k", "");
      FastDateParser fastDateParser0 = new FastDateParser("^D}GBB\"2XY", simpleTimeZone0, locale0);
      assertEquals("^D}GBB\"2XY", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getTimeZone("#w=}zyyy");
      FastDateParser fastDateParser0 = new FastDateParser("#w=}zyyy", timeZone0, locale0);
      assertEquals("#w=}zyyy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-|Q6N4|T{rD{2!i5Y7k");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("w<)L>U,@ECa|", timeZone0, locale0);
      assertEquals("w<)L>U,@ECa|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("DHMk;qly", timeZone0, locale0);
      assertEquals("DHMk;qly", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(43, "QPqbT,?+");
      Locale locale0 = new Locale("QPqbT,?+");
      FastDateParser fastDateParser0 = new FastDateParser(":+Iwyuugor", simpleTimeZone0, locale0);
      assertEquals(":+Iwyuugor", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h@PA#");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("F|w4,yY_.QEt5[W'| ", timeZone0, locale0);
      assertEquals("F|w4,yY_.QEt5[W'| ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h@PA#");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("3Cm,A2g^[o>`1bRd'A", timeZone0, locale0);
      assertEquals("3Cm,A2g^[o>`1bRd'A", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "Hxi8;tF.p8U$m");
      Locale locale0 = new Locale("Hxi8;tF.p8U$m", "", " locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser("2~/+~w9Q", simpleTimeZone0, locale0);
      assertEquals("2~/+~w9Q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(",S6tS0\"n@{Cj:Z$[n^");
      FastDateParser fastDateParser0 = new FastDateParser(",S6tS0\"n@{Cj:Z$[n^", timeZone0, locale0);
      assertEquals(",S6tS0\"n@{Cj:Z$[n^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-698), "");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("6D)O<lTx", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(103, "(p{IsNd}++)");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", simpleTimeZone0, locale0);
      assertEquals("(p{IsNd}++)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("BET");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("0+6Noqx k", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(49);
      assertEquals(1949, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("/w}-yy", timeZone0, locale0);
      assertEquals("/w}-yy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1581), "");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("FK{Mv49qQWj0&:3@", simpleTimeZone0, locale0);
      assertEquals("FK{Mv49qQWj0&:3@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("m/I");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("?kIN2O~B!", timeZone0, locale0);
      assertEquals("?kIN2O~B!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("D''pM'", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(94);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("D''pM'", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "", "");
      FastDateParser fastDateParser0 = new FastDateParser("\"2~*w&$cSl0;nx}", timeZone0, locale0);
      assertEquals("\"2~*w&$cSl0;nx}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("  HKR!/|]/c/Z", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1);
      assertEquals(2001, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "5^oZd\u0000WuY9em.>*Vw");
      Locale locale0 = new Locale("", "5^oZd\u0000WuY9em.>*Vw", "ne'uMwM/Y3R{V");
      FastDateParser fastDateParser0 = new FastDateParser("5^oZd\u0000WuY9em.>*Vw", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parse("");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"\" does not match 5\\^
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("[#kWBcj EY", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("oT4CEfGNqe[xc[~");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"oT4CEfGNqe[xc[~\" does not match \\[#(\\p{IsNd}{1}+)(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTNST", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("GMTNST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(505, "GMTCST");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("8J^k(11W,N\"n*T+-*d", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("8J^k(11W,N\"n*T+-*d", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(17, "5^oZd\u0000WuY9em.>*Vw");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("\"pPh.BpGa[", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("dRG[(.", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@HD7h]Am7v");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("@HD7h]Am7v", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      boolean boolean0 = fastDateParser0.equals(pattern0);
      assertEquals("@(\\p{IsNd}{1}+)(\\p{IsNd}{1}+)7(\\p{IsNd}++)\\]", pattern0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(17, "5^oZd\u0000WuY9em.>*Vw");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("\"pPh.BpGa[", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("l", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(21, "5^oZd\u0000WuY9em.>*Vw");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("5^oZd\u0000WuY9em.>*Vw");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("HgOiNLF9Nwr_", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("77c8u@");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("w1(8U9ieL`\"9Byq)#HR");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("w1(8U9ieL`\"9Byq)#HR", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}{1}+)1\\(8", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "0MMw2(]o`mtG4%", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("DQmtt]ugod[_wv", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-|Q6N4|T{rD{2!i5Y7k");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("-|Q6N4|T{rD{2!i5Y7k", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(505, "GMTCST");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTNST", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("ko", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("[G*m%G5TUsJOH", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("[G*m%G5TUsJOH", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "5^oZd\u0000WuY9em.>*Vw");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("k", simpleTimeZone0, locale0);
      fastDateParser0.parseObject("9R@hsYLCx", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("`3-\"`9`sp8y_6N&|", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[`3-\"`9`sp8y_6N&|,,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(12, "");
      Locale locale0 = new Locale("[A[A&+b&");
      FastDateParser fastDateParser0 = new FastDateParser("[A[A&+b&", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("kFYw:dk?=", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("77[8ut");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-|Q6N4|T{rD{2!i5Y7k");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[-|Q6N4|T{rD{2!i5Y7k,de,GMT]", timeZone0, locale0);
      assertEquals("FastDateParser[-|Q6N4|T{rD{2!i5Y7k,de,GMT]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = new Locale("", " locale does not support dates before 1868 AD)\n", "Hxi8;tF.p8U$m");
      TimeZone timeZone0 = TimeZone.getTimeZone("u+_ajw}%}&=");
      FastDateParser fastDateParser0 = new FastDateParser("smZKC4~s", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("ZO/,AF.# T@*/", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("ZO/,AF.# T@*/", timeZone0, locale0);
      Date date0 = fastDateParser1.parse("ACT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }
}
