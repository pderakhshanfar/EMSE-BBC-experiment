/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 05:03:17 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("Italian", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("%DbEs~K", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2352), "GMTPNT");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPNT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "K(P3r[z}", (-1750), 0, (-1750), 0, 311, 0, 0, 0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("K(P3r[z}", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("%DbEs~K", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2139));
      assertEquals((-139), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(104, "%DbEs~K");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(";;{vbJ.$1?J", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(104);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("6b3v@", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(104, "%DbEs~K");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("6b3v@", simpleTimeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1200));
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("Italian", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("d~$X^TZ%M;%h2)o`>mB", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("~Pl~XK", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("yoaARJ", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, (Locale) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("4@inP>ht", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("4@inP>ht", parsePosition0);
      assertNull(date0);
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Zt&[.ZTB", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTMIT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Zt&[.ZTB", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("ECT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("yoaARJ", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("792mfKH;");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("dW1'K~1t=N~v", timeZone0, locale0);
      assertEquals("dW1'K~1t=N~v", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("_/.I8VG!k=_<UJ6)++j", timeZone0, locale0);
      assertEquals("_/.I8VG!k=_<UJ6)++j", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("z>0jL?<;o!BY#Fp1W?&", timeZone0, locale0);
      assertEquals("z>0jL?<;o!BY#Fp1W?&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(":zX$HT+Tz?@", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("8-HA!#Ejm3)f3H", simpleTimeZone0, locale0);
//      try { 
        fastDateParser0.parse("");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"\" does not match 8-(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("G5TBET", simpleTimeZone0, locale0);
      assertEquals("G5TBET", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("2CbLXN}%cX+hlnp6+'", timeZone0, locale0);
      assertEquals("2CbLXN}%cX+hlnp6+'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "K(P3r[z}", 0, 0, 0, 0, 0, 0, 0, 0);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("/:/U:^#<>j{(]:t.m", simpleTimeZone0, locale0);
      assertEquals("/:/U:^#<>j{(]:t.m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("-|8Cu.yj!0EJ8cG.i", timeZone0, locale0);
      assertEquals("-|8Cu.yj!0EJ8cG.i", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(",Ri", timeZone0, locale0);
      assertEquals(",Ri", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(")nm,'m%+o5", timeZone0, locale0);
      assertEquals(")nm,'m%+o5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("yT_ga2pP:8", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("79t7A..v", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("[Dm", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("Eya=w6K0$]<2E", timeZone0, locale0);
      assertEquals("Eya=w6K0$]<2E", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("^h?97<'3", timeZone0, locale0);
      assertEquals("^h?97<'3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("|/\"]a@pa/u5Vv$", timeZone0, locale0);
      assertEquals("|/\"]a@pa/u5Vv$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("yy.lpFH.Lo0O`P|r9J7", timeZone0, locale0);
      assertEquals("yy.lpFH.Lo0O`P|r9J7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("a3W*IM\",JffmwLe", simpleTimeZone0, locale0);
      assertEquals("a3W*IM\",JffmwLe", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("H''", timeZone0, locale0);
      assertEquals("H''", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("@MMM}LqA6h ", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("@MMM}LqA6h ");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"@MMM}LqA6h \" does not match @(1|10|10\u6708|11|11\u6708|12|12\u6708|1\u6708|2|2\u6708|3|3\u6708|4|4\u6708|5|5\u6708|6|6\u6708|7|7\u6708|8|8\u6708|9|9\u6708)\\}
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("0I+pj*+!~Mq&|cI`}", timeZone0, locale0);
      Locale locale1 = Locale.PRC;
      FastDateParser fastDateParser1 = new FastDateParser("0I+pj*+!~Mq&|cI`}", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone1 = TimeZone.getTimeZone("SST");
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone1, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("SST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "GMT", 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("SST", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Zt&[.ZTB", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "GMT", 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("VSrT", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("MhN7jGq`'", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("79tk..v");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\(", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "GMT", 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("GMT", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("0I+pj*+!~Mq&|cI`}", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("0I+pj*+!~Mq&|cI`}");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("4-?[#$k7j3`=D+'^?34", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("zh_TW", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Dyk@@2 #|{}s#|", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("Dyk@@2 #|{}s#|", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("mO:^PgW/HN(Rp?k", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("7kHBl", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("1k`=8k", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[1k`=8k,zh_CN,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("  }Mya", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(614);
      assertEquals(2514, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("<`<DZ9wnNY`Zk;", timeZone0, locale0);
      assertEquals("<`<DZ9wnNY`Zk;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Zt&[.ZTB", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject("Zt&[.ZTB");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"Zt&[.ZTB\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre\\s*+Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan\\s*+Time|AFT|AKDT|AKST|Alaska\\s*+Daylight\\s*+Time|Alaska\\s*+Standard\\s*+Time|Alma-Ata\\s*+Time|ALMT|Amazon\\s*+Time|AMT|Anadyr\\s*+Time|ANAT|Aqtau\\s*+Time|Aqtobe\\s*+Time|AQTT|Arabia\\s*+Standard\\s*+Time|Argentine\\s*+Time|Armenia\\s*+Time|ART|AST|Atlantic\\s*+Daylight\\s*+Time|Atlantic\\s*+Standard\\s*+Time|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Daylight\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(Northern\\s*+Territory\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia\\)|Australian\\s*+Central\\s*+Standard\\s*+Time\\s*+\\(South\\s*+Australia/New\\s*+South\\s*+Wales\\)|Australian\\s*+Central\\s*+Western\\s*+Standard\\s*+Time|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Daylight\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(New\\s*+South\\s*+Wales\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Queensland\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Tasmania\\)|Australian\\s*+Eastern\\s*+Standard\\s*+Time\\s*+\\(Victoria\\)|Australian\\s*+Western\\s*+Standard\\s*+Time|AWST|Azerbaijan\\s*+Time|Azores\\s*+Summer\\s*+Time|Azores\\s*+Time|AZOST|AZOT|AZT|Bangladesh\\s*+Time|BDT|Bhutan\\s*+Time|BNT|Bolivia\\s*+Time|BOT|Bougainville\\s*+Standard\\s*+Time|Brasilia\\s*+Time|British\\s*+Summer\\s*+Time|BRT|Brunei\\s*+Time|BST|BTT|Cape\\s*+Verde\\s*+Time|CAT|CCT|CDT|Central\\s*+African\\s*+Time|Central\\s*+Daylight\\s*+Time|Central\\s*+European\\s*+Summer\\s*+Time|Central\\s*+European\\s*+Time|Central\\s*+Indonesia\\s*+Time|Central\\s*+Standard\\s*+Time|CEST|CET|CHADT|Chamorro\\s*+Standard\\s*+Time|CHAST|Chatham\\s*+Daylight\\s*+Time|Chatham\\s*+Standard\\s*+Time|Chile\\s*+Summer\\s*+Time|Chile\\s*+Time|China\\s*+Standard\\s*+Time|Choibalsan\\s*+Time|CHOT|Christmas\\s*+Island\\s*+Time|ChST|CHUT|Chuuk\\s*+Time|CKT|CLST|CLT|Cocos\\s*+Islands\\s*+Time|Colombia\\s*+Time|Cook\\s*+Is\\.\\s*+Time|Coordinated\\s*+Universal\\s*+Time|COT|CST|Cuba\\s*+Daylight\\s*+Time|Cuba\\s*+Standard\\s*+Time|CVT|CXT|Davis\\s*+Time|DAVT|DDUT|Dumont-d'Urville\\s*+Time|EASST|EAST|East\\s*+Indonesia\\s*+Time|Easter\\s*+Is\\.\\s*+Summer\\s*+Time|Easter\\s*+Is\\.\\s*+Time|Eastern\\s*+African\\s*+Time|Eastern\\s*+Daylight\\s*+Time|Eastern\\s*+European\\s*+Summer\\s*+Time|Eastern\\s*+European\\s*+Time|Eastern\\s*+Greenland\\s*+Summer\\s*+Time|Eastern\\s*+Greenland\\s*+Time|Eastern\\s*+Standard\\s*+Time|EAT|ECT|Ecuador\\s*+Time|EDT|EEST|EET|EGST|EGT|EST|Falkland\\s*+Is\\.\\s*+Time|Fernando\\s*+de\\s*+Noronha\\s*+Time|Fiji\\s*+Summer\\s*+Time|Fiji\\s*+Time|FJST|FJT|FKT|FNT|French\\s*+Guiana\\s*+Time|French\\s*+Southern\\s*+&\\s*+Antarctic\\s*+Lands\\s*+Time|Galapagos\\s*+Time|GALT|Gambier\\s*+Time|GAMT|Georgia\\s*+Time|GET|GFT|Ghana\\s*+Mean\\s*+Time|Gilbert\\s*+Is\\.\\s*+Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich\\s*+Mean\\s*+Time|GST|Gulf\\s*+Standard\\s*+Time|Guyana\\s*+Time|GYT|Hawaii\\s*+Daylight\\s*+Time|Hawaii\\s*+Standard\\s*+Time|HDT|HKT|Hong\\s*+Kong\\s*+Time|Hovd\\s*+Time|HOVT|HST|ICT|IDT|India\\s*+Standard\\s*+Time|Indian\\s*+Ocean\\s*+Territory\\s*+Time|Indochina\\s*+Time|IOT|Iran\\s*+Daylight\\s*+Time|Iran\\s*+Standard\\s*+Time|IRDT|Irish\\s*+Summer\\s*+Time|IRKT|Irkutsk\\s*+Time|IRST|Israel\\s*+Daylight\\s*+Time|Israel\\s*+Standard\\s*+Time|IST|Japan\\s*+Standard\\s*+Time|JST|KGT|Kirgizstan\\s*+Time|Korea\\s*+Standard\\s*+Time|Kosrae\\s*+Time|KOST|Kostanay\\s*+Standard\\s*+Time|Krasnoyarsk\\s*+Time|KRAT|KST|LHDT|LHST|Line\\s*+Is\\.\\s*+Time|LINT|Lord\\s*+Howe\\s*+Daylight\\s*+Time|Lord\\s*+Howe\\s*+Standard\\s*+Time|Macquarie\\s*+Island\\s*+Daylight\\s*+Time|Macquarie\\s*+Island\\s*+Standard\\s*+Time|Magadan\\s*+Time|MAGT|Malaysia\\s*+Time|Maldives\\s*+Time|Marquesas\\s*+Time|Marshall\\s*+Islands\\s*+Time|MART|Mauritius\\s*+Time|Mawson\\s*+Time|MAWT|MDT|MEST|MET|MHT|Middle\\s*+Europe\\s*+Summer\\s*+Time|Middle\\s*+Europe\\s*+Time|MIDT|MIST|MMT|Moscow\\s*+Standard\\s*+Time|Mountain\\s*+Daylight\\s*+Time|Mountain\\s*+Standard\\s*+Time|MSK|MST|MUT|MVT|Myanmar\\s*+Time|MYT|Nauru\\s*+Time|NCT|NDT|Nepal\\s*+Time|New\\s*+Caledonia\\s*+Time|New\\s*+Zealand\\s*+Daylight\\s*+Time|New\\s*+Zealand\\s*+Standard\\s*+Time|Newfoundland\\s*+Daylight\\s*+Time|Newfoundland\\s*+Standard\\s*+Time|NFST|NFT|Niue\\s*+Time|Norfolk\\s*+Summer\\s*+Time|Norfolk\\s*+Time|Novosibirsk\\s*+Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk\\s*+Time|OMST|Oral\\s*+Time|ORAT|Pacific\\s*+Daylight\\s*+Time|Pacific\\s*+Standard\\s*+Time|Pakistan\\s*+Time|Palau\\s*+Time|Papua\\s*+New\\s*+Guinea\\s*+Time|Paraguay\\s*+Summer\\s*+Time|Paraguay\\s*+Time|PDT|Peru\\s*+Time|PET|Petropavlovsk-Kamchatski\\s*+Time|PETT|PGT|Philippines\\s*+Standard\\s*+Time|Phoenix\\s*+Is\\.\\s*+Time|PHOT|Pierre\\s*+&\\s*+Miquelon\\s*+Daylight\\s*+Time|Pierre\\s*+&\\s*+Miquelon\\s*+Standard\\s*+Time|Pitcairn\\s*+Standard\\s*+Time|PKT|PMDT|PMST|Pohnpei\\s*+Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda\\s*+Time|RET|Reunion\\s*+Time|Rothera\\s*+Time|ROTT|Sakhalin\\s*+Time|SAKT|Samara\\s*+Time|Samoa\\s*+Standard\\s*+Time|SAMT|SAST|SBT|SCT|Seychelles\\s*+Time|SGT|Singapore\\s*+Time|Solomon\\s*+Is\\.\\s*+Time|South\\s*+Africa\\s*+Standard\\s*+Time|South\\s*+Georgia\\s*+Standard\\s*+Time|Srednekolymsk\\s*+Time|SRET|SRT|SST|Suriname\\s*+Time|SYOT|Syowa\\s*+Time|Tahiti\\s*+Time|TAHT|Tajikistan\\s*+Time|TFT|Timor-Leste\\s*+Time|TJT|TKT|TLT|TMT|Tokelau\\s*+Time|Tonga\\s*+Time|TOT|TRT|Turkey\\s*+Time|Turkmenistan\\s*+Time|Tuvalu\\s*+Time|TVT|Ulaanbaatar\\s*+Time|ULAT|Uruguay\\s*+Time|Ust-Nera\\s*+Time|UTC|UYT|Uzbekistan\\s*+Time|UZT|Vanuatu\\s*+Time|Venezuela\\s*+Time|VET|Vladivostok\\s*+Time|VLAT|VOST|Vostok\\s*+Time|VUT|Wake\\s*+Time|WAKT|Wallis\\s*+&\\s*+Futuna\\s*+Time|WAT|WEST|West\\s*+Indonesia\\s*+Time|West\\s*+Samoa\\s*+Daylight\\s*+Time|West\\s*+Samoa\\s*+Standard\\s*+Time|Western\\s*+African\\s*+Time|Western\\s*+European\\s*+Summer\\s*+Time|Western\\s*+European\\s*+Time|Western\\s*+Greenland\\s*+Summer\\s*+Time|Western\\s*+Greenland\\s*+Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang\\s*+Standard\\s*+Time|XJT|YAKT|Yakutsk\\s*+Time|Yekaterinburg\\s*+Time|YEKT)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }
}
