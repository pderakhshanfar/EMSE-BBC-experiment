/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 11:50:49 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("5@yy$cOpnPY4mBK!%", timeZone0, locale0);
      assertEquals("5@yy$cOpnPY4mBK!%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale1 = (Locale)locale0.clone();
      FastDateParser fastDateParser0 = new FastDateParser("GMTCNT", timeZone0, locale1);
//      try { 
        fastDateParser0.parseObject("GMTCNT");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"GMTCNT\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(" locale does not support dates before 1868 AD)\n", " locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("GMTBET", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag(" locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("SST", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag(" locale does not support dates before 1868 AD)\n");
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(10);
      Object object0 = fastDateParser0.parseObject("EQAQ/34G`GTKk~2", parsePosition0);
      assertNotNull(object0);
      assertEquals(10, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=10,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("<*`9");
      FastDateParser fastDateParser0 = new FastDateParser("+R#8B%n/-'a`x.hc", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(122, "IST");
      FastDateParser fastDateParser0 = new FastDateParser("yF", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=IST,offset=122,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-370), "FastDateParser[");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("h0ESI]M", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(122, "IST");
      FastDateParser fastDateParser0 = new FastDateParser("yF", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2702));
      assertEquals((-702), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(";h&drxDv7g", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-669));
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject(";h&drxDv7g", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(";h&xDv7g", timeZone0, locale0);
//      try { 
        fastDateParser0.parseObject(";h&xDv7g");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \";h&xDv7g\" does not match ;(\\p{IsNd}++)&
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser(";h&drxDv7g", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-726), "|");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("|", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-726));
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("|", parsePosition0);
//        fail("Expecting exception: StringIndexOutOfBoundsException");
      
//      } catch(StringIndexOutOfBoundsException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+9M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|j+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse("D+|E+|F+|G+|H+|K+9M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|j+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("7(a7'!Ic*Dq#", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parse((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("WDz:<.-b(c|C", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.getFieldWidth();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("zN(?eY~!LxL_{", timeZone0, locale0);
      Locale locale1 = new Locale("dT}zaU}K0,o");
      FastDateParser fastDateParser1 = new FastDateParser("zN(?eY~!LxL_{", timeZone0, locale1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser(";h&xDv7g", (TimeZone) null, locale0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2169);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("\"{[va~#\"OGCl", timeZone0, locale0);
      assertEquals("\"{[va~#\"OGCl", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("G", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("org.apache.commons.lang3.time.FastDateParser$TextStrategy", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTSST", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("zN(*sY~!LxL_z");
      FastDateParser fastDateParser0 = new FastDateParser("zN(*sY~!LxL_z", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("IST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("-18:00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("Z", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("+18:00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("|SM`v~tUg,L>", timeZone0, locale0);
      assertEquals("|SM`v~tUg,L>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("_mXSmlW4{|nbF.Wz", timeZone0, locale0);
      assertEquals("_mXSmlW4{|nbF.Wz", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("^", timeZone0, locale0);
      assertEquals("^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag(">8)DC^Si.,>9");
      FastDateParser fastDateParser0 = new FastDateParser(">8)DC^Si.,>9", timeZone0, locale0);
      assertEquals(">8)DC^Si.,>9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("k=QLgd\"", timeZone0, locale0);
      assertEquals("k=QLgd\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("6)O~`cD", timeZone0, locale0);
      assertEquals("6)O~`cD", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("4");
      FastDateParser fastDateParser0 = new FastDateParser("4", timeZone0, locale0);
      assertEquals("4", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("z1F;pt,Kq_*,i;l", timeZone0, locale0);
      assertEquals("z1F;pt,Kq_*,i;l", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("/", timeZone0, locale0);
      assertEquals("/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(".H74G]TcMMoHn3", timeZone0, locale0);
      assertEquals(".H74G]TcMMoHn3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("3w,SBs&av", timeZone0, locale0);
      assertEquals("3w,SBs&av", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(")O]ir", ")O]ir");
      FastDateParser fastDateParser0 = new FastDateParser(")O]ir", timeZone0, locale0);
      assertEquals(")O]ir", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("@J2xJygDV1ZZtR%nnv", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(2138);
      assertEquals(4038, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|'|'[^G]++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|'|'[^G]++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|'|'[^G]++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("<w-6*3}^Vs~_Sq", timeZone0, locale0);
      assertEquals("<w-6*3}^Vs~_Sq", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("?rsjf@PR6Cg=O@s", timeZone0, locale0);
      assertEquals("?rsjf@PR6Cg=O@s", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("94$r-8", timeZone0, locale0);
      assertEquals("94$r-8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "}+)");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("  YW*cQ3Prp", simpleTimeZone0, locale0);
      assertEquals("  YW*cQ3Prp", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // Unparseable date: \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\" does not match (\\p{IsNd}++)\\+\\|(dom|domenica|gio|gioved\u00EC|lun|luned\u00EC|mar|marted\u00EC|mer|mercoled\u00EC|sab|sabato|ven|venerd\u00EC)\\+\\|(\\p{IsNd}++)\\+\\|(BC|BC|dopo\\s*+Cristo|dopo\\s*+Cristo)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora\\s*+del\\s*+Bangladesh|Ora\\s*+del\\s*+Bhutan|Ora\\s*+del\\s*+Brasile|Ora\\s*+del\\s*+Brunei|Ora\\s*+del\\s*+Cile|Ora\\s*+del\\s*+Kirghizistan|Ora\\s*+del\\s*+Nepal|Ora\\s*+del\\s*+Pakistan|Ora\\s*+del\\s*+Paraguay|Ora\\s*+del\\s*+Per\u00F9|Ora\\s*+del\\s*+Tagikistan|Ora\\s*+del\\s*+Terr\\.\\s*+Britannico\\s*+dell'Oceano\\s*+Indiano|Ora\\s*+del\\s*+Turkmenistan|Ora\\s*+del\\s*+Venezuela|Ora\\s*+dell'Afghanistan|Ora\\s*+dell'Africa\\s*+centrale|Ora\\s*+dell'Africa\\s*+occidentale|Ora\\s*+dell'Africa\\s*+orientale|Ora\\s*+dell'Argentina|Ora\\s*+dell'Armenia|Ora\\s*+dell'Azerbaigian|Ora\\s*+dell'Ecuador|Ora\\s*+dell'Europa\\s*+centrale|Ora\\s*+dell'Europa\\s*+occidentale|Ora\\s*+dell'Europa\\s*+orientale|Ora\\s*+dell'Indocina|Ora\\s*+dell'Indonesia\\s*+centrale|Ora\\s*+dell'Indonesia\\s*+occidentale|Ora\\s*+dell'Indonesia\\s*+orientale|Ora\\s*+dell'Isola\\s*+Christmas|Ora\\s*+dell'Isola\\s*+della\\s*+Fenice|Ora\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+dell'Uruguay|Ora\\s*+dell'Uzbekistan|Ora\\s*+della\\s*+Birmania/Myanmar|Ora\\s*+della\\s*+Bolivia|Ora\\s*+della\\s*+Colombia|Ora\\s*+della\\s*+Georgia|Ora\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+della\\s*+Guyana|Ora\\s*+della\\s*+Guyana\\s*+Francese|Ora\\s*+della\\s*+Malaysia|Ora\\s*+della\\s*+Nuova\\s*+Caledonia|Ora\\s*+delle\\s*+Azzorre|Ora\\s*+delle\\s*+Falkland|Ora\\s*+delle\\s*+Galapagos|Ora\\s*+delle\\s*+Isole\\s*+Cocos|Ora\\s*+delle\\s*+Isole\\s*+Cook|Ora\\s*+delle\\s*+Isole\\s*+Gilbert|Ora\\s*+delle\\s*+Isole\\s*+Marchesi|Ora\\s*+delle\\s*+Isole\\s*+Marshall|Ora\\s*+delle\\s*+Isole\\s*+Salomone|Ora\\s*+delle\\s*+Line\\s*+Islands|Ora\\s*+delle\\s*+Maldive|Ora\\s*+delle\\s*+Seychelles|Ora\\s*+delle\\s*+Terre\\s*+Australi\\s*+e\\s*+Antartiche\\s*+Francesi|Ora\\s*+di\\s*+Acre|Ora\\s*+di\\s*+Alma-Ata|Ora\\s*+di\\s*+Anadyr|Ora\\s*+di\\s*+Aqtau|Ora\\s*+di\\s*+Aqtobe|Ora\\s*+di\\s*+Capo\\s*+Verde|Ora\\s*+di\\s*+Chatham\\s*+standard|Ora\\s*+di\\s*+Choibalsan|Ora\\s*+di\\s*+Chuuk|Ora\\s*+di\\s*+Davis|Ora\\s*+di\\s*+Dumont-d'Urville|Ora\\s*+di\\s*+Ekaterinburg|Ora\\s*+di\\s*+Fernando\\s*+de\\s*+Noronha|Ora\\s*+di\\s*+Figi|Ora\\s*+di\\s*+Gambier|Ora\\s*+di\\s*+Hong\\s*+Kong|Ora\\s*+di\\s*+Hovd|Ora\\s*+di\\s*+Irkutsk|Ora\\s*+di\\s*+Jakutsk|Ora\\s*+di\\s*+Kosrae|Ora\\s*+di\\s*+Krasnojarsk|Ora\\s*+di\\s*+Magadan|Ora\\s*+di\\s*+Mauritius|Ora\\s*+di\\s*+Mawson|Ora\\s*+di\\s*+Nauru|Ora\\s*+di\\s*+Niue|Ora\\s*+di\\s*+Norfolk|Ora\\s*+di\\s*+Novosibirsk|Ora\\s*+di\\s*+Omsk|Ora\\s*+di\\s*+Oral|Ora\\s*+di\\s*+Palau|Ora\\s*+di\\s*+Papua\\s*+Nuova\\s*+Guinea|Ora\\s*+di\\s*+Petropavlovsk-Kamchatski|Ora\\s*+di\\s*+Pohnpei|Ora\\s*+di\\s*+Qyzylorda|Ora\\s*+di\\s*+Reunion|Ora\\s*+di\\s*+Rothera|Ora\\s*+di\\s*+Sakhalin|Ora\\s*+di\\s*+Samara|Ora\\s*+di\\s*+Samoa|Ora\\s*+di\\s*+Singapore|Ora\\s*+di\\s*+Suriname|Ora\\s*+di\\s*+Syowa|Ora\\s*+di\\s*+Tahiti|Ora\\s*+di\\s*+Timor\\s*+Leste|Ora\\s*+di\\s*+Tokelau|Ora\\s*+di\\s*+Tonga|Ora\\s*+di\\s*+Tuvalu|Ora\\s*+di\\s*+Ulaanbaatar|Ora\\s*+di\\s*+Ust-Nera|Ora\\s*+di\\s*+Vanuatu|Ora\\s*+di\\s*+Vladivostok|Ora\\s*+di\\s*+Vostok|Ora\\s*+di\\s*+Wake|Ora\\s*+di\\s*+Wallis\\s*+e\\s*+Futuna|Ora\\s*+estiva\\s*+britannica|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+del\\s*+Cile|Ora\\s*+estiva\\s*+del\\s*+Paraguay|Ora\\s*+estiva\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+dell'Europa\\s*+centrale|Ora\\s*+estiva\\s*+dell'Europa\\s*+occidentale|Ora\\s*+estiva\\s*+dell'Europa\\s*+orientale|Ora\\s*+estiva\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+estiva\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+estiva\\s*+delle\\s*+Azzorre|Ora\\s*+estiva\\s*+di\\s*+Figi|Ora\\s*+estiva\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+estiva\\s*+di\\s*+Norfolk|Ora\\s*+estiva\\s*+di\\s*+Samoa|Ora\\s*+estiva\\s*+irlandese|Ora\\s*+estiva\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+estiva\\s*+orientale\\s*+\\(Victoria\\)|Ora\\s*+legale\\s*+Cuba|Ora\\s*+legale\\s*+dell'Alaska|Ora\\s*+legale\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+legale\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+legale\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+legale\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+legale\\s*+di\\s*+Chatham|Ora\\s*+legale\\s*+di\\s*+Israele|Ora\\s*+legale\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+legale\\s*+di\\s*+Terranova|Ora\\s*+legale\\s*+Iran|Ora\\s*+legale\\s*+USA\\s*+centrale|Ora\\s*+legale\\s*+USA\\s*+occidentale|Ora\\s*+legale\\s*+USA\\s*+orientale|Ora\\s*+media\\s*+del\\s*+Ghana|Ora\\s*+media\\s*+di\\s*+Greenwich|Ora\\s*+solare\\s*+Cuba|Ora\\s*+solare\\s*+del\\s*+Giappone|Ora\\s*+solare\\s*+del\\s*+golfo|Ora\\s*+solare\\s*+del\\s*+Sudafrica|Ora\\s*+solare\\s*+dell'Alaska|Ora\\s*+solare\\s*+dell'Amazzonia|Ora\\s*+solare\\s*+dell'Arabia|Ora\\s*+solare\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+solare\\s*+dell'India|Ora\\s*+solare\\s*+della\\s*+Cina|Ora\\s*+solare\\s*+della\\s*+Corea|Ora\\s*+solare\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+solare\\s*+della\\s*+Georgia\\s*+Australe|Ora\\s*+solare\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+solare\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+solare\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+solare\\s*+di\\s*+Terranova|Ora\\s*+solare\\s*+Iran|Ora\\s*+solare\\s*+USA\\s*+centrale|Ora\\s*+solare\\s*+USA\\s*+occidentale|Ora\\s*+solare\\s*+USA\\s*+orientale|Ora\\s*+standard\\s*+Australia\\s*+centro-occidentale|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Territori\\s*+del\\s*+Nord\\)|Ora\\s*+standard\\s*+dell'Australia\\s*+occidentale|Ora\\s*+standard\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+di\\s*+Chamorro|Ora\\s*+standard\\s*+di\\s*+Israele|Ora\\s*+standard\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+standard\\s*+di\\s*+Mosca|Ora\\s*+standard\\s*+di\\s*+Pitcairn|Ora\\s*+standard\\s*+di\\s*+Samoa|Ora\\s*+standard\\s*+orientale\\s*+\\(Queensland\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|Tempo\\s*+universale\\s*+coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|Ora\\s*+del\\s*+Bangladesh|Ora\\s*+del\\s*+Bhutan|Ora\\s*+del\\s*+Brasile|Ora\\s*+del\\s*+Brunei|Ora\\s*+del\\s*+Cile|Ora\\s*+del\\s*+Kirghizistan|Ora\\s*+del\\s*+Nepal|Ora\\s*+del\\s*+Pakistan|Ora\\s*+del\\s*+Paraguay|Ora\\s*+del\\s*+Per\u00F9|Ora\\s*+del\\s*+Tagikistan|Ora\\s*+del\\s*+Terr\\.\\s*+Britannico\\s*+dell'Oceano\\s*+Indiano|Ora\\s*+del\\s*+Turkmenistan|Ora\\s*+del\\s*+Venezuela|Ora\\s*+dell'Afghanistan|Ora\\s*+dell'Africa\\s*+centrale|Ora\\s*+dell'Africa\\s*+occidentale|Ora\\s*+dell'Africa\\s*+orientale|Ora\\s*+dell'Argentina|Ora\\s*+dell'Armenia|Ora\\s*+dell'Azerbaigian|Ora\\s*+dell'Ecuador|Ora\\s*+dell'Europa\\s*+centrale|Ora\\s*+dell'Europa\\s*+occidentale|Ora\\s*+dell'Europa\\s*+orientale|Ora\\s*+dell'Indocina|Ora\\s*+dell'Indonesia\\s*+centrale|Ora\\s*+dell'Indonesia\\s*+occidentale|Ora\\s*+dell'Indonesia\\s*+orientale|Ora\\s*+dell'Isola\\s*+Christmas|Ora\\s*+dell'Isola\\s*+della\\s*+Fenice|Ora\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+dell'Uruguay|Ora\\s*+dell'Uzbekistan|Ora\\s*+della\\s*+Birmania/Myanmar|Ora\\s*+della\\s*+Bolivia|Ora\\s*+della\\s*+Colombia|Ora\\s*+della\\s*+Georgia|Ora\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+della\\s*+Guyana|Ora\\s*+della\\s*+Guyana\\s*+Francese|Ora\\s*+della\\s*+Malaysia|Ora\\s*+della\\s*+Nuova\\s*+Caledonia|Ora\\s*+delle\\s*+Azzorre|Ora\\s*+delle\\s*+Falkland|Ora\\s*+delle\\s*+Galapagos|Ora\\s*+delle\\s*+Isole\\s*+Cocos|Ora\\s*+delle\\s*+Isole\\s*+Cook|Ora\\s*+delle\\s*+Isole\\s*+Gilbert|Ora\\s*+delle\\s*+Isole\\s*+Marchesi|Ora\\s*+delle\\s*+Isole\\s*+Marshall|Ora\\s*+delle\\s*+Isole\\s*+Salomone|Ora\\s*+delle\\s*+Line\\s*+Islands|Ora\\s*+delle\\s*+Maldive|Ora\\s*+delle\\s*+Seychelles|Ora\\s*+delle\\s*+Terre\\s*+Australi\\s*+e\\s*+Antartiche\\s*+Francesi|Ora\\s*+di\\s*+Acre|Ora\\s*+di\\s*+Alma-Ata|Ora\\s*+di\\s*+Anadyr|Ora\\s*+di\\s*+Aqtau|Ora\\s*+di\\s*+Aqtobe|Ora\\s*+di\\s*+Capo\\s*+Verde|Ora\\s*+di\\s*+Chatham\\s*+standard|Ora\\s*+di\\s*+Choibalsan|Ora\\s*+di\\s*+Chuuk|Ora\\s*+di\\s*+Davis|Ora\\s*+di\\s*+Dumont-d'Urville|Ora\\s*+di\\s*+Ekaterinburg|Ora\\s*+di\\s*+Fernando\\s*+de\\s*+Noronha|Ora\\s*+di\\s*+Figi|Ora\\s*+di\\s*+Gambier|Ora\\s*+di\\s*+Hong\\s*+Kong|Ora\\s*+di\\s*+Hovd|Ora\\s*+di\\s*+Irkutsk|Ora\\s*+di\\s*+Jakutsk|Ora\\s*+di\\s*+Kosrae|Ora\\s*+di\\s*+Krasnojarsk|Ora\\s*+di\\s*+Magadan|Ora\\s*+di\\s*+Mauritius|Ora\\s*+di\\s*+Mawson|Ora\\s*+di\\s*+Nauru|Ora\\s*+di\\s*+Niue|Ora\\s*+di\\s*+Norfolk|Ora\\s*+di\\s*+Novosibirsk|Ora\\s*+di\\s*+Omsk|Ora\\s*+di\\s*+Oral|Ora\\s*+di\\s*+Palau|Ora\\s*+di\\s*+Papua\\s*+Nuova\\s*+Guinea|Ora\\s*+di\\s*+Petropavlovsk-Kamchatski|Ora\\s*+di\\s*+Pohnpei|Ora\\s*+di\\s*+Qyzylorda|Ora\\s*+di\\s*+Reunion|Ora\\s*+di\\s*+Rothera|Ora\\s*+di\\s*+Sakhalin|Ora\\s*+di\\s*+Samara|Ora\\s*+di\\s*+Samoa|Ora\\s*+di\\s*+Singapore|Ora\\s*+di\\s*+Suriname|Ora\\s*+di\\s*+Syowa|Ora\\s*+di\\s*+Tahiti|Ora\\s*+di\\s*+Timor\\s*+Leste|Ora\\s*+di\\s*+Tokelau|Ora\\s*+di\\s*+Tonga|Ora\\s*+di\\s*+Tuvalu|Ora\\s*+di\\s*+Ulaanbaatar|Ora\\s*+di\\s*+Ust-Nera|Ora\\s*+di\\s*+Vanuatu|Ora\\s*+di\\s*+Vladivostok|Ora\\s*+di\\s*+Vostok|Ora\\s*+di\\s*+Wake|Ora\\s*+di\\s*+Wallis\\s*+e\\s*+Futuna|Ora\\s*+estiva\\s*+britannica|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+del\\s*+Cile|Ora\\s*+estiva\\s*+del\\s*+Paraguay|Ora\\s*+estiva\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+estiva\\s*+dell'Europa\\s*+centrale|Ora\\s*+estiva\\s*+dell'Europa\\s*+occidentale|Ora\\s*+estiva\\s*+dell'Europa\\s*+orientale|Ora\\s*+estiva\\s*+dell'Isola\\s*+di\\s*+Pasqua|Ora\\s*+estiva\\s*+dell'Isola\\s*+Macquarie|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+occidentale|Ora\\s*+estiva\\s*+della\\s*+Groenlandia\\s*+orientale|Ora\\s*+estiva\\s*+delle\\s*+Azzorre|Ora\\s*+estiva\\s*+di\\s*+Figi|Ora\\s*+estiva\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+estiva\\s*+di\\s*+Norfolk|Ora\\s*+estiva\\s*+di\\s*+Samoa|Ora\\s*+estiva\\s*+irlandese|Ora\\s*+estiva\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+estiva\\s*+orientale\\s*+\\(Victoria\\)|Ora\\s*+legale\\s*+Cuba|Ora\\s*+legale\\s*+dell'Alaska|Ora\\s*+legale\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+legale\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+legale\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+legale\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+legale\\s*+di\\s*+Chatham|Ora\\s*+legale\\s*+di\\s*+Israele|Ora\\s*+legale\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+legale\\s*+di\\s*+Terranova|Ora\\s*+legale\\s*+Iran|Ora\\s*+legale\\s*+USA\\s*+centrale|Ora\\s*+legale\\s*+USA\\s*+occidentale|Ora\\s*+legale\\s*+USA\\s*+orientale|Ora\\s*+media\\s*+del\\s*+Ghana|Ora\\s*+media\\s*+di\\s*+Greenwich|Ora\\s*+solare\\s*+Cuba|Ora\\s*+solare\\s*+del\\s*+Giappone|Ora\\s*+solare\\s*+del\\s*+golfo|Ora\\s*+solare\\s*+del\\s*+Sudafrica|Ora\\s*+solare\\s*+dell'Alaska|Ora\\s*+solare\\s*+dell'Amazzonia|Ora\\s*+solare\\s*+dell'Arabia|Ora\\s*+solare\\s*+dell'Atlantico\\s*+occidentale|Ora\\s*+solare\\s*+dell'India|Ora\\s*+solare\\s*+della\\s*+Cina|Ora\\s*+solare\\s*+della\\s*+Corea|Ora\\s*+solare\\s*+della\\s*+costa\\s*+occidentale\\s*+USA|Ora\\s*+solare\\s*+della\\s*+Georgia\\s*+Australe|Ora\\s*+solare\\s*+della\\s*+Nuova\\s*+Zelanda|Ora\\s*+solare\\s*+delle\\s*+Isole\\s*+Hawaii|Ora\\s*+solare\\s*+di\\s*+Saint-Pierre\\s*+e\\s*+Miquelon|Ora\\s*+solare\\s*+di\\s*+Terranova|Ora\\s*+solare\\s*+Iran|Ora\\s*+solare\\s*+USA\\s*+centrale|Ora\\s*+solare\\s*+USA\\s*+occidentale|Ora\\s*+solare\\s*+USA\\s*+orientale|Ora\\s*+standard\\s*+Australia\\s*+centro-occidentale|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Australia\\s*+del\\s*+Sud/Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+centrale\\s*+\\(Territori\\s*+del\\s*+Nord\\)|Ora\\s*+standard\\s*+dell'Australia\\s*+occidentale|Ora\\s*+standard\\s*+dell'Australia\\s*+orientale\\s*+\\(Nuovo\\s*+Galles\\s*+del\\s*+Sud\\)|Ora\\s*+standard\\s*+di\\s*+Chamorro|Ora\\s*+standard\\s*+di\\s*+Israele|Ora\\s*+standard\\s*+di\\s*+Lord\\s*+Howe|Ora\\s*+standard\\s*+di\\s*+Mosca|Ora\\s*+standard\\s*+di\\s*+Pitcairn|Ora\\s*+standard\\s*+di\\s*+Samoa|Ora\\s*+standard\\s*+orientale\\s*+\\(Queensland\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Tasmania\\)|Ora\\s*+standard\\s*+orientale\\s*+\\(Victoria\\)|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|Tempo\\s*+universale\\s*+coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)\\+\\|'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+\\|\\[\\^
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("zF(pt,KVq_*,i;l", timeZone0, locale0);
//      try { 
        fastDateParser0.parse("zF(pt,KVq_*,i;l");
//        fail("Expecting exception: ParseException");
      
//      } catch(ParseException e) {
//         //
//         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
//         // Unparseable date: \"zF(pt,KVq_*,i;l\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville\\s*+Standard\\s*+Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay\\s*+Standard\\s*+Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines\\s*+Standard\\s*+Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk\\s*+Time|SRET|SRT|SST|SYOT|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30A2\u30AF\u30BF\u30A6\u6642\u9593|\u30A2\u30AF\u30C8\u30D9\u6642\u9593|\u30A2\u30AF\u30EC\u6642\u9593|\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u590F\u6642\u9593|\u30A2\u30BE\u30EC\u30B9\u6642\u9593|\u30A2\u30CA\u30C9\u30A5\u30A4\u30EA\u6642\u9593|\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30A2\u30DE\u30BE\u30F3\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u590F\u6642\u9593|\u30A2\u30E9\u30B9\u30AB\u6A19\u6E96\u6642|\u30A2\u30E9\u30D3\u30A2\u6A19\u6E96\u6642|\u30A2\u30EB\u30BC\u30F3\u30C1\u30F3\u6642\u9593|\u30A2\u30EB\u30DE\u30A2\u30BF\u6642\u9593|\u30A2\u30EB\u30E1\u30CB\u30A2\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u590F\u6642\u9593|\u30A4\u30B9\u30E9\u30A8\u30EB\u6A19\u6E96\u6642|\u30A4\u30E9\u30F3\u590F\u6642\u9593|\u30A4\u30E9\u30F3\u6A19\u6E96\u6642|\u30A4\u30EB\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30A4\u30F3\u30C9\u30B7\u30CA\u6642\u9593|\u30A4\u30F3\u30C9\u6A19\u6E96\u6642|\u30A4\u30F3\u30C9\u6D0B\u5730\u57DF\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u590F\u6642\u9593|\u30A4\u30FC\u30B9\u30BF\u30FC\u5CF6\u6642\u9593|\u30A6\u30A7\u30FC\u30AF\u6642\u9593|\u30A6\u30B9\u30C1\u30CD\u30E9\u6642\u9593|\u30A6\u30BA\u30D9\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30A6\u30E9\u30B8\u30AA\u30B9\u30C8\u30AF\u6642\u9593|\u30A6\u30E9\u30FC\u30F3\u30D0\u30FC\u30C8\u30EB\u6642\u9593|\u30A6\u30EB\u30B0\u30A2\u30A4\u6642\u9593|\u30A8\u30AB\u30C6\u30EA\u30F3\u30D6\u30EB\u30B0\u6642\u9593|\u30A8\u30AF\u30A2\u30C9\u30EB\u6642\u9593|\u30AA\u30E0\u30B9\u30AF\u6642\u9593|\u30AA\u30E9\u30EB\u6642\u9593|\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7\u6642\u9593|\u30AC\u30A4\u30A2\u30CA\u6642\u9593|\u30AC\u30E9\u30D1\u30B4\u30B9\u6642\u9593|\u30AC\u30F3\u30D3\u30A2\u6642\u9593|\u30AC\u30FC\u30CA\u6A19\u6E96\u6642|\u30AD\u30B8\u30EB\u30AA\u30EB\u30C0\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u590F\u6642\u9593|\u30AD\u30E5\u30FC\u30D0\u6A19\u6E96\u6642|\u30AD\u30EB\u30AE\u30B9\u30BF\u30F3\u6642\u9593|\u30AE\u30EB\u30D0\u30FC\u30C8\u8AF8\u5CF6\u6642\u9593|\u30AF\u30C3\u30AF\u8AF8\u5CF6\u6642\u9593|\u30AF\u30E9\u30B9\u30CE\u30E4\u30EB\u30B9\u30AF\u6642\u9593|\u30AF\u30EA\u30B9\u30DE\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B0\u30A2\u30E0\u6A19\u6E96\u6642|\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642|\u30B0\u30EB\u30B8\u30A2\u6642\u9593|\u30B3\u30B3\u30B9\u8AF8\u5CF6\u6642\u9593|\u30B3\u30B9\u30E9\u30A8\u6642\u9593|\u30B3\u30ED\u30F3\u30D3\u30A2\u6642\u9593|\u30B5\u30DE\u30E9\u6642\u9593|\u30B5\u30E2\u30A2\u6A19\u6E96\u6642|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u590F\u6642\u9593|\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u30FB\u30DF\u30AF\u30ED\u30F3\u8AF8\u5CF6\u6A19\u6E96\u6642|\u30B7\u30F3\u30AC\u30DD\u30FC\u30EB\u6642\u9593|\u30B9\u30EA\u30CA\u30E0\u6642\u9593|\u30BB\u30A4\u30B7\u30A7\u30EB\u6642\u9593|\u30BD\u30ED\u30E2\u30F3\u8AF8\u5CF6\u6642\u9593|\u30BF\u30B8\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30BF\u30D2\u30C1\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u590F\u6642\u9593|\u30C1\u30E3\u30BF\u30E0\u6A19\u6E96\u6642|\u30C1\u30E5\u30FC\u30AF\u6642\u9593|\u30C1\u30E7\u30A4\u30D0\u30EB\u30B5\u30F3\u6642\u9593|\u30C1\u30EA\u590F\u6642\u9593|\u30C1\u30EA\u6642\u9593|\u30C4\u30D0\u30EB\u6642\u9593|\u30C7\u30A4\u30D3\u30B9\u6642\u9593|\u30C7\u30E5\u30E2\u30F3\u30C7\u30E5\u30EB\u30F4\u30A3\u30EB\u6642\u9593|\u30C8\u30B1\u30E9\u30A6\u8AF8\u5CF6\u6642\u9593|\u30C8\u30EB\u30AF\u30E1\u30CB\u30B9\u30BF\u30F3\u6642\u9593|\u30C8\u30F3\u30AC\u6642\u9593|\u30CA\u30A6\u30EB\u6642\u9593|\u30CB\u30A6\u30A8\u5CF6\u6642\u9593|\u30CB\u30E5\u30FC\u30AB\u30EC\u30C9\u30CB\u30A2\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u30CB\u30E5\u30FC\u30D5\u30A1\u30F3\u30C9\u30E9\u30F3\u30C9\u6A19\u6E96\u6642|\u30CD\u30D1\u30FC\u30EB\u6642\u9593|\u30CE\u30DC\u30B7\u30D3\u30EB\u30B9\u30AF\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u590F\u6642\u9593|\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u6642\u9593|\u30CF\u30EF\u30A4\u590F\u6642\u9593|\u30CF\u30EF\u30A4\u6A19\u6E96\u6642|\u30D0\u30CC\u30A2\u30C4\u6642\u9593|\u30D0\u30F3\u30B0\u30E9\u30C7\u30B7\u30E5\u6642\u9593|\u30D1\u30AD\u30B9\u30BF\u30F3\u6642\u9593|\u30D1\u30D7\u30A2\u30CB\u30E5\u30FC\u30AE\u30CB\u30A2\u6642\u9593|\u30D1\u30E9\u30AA\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u590F\u6642\u9593|\u30D1\u30E9\u30B0\u30A2\u30A4\u6642\u9593|\u30D4\u30C8\u30B1\u30EB\u30F3\u5CF6\u6A19\u6E96\u6642|\u30D5\u30A3\u30B8\u30FC\u590F\u6642\u9593|\u30D5\u30A3\u30B8\u30FC\u6642\u9593|\u30D5\u30A7\u30CB\u30C3\u30AF\u30B9\u8AF8\u5CF6\u6642\u9593|\u30D5\u30A7\u30EB\u30CA\u30F3\u30C9\u30FB\u30C7\u30FB\u30CE\u30ED\u30FC\u30CB\u30E3\u6642\u9593|\u30D5\u30A9\u30FC\u30AF\u30E9\u30F3\u30C9\u8AF8\u5CF6\u6642\u9593|\u30D6\u30E9\u30B8\u30EB\u6642\u9593|\u30D6\u30EB\u30CD\u30A4\u6642\u9593|\u30D6\u30FC\u30BF\u30F3\u6642\u9593|\u30D9\u30CD\u30BA\u30A8\u30E9\u6642\u9593|\u30DA\u30C8\u30ED\u30D1\u30D6\u30ED\u30D5\u30B9\u30AF\u30AB\u30E0\u30C1\u30E3\u30C4\u30AD\u30FC\u6642\u9593|\u30DA\u30EB\u30FC\u6642\u9593|\u30DB\u30D6\u30C9\u6642\u9593|\u30DC\u30B9\u30C8\u30FC\u30AF\u57FA\u5730\u6642\u9593|\u30DC\u30EA\u30D3\u30A2\u6642\u9593|\u30DD\u30F3\u30DA\u30A4\u6642\u9593|\u30DE\u30AC\u30C0\u30F3\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u590F\u6642\u9593|\u30DE\u30C3\u30B3\u30FC\u30EA\u30FC\u5CF6\u6642\u9593|\u30DE\u30EB\u30B1\u30B5\u30B9\u6642\u9593|\u30DE\u30EC\u30FC\u30B7\u30A2\u6642\u9593|\u30DE\u30FC\u30B7\u30E3\u30EB\u5CF6\u6642\u9593|\u30DF\u30E3\u30F3\u30DE\u30FC\u6642\u9593|\u30E2\u30B9\u30AF\u30EF\u6A19\u6E96\u6642|\u30E2\u30EB\u30B8\u30D6\u6642\u9593|\u30E2\u30FC\u30BD\u30F3\u6642\u9593|\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9\u6642\u9593|\u30E4\u30AF\u30FC\u30C4\u30AF\u6642\u9593|\u30E9\u30A4\u30F3\u8AF8\u5CF6\u6642\u9593|\u30EC\u30E6\u30CB\u30AA\u30F3\u6642\u9593|\u30ED\u30BC\u30E9\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u590F\u6642\u9593|\u30ED\u30FC\u30C9\u30CF\u30A6\u5CF6\u6A19\u6E96\u6642|\u30EF\u30EA\u30B9\u53CA\u3073\u30D5\u30C4\u30CA\u6642\u9593|\u4E2D\u56FD\u6A19\u6E96\u6642|\u4E2D\u592E\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u4E2D\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u4E2D\u90E8\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u590F\u6642\u9593\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4E2D\u90E8\u6A19\u6E96\u6642|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u30CE\u30FC\u30B6\u30F3\u30C6\u30EA\u30C8\u30EA\u30FC\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u4E2D\u90E8\u6A19\u6E96\u6642\\(\u5357\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2/\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u4ECF\u5357\u65B9\u9818\u304A\u3088\u3073\u5357\u6975\u6642\u9593|\u4ECF\u9818\u30AE\u30A2\u30CA\u6642\u9593|\u5354\u5B9A\u4E16\u754C\u6642|\u5357\u30A2\u30D5\u30EA\u30AB\u6A19\u6E96\u6642|\u5357\u30B8\u30E7\u30FC\u30B8\u30A2\u5CF6\u6A19\u6E96\u6642|\u5927\u897F\u6D0B\u590F\u6642\u9593|\u5927\u897F\u6D0B\u6A19\u6E96\u6642|\u592A\u5E73\u6D0B\u590F\u6642\u9593|\u592A\u5E73\u6D0B\u6A19\u6E96\u6642|\u5C71\u5730\u590F\u6642\u9593|\u5C71\u5730\u6A19\u6E96\u6642|\u65E5\u672C\u6A19\u6E96\u6642|\u662D\u548C\u57FA\u5730\u6642\u9593|\u6771\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u6771\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u6771\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u6771\u30C6\u30A3\u30E2\u30FC\u30EB\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u6771\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593|\u6771\u90E8\u590F\u6642\u9593\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u590F\u6642\u9593\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30AF\u30A4\u30FC\u30F3\u30BA\u30E9\u30F3\u30C9\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30BF\u30B9\u30DE\u30CB\u30A2\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30CB\u30E5\u30FC\u30B5\u30A6\u30B9\u30A6\u30A7\u30FC\u30EB\u30BA\\)|\u6771\u90E8\u6A19\u6E96\u6642\\(\u30D3\u30AF\u30C8\u30EA\u30A2\\)|\u6A3A\u592A\u6642\u9593|\u6E7E\u5CB8\u6A19\u6E96\u6642|\u82F1\u56FD\u590F\u6642\u9593|\u897F\u30A2\u30D5\u30EA\u30AB\u6642\u9593|\u897F\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u590F\u6642\u9593|\u897F\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u590F\u6642\u9593|\u897F\u30B5\u30E2\u30A2\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u590F\u6642\u9593|\u897F\u30E8\u30FC\u30ED\u30C3\u30D1\u6642\u9593|\u897F\u90E8\u6A19\u6E96\u6642\\(\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\\)|\u97D3\u56FD\u6A19\u6E96\u6642|\u9999\u6E2F\u6642\u9593)(\\p{IsNd}++)\\(
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("GMTSST", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTSST", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("{A<|W", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser(";h&xDv7g", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(";h&xDv7g", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(";h&xDv7g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(";h&drxDv7g", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
//      try {
        fastDateParser0 = new FastDateParser("c", timeZone0, locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid pattern
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("@J2xJygDV1ZZtR%nnv", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("@", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "W\"Go3}H5Yva0T~");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("W\"Go3}H5Yva0T~", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";h&xDv7g", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals(";h&xDv7g", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("H8)DqSi.,>9");
      FastDateParser fastDateParser0 = new FastDateParser("H8)DqSi.,>9", timeZone0, locale0);
      // Undeclared exception!
//      try { 
        fastDateParser0.parseObject("H8)DqSi.,>9", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(";h&xDv7g", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[;h&xDv7g,fr_FR,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.forLanguageTag("iW/_acaKIDScZSqH6");
      FastDateParser fastDateParser0 = new FastDateParser("[=Q{5^~Xk", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("(_1,1^~_Yf~4\"} u`", "Z", "Y");
      FastDateParser fastDateParser0 = new FastDateParser("DI3fP\"", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("3");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("hMZ2oZ", timeZone0, locale0);
      assertEquals("hMZ2oZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("*ztu>>xX<N", timeZone0, locale0);
      assertEquals("*ztu>>xX<N", fastDateParser0.getPattern());
  }
}
