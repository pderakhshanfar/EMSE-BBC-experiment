/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 23:18:30 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
//      try { 
        CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat4);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2841);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.println(pipedWriter0);
      CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, (-3189L), (-636L));
      cSVParser0.nextRecord();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      String string0 = "format";
      CSVParser.parse("format", cSVFormat0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      Character character0 = new Character('Y');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVParser.parse(path0, charset0, cSVFormat2);
//      try { 
        MockURL.URL("format", "format", "format");
//        fail("Expecting exception: MalformedURLException");
      
//      } catch(MalformedURLException e) {
//         //
//         // unknown protocol: format
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2841);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, (-3135L), (-3135L));
      cSVParser0.nextRecord();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      cSVFormat0.println(pipedWriter0);
      cSVFormat1.withTrim();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 1, 0L);
      cSVParser0.nextRecord();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2872);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.println(pipedWriter0);
      cSVFormat2.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      cSVFormat1.withAllowMissingColumnNames(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 2872, 2872);
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      cSVParser0.close();
      cSVParser0.getFirstEndOfLine();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Character character0 = Character.valueOf('{');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      StringReader stringReader0 = new StringReader("~JnS)gizwx");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
      cSVParser0.getRecords();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("P9akX", cSVFormat0);
      PipedReader pipedReader0 = new PipedReader(10);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2872);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withIgnoreHeaderCase();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreHeaderCase();
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 2872, 2872);
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser1.nextRecord();
      cSVParser1.iterator();
      cSVParser0.iterator();
      cSVParser1.getCurrentLineNumber();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2872);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, (-2466L), (-2466L));
      // Undeclared exception!
//      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("^:.q\":L~J6pDdg", cSVFormat1);
      cSVParser0.nextRecord();
      MockFile mockFile0 = new MockFile("^:.q\":L~J6pDdg");
      mockFile0.toURL();
      // Undeclared exception!
//      try { 
        Charset.forName("^:.q\":L~J6pDdg");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // ^:.q\":L~J6pDdg
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2872);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.withFirstRecordAsHeader();
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, (-2575L));
      CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.iterator();
      assertEquals((-2575L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u");
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2872);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 0L, (-1351L));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat1.printer();
      CSVParser.parse("K\"", cSVFormat2);
      CSVParser.parse("K\"", cSVFormat2);
      cSVFormat2.withSkipHeaderRecord();
      PipedReader pipedReader0 = new PipedReader();
//      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2837);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 648L, 0L);
      MockFile mockFile0 = new MockFile((File) null, "reading next record:");
      mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, charset0, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")u7~");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withRecordSeparator('G');
      StringReader stringReader1 = new StringReader("5Bdp%wE{c~0(QmS6CO9");
      CSVParser cSVParser0 = new CSVParser(stringReader1, cSVFormat0, 2872L, 2872L);
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(2872L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")u7~");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withSkipHeaderRecord();
      CSVParser.parse(")", cSVFormat1);
//      try { 
        CSVParser.parse("The header contains a duplicate name: \"", cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // EOF whilst processing escape sequence
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("No quotes mode set bt no escape character is set", cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("The escape character cannot be a line break");
      CSVParser cSVParser1 = CSVParser.parse("No quotes mode set bt no escape character is set", cSVFormat2);
      cSVParser1.nextRecord();
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")u7~");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withRecordSeparator('G');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      MockFile mockFile0 = new MockFile(" z1|yk\"ZYDq");
      Path path0 = mockFile0.toPath();
      Charset charset0 = null;
      // Undeclared exception!
//      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.file.Files", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(")");
      // Undeclared exception!
//      try { 
        CSVParser.parse((String) null, cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'string' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      cSVFormat1.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "!;*";
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 358L, 257L);
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("@q[?*[XsBG##pSO{", cSVFormat0);
      cSVParser0.isClosed();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      CSVParser cSVParser1 = CSVParser.parse(")}v ", cSVFormat0);
      cSVParser1.nextRecord();
      assertEquals(1L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      // Undeclared exception!
//      try { 
        CSVParser.parse((Reader) null, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\" in ";
      cSVFormat1.withIgnoreHeaderCase(true);
      stringArray0[1] = "Unexpected Quote value: ";
      cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      cSVFormat2.withRecordSeparator("!;*");
      CSVParser cSVParser1 = CSVParser.parse("N", cSVFormat2);
      cSVParser1.getHeaderMap();
      cSVParser1.getRecords();
      assertEquals(1L, cSVParser1.getRecordNumber());
      
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Charset.defaultCharset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      cSVFormat0.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character.valueOf('h');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('c');
      cSVFormat3.withRecordSeparator('{');
      StringReader stringReader0 = new StringReader("=m??![|");
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, 0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R;@/:9hF];D";
      cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.nextRecord();
      CSVParser cSVParser1 = CSVParser.parse("WN:.~Jd{#E~k4hW_", cSVFormat2);
      CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      long long0 = cSVParser1.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVParser.parse("No quotes mode set but no escape character is set", cSVFormat0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'path' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      boolean boolean0 = true;
      cSVFormat0.withSkipHeaderRecord(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) pipedInputStream0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      cSVFormat1.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("WP)tl#YE7,=4k4", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R;@/:9hF];D";
      stringArray0[1] = "!;*";
      stringArray0[2] = "Unexpected Quote value: ";
      cSVFormat2.withIgnoreHeaderCase(false);
      stringArray0[3] = "";
      pipedReader0.skip(0L);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("!;*");
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat4);
      cSVParser1.getRecords();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      MockFile mockFile0 = new MockFile("No quotes mode set but no escape character is set", "~N@/EY");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, 0L);
      cSVParser0.isClosed();
      mockFile0.toPath();
      Path path0 = mockFile0.toPath();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
//        fail("Expecting exception: NoSuchFileException");
      
//      } catch(NoSuchFileException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R;@/:9hF];D";
      stringArray0[1] = "!;*";
      cSVFormat1.withEscape('?');
      stringArray0[2] = "Unexpected Quote value: ";
      stringArray0[3] = "";
      cSVFormat1.withRecordSeparator("");
      Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse("!;*", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = CSVParser.parse("No quotes mode set but no escape character is set", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser.parse("aqUd)21e5EvT%#*g!T", cSVFormat1);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Charset charset0 = Charset.defaultCharset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CSVParser cSVParser0 = CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);
      cSVParser0.isClosed();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat0.withHeader(resultSet0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // IOException reading next record: java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R;@/:9hF];D";
      stringArray0[1] = "!;*";
      stringArray0[2] = "Unexpected Quote value: ";
      cSVFormat2.withIgnoreHeaderCase(false);
      stringArray0[3] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(4, map0.size());
      
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
      
      CSVFormat cSVFormat4 = cSVFormat1.withRecordSeparator("!;*");
      CSVParser cSVParser1 = CSVParser.parse("", cSVFormat4);
      cSVParser1.getRecords();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R;@/:9hF];D";
      stringArray0[1] = "!;*";
      stringArray0[2] = "Unexpected Quote value: ";
      cSVFormat2.withIgnoreHeaderCase(false);
      stringArray0[3] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      cSVFormat1.withRecordSeparator("");
      Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse("Unexpected Quote value: ", cSVFormat1);
      cSVParser1.isClosed();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      cSVFormat1.withHeader(resultSet0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // IOException reading next record: java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('h');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('c');
      cSVFormat3.withRecordSeparator('{');
      StringReader stringReader0 = new StringReader("=m??![|");
      cSVFormat3.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      cSVParser0.getRecordNumber();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVParser0.isClosed();
      cSVParser0.close();
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "=m??![|");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.isClosed();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 0L, (-1L));
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      MockFile mockFile0 = new MockFile("/~PROg", "");
      Charset.defaultCharset();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 0L, 0L);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.withTrailingDelimiter();
      PipedReader pipedReader1 = new PipedReader();
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      cSVFormat1.parse(pipedReader0);
      cSVFormat0.parse(pipedReader1);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'url' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVParser.parse("VVP[rSH95", cSVFormat0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("format", "31^", 3, "2M=$rMCbmN%M\"Gk'*o", uRLStreamHandler0);
      File file0 = MockFile.createTempFile("format", "X,");
      CSVParser.parse(file0, charset0, cSVFormat0);
//      try { 
        MockURI.URI("Ahcn8&P4SA(", "", "");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Illegal character in scheme name at index 5: Ahcn8&P4SA(:#
//         //
//         verifyException("java.net.URI$Parser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2488);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('8');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat3.withSystemRecordSeparator();
      CSVParser cSVParser1 = CSVParser.parse("-", cSVFormat0);
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile(":,RDRM_060gDLcH");
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      cSVParser0.iterator();
      cSVParser1.isClosed();
      cSVParser0.getFirstEndOfLine();
      CSVParser cSVParser2 = cSVFormat4.parse(pipedReader0);
      cSVParser2.getCurrentLineNumber();
      cSVParser1.isClosed();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("ce%r3\u0001N", cSVFormat0);
      cSVParser0.iterator();
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat2.withIgnoreHeaderCase(false);
      String string0 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R;@/:9hF];D";
      stringArray0[1] = "";
      stringArray0[2] = "!;*";
      stringArray0[3] = "Unexpected Quote value: ";
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(stringArray0);
      PipedReader pipedReader0 = new PipedReader(2209);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      CSVParser cSVParser1 = cSVFormat2.parse(pipedReader0);
      cSVParser1.getHeaderMap();
      CSVParser cSVParser2 = cSVFormat3.parse(pipedReader0);
      cSVParser2.getRecordNumber();
      cSVFormat1.withRecordSeparator("");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'inputStream' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat2.parse(pipedReader0);
      CSVParser cSVParser0 = cSVFormat2.parse(pipedReader0);
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat.newFormat('z');
      cSVFormat0.withIgnoreEmptyLines(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.printer();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      MockFile mockFile0 = new MockFile("K\"");
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat2, 1L, 1541L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withQuote('A');
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, 0L, (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("')", cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVParser.parse("N", cSVFormat2);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")u7~");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('G');
      CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
      cSVParser0.getRecordNumber();
      cSVParser0.isClosed();
      cSVParser0.close();
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, "No quotes mode set but no escape character is set");
      assertNull(uRL1.getRef());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " reading next record: ");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      cSVFormat1.toString();
      cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("L3[");
      mockFileInputStream0.release();
      Character character0 = new Character('^');
      cSVFormat2.printer();
      Charset.defaultCharset();
      cSVFormat2.withEscape(character0);
      Class<QuoteMode> class0 = QuoteMode.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) mockFileInputStream0, charset0, cSVFormat3);
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
      CSVParser cSVParser0 = CSVParser.parse("VVP[rSH95", cSVFormat3);
      cSVParser0.close();
      CSVParser.parse("VVP[rSH95", cSVFormat0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'inputStream' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = Character.valueOf('h');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('c');
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('{');
      StringReader stringReader0 = new StringReader("=m??![|");
      cSVFormat3.withIgnoreSurroundingSpaces();
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'c';
      stringReader0.read(charArray0);
      CSVParser cSVParser0 = cSVFormat4.parse(stringReader0);
      cSVParser0.getRecordNumber();
      cSVParser0.isClosed();
      cSVParser0.close();
      URL uRL0 = MockURL.getFileExample();
      MockURL.URL(uRL0, "=m??![|");
      // Undeclared exception!
//      try { 
        Charset.forName("ukxBO");
//        fail("Expecting exception: UnsupportedCharsetException");
      
//      } catch(UnsupportedCharsetException e) {
//         //
//         // ukxBO
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R;@/:9hF];D";
      stringArray0[1] = "!;*";
      stringArray0[2] = "Unexpected Quote value: ";
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      stringArray0[3] = "";
      CSVFormat cSVFormat4 = cSVFormat2.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat4);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      MockFile mockFile0 = new MockFile("shZ}", "");
      File file0 = MockFile.createTempFile("$wcCLbl#Sk", (String) null, (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat5 = cSVFormat3.withNullString("+q1s>9");
      cSVFormat5.withTrailingDelimiter(false);
//      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat1);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R;@/:9hF];D";
      stringArray0[1] = "!;*";
      stringArray0[2] = "Unexpected Quote value: ";
      cSVFormat2.withIgnoreHeaderCase(false);
      stringArray0[3] = "";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      cSVFormat1.withRecordSeparator("");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'inputStream' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2488);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Character character0 = new Character('8');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat3);
      cSVFormat3.withSystemRecordSeparator();
      CSVParser.parse("-", cSVFormat0);
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile(":,RDRM_060gDLcH");
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
//      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat1);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('|');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('h');
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(true);
      CSVParser cSVParser0 = CSVParser.parse("j9mdUPJN{iz[|", cSVFormat3);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      File file0 = MockFile.createTempFile("reader", "reader");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "reader";
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      Character character0 = new Character('0');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrailingDelimiter(false);
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.QuoteMode", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
//        fail("Expecting exception: NoSuchFileException");
      
//      } catch(NoSuchFileException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getFirstEndOfLine();
      URL uRL0 = null;
      // Undeclared exception!
//      try { 
        Charset.forName("");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // 
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }
}
