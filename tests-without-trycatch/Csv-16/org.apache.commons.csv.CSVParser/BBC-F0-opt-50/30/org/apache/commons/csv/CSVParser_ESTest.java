/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 23:16:18 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 10);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 10, 10);
      cSVParser0.nextRecord();
      assertEquals(10L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4);
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.println(pipedWriter0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat0.withFirstRecordAsHeader();
      MockFileWriter mockFileWriter0 = new MockFileWriter("Index for header '%s' is %d but CSVRecord only has %d values!");
      cSVFormat1.println(mockFileWriter0);
      StringReader stringReader0 = new StringReader("wO}pb);WB;pM`VB)");
      CSVParser.parse((Reader) stringReader0, cSVFormat2);
      String string0 = "iu?O=CX1~D";
//      try { 
        CSVParser.parse("\" in ", cSVFormat3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser.parse("'", cSVFormat1);
      MockFile mockFile0 = new MockFile("'", "R=}d^ ");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
//      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.file.Files", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      cSVFormat0.withNullString((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNotNull(map0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("ps", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      StringReader stringReader0 = new StringReader(",qZob,9hCYaqmI%;q-");
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0, (-1656L), (-2146L));
      cSVParser1.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withDelimiter('?');
      CSVParser cSVParser0 = CSVParser.parse("ps", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.nextRecord();
      cSVParser0.close();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Charset.defaultCharset();
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 194L, 194L);
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("\u2029", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser1 = CSVParser.parse("Unexpected Quote value: ", cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withSystemRecordSeparator();
      CSVParser cSVParser0 = CSVParser.parse("ps", cSVFormat0);
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withTrailingDelimiter();
      PipedReader pipedReader0 = new PipedReader(1052);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // IOException reading next record: java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments((Object[]) null);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "charset";
      stringArray0[1] = "path";
      stringArray0[2] = "Unexpected Token type: ";
      stringArray0[3] = "jZioP)mkY}@>q}%D{`v";
      stringArray0[4] = "E%qYT58PRYh\"^";
      stringArray0[5] = "\">";
      stringArray0[6] = ", mapping=";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString(".Z3#3`YwA0");
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'inputStream' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('3');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
//      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat1.withAllowMissingColumnNames();
      CSVParser.parse("N", cSVFormat1);
//      try { 
        MockURI.URI("\u2029", "l}pwhv]wY E^Y)N,3|", (String) null, (-2113414186), "l}pwhv]wY E^Y)N,3|", "l}pwhv]wY E^Y)N,3|", "");
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: \u2029:l%7Dpwhv%5DwY%20E%5EY)N,3%7C?l%7Dpwhv]wY%20E%5EY)N,3%7C#
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      cSVFormat2.println(pipedWriter0);
      cSVFormat0.withIgnoreHeaderCase(false);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      cSVFormat2.withTrailingDelimiter();
      cSVFormat0.withIgnoreSurroundingSpaces(false);
      Charset.defaultCharset();
      cSVParser0.close();
      String string0 = cSVParser0.getFirstEndOfLine();
      assertNotNull(string0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "reader");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("reader");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat3;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) uRL1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) cSVFormat3;
      cSVFormat4.withHeaderComments(objectArray0);
//      try { 
        CSVParser.parse(uRL1, charset0, cSVFormat4);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      cSVFormat0.withTrim();
      CSVParser cSVParser0 = CSVParser.parse("0gJ``", cSVFormat0);
      MockFile mockFile0 = new MockFile("0gJ``");
      Class<Locale.Category> class0 = Locale.Category.class;
      cSVFormat0.withHeader(class0);
      cSVFormat0.withTrim();
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser.parse("0gJ``", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      Charset charset0 = Charset.defaultCharset();
      CSVParser.parse("reader", cSVFormat1);
      File file0 = MockFile.createTempFile("charset", (String) null);
      CSVParser.parse(file0, charset0, cSVFormat1);
      StringReader stringReader0 = null;
//      try {
        stringReader0 = new StringReader((String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object object0 = new Object();
      Object object1 = new Object();
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVParser cSVParser0 = CSVParser.parse("charset", cSVFormat1);
      cSVParser0.nextRecord();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = null;
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) pipedInputStream0, (Charset) null, cSVFormat1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      Charset charset0 = Charset.defaultCharset();
      MockFile mockFile0 = new MockFile("G*C");
//      try { 
        CSVParser.parse((File) mockFile0, charset0, cSVFormat1);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrailingDelimiter();
      cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat1.withTrim();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      cSVFormat4.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("99PpC:o'", cSVFormat3);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVParser cSVParser0 = CSVParser.parse("RecordSeparator=<", cSVFormat2);
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('0');
      cSVFormat0.withCommentMarker(character0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t}ArUz";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("-t}ArUz", cSVFormat1);
      cSVParser0.close();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVParser cSVParser0 = CSVParser.parse("ZAS+b7h+t", cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "6RGj|4@^m>xM|Cg";
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withDelimiter('t');
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      cSVFormat0.withHeader((ResultSetMetaData) null);
      CSVParser cSVParser0 = CSVParser.parse("6RGj|4@^m>xM|Cg", cSVFormat1);
      cSVFormat0.withAutoFlush(false);
      cSVFormat1.withSystemRecordSeparator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      cSVParser0.close();
      cSVParser0.getRecordNumber();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      PipedInputStream pipedInputStream0 = null;
//      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockURL.getHttpExample();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('l');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      cSVFormat0.withTrim();
      CSVParser cSVParser0 = CSVParser.parse("lxzc*h,9", cSVFormat3);
      cSVParser0.nextRecord();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('l');
      CSVParser cSVParser1 = CSVParser.parse("lxzc*h,9", cSVFormat4);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat1.withIgnoreEmptyLines();
      Character character0 = new Character('_');
      cSVFormat1.withQuote(character0);
      File file0 = MockFile.createTempFile("CXlPq9!US6%T.J;9/z", "CXlPq9!US6%T.J;9/z", (File) null);
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 2;
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      Charset charset0 = Charset.defaultCharset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
//      try { 
        CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      MockFile mockFile0 = new MockFile("charset");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = ']';
      charArray0[2] = '1';
      mockFileWriter0.write(charArray0);
      cSVFormat1.print((Appendable) mockFileWriter0);
      CSVFormat cSVFormat2 = cSVFormat0.withTrim();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withQuote((Character) 'k');
      cSVFormat5.withTrailingDelimiter();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat2, 0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      cSVFormat1.withIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("charset", cSVFormat4);
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2;
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      char[] charArray0 = new char[9];
      String string0 = "The header contains a duplicate name: \"";
      MockFile mockFile0 = new MockFile("The header contains a duplicate name: \"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      PipedReader pipedReader0 = new PipedReader(2);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charset0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator("gLIle");
      cSVFormat4.withTrailingDelimiter();
      cSVFormat2.withHeader((ResultSet) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gLIle");
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.close();
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('*');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.withQuoteMode(quoteMode0);
      cSVFormat0.withTrailingDelimiter();
      cSVFormat3.withHeader((ResultSet) null);
      // Undeclared exception!
//      try { 
        CSVParser.parse((String) null, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'string' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      cSVFormat2.println(pipedWriter0);
      Object[] objectArray0 = new Object[0];
      cSVFormat2.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = CSVFormat.RFC4180;
      cSVFormat3.withTrailingDelimiter();
      cSVFormat1.withHeader((ResultSet) null);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.spliterator();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      MockFileWriter mockFileWriter0 = new MockFileWriter("QuoteChar=<");
      char[] charArray0 = new char[2];
      mockFileWriter0.append((CharSequence) "QuoteChar=<");
      charArray0[0] = 'L';
      charArray0[1] = ',';
      mockFileWriter0.write(charArray0);
      cSVFormat0.print((Appendable) mockFileWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVParser cSVParser0 = CSVParser.parse("RFC4180", cSVFormat2);
      cSVParser0.nextRecord();
      cSVParser0.isClosed();
      cSVParser0.isClosed();
//      try { 
        MockURI.URI("RFC4180", "zD)76", "RFC4180", (String) null);
//        fail("Expecting exception: URISyntaxException");
      
//      } catch(URISyntaxException e) {
//         //
//         // Relative path in absolute URI: RFC4180://zD)76RFC4180
//         //
//         verifyException("java.net.URI", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = CSVParser.parse("charset", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = ':';
      charArray0[2] = '?';
      cSVParser0.getHeaderMap();
//      try { 
        rowSetMetaDataImpl0.setColumnName(2, "O' v#tp,*%a79e0");
//        fail("Expecting exception: SQLException");
      
//      } catch(SQLException e) {
//         //
//         // Invalid column index :2
//         //
//         verifyException("javax.sql.rowset.RowSetMetaDataImpl", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      String string0 = "QuoteChar=<";
      MockFileWriter mockFileWriter0 = new MockFileWriter("QuoteChar=<");
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 0L, 0L);
      cSVParser0.getRecordNumber();
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile(" SurroundingSpaces:ignored");
      Path path0 = mockFile0.toPath();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
//        fail("Expecting exception: NoSuchFileException");
      
//      } catch(NoSuchFileException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat1.withIgnoreSurroundingSpaces();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat1);
      pipedInputStream0.mark(2132);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream0, 3756);
      pushbackInputStream1.available();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      cSVFormat2.println(pipedWriter0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      cSVParser0.getCurrentLineNumber();
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = ':';
      charArray0[2] = '?';
      charArray0[3] = '8';
      charArray0[4] = 'J';
      charArray0[5] = 'u';
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('j');
      cSVFormat3.withIgnoreSurroundingSpaces();
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL(uRL0, "'?reR$([5", uRLStreamHandler0);
      // Undeclared exception!
//      try { 
        Charset.forName("'?reR$([5");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // '?reR$([5
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      StringReader stringReader0 = new StringReader("c`|Bdm");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.spliterator();
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser0.isClosed();
      cSVParser1.isClosed();
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      cSVParser0.iterator();
      cSVParser0.spliterator();
      cSVParser1.close();
      cSVParser1.getCurrentLineNumber();
      cSVParser0.iterator();
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      Reader reader0 = null;
      cSVParser0.spliterator();
      // Undeclared exception!
//      try { 
        CSVParser.parse((Reader) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      cSVFormat2.println(pipedWriter0);
      CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      char[] charArray0 = new char[9];
      MockFile mockFile0 = new MockFile("The header contains a duplicate name: \"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      mockFileWriter0.write(charArray0);
      cSVFormat1.print((Appendable) pipedWriter0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrim();
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat0.withAllowMissingColumnNames();
      cSVFormat0.withTrailingDelimiter();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 59L, (-2451L));
      assertEquals((-2452L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse("\u2029", cSVFormat0);
      cSVParser0.nextRecord();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('*');
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat0.withTrailingDelimiter();
      cSVFormat3.withHeader((ResultSet) null);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.close();
      // Undeclared exception!
//      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'url' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("l}pwhv]wY E^Y)N,3|", "l}pwhv]wY E^Y)N,3|", 0, "l}pwhv]wY E^Y)N,3|", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('H');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "";
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser.parse("", cSVFormat0);
      PipedWriter pipedWriter0 = null;
//      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) " IgnoreHeaderCase:ignored";
      objectArray0[4] = (Object) " IgnoreHeaderCase:ignored";
      objectArray0[5] = (Object) " IgnoreHeaderCase:ignored";
      objectArray0[6] = (Object) " IgnoreHeaderCase:ignored";
      objectArray0[7] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);
      CSVParser cSVParser0 = CSVParser.parse(" IgnoreHeaderCase:ignored", cSVFormat3);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      StringReader stringReader0 = new StringReader("c`|Bdm");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.spliterator();
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat0);
      cSVParser0.isClosed();
      cSVParser1.isClosed();
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      cSVParser0.getRecordNumber();
      cSVParser0.iterator();
      MockFile mockFile0 = new MockFile("");
      mockFile0.toPath();
      cSVFormat0.withSkipHeaderRecord();
      String string0 = "RecordSeparator=<";
      // Undeclared exception!
//      try { 
        Charset.forName("RecordSeparator=<");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // RecordSeparator=<
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('*');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      // Undeclared exception!
//      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'path' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "|f.t.@v+RaK{Ixnt<M";
      StringReader stringReader0 = new StringReader("|f.t.@v+RaK{Ixnt<M");
      CSVFormat cSVFormat0 = null;
      stringReader0.read();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(stringReader0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      cSVFormat2.println(pipedWriter0);
      CSVParser.parse((Reader) pipedReader0, cSVFormat2);
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = ':';
      charArray0[2] = '?';
      charArray0[3] = '8';
      charArray0[4] = 'J';
      charArray0[5] = 'u';
      charArray0[6] = 'F';
      charArray0[7] = 'k';
      charArray0[8] = '9';
      // Undeclared exception!
//      try { 
        pipedWriter0.write(charArray0, 114, 114);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.PipedWriter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      MockFileWriter mockFileWriter0 = new MockFileWriter("QuoteChar=<");
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = ',';
      mockFileWriter0.write(charArray0);
      cSVFormat0.print((Appendable) mockFileWriter0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
      cSVFormat4.withTrailingDelimiter();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat4, 0L, 0L);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = " reading next record: ";
      MockFile mockFile0 = new MockFile("]^*OSvs_", " reading next record: ");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.withSystemRecordSeparator();
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('t');
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat3);
//        fail("Expecting exception: NoSuchFileException");
      
//      } catch(NoSuchFileException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      boolean boolean0 = false;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withIgnoreEmptyLines();
      Character character0 = new Character('_');
      cSVFormat0.withQuote(character0);
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, charset0, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withIgnoreEmptyLines();
      Character character0 = new Character('_');
      cSVFormat0.withQuote(character0);
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, charset0, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(3581);
      pipedReader0.markSupported();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withAllowMissingColumnNames();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
//      try { 
        pipedReader0.read();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }
}
