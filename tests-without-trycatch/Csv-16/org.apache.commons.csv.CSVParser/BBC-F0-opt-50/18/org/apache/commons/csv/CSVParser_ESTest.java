/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 17:52:32 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.FileSystemException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat0.withRecordSeparator(",");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      CSVParser.parse(",", cSVFormat2);
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream(",");
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(Throwable e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      StringReader stringReader0 = new StringReader("Oracle");
      CSVParser.parse("v", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-1L), (-5308L));
      cSVParser0.nextRecord();
      assertEquals((-5308L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      String string0 = "#";
      CSVParser.parse("#", cSVFormat1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-67), 65534);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withIgnoreHeaderCase(true);
      Character character0 = Character.valueOf('D');
      cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      // Undeclared exception!
//      try { 
        CSVParser.parse(",", cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The header contains a duplicate name: \"\" in [, ]
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse(".", cSVFormat0);
      MockFile mockFile0 = new MockFile(".");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVParser cSVParser0 = CSVParser.parse("`(A/}F5Y,", cSVFormat1);
      cSVParser0.getRecords();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'inputStream' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("Excel", cSVFormat0);
      cSVParser0.close();
      MockFile mockFile0 = new MockFile("#p");
      File file0 = MockFile.createTempFile("file", "YMQV|BJ", (File) mockFile0);
      Charset charset0 = null;
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.withQuote('M');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "=}o7,WZcI");
      CSVParser cSVParser0 = CSVParser.parse("u{YD9uu", cSVFormat1);
      cSVParser0.nextRecord();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
      
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertFalse(map0.isEmpty());
      
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getHttpExample();
      CSVParser cSVParser1 = CSVParser.parse(uRL0, charset0, cSVFormat1);
      cSVParser1.close();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.toString();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser.parse("C", cSVFormat1);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "jZK-+t6");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
//        fail("Expecting exception: FileSystemException");
      
//      } catch(FileSystemException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat1.withCommentMarker('w');
      cSVFormat0.withCommentMarker('w');
      CSVParser.parse("ite", cSVFormat0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse((InputStream) dataInputStream0, charset0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) rowSetMetaDataImpl0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) ";y";
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVParser.parse("}l'Y0Ox~", cSVFormat2);
      Charset.defaultCharset();
      StringReader stringReader0 = new StringReader("wVa0N:U$Q0x");
      CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
      long long0 = cSVParser0.getCurrentLineNumber();
      assertEquals(1L, long0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("`(}F5Y,", cSVFormat1);
      CSVParser cSVParser0 = CSVParser.parse("inputStream", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("v", cSVFormat1);
      cSVParser0.close();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)86;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat1);
      long long0 = cSVParser1.getCurrentLineNumber();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("(line ", cSVFormat1);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) bufferedInputStream0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      StringReader stringReader0 = new StringReader("Oracle");
      CSVParser.parse("v", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 760L, (-5308L));
      cSVParser0.nextRecord();
      assertEquals((-5308L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = CSVParser.parse("`(}F5Y,", cSVFormat0);
      cSVParser0.spliterator();
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("W_DNVT9-M", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("t%>TJ68Q;Rae>S2Wg");
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("t%>TJ68Q;Rae>S2Wg", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'inputStream' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('X');
      cSVFormat0.withQuote('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("g{YU9u", cSVFormat2);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2006);
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat3, 2006, 2006);
      cSVParser1.close();
//      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe closed
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser1.getCurrentLineNumber();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser1.forEach(consumer0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // IOException reading next record: java.io.IOException: Pipe not connected
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('}');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      cSVParser0.nextRecord();
      cSVParser0.close();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getHttpExample();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('X');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("g{YU9u", cSVFormat3);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("g{YU9u", cSVFormat2);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser2 = CSVParser.parse(path0, charset0, cSVFormat0);
      cSVParser2.nextRecord();
      cSVParser2.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      cSVParser1.getRecordNumber();
      cSVParser0.getHeaderMap();
      Charset.defaultCharset();
      MockURL.getHttpExample();
      // Undeclared exception!
//      try { 
        Charset.forName("g{YU9u");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // g{YU9u
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withQuote('z');
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withQuote('W');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat1);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
//      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-2147483645));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pipe size <= 0
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser.parse("v", cSVFormat0);
      CSVParser cSVParser0 = CSVParser.parse("v", cSVFormat1);
      cSVFormat0.withQuote('$');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser.parse("", cSVFormat3);
      CSVParser.parse("v", cSVFormat1);
      cSVParser0.nextRecord();
      URI uRI0 = MockURI.aFTPURI;
      Charset.defaultCharset();
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
//      try { 
        CSVParser.parse("\" in ", cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.withQuote('M');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVParser cSVParser0 = CSVParser.parse("u{YD9uu", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getHttpExample();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("v", cSVFormat0);
      CSVParser.parse("v", cSVFormat1);
      cSVParser0.nextRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('$');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
      CSVParser.parse("v", cSVFormat2);
      CSVParser cSVParser1 = CSVParser.parse("v", cSVFormat3);
      cSVParser1.nextRecord();
      URI uRI0 = MockURI.aFTPURI;
      Charset.defaultCharset();
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat1.withQuote('#');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('#');
      CSVParser cSVParser0 = CSVParser.parse("CSVParser has been closed", cSVFormat3);
      File file0 = MockFile.createTempFile("ALL_NON_NULL", (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      cSVFormat3.withTrailingDelimiter(false);
      CSVParser.parse(file0, charset0, cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.nextRecord();
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      CSVParser.parse(file0, charset0, cSVFormat2);
      CSVParser cSVParser1 = CSVParser.parse(file0, charset0, cSVFormat3);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("'l=BY", cSVFormat2);
      cSVParser0.getHeaderMap();
      Charset.defaultCharset();
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, (Charset) null, cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'charset' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('E');
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('j');
      // Undeclared exception!
//      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.file.Files", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('X');
      cSVFormat0.withQuote('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("g{YU9u", cSVFormat2);
      cSVParser0.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getHttpExample();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      cSVFormat1.withQuote('M');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      CSVParser cSVParser0 = CSVParser.parse("u{YD9uu", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.getRecordNumber();
      cSVParser0.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      URL uRL0 = MockURL.getHttpExample();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      cSVFormat0.withAutoFlush(true);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 1582L, 0L);
      cSVParser0.close();
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2458);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('X');
      cSVFormat0.withQuote('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("g{YU9u", cSVFormat2);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2006);
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat3, 2006, 2006);
      cSVParser1.close();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, charset0, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v");
      CSVParser cSVParser0 = CSVParser.parse("v", cSVFormat0);
      CSVParser cSVParser1 = CSVParser.parse("v", cSVFormat1);
      cSVParser0.nextRecord();
      CSVParser.parse("v", cSVFormat0);
      cSVParser0.close();
      cSVParser1.close();
      StringReader stringReader0 = new StringReader("CaG)*VKUTL?Bgi");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1409);
      Class<Locale.Category> class0 = Locale.Category.class;
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser2 = new CSVParser(stringReader0, cSVFormat2, 10L, 1409);
      CSVParser cSVParser3 = CSVParser.parse((Reader) stringReader0, cSVFormat3);
      cSVParser3.close();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, charset0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.close();
      StringReader stringReader0 = new StringReader("CaG)*VKUTL?Bgi");
      cSVParser0.getFirstEndOfLine();
      CSVParser cSVParser1 = new CSVParser(stringReader0, cSVFormat0, (-1L), (-1L));
      cSVParser1.getRecords();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI scheme is not \"file\"
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("'`Cy2E_");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 0L, (-2606L));
      cSVParser0.getFirstEndOfLine();
      cSVParser0.isClosed();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getRecords();
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI scheme is not \"file\"
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(resultSet0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "._`lg/PH}]e]ajB:");
      PipedReader pipedReader0 = new PipedReader(5);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 983L, 2786L);
      cSVParser0.close();
      cSVParser0.iterator();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(2785L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('X');
      cSVFormat0.withQuote('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("g{YU9u", cSVFormat2);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("g{YU9u", cSVFormat0);
      cSVParser1.nextRecord();
      cSVParser0.close();
      cSVParser0.close();
      cSVParser0.getFirstEndOfLine();
      cSVParser1.isClosed();
      cSVParser0.getFirstEndOfLine();
      cSVParser1.getRecords();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
//      try {
        mockFile0 = new MockFile(uRI0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // URI scheme is not \"file\"
//         //
//         verifyException("java.io.File", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse(path0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('X');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('-');
      RowSetMetaDataImpl rowSetMetaDataImpl1 = new RowSetMetaDataImpl();
      cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      CSVFormat cSVFormat4 = cSVFormat0.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("g{YU9u", cSVFormat4);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1478);
      Class<Locale.Category> class0 = Locale.Category.class;
      cSVFormat0.withHeader(class0);
      PipedReader pipedReader1 = new PipedReader();
      CSVParser cSVParser1 = null;
//      try {
        cSVParser1 = new CSVParser(pipedReader1, cSVFormat3, (-522L), 0L);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.close();
      cSVParser0.iterator();
      cSVParser0.getCurrentLineNumber();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      cSVFormat2.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat3 = CSVFormat.TDF;
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat0.withQuoteMode(quoteMode0);
      CSVParser cSVParser0 = CSVParser.parse("v", cSVFormat0);
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("v", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.close();
      cSVParser1.close();
      StringReader stringReader0 = new StringReader("CaG)*VKUTL?Bgi");
      CSVParser cSVParser2 = new CSVParser(stringReader0, cSVFormat0, 0L, 0L);
      cSVParser2.getFirstEndOfLine();
      cSVParser2.isClosed();
      cSVParser1.getFirstEndOfLine();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('X');
      cSVFormat0.withQuote('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("g{YU9u", cSVFormat2);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      cSVParser0.close();
      cSVParser0.close();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.isClosed();
      cSVParser0.getFirstEndOfLine();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat1, 1L, 1L);
      URL uRL0 = MockURL.getFileExample();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedReader0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      cSVFormat0.withAutoFlush(false);
      cSVFormat2.toString();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser1.getRecordNumber();
//      try { 
        cSVParser1.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat4);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" SurroundingSpaces:ignored", " SurroundingSpaces:ignored");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
//        fail("Expecting exception: NoSuchFileException");
      
//      } catch(NoSuchFileException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_TEXT;
      // Undeclared exception!
//      try { 
        CSVParser.parse((Reader) null, cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Reader reader0 = null;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      // Undeclared exception!
//      try { 
        CSVParser.parse((Reader) null, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('V');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("g{YU9u", cSVFormat3);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("g{YU9u", cSVFormat0);
      cSVParser1.nextRecord();
      cSVParser0.close();
      cSVParser0.close();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      CSVFormat cSVFormat4 = cSVFormat2.withQuote('V');
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, charset0, cSVFormat4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedReader0.connect(pipedWriter0);
      Character character0 = new Character('T');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.withIgnoreHeaderCase(true);
      Character character1 = Character.valueOf('v');
      cSVFormat0.withEscape(character1);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 307L, 943L);
      cSVParser0.spliterator();
      cSVParser0.getCurrentLineNumber();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      Charset charset0 = null;
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces();
//      try { 
        CSVParser.parse((File) mockFile0, (Charset) null, cSVFormat2);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Reader reader0 = null;
      long long0 = 2943L;
      long long1 = (-886L);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, 2943L, (-886L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Reader reader0 = null;
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat0, 1180L, (-530L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "RecordSeparator=<";
      MockFile mockFile0 = new MockFile("RecordSeparator=<", "RecordSeparator=<");
      Path path0 = mockFile0.toPath();
      Charset charset0 = null;
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
//      try { 
        CSVParser.parse(path0, (Charset) null, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)103, 31);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser cSVParser0 = CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat0);
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('I');
      Object[] objectArray0 = new Object[9];
      cSVFormat0.withQuote('I');
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat2;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) pipedReader0;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      cSVFormat4.withAutoFlush(false);
      cSVFormat2.toString();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat4);
      cSVParser0.getRecordNumber();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "oXc![lB~l1(X>{";
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
//      try { 
        CSVParser.parse("oXc![lB~l1(X>{", (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('X');
      cSVFormat0.withQuote('Z');
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      CSVParser cSVParser0 = CSVParser.parse("g{YU9u", cSVFormat2);
      cSVParser0.isClosed();
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("g{YU9u", cSVFormat0);
      cSVParser1.nextRecord();
      cSVParser0.close();
      cSVParser0.close();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.isClosed();
      cSVParser0.getFirstEndOfLine();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
//      try { 
        CSVParser.parse("oXc![lB~l1(X>{", (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }
}
