/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 22:57:10 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.nio.file.FileSystemException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[4];
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.close();
      cSVParser0.getFirstEndOfLine();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) consumer0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) pipedWriter0;
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      cSVFormat0.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) consumer0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) pipedWriter0;
      cSVFormat0.printRecord(pipedWriter0, objectArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) pipedWriter0;
      objectArray0[5] = (Object) pipedReader0;
      cSVFormat1.withCommentMarker((Character) null);
      objectArray0[6] = (Object) pipedReader0;
      cSVFormat1.printRecord(pipedWriter0, objectArray0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      cSVFormat0.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader(",");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, 1887L, 2516L);
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      assertEquals(2516L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse(",", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser.parse("", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      cSVFormat1.withSkipHeaderRecord();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
      // Undeclared exception!
//      try { 
        CSVParser.parse(",", cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The header contains a duplicate name: \"\" in [, ]
//         //
//         verifyException("org.apache.commons.csv.CSVParser", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      String string0 = "}";
      CSVParser.parse("}", cSVFormat0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser.parse("", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      PipedReader pipedReader0 = new PipedReader(2137);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 2137, 2137);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse(";:B6n\"O", cSVFormat0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
      Class<Proxy.Type> class1 = Proxy.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVFormat cSVFormat3 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser1 = CSVParser.parse("]", cSVFormat3);
      cSVParser1.getCurrentLineNumber();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      StringReader stringReader0 = new StringReader(".kg0M[e1oVt[");
      CSVParser cSVParser2 = CSVParser.parse((Reader) stringReader0, cSVFormat2);
      cSVParser2.nextRecord();
      assertEquals(1L, cSVParser2.getRecordNumber());
      
      CSVParser cSVParser3 = CSVParser.parse(".kg0M[e1oVt[", cSVFormat2);
      assertEquals(0L, cSVParser3.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.nextRecord();
      cSVParser0.close();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser.parse("", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('j');
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat2);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNotNull(map0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("InformixUnloadCsv");
      stringReader0.skip(1510L);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("InformixUnloadCsv");
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat1);
      File file0 = MockFile.createTempFile("InformixUnloadCsv", "*Z<Ss");
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVParser.parse(file0, charset0, cSVFormat0);
      CSVParser.parse(file0, charset0, cSVFormat1);
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser.parse("", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVParser cSVParser0 = CSVParser.parse("ass\": ", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVParser.parse("CklqQ_z;4o..~lD", cSVFormat0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CSVParser.parse("zKEn.", cSVFormat0);
      File file0 = MockFile.createTempFile("nE11", "org.apache.commons.csv.CSVFormat@0000000002|org.apache.commons.csv.CSVFormat@0000000002|org.apache.commons.csv.CSVFormat@0000000002|org.apache.commons.csv.CSVFormat@0000000002|org.apache.commons.csv.CSVFormat@0000000002|org.apache.commons.csv.CSVFormat@0000000002");
      MockFile mockFile0 = new MockFile(file0, "zKEn.");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
//        fail("Expecting exception: FileSystemException");
      
//      } catch(FileSystemException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("zvm$.oB-$gQ", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVParser0.isClosed();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("l5VVCHp04TI");
      cSVFormat3.withSkipHeaderRecord(true);
      cSVParser0.nextRecord();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((Path) null, charset0, cSVFormat0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'path' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      CSVFormat cSVFormat0 = null;
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 50);
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 50, (-1634L));
      cSVParser0.getRecordNumber();
      cSVFormat0.println(pipedWriter0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "CSVParser has been closed";
      MockFile mockFile0 = new MockFile(" s1<w&~iF;n1u0[", "CSVParser has been closed");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
//        fail("Expecting exception: NoSuchFileException");
      
//      } catch(NoSuchFileException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat0);
      cSVParser0.getRecordNumber();
      cSVParser0.getFirstEndOfLine();
      // Undeclared exception!
//      try { 
        MockURL.URL((String) null, (String) null, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('+');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) uRL0;
      objectArray0[1] = (Object) uRL0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser.parse("zvm$.oB-$gQ", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
//      try { 
        CSVParser.parse("\" in ", cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVParser.parse("zvm$.oB-$gQ", cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("l5VVCHp04TI");
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(true);
      CSVParser.parse("zvm$.oB-$gQ", cSVFormat5);
      CSVParser cSVParser0 = CSVParser.parse("l5VVCHp04TI", cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVParser.parse("zvm$.oB-$gQ", cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-57);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-39), 5);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) byteArrayInputStream0, charset0, cSVFormat3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVParser cSVParser0 = CSVParser.parse("'Vt+}g6I!Zvpcl`u", cSVFormat0);
      cSVParser0.close();
      cSVFormat0.withAllowMissingColumnNames();
      CSVParser.parse("JE;N%O.8Qa", cSVFormat0);
      boolean boolean0 = cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('\\');
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat3, 0L, 0L);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<TL)E)!hI");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("SOCKS");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser1 = CSVParser.parse("SOCKS", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      cSVParser0.nextRecord();
      Consumer<CSVRecord> consumer1 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 102);
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser2 = CSVParser.parse((InputStream) pushbackInputStream0, charset0, cSVFormat1);
//      try { 
        cSVParser2.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringReader stringReader0 = new StringReader("\" |\"%-p0c}ZV \"");
      cSVFormat0.parse(stringReader0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      cSVFormat0.withHeader(class0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVParser.parse("\" |\"%-p0c}ZV \"", cSVFormat2);
      CSVParser cSVParser0 = CSVParser.parse("\" |\"%-p0c}ZV \"", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser0.forEach(consumer0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // MockIOException reading next record: org.evosuite.runtime.mock.java.lang.MockThrowable: (line 1) invalid char between encapsulated token and delimiter
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser.parse("zvm$.oB-$gQ", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("}", cSVFormat1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zvm$.oB-$gQ";
      stringArray0[1] = "m-p8~Fd.Dt:8-8tN*";
      stringArray0[2] = "jR&!p@ipV ";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      cSVFormat2.withHeader(class0);
      CSVParser.parse("jR&!p@ipV ", cSVFormat0);
//      try { 
        cSVFormat2.parse(pipedReader0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse(" SurroundingSpaces:ignored", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      StringReader stringReader0 = new StringReader("");
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser1 = CSVParser.parse((Reader) stringReader0, cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser.parse("zvm$.oB-$gQ", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("}", cSVFormat1);
      cSVParser0.getRecords();
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat0, 1L, 1L);
      cSVParser1.getCurrentLineNumber();
//      try { 
        cSVParser1.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser.parse("SOCKS", cSVFormat0);
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      cSVFormat1.withHeader(class0);
//      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "wI1k`)q?v*";
      objectArray0[2] = (Object) "wI1k`)q?v*";
      objectArray0[3] = (Object) "wI1k`)q?v*";
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser.parse("wI1k`)q?v*", cSVFormat0);
      PipedReader pipedReader0 = new PipedReader(6);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Character character0 = Character.valueOf('/');
      cSVFormat0.withCommentMarker(character0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "wI1k`)q?v*";
      cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
      CSVParser cSVParser0 = CSVParser.parse("wI1k`)q?v*", cSVFormat0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
      CSVParser cSVParser0 = CSVParser.parse("SOCKS", cSVFormat1);
      cSVParser0.close();
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("SOCKS", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      cSVParser0.iterator();
      cSVParser0.getCurrentLineNumber();
      MockFile mockFile0 = new MockFile("format", "format");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat0);
//        fail("Expecting exception: NoSuchFileException");
      
//      } catch(NoSuchFileException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "wI1k`)q?v*";
      objectArray0[2] = (Object) "wI1k`)q?v*";
      objectArray0[3] = (Object) "wI1k`)q?v*";
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = CSVParser.parse("^^r'JF1ZfLxN", cSVFormat1);
      cSVFormat1.withNullString("org.apache.commons.csv.CSVParser");
      cSVParser0.nextRecord();
      cSVParser0.getRecordNumber();
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "(kE9_/2izJAl0U_q";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(kE9_/2izJAl0U_q");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('E');
      cSVFormat0.withTrailingDelimiter(false);
      cSVFormat1.withTrailingDelimiter(true);
      cSVFormat1.withQuote('E');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
      cSVFormat1.withTrim(false);
      cSVFormat2.withAllowMissingColumnNames();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'inputStream' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("INVALID", cSVFormat1);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
      
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      CSVFormat cSVFormat2 = CSVFormat.RFC4180;
      CSVParser.parse("SOCKS", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.isClosed();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.getFirstEndOfLine();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "wI1k`)q?v*";
      objectArray0[2] = (Object) "wI1k`)q?v*";
      objectArray0[3] = (Object) "wI1k`)q?v*";
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      cSVFormat2.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("<P|DCI0o", cSVFormat2);
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("CSVParser has been closed", "<P|DCI0o");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
//      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.file.Files", e);
//      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
      CSVParser cSVParser0 = CSVParser.parse(",", cSVFormat2);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) class0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat2 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("<P|DCI0o", cSVFormat1);
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("XJW>n^", "CSVParser has been closed");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
//      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.file.Files", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("INVALID", cSVFormat1);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(0L, long0);
      
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertNotNull(map0);
      assertEquals(1, map0.size());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3688);
      CSVFormat cSVFormat2 = CSVFormat.POSTGRESQL_CSV;
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      cSVFormat2.withTrailingDelimiter();
      CSVFormat cSVFormat3 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat3.withHeaderComments((Object[]) null);
      CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.iterator();
      cSVParser0.getFirstEndOfLine();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = ':';
      Character character0 = new Character(':');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Character character1 = Character.valueOf(':');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
      CSVParser.parse("", cSVFormat2);
      File file0 = null;
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "wI1k`)q?v*";
      objectArray0[2] = (Object) "wI1k`)q?v*";
      objectArray0[3] = (Object) "wI1k`)q?v*";
      objectArray0[4] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("wI1k`)q?v*", cSVFormat3);
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character(':');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Character character1 = Character.valueOf(':');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
      CSVParser.parse("", cSVFormat2);
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 4192;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4192);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      File file0 = MockFile.createTempFile("SOCKS", "No more CSV records available");
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) pipedInputStream0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat2;
      CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();
      // Undeclared exception!
//      try { 
        CSVParser.parse((Reader) null, cSVFormat4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      URL uRL0 = null;
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      String string0 = "";
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      Character character0 = Character.valueOf('>');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      // Undeclared exception!
//      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'url' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat3 = cSVFormat2.withTrim(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, charset0, cSVFormat4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFile mockFile0 = new MockFile("The quoteChar character and the delimiter cannot be the same ('", "The quoteChar character and the delimiter cannot be the same ('");
      URL uRL0 = mockFile0.toURL();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) charset0;
      objectArray0[4] = (Object) "The quoteChar character and the delimiter cannot be the same ('";
      objectArray0[5] = (Object) charset0;
      objectArray0[6] = (Object) mockFile0;
      CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      Character character0 = new Character('S');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat4 = cSVFormat3.withTrim();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat4);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces();
      CSVParser cSVParser0 = CSVParser.parse("Unexpected Quote value: ", cSVFormat3);
      cSVParser0.getCurrentLineNumber();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
//      try { 
        CSVParser.parse("", (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "";
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      cSVFormat0.withQuote(character0);
      CSVParser.parse("", cSVFormat0);
      File file0 = null;
      MockFileInputStream mockFileInputStream0 = null;
//      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      File file0 = MockFile.createTempFile("&9HkKUK\",O|", "&9HkKUK\",O|");
      MockFile mockFile0 = new MockFile(file0, "&9HkKUK\",O|");
      Charset charset0 = null;
      mockFile0.setWritable(true, true);
      CSVFormat cSVFormat0 = CSVFormat.TDF;
//      try { 
        CSVParser.parse((File) mockFile0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 4192);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('.');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) pipedReader0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 4192, (-3759L));
      cSVParser0.getHeaderMap();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      // Undeclared exception!
//      try { 
        Charset.forName("qI");
//        fail("Expecting exception: UnsupportedCharsetException");
      
//      } catch(UnsupportedCharsetException e) {
//         //
//         // qI
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }
}
