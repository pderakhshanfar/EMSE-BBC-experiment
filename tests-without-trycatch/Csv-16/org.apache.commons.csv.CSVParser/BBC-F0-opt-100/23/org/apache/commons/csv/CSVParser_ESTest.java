/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 22:59:36 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.FileSystemException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Consumer;
import javax.sql.rowset.RowSetMetaDataImpl;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('f');
      CSVParser cSVParser0 = CSVParser.parse("f0r#<[>at", cSVFormat1);
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat0.withHeaderComments((Object[]) null);
      cSVFormat2.toString();
      StringReader stringReader0 = new StringReader("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false");
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, (-742L), (-1L));
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      CSVParser cSVParser1 = CSVParser.parse("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> NullString=<N> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader();
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-45), 4305);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) dataInputStream0, charset0, cSVFormat1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
      CSVParser cSVParser0 = CSVParser.parse("\u2029", cSVFormat1);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVParser.parse("9MqZG@p.N", cSVFormat0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("Atcxty_7Zqw4", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
//      try { 
        CSVParser.parse("\"c^A=YGdQ0", cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // (startline 1) EOF reached before encapsulated token finished
//         //
//         verifyException("org.apache.commons.csv.Lexer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVFormat");
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('N');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2, 503L, 0L);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("form>at");
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, 'f', 'f');
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      assertEquals(102L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('J');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0, (-1607L), (-1607L));
      cSVParser0.iterator();
      cSVParser0.nextRecord();
      assertEquals((-1607L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(resultSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      CSVFormat cSVFormat5 = cSVFormat4.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
      cSVFormat5.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("{", cSVFormat3);
      cSVParser0.iterator();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      Character character0 = new Character('|');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreHeaderCase();
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat5 = cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat6 = cSVFormat5.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("format", cSVFormat6);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser.parse("dJ", cSVFormat0);
      CSVParser cSVParser0 = CSVParser.parse("N", cSVFormat0);
      cSVParser0.getRecords();
      Path path0 = null;
      // Undeclared exception!
//      try { 
        Charset.forName("|B=92Fm|p");
//        fail("Expecting exception: IllegalCharsetNameException");
      
//      } catch(IllegalCharsetNameException e) {
//         //
//         // |B=92Fm|p
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      MockPrintStream mockPrintStream0 = new MockPrintStream("format");
      cSVFormat0.print((Object) null, (Appendable) mockPrintStream0, false);
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('f');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, (-217L), (-217L));
      cSVParser0.getRecords();
      cSVParser0.iterator();
      cSVParser0.getCurrentLineNumber();
      assertEquals((-218L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('f');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      CSVParser cSVParser1 = cSVFormat1.parse(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      CSVParser cSVParser2 = CSVParser.parse("format", cSVFormat3);
      cSVParser2.iterator();
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('f');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat3);
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getRecords();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('f');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1, (-217L), (-217L));
      cSVParser0.getRecords();
      assertEquals((-218L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"yXT]XSGvj");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Z');
      cSVFormat0.withIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('Z');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
      CSVFormat cSVFormat3 = cSVFormat2.withQuote('a');
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat4 = cSVFormat3.withHeaderComments(objectArray0);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat4);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "w,&z");
      Path path0 = mockFile1.toPath();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat1);
//        fail("Expecting exception: FileSystemException");
      
//      } catch(FileSystemException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
      Character character0 = new Character('m');
      cSVFormat2.withEscape(character0);
      CSVParser.parse("R", cSVFormat2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse("\u2029", cSVFormat1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.csv.CSVParser";
      stringArray0[1] = ",BXP)+=U5*:%";
      stringArray0[2] = "k2qaf+bQDLg8;OO|B ";
      stringArray0[3] = "*1a\"W FKL~** OB\"";
      stringArray0[4] = "";
      stringArray0[5] = "x2:vxK";
      stringArray0[6] = "org.apache.commons.csv.CSVParser$2";
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3, 0L, (-1L));
      cSVParser0.getFirstEndOfLine();
      assertEquals((-2L), cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = CSVFormat.ORACLE;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.getRecords();
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.ORACLE;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      PipedReader pipedReader0 = new PipedReader(976);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat1);
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      CSVFormat cSVFormat2 = CSVFormat.ORACLE;
      Character character0 = new Character('=');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat2.withDelimiter('=');
      CSVParser cSVParser0 = CSVParser.parse(":XL4W\"(mQ", cSVFormat0);
      cSVParser0.getRecords();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      PipedReader pipedReader0 = new PipedReader();
      File file0 = MockFile.createTempFile("RFC4180", "CSVRecord [comment=");
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser1 = CSVParser.parse(file0, charset0, cSVFormat3);
      cSVParser1.isClosed();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CSVParser cSVParser0 = CSVParser.parse("\u2029", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;
      String string0 = "\u2029";
      CSVParser cSVParser0 = CSVParser.parse("\u2029", cSVFormat0);
      cSVParser0.spliterator();
      cSVParser0.getRecords();
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Could not find: www.someFakeButWellFormedURL.org
//         //
//         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withDelimiter('d');
      CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
      CSVParser cSVParser0 = CSVParser.parse("reader", cSVFormat4);
      cSVParser0.getRecords();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      CSVParser cSVParser1 = CSVParser.parse("reader", cSVFormat3);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      cSVParser1.isClosed();
      assertEquals(1L, cSVParser1.getRecordNumber());
      
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withDelimiter('@');
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('`');
      CSVParser.parse("*r?^uYgS`|hCY5b", cSVFormat4);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat4);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'inputStream' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      cSVFormat1.parse(pipedReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      Map<String, Integer> map0 = new HashMap<String, Integer>();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      char char0 = 'O';
      cSVParser0.getRecords();
      MockFile mockFile0 = new MockFile("mE<[Y6pzNb", "N");
      Path path0 = mockFile0.toPath();
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('O');
      // Undeclared exception!
//      try { 
        CSVParser.parse(path0, (Charset) null, cSVFormat2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.nio.file.Files", e);
//      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      cSVFormat1.withTrim();
      Character character0 = new Character('{');
      Character.valueOf('P');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('J');
      cSVFormat3.withDelimiter('W');
      cSVFormat1.withDelimiter('J');
      CSVParser cSVParser0 = CSVParser.parse("V7", cSVFormat2);
      cSVParser0.spliterator();
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      Character character1 = new Character('J');
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      Character character0 = Character.valueOf('u');
      cSVFormat1.withQuote(character0);
      CSVParser cSVParser0 = CSVParser.parse("Ry1NB:z6FZUFK)'vd", cSVFormat1);
      LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
      cSVParser0.getRecords();
      cSVFormat0.withDelimiter('u');
      Charset.defaultCharset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser0.forEach(consumer0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVParser0.getFirstEndOfLine();
      CSVFormat cSVFormat1 = cSVFormat0.withSystemRecordSeparator();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      CSVParser cSVParser1 = cSVFormat1.parse(pipedReader0);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
//      try { 
        cSVParser1.forEach(consumer0);
//        fail("Expecting exception: IllegalStateException");
      
//      } catch(IllegalStateException e) {
//         //
//         // IOException reading next record: java.io.IOException: Pipe closed
//         //
//         verifyException("org.apache.commons.csv.CSVParser$1", e);
//      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      StringReader stringReader0 = new StringReader(":0~/QF@`|k<:r");
      CSVParser cSVParser0 = cSVFormat1.parse(stringReader0);
      cSVFormat0.withDelimiter('D');
      cSVFormat0.withDelimiter('d');
      CSVParser cSVParser1 = CSVParser.parse("V7", cSVFormat0);
      cSVParser0.spliterator();
      CSVParser cSVParser2 = new CSVParser(stringReader0, cSVFormat0, 485L, (-27L));
      cSVParser2.getRecords();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVParser1.getFirstEndOfLine();
      cSVParser0.close();
      cSVParser0.getCurrentLineNumber();
      long long0 = cSVParser2.getRecordNumber();
      assertEquals((-27L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character character0 = new Character('M');
      Character character1 = Character.valueOf('M');
      cSVFormat0.withQuote(character1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CSVParser cSVParser0 = CSVParser.parse("14=", cSVFormat2);
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      cSVFormat2.withDelimiter('M');
      Charset.defaultCharset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Charset.defaultCharset();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CSVParser cSVParser1 = CSVParser.parse("14=", cSVFormat2);
      Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVParser1.forEach(consumer0);
      cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser2 = CSVParser.parse("14=", cSVFormat3);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character character0 = new Character('=');
      Character character1 = Character.valueOf('=');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character1);
      CSVParser cSVParser0 = CSVParser.parse("14=", cSVFormat2);
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      cSVFormat2.withDelimiter('=');
      cSVParser0.getRecords();
      Character character2 = new Character('=');
      cSVParser0.getHeaderMap();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) null, charset0, cSVFormat3);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'inputStream' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      char char0 = '9';
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
      CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, cSVFormat2, 2409L, (-3319L));
//        fail("Expecting exception: IOException");
      
//      } catch(Throwable e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVFormat0.withDelimiter('n');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('d');
      CSVParser cSVParser1 = CSVParser.parse("V7", cSVFormat1);
      cSVParser0.spliterator();
      cSVParser1.getRecords();
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVParser1.isClosed();
      assertEquals(1L, cSVParser1.getRecordNumber());
      
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(class0);
      CSVParser cSVParser2 = CSVParser.parse("TOoVN\"P`XD", cSVFormat2);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character character0 = new Character('M');
      Character character1 = Character.valueOf('M');
      cSVFormat0.withQuote(character1);
      CSVParser cSVParser0 = CSVParser.parse("14=", cSVFormat2);
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      cSVFormat2.withDelimiter('M');
      Charset.defaultCharset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Charset.defaultCharset();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CSVParser.parse("14=", cSVFormat2);
      cSVParser0.isClosed();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      Class<Proxy.Type> class0 = Proxy.Type.class;
      CSVFormat cSVFormat3 = cSVFormat1.withHeader(class0);
      CSVParser cSVParser1 = CSVParser.parse("14=", cSVFormat3);
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('5');
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('');
      CSVParser cSVParser0 = CSVParser.parse(", mapping=", cSVFormat1);
      cSVParser0.spliterator();
      CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('s');
      cSVFormat3.withIgnoreSurroundingSpaces(false);
      Charset charset0 = Charset.defaultCharset();
      Character character0 = Character.valueOf('e');
      cSVFormat5.withEscape(character0);
      CSVFormat cSVFormat6 = cSVFormat4.withEscape('_');
      // Undeclared exception!
//      try { 
        CSVParser.parse((File) null, charset0, cSVFormat6);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'file' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf(',');
      cSVFormat0.withQuote(character0);
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 0L, 0L);
      long long0 = cSVParser0.getRecordNumber();
      assertEquals((-1L), long0);
      
      long long1 = cSVParser0.getCurrentLineNumber();
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);
      cSVFormat0.withSystemRecordSeparator();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
      PipedReader pipedReader1 = new PipedReader();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVParser.parse((Reader) pipedReader1, cSVFormat2);
      boolean boolean0 = cSVParser0.isClosed();
      assertTrue(boolean0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('5');
      cSVFormat0.withDelimiter('');
      CSVParser cSVParser0 = CSVParser.parse(", mapping=", cSVFormat1);
      cSVParser0.spliterator();
      cSVFormat3.withDelimiter('s');
      Charset charset0 = Charset.defaultCharset();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CSVParser cSVParser1 = CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat0);
      cSVParser1.getHeaderMap();
      assertEquals(0L, cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVParser cSVParser0 = CSVParser.parse(",RWGXNJ4v]q]Y^ZjW", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('5');
      cSVFormat0.withDelimiter('');
      CSVParser cSVParser0 = CSVParser.parse(", mapping=", cSVFormat1);
      cSVParser0.spliterator();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('s');
      CSVParser.parse(", mapping=", cSVFormat2);
      Character.valueOf('[');
      Character character0 = new Character('K');
      cSVFormat1.withEscape(character0);
      cSVFormat4.withEscape('K');
      MockFile mockFile0 = new MockFile((File) null, ", mapping=");
      CSVFormat cSVFormat5 = cSVFormat1.withIgnoreHeaderCase();
//      try { 
        CSVParser.parse((File) mockFile0, (Charset) null, cSVFormat5);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((Path) null, charset0, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'path' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.ORACLE;
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      cSVFormat2.withDelimiter('5');
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('');
      CSVParser cSVParser0 = CSVParser.parse(", mapping=", cSVFormat1);
      cSVParser0.spliterator();
      cSVParser0.getRecords();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString(", mapping=");
      CSVParser cSVParser1 = CSVParser.parse((Reader) pipedReader0, cSVFormat4);
      CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVParser0.iterator();
      assertEquals(1L, cSVParser0.getRecordNumber());
      
      cSVParser1.iterator();
      PipedReader pipedReader1 = new PipedReader();
      CSVParser cSVParser2 = CSVParser.parse((Reader) pipedReader1, cSVFormat0);
      assertEquals(0L, cSVParser2.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      CSVFormat cSVFormat2 = cSVFormat0.withQuote('E');
      cSVFormat0.withTrim();
      Character character0 = new Character('U');
      Character character1 = new Character('U');
      cSVFormat1.withQuote(character1);
      CSVParser cSVParser0 = CSVParser.parse(" {<OtrCTJCH", cSVFormat1);
      cSVParser0.getRecords();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = null;
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('E');
      byteArrayInputStream0.read();
      // Undeclared exception!
//      try { 
        CSVParser.parse((InputStream) byteArrayInputStream0, (Charset) null, cSVFormat3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      cSVFormat2.withDelimiter('P');
      CSVFormat cSVFormat3 = cSVFormat1.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader("");
      cSVFormat1.withIgnoreHeaderCase(false);
      CSVParser.parse((Reader) stringReader0, cSVFormat3);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      cSVParser0.isClosed();
      CSVParser cSVParser1 = CSVParser.parse("{N~ZZ", cSVFormat2);
      assertEquals(0L, cSVParser1.getRecordNumber());
      
      cSVParser1.nextRecord();
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('X');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat1.withFirstRecordAsHeader();
      StringReader stringReader0 = new StringReader("6fk^cVL1_b1(\"4g(Z");
      CSVParser cSVParser0 = CSVParser.parse((Reader) stringReader0, cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser1 = new CSVParser(pipedReader0, cSVFormat2, (-513L), (-513L));
      cSVParser1.isClosed();
      assertEquals((-514L), cSVParser1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "vUR`Ml]!1h");
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      charset0.encode("vUR`Ml]!1h");
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
      CSVFormat cSVFormat4 = cSVFormat3.withAutoFlush(true);
//      try { 
        CSVParser.parse((File) mockFile1, charset0, cSVFormat4);
//        fail("Expecting exception: FileNotFoundException");
      
//      } catch(FileNotFoundException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreSurroundingSpaces();
      cSVFormat0.withAutoFlush(false);
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('K');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('K');
      CSVParser cSVParser0 = CSVParser.parse("The quoteChar cannot be a line break", cSVFormat0);
      cSVParser0.spliterator();
      cSVParser0.getRecords();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      // Undeclared exception!
//      try { 
        CSVParser.parse((Reader) null, cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('S');
      cSVFormat0.withTrim();
      Character character0 = new Character('S');
      Character character1 = new Character('E');
      cSVFormat1.withQuote(character1);
      CSVParser cSVParser0 = CSVParser.parse("@YQ4BYlraQ", cSVFormat1);
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      File file0 = MockFile.createTempFile("EV{>^n9jQk1QH;", "EV{>^n9jQk1QH;");
      // Undeclared exception!
//      try { 
        CSVParser.parse(file0, (Charset) null, cSVFormat0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // charset
//         //
//         verifyException("java.io.InputStreamReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('K');
      cSVFormat1.withTrim();
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 2713;
      PipedReader pipedReader1 = new PipedReader(pipedWriter0, 2713);
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader1, cSVFormat0);
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getRecordNumber();
      InputStream inputStream0 = null;
      // Undeclared exception!
//      try { 
        Charset.forName((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null charset name
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat0.withRecordSeparator("zJ0");
      cSVFormat4.withHeader((String[]) null);
      CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat3);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('E');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      Character character0 = new Character('E');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      CSVParser cSVParser0 = CSVParser.parse("out", cSVFormat3);
      cSVParser0.getRecords();
      cSVParser0.getRecords();
      // Undeclared exception!
//      try { 
        MockFile.createTempFile("x", "out");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Prefix string too short
//         //
//         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "$#";
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      cSVFormat0.withQuote('#');
      CSVParser.parse("$#", cSVFormat0);
      PipedInputStream pipedInputStream0 = null;
//      try {
        pipedInputStream0 = new PipedInputStream(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Pipe Size <= 0
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(734);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat1);
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.getFirstEndOfLine();
      stringReader0.skip((-2448L));
      stringReader0.close();
      cSVParser0.iterator();
//      try { 
        cSVParser0.nextRecord();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.StringReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('?');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
//      try { 
        CSVParser.parse((URL) null, charset0, cSVFormat1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'url' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("CSVParser has been closed", "CSVParser has been closed", 795, "CSVParser has been closed", uRLStreamHandler0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) uRLStreamHandler0;
      objectArray0[2] = (Object) charset0;
      objectArray0[3] = (Object) uRLStreamHandler0;
      objectArray0[4] = (Object) charset0;
      objectArray0[5] = (Object) uRLStreamHandler0;
      objectArray0[6] = (Object) "CSVParser has been closed";
      objectArray0[7] = (Object) uRLStreamHandler0;
      CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
      CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(true);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('U');
      cSVFormat4.withHeaderComments(objectArray0);
      // Undeclared exception!
//      try { 
        CSVParser.parse(uRL0, charset0, cSVFormat4);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.net.URL", e);
//      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('$');
      CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
      cSVFormat2.withHeader((String[]) null);
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser((Reader) null, cSVFormat2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'reader' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('K');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
//      try { 
        CSVParser.parse((Reader) pipedReader0, cSVFormat3);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedReader", e);
//      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = null;
      CSVParser cSVParser0 = null;
//      try {
        cSVParser0 = new CSVParser(pipedReader0, (CSVFormat) null, (-1902L), (-1L));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'format' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)93, (byte)93);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('J');
      CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(false);
      CSVParser cSVParser0 = CSVParser.parse((InputStream) bufferedInputStream0, charset0, cSVFormat3);
      cSVParser0.nextRecord();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('2');
      cSVFormat0.withDelimiter('[');
      String string0 = "@E9(Y>aUE";
      StringReader stringReader0 = new StringReader("@E9(Y>aUE");
      cSVFormat0.withTrim(false);
      cSVFormat0.withTrim(true);
      CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
      cSVParser0.getHeaderMap();
      cSVParser0.isClosed();
      cSVParser0.nextRecord();
      cSVParser0.getCurrentLineNumber();
      cSVParser0.iterator();
      cSVParser0.nextRecord();
      cSVParser0.isClosed();
      cSVParser0.getHeaderMap();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.getRecordNumber();
      InputStream inputStream0 = null;
      // Undeclared exception!
//      try { 
        Charset.forName((String) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null charset name
//         //
//         verifyException("java.nio.charset.Charset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('K');
      CSVFormat cSVFormat2 = cSVFormat1.withTrim();
      cSVFormat2.withFirstRecordAsHeader();
      File file0 = MockFile.createTempFile("The quoteChar cannot be a line break", "gl\"T%%6@-L< fu", (File) null);
      MockFile mockFile0 = new MockFile(file0, "q@b-T: NeDaqWz");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
//      try { 
        CSVParser.parse(path0, charset0, cSVFormat2);
//        fail("Expecting exception: NoSuchFileException");
      
//      } catch(NoSuchFileException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      Charset charset0 = Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withTrim();
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('P');
      CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat3);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      CSVParser.parse((InputStream) sequenceInputStream0, charset0, cSVFormat2);
      cSVParser0.getHeaderMap();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = null;
      CSVFormat cSVFormat0 = null;
      // Undeclared exception!
//      try { 
        CSVParser.parse((String) null, (CSVFormat) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Parameter 'string' must not be null!
//         //
//         verifyException("org.apache.commons.csv.Assertions", e);
//      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVFormat cSVFormat0 = CSVFormat.newFormat('}');
      CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
      CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat1);
      cSVFormat1.withSystemRecordSeparator();
      cSVParser0.getFirstEndOfLine();
      cSVParser0.close();
//      try { 
        cSVParser0.getRecords();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.BufferedReader", e);
//      }
  }
}
