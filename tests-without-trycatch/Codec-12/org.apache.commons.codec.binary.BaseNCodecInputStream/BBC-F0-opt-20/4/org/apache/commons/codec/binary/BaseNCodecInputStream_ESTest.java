/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 19:40:59 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.BaseNCodec;
import org.apache.commons.codec.binary.BaseNCodecInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseNCodecInputStream_ESTest extends BaseNCodecInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Base64 base64_0 = new Base64(2704);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, true);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(0, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = baseNCodecInputStream0.read(byteArray0, 0, 0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(0, int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 110, 33);
      assertEquals((-108), byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, (BaseNCodec) null, true);
      assertEquals((-108), byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(2, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, 1, 1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base32 base32_0 = new Base32((-3519));
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertNotNull(base32_0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-846), 1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(2, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)0, 1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertNotNull(base32_0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(dataInputStream0, base32_0, true);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertFalse(fileDescriptor0.valid());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertNotNull(baseNCodecInputStream0);
      
      byte[] byteArray0 = new byte[8];
//      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)0, 2);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, (BaseNCodec) null, false);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(9, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-56), (byte)81);
      assertEquals(64, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, false);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, byteArrayInputStream0.available());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(8, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(370, byteArray0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pushbackInputStream0, base64_0, true);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(0, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
//      try { 
        baseNCodecInputStream0.read();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Stream closed
//         //
//         verifyException("java.io.PushbackInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 74);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base64_0, false);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(2, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      int int0 = baseNCodecInputStream0.read(byteArray0, (int) (byte)0, 1);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(base64_0.isUrlSafe());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Base32 base32_0 = new Base32((byte)0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertNotNull(base32_0);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(2, byteArray0.length);
      assertNotNull(baseNCodecInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      int int0 = baseNCodecInputStream0.read();
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(65, int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      int int1 = baseNCodecInputStream0.read(byteArray0, (int) (byte)0, 1);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertEquals(1, int1);
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Base32 base32_0 = new Base32(0);
      byte[] byteArray0 = new byte[6];
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base32_0, false);
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, 0, 76);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 74);
      Base64 base64_0 = new Base64(false);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base64_0, false);
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, 62, 65);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("Parameter supplied to Base-N decode is not a byte[] or a String", "Parameter supplied to Base-N decode is not a byte[] or a String", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Base64 base64_0 = new Base64((-1022), byteArray0, true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, base64_0, true);
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, 1, (-1022));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      Base64 base64_0 = new Base64(2704);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, true);
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, (-2388), 1644);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base32 base32_0 = new Base32((byte)0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read((byte[]) null, (int) (byte)0, 50);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base32 base32_0 = new Base32(true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      Base64 base64_0 = new Base64(919, byteArray0, true);
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base64_0, false);
      int int0 = baseNCodecInputStream1.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(211, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Base64 base64_0 = new Base64(76, byteArray0, true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, true);
      baseNCodecInputStream0.read(byteArray0);
      baseNCodecInputStream0.read();
      baseNCodecInputStream0.read();
      int int0 = baseNCodecInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Base32 base32_0 = new Base32(0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base32_0, false);
      boolean boolean0 = baseNCodecInputStream0.markSupported();
      assertFalse(boolean0);
  }
}
