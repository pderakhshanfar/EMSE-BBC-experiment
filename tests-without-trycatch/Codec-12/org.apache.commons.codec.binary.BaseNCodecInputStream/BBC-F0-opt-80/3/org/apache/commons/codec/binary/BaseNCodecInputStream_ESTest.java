/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 19:40:54 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.BaseNCodec;
import org.apache.commons.codec.binary.BaseNCodecInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseNCodecInputStream_ESTest extends BaseNCodecInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("Parameter supplied to Base-N decode is not a byte[] or a String", "org.apache.commons.codec.binary.BaseNCodecInputStream");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      Base32 base32_0 = new Base32(false);
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, base32_0, false);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0, mockFileInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      
      byte[] byteArray0 = new byte[0];
      int int0 = baseNCodecInputStream0.read(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0, mockFileInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      
      int int0 = baseNCodecInputStream0.read(byteArray0, 1, 1);
      assertEquals(2, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base32 base32_0 = new Base32(true);
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(9, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      
      BaseNCodecInputStream baseNCodecInputStream1 = new BaseNCodecInputStream(baseNCodecInputStream0, base32_0, false);
      assertFalse(baseNCodecInputStream1.equals((Object)baseNCodecInputStream0));
      assertNotNull(baseNCodecInputStream1);
      assertEquals(9, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertFalse(baseNCodecInputStream1.markSupported());
      
      int int0 = baseNCodecInputStream1.read();
      assertFalse(baseNCodecInputStream0.equals((Object)baseNCodecInputStream1));
      assertFalse(baseNCodecInputStream1.equals((Object)baseNCodecInputStream0));
      assertEquals(9, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(baseNCodecInputStream0, baseNCodecInputStream1);
      assertNotSame(baseNCodecInputStream1, baseNCodecInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      assertFalse(baseNCodecInputStream1.markSupported());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, (BaseNCodec) null, false);
      assertNotNull(baseNCodecInputStream0);
      assertFalse(baseNCodecInputStream0.markSupported());
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)1, (int) (byte)1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base32_0, true);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      
      byte[] byteArray0 = new byte[5];
//      try { 
        baseNCodecInputStream0.read(byteArray0, 0, (int) (byte)5);
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, (BaseNCodec) null, true);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read();
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-31), (byte)1);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      Base32 base32_0 = new Base32(1866);
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(bufferedInputStream0, base32_0, true);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read();
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.io.ByteArrayInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(43);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 43);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(dataInputStream0, base32_0, false);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      
//      try { 
        baseNCodecInputStream0.read();
//        fail("Expecting exception: IOException");
      
//      } catch(IOException e) {
//         //
//         // Pipe not connected
//         //
//         verifyException("java.io.PipedInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[9];
      Base32 base32_0 = new Base32((-884));
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pushbackInputStream0, base32_0, true);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertFalse(baseNCodecInputStream0.markSupported());
      
      int int0 = baseNCodecInputStream0.read(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(baseNCodecInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base32 base32_0 = new Base32((byte)35);
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream((InputStream) null, base32_0, true);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertFalse(baseNCodecInputStream0.markSupported());
      
      base32_0.ensureBufferSize((-2242));
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(sequenceInputStream0, base32_0, false);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertFalse(baseNCodecInputStream0.markSupported());
      
      byte[] byteArray0 = new byte[6];
      int int0 = baseNCodecInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)1);
      assertEquals(6, byteArray0.length);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(baseNCodecInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile("Parameter supplied to Base-N decode is not a byte[] or a String", "org.apache.commons.codec.binary.BaseNCodecInputStream");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      Base32 base32_0 = new Base32(true);
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, base32_0, true);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0, mockFileInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      
      boolean boolean0 = baseNCodecInputStream0.markSupported();
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertFalse(boolean0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("Parameter supplied to Base-N decode is not a byte[] or a String0org.apache.commons.codec.binary.BaseNCodecInputStream", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0, mockFileInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base32 base32_0 = new Base32();
      assertNotNull(base32_0);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      assertNotNull(baseNCodecInputStream0);
      assertEquals(2, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
      
      int int0 = baseNCodecInputStream0.read(byteArray0, 1, 0);
      assertEquals(2, byteArray0.length);
      assertEquals(64, BaseNCodec.PEM_CHUNK_SIZE);
      assertEquals(76, BaseNCodec.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(baseNCodecInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[4];
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(pipedInputStream0, base32_0, false);
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, 0, 1444);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, false);
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, 15, 1076);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("Parameter supplied to Base-N decode is not a byte[] or a String", "org.apache.commons.codec.binary.BaseNCodecInputStream");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Base32 base32_0 = new Base32(true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, base32_0, true);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, (int) (byte)50, (-1));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Input array too big, the output array would be bigger (");
      File file0 = MockFile.createTempFile("yd`>cE|niZ9.2", "", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      byte[] byteArray0 = new byte[5];
      Base32 base32_0 = new Base32(0, byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, base32_0, false);
      // Undeclared exception!
//      try { 
        baseNCodecInputStream0.read(byteArray0, (-2766), 3550);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.apache.commons.codec.binary.BaseNCodecInputStream", e);
//      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base32 base32_0 = new Base32();
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, false);
      int int0 = baseNCodecInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(250, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("Parameter supplied to Base-N decode is not a byte[] or a String", "org.apache.commons.codec.binary.BaseNCodecInputStream");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Base32 base32_0 = new Base32(true);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(mockFileInputStream0, base32_0, true);
      int int0 = baseNCodecInputStream0.read();
      assertEquals((-1), mockFileInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base32 base32_0 = new Base32(true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, true);
      int int0 = baseNCodecInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(48, int0);
  }
}
