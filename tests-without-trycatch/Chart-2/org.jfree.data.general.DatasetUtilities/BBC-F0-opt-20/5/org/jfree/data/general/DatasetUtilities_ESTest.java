/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:26:57 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.HierarchyBoundsListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.swing.JLayer;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) week0, (Number) 53);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) week0, (double) 1, 53);
      assertNotNull(pieDataset0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 53;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (double) 53;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte)8;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)8, (byte)1, (byte) (-110), (byte)1, (byte)42, (byte) (-16), (byte) (-3), (byte)8}, byteArray0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      stack0.setSize(31);
      assertEquals(31, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", stack0.toString());
      assertEquals(31, stack0.capacity());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
      assertNull(range1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, linkedList0.size());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("Null 'dataset' argument.");
      assertTrue(boolean0);
      assertTrue(stack0.contains("Null 'dataset' argument."));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Null 'dataset' argument.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      defaultStatisticalCategoryDataset0.add((Number) null, (Number) null, (Comparable) "Null 'dataset' argument.", (Comparable) week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains("Null 'dataset' argument."));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Null 'dataset' argument.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 0, (double) 0, "iR7");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-2805.600909334);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-2727.8994962119737);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals((-2.147483648E9), number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2.147483647E9, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0737418245E9), range0.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      jDBCXYDataset0.seriesChanged((SeriesChangeEvent) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Number[][] numberArray0 = new Number[1][9];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = Integer.getInteger("A4!6", (-1179));
      assertNotNull(integer0);
      assertEquals((-1179), (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1179.0), range0.getCentralValue(), 0.01);
      assertEquals((-1179.0), range0.getUpperBound(), 0.01);
      assertEquals((-1179.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(integer0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1179.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-1179.0), range1.getLowerBound(), 0.01);
      assertEquals((-589.5), range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) week0, (Number) 53);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, (double) 1, 2);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Float float0 = new Float((-975.1101921));
      assertNotNull(float0);
      assertEquals((-975.11017F), (float)float0, 0.01F);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) float0);
      assertNotNull(xYDataItem0);
      assertEquals((-30000.0), xYDataItem0.getXValue(), 0.01);
      assertEquals((-975.1101684570312), xYDataItem0.getYValue(), 0.01);
      
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) float0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = (Number) float0;
      numberArray1[4] = (Number) integer0;
      numberArray1[5] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 17);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(17, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) xYDataItem0, (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 17, Size: 6
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(15, 920.0603796126348);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(920.0603796126348, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The number of categories does not match the data.";
      stringArray0[1] = "LCmg8~/?4";
      stringArray0[2] = "LCmg8~/?4";
      stringArray0[3] = "LCmg8~/?4";
      stringArray0[4] = "LCmg8~/?4";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 15);
      assertNotNull(categoryToPieDataset0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(15, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1130L));
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-940), "2(%jOrol7sx.=Y#`");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=2(%jOrol7sx.=Y#`,offset=-940,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-940), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("2(%jOrol7sx.=Y#`", simpleTimeZone0.getID());
      
      Hour hour0 = new Hour(mockDate0, simpleTimeZone0);
      assertNotNull(hour0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=2(%jOrol7sx.=Y#`,offset=-940,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-940), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("2(%jOrol7sx.=Y#`", simpleTimeZone0.getID());
      assertEquals(23, hour0.getHour());
      assertEquals((-1130L), hour0.getLastMillisecond());
      assertEquals((-1130L), hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.previous();
      assertNotNull(hour1);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=2(%jOrol7sx.=Y#`,offset=-940,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-940), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("2(%jOrol7sx.=Y#`", simpleTimeZone0.getID());
      assertEquals(23, hour0.getHour());
      assertEquals((-1130L), hour0.getLastMillisecond());
      assertEquals((-1130L), hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(22, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1237.829361;
      doubleArray0[1] = (double) (-940);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(6, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1237.829361, (-940.0)}, doubleArray0, 0.01);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=2(%jOrol7sx.=Y#`,offset=-940,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-940), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("2(%jOrol7sx.=Y#`", simpleTimeZone0.getID());
      assertEquals(23, hour0.getHour());
      assertEquals((-1130L), hour0.getLastMillisecond());
      assertEquals((-1130L), hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(22, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultHighLowDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(6, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1237.829361, (-940.0)}, doubleArray0, 0.01);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=2(%jOrol7sx.=Y#`,offset=-940,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-940), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("2(%jOrol7sx.=Y#`", simpleTimeZone0.getID());
      assertEquals(23, hour0.getHour());
      assertEquals((-1130L), hour0.getLastMillisecond());
      assertEquals((-1130L), hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(22, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = stack0.add("99LqY=@C 8C{n1:]Ww");
      assertTrue(boolean1);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean1 == boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) "99LqY=@C 8C{n1:]Ww", (Comparable) "99LqY=@C 8C{n1:]Ww");
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(200.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(200.0, range0.getCentralValue(), 0.01);
      assertEquals(200.0, range0.getUpperBound(), 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 37);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(37, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 37, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray0[0], doubleArray0[0], doubleArray0[0], doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[][] doubleArray0 = new double[13][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, range0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("A4!");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-4056.32621);
      doubleArray1[2] = (-4056.32621);
      doubleArray1[3] = (-4056.32621);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-4056.32621);
      doubleArray2[3] = (-4056.32621);
      doubleArray2[4] = (-1474.82310322377);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = 81.0;
      doubleArray3[4] = (-4056.32621);
      doubleArray3[5] = (-4056.32621);
      doubleArray3[6] = (-4056.32621);
      doubleArray3[7] = (-1474.82310322377);
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray1[3] = (-1474.82310322377);
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = 81.0;
      doubleArray4[3] = 0.5;
      doubleArray4[4] = 81.0;
      doubleArray4[5] = 0.5;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = (-4056.32621);
      doubleArray4[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = (-4056.32621);
      doubleArray5[3] = (-4056.32621);
      doubleArray5[4] = 0.5;
      doubleArray5[5] = (-1474.82310322377);
      doubleArray0[5] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (-1474.82310322377);
      doubleArray0[6] = doubleArray6;
      doubleArray0[4] = doubleArray5;
      doubleArray0[8] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("A4!", "A4!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 5);
      assertNotNull(categoryToPieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5, categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 0.0, (-4056.32621), 5);
      assertNotNull(pieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[2];
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray0[0], doubleArray0[0], doubleArray0[0], doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      vector0.setSize(60);
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertEquals(60, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(60, vector0.capacity());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("A4!");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-4056.32621);
      doubleArray1[2] = (-4056.32621);
      doubleArray1[3] = (-4056.32621);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-4056.32621);
      doubleArray2[3] = (-4056.32621);
      doubleArray2[4] = (-1474.82310322377);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = 81.0;
      doubleArray3[4] = (-4056.32621);
      doubleArray3[5] = (-4056.32621);
      doubleArray3[6] = (-4056.32621);
      doubleArray3[7] = (-1474.82310322377);
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray1[3] = (-1474.82310322377);
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = 81.0;
      doubleArray4[3] = 0.5;
      doubleArray4[4] = 81.0;
      doubleArray4[5] = 0.5;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = (-4056.32621);
      doubleArray4[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = (-4056.32621);
      doubleArray5[3] = (-4056.32621);
      doubleArray5[4] = 0.5;
      doubleArray5[5] = (-1474.82310322377);
      doubleArray0[5] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1474.82310322377);
      doubleArray0[6] = doubleArray6;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = (-1189.8108109);
      doubleArray7[2] = (-1474.82310322377);
      doubleArray7[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("A4!", "A4!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 5);
      assertNotNull(categoryToPieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5, categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 0.0, (-4056.32621), 5);
      assertNotNull(pieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("[");
      assertTrue(boolean0);
      assertTrue(stack0.contains("["));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(1089.0466539016522, 1089.0466539016522, "[");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1089.0466539016522, range0.getCentralValue(), 0.01);
      assertEquals(1089.5466539016522, range0.getUpperBound(), 0.01);
      assertEquals(1088.5466539016522, range0.getLowerBound(), 0.01);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1189.8108109);
      doubleArray1[1] = (-1189.8108109);
      doubleArray1[2] = 1089.0466539016522;
      doubleArray1[3] = 1089.0466539016522;
      doubleArray1[4] = (-1189.8108109);
      doubleArray1[5] = (-1189.8108109);
      doubleArray1[6] = 1089.0466539016522;
      doubleArray1[7] = (-1189.8108109);
      doubleArray1[8] = (-1189.8108109);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1089.0466539016522;
      doubleArray2[1] = (-1189.8108109);
      doubleArray2[2] = (-1189.8108109);
      doubleArray2[3] = 1089.0466539016522;
      doubleArray2[4] = 1089.0466539016522;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[", "[", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-119));
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-119), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-1189.8108109), 3565.4955457, 738);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[14][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(14, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "W,gH0,%KZP-%*");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.5), range0.getLowerBound(), 0.01);
      assertEquals((-0.5), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      
      Range range1 = Range.shift(range0, (-787.86929), false);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.5), range0.getLowerBound(), 0.01);
      assertEquals((-0.5), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-788.36929), range1.getUpperBound(), 0.01);
      assertEquals((-789.36929), range1.getLowerBound(), 0.01);
      assertEquals((-788.86929), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean1 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-113.24285631), (-113.24285631));
      assertNotNull(powerFunction2D0);
      assertEquals((-113.24285631), powerFunction2D0.getA(), 0.01);
      assertEquals((-113.24285631), powerFunction2D0.getB(), 0.01);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-113.24285631), (-1.0));
      assertNotNull(simpleHistogramBin0);
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-113.24285631), simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramBin0.setItemCount(12);
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-113.24285631), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(12, simpleHistogramBin0.getItemCount());
      
      simpleHistogramBin0.setItemCount((-4862));
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-4862), simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-113.24285631), simpleHistogramBin0.getLowerBound(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1134.964392), (-1.0), 12, simpleHistogramBin0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-113.24285631), powerFunction2D0.getA(), 0.01);
      assertEquals((-113.24285631), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-4862), simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-113.24285631), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      defaultTableXYDataset0.removeAllValuesForX(integer0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range1);
      assertEquals((-113.24285631), powerFunction2D0.getA(), 0.01);
      assertEquals((-113.24285631), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-4862), simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-113.24285631), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotNull(range2);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.addValue(425.498291, (Comparable) integer0, (Comparable) simpleHistogramBin0);
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-4862), simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-113.24285631), simpleHistogramBin0.getLowerBound(), 0.01);
      
      int int0 = defaultCategoryDataset0.getColumnCount();
      assertEquals(1, int0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      assertEquals(0, linkedList0.size());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, range0, true);
      assertNull(range3);
      assertFalse(linkedList0.contains(defaultTableXYDataset0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(range0, range2);
      assertTrue(range0.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("N0B:pT,Og17ut");
      assertTrue(boolean0);
      assertTrue(stack0.contains("N0B:pT,Og17ut"));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[N0B:pT,Og17ut]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(1267.0097856040434, (-1219.154), (Comparable) "N0B:pT,Og17ut", (Comparable) "N0B:pT,Og17ut");
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = day0.next();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) regularTimePeriod0, (Comparable) integer0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertTrue(stack0.contains("N0B:pT,Og17ut"));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[N0B:pT,Og17ut]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1267.0097856040434, range0.getLowerBound(), 0.01);
      assertEquals(1267.0097856040434, range0.getCentralValue(), 0.01);
      assertEquals(1267.0097856040434, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, (-1030.9063294584), (-1213.09392563), 2, day0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DomainOrder domainOrder0 = categoryTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1451.465989613));
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1451.465989613), range0.getLowerBound(), 0.01);
      assertEquals((-1451.465989613), range0.getCentralValue(), 0.01);
      assertEquals((-1451.465989613), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertEquals(300, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer1, (Comparable) "99LqY=@C 8C{n1:]Ww", (Comparable) "99LqY=@C 8C{n1:]Ww");
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = stack0.add("99LqY=@C 8C{n1:]Ww");
      assertTrue(boolean0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals(10, stack0.capacity());
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals(10, stack0.capacity());
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(600.0, range0.getLength(), 0.01);
      assertEquals((-200.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-4056.82621), (-4056.82621), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-4056.82621));
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-8113.65242), range0.getLowerBound(), 0.01);
      assertEquals((-6085.239315000001), range0.getCentralValue(), 0.01);
      assertEquals((-4056.82621), range0.getUpperBound(), 0.01);
      assertEquals(4056.82621, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-4056.82621), range1.getCentralValue(), 0.01);
      assertEquals((-4056.82621), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-4056.82621), range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("A4!");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-4056.32621);
      doubleArray1[2] = 4624.877;
      doubleArray1[3] = (-1474.82310322377);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-4056.32621);
      doubleArray2[3] = (-4056.32621);
      doubleArray2[4] = (-1474.82310322377);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-4056.32621);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = 4624.877;
      doubleArray4[3] = 81.0;
      doubleArray4[4] = (-1474.82310322377);
      doubleArray4[5] = (-4056.32621);
      doubleArray4[6] = (-4056.32621);
      doubleArray4[7] = (-1474.82310322377);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-1474.82310322377);
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = 81.0;
      doubleArray5[3] = 0.5;
      doubleArray5[4] = 81.0;
      doubleArray5[5] = 4624.877;
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray5[7] = 4624.877;
      doubleArray5[8] = 0.5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = 4624.877;
      doubleArray6[3] = (-4056.32621);
      doubleArray6[4] = 0.5;
      doubleArray6[5] = (-1474.82310322377);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (-1474.82310322377);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 81.0;
      doubleArray8[1] = (-1474.82310322377);
      doubleArray8[2] = (-1474.82310322377);
      doubleArray8[3] = 81.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = (-1189.8108109);
      doubleArray9[1] = (-1474.82310322377);
      doubleArray9[2] = (-1474.82310322377);
      doubleArray9[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("A4!", "A4!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 5);
      assertNotNull(categoryToPieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5, categoryToPieDataset0.getExtractIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 4624.877, (-4056.32621), 5540);
      assertNotNull(pieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5, categoryToPieDataset0.getExtractIndex());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 999, (double) 999, "1!!3]b\"+4TO&wed,I");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?RQQ");
      assertFalse(boolean0);
      
      categoryTableXYDataset0.add(589.852755514, 3295.4699347, "\"jf~uXa%4fzM\"n");
      assertEquals(409.147244486, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(3295.4699347, double0, 0.01);
      assertEquals(409.147244486, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("+SgxmD.\"");
      assertTrue(boolean0);
      assertTrue(stack0.contains("+SgxmD.\""));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[+SgxmD.\"]", stack0.toString());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-352.25767), 1081.6680070128725);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-352.25767), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1081.6680070128725, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("+SgxmD.\"");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-352.25767), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1081.6680070128725, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate0 = new MockDate((-1), 1355, 7, (-1), (-1));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-908.787), (-908.787), 477.90840166108, (-1), 4727.2862470547);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Dec 06 22:59:00 GMT 2011", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 505.1031844656764, 505.1031844656764, (-1896.26268), (-4239.4794), (-4239.4794));
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Dec 06 22:59:00 GMT 2011", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1896.26268), 1801.75772, 477.90840166108, 1801.75772, (-1896.26268));
      assertNotNull(oHLCDataItem2);
      assertEquals("Tue Dec 06 22:59:00 GMT 2011", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(simpleHistogramBin0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-352.25767), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1081.6680070128725, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-352.25767), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1081.6680070128725, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.32321234E12, range0.getLowerBound(), 0.01);
      assertEquals(1.32321234E12, range0.getCentralValue(), 0.01);
      assertEquals(1.32321234E12, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertEquals(3, oHLCDataItemArray0.length);
      assertTrue(stack0.contains("+SgxmD.\""));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[+SgxmD.\"]", stack0.toString());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-352.25767), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1081.6680070128725, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.32321234E12, range0.getLowerBound(), 0.01);
      assertEquals(1.32321234E12, range0.getCentralValue(), 0.01);
      assertEquals(1.32321234E12, range0.getUpperBound(), 0.01);
      assertEquals((-1218.86084), range1.getCentralValue(), 0.01);
      assertEquals((-4239.4794), range1.getLowerBound(), 0.01);
      assertEquals(6041.23712, range1.getLength(), 0.01);
      assertEquals(1801.75772, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.jfree.data.time.Month";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("^?\"bx4lRSX.FpV");
      assertTrue(boolean0);
      assertTrue(stack0.contains("^?\"bx4lRSX.FpV"));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[^?\"bx4lRSX.FpV]", stack0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(755.29143444246, (-297.0), "^?\"bx4lRSX.FpV");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertNotNull(range0);
      assertTrue(stack0.contains("^?\"bx4lRSX.FpV"));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[^?\"bx4lRSX.FpV]", stack0.toString());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(755.29143444246, range0.getUpperBound(), 0.01);
      assertEquals(755.29143444246, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(755.29143444246, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains("^?\"bx4lRSX.FpV"));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[^?\"bx4lRSX.FpV]", stack0.toString());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(755.29143444246, range0.getUpperBound(), 0.01);
      assertEquals(755.29143444246, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(755.29143444246, range0.getLowerBound(), 0.01);
      assertEquals((-297.0), range1.getCentralValue(), 0.01);
      assertEquals((-297.0), range1.getLowerBound(), 0.01);
      assertEquals((-297.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1007.9068888145), Double.NaN, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add(Double.POSITIVE_INFINITY, 0.0, "x<y.G6D~l-,Fmx");
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset1, Double.NaN);
      assertNull(range0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[20];
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(instant0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SpreadsheetDate: Serial must be in range 2 to 2958465.");
      assertFalse(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertFalse(stack0.contains("SpreadsheetDate: Serial must be in range 2 to 2958465."));
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(boolean1 == boolean0);
      
      categoryTableXYDataset0.add(0.0, (-830.0), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertNotNull(range0);
      assertFalse(stack0.contains("SpreadsheetDate: Serial must be in range 2 to 2958465."));
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[12][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(12, doubleArray0.length);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      vector0.setSize(8648);
      assertEquals(8648, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(8648, vector0.capacity());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(12, doubleArray0.length);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[13][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, ")");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DomainOrder domainOrder0 = categoryTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      categoryTableXYDataset0.add(1081.6680070128725, 1081.6680070128725, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1082.1680070128725, range0.getUpperBound(), 0.01);
      assertEquals(1081.1680070128725, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1081.6680070128725, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(540.8340035064363, range1.getCentralValue(), 0.01);
      assertEquals(1081.6680070128725, range1.getUpperBound(), 0.01);
      assertEquals(1081.6680070128725, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) "lQ+n6Giq`7+SN4Yw", (Comparable) "lQ+n6Giq`7+SN4Yw");
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Stack<String> stack1 = new Stack<String>();
      assertNotNull(stack1);
      assertFalse(stack1.contains("lQ+n6Giq`7+SN4Yw"));
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      boolean boolean0 = stack1.add("lQ+n6Giq`7+SN4Yw");
      assertTrue(boolean0);
      assertTrue(stack1.contains("lQ+n6Giq`7+SN4Yw"));
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals("[lQ+n6Giq`7+SN4Yw]", stack1.toString());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack1, false);
      assertNull(range0);
      assertTrue(stack1.contains("lQ+n6Giq`7+SN4Yw"));
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals("[lQ+n6Giq`7+SN4Yw]", stack1.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("99LqY=@C 8C{n1:]Ww");
      assertTrue(boolean0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) "99LqY=@C 8C{n1:]Ww", (Comparable) "99LqY=@C 8C{n1:]Ww");
      boolean boolean1 = stack0.add("99LqY=@C 8C{n1:]Ww");
      assertTrue(boolean1);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[99LqY=@C 8C{n1:]Ww, 99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[99LqY=@C 8C{n1:]Ww, 99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertEquals(200.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(200.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[13][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(quarter0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, dateArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add("Null 'base' argument.");
      assertTrue(boolean0);
      assertTrue(stack0.contains("Null 'base' argument."));
      assertEquals("[Null 'base' argument.]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "Null 'base' argument.");
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean1 == boolean0);
      
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3784.08);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3784.08);
      doubleArray2[1] = (-3784.08);
      doubleArray2[2] = (-3784.08);
      doubleArray2[3] = (-3784.08);
      doubleArray2[4] = (-3784.08);
      doubleArray2[5] = 6.283185307179586;
      doubleArray2[6] = (-3784.08);
      doubleArray2[7] = (-3784.08);
      doubleArray2[8] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = 6.283185307179586;
      doubleArray4[2] = 6.283185307179586;
      doubleArray4[3] = Double.NaN;
      doubleArray4[4] = 6.283185307179586;
      doubleArray4[5] = Double.NaN;
      doubleArray4[6] = Double.NaN;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-3784.08);
      doubleArray6[1] = Double.NaN;
      doubleArray6[2] = (-3784.08);
      doubleArray6[3] = 2880.38559953;
      doubleArray6[4] = 6.283185307179586;
      doubleArray6[5] = (-3784.08);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-3784.08);
      doubleArray7[1] = (-3784.08);
      doubleArray7[2] = 2880.38559953;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = Double.NaN;
      doubleArray8[1] = (-1018.2067582);
      doubleArray8[2] = Double.NaN;
      doubleArray8[3] = 6.283185307179586;
      doubleArray8[4] = (-4183.846387826);
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[5];
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Date[] dateArray0 = new Date[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray0[0], doubleArray0[0], doubleArray0[0], doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.clearSelection();
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      vector0.setSize(60);
      assertEquals(60, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(60, vector0.size());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, vector0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add("99LqY=@C 8C{n1:]Ww");
      assertTrue(boolean0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) "99LqY=@C 8C{n1:]Ww", (Comparable) "99LqY=@C 8C{n1:]Ww");
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)2;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      ArrayDeque<XIntervalSeriesCollection> arrayDeque0 = new ArrayDeque<XIntervalSeriesCollection>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean1 = stack0.retainAll(arrayDeque0);
      assertTrue(boolean1);
      assertFalse(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertFalse(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotNull(range1);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (byte)2, 573.6451960441872, 2);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("0");
      assertTrue(boolean0);
      assertTrue(stack0.contains("0"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DomainOrder domainOrder0 = categoryTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.contains("0"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      categoryTableXYDataset0.add((-4811.317969785891), 1082.0, "0");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains("0"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-4811.817969785891), range0.getLowerBound(), 0.01);
      assertEquals((-4811.317969785891), range0.getCentralValue(), 0.01);
      assertEquals((-4810.817969785891), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-4811.817969785891), range1.getLowerBound(), 0.01);
      assertEquals((-4811.317969785891), range1.getCentralValue(), 0.01);
      assertEquals((-4810.817969785891), range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      stack0.removeAllElements();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("/kbs<FXWX%G+1}c");
      assertTrue(boolean0);
      assertTrue(stack0.contains("/kbs<FXWX%G+1}c"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[/kbs<FXWX%G+1}c]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("/kbs<FXWX%G+1}c");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float((-4.553));
      assertNotNull(float0);
      assertEquals((-4.553F), (float)float0, 0.01F);
      
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-99);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-19), (byte) (-99)}, byteArray0);
      assertEquals((byte) (-99), bigInteger0.byteValue());
      assertEquals((short) (-4707), bigInteger0.shortValue());
      
      numberArray2[2] = (Number) bigInteger0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) float0;
      numberArray2[6] = (Number) float0;
      numberArray2[7] = (Number) float0;
      numberArray2[8] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) bigInteger0;
      numberArray3[1] = (Number) (byte) (-48);
      numberArray3[2] = (Number) (byte) (-99);
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-1542451.7764999866), range0.getCentralValue(), 0.01);
      assertEquals((-4.552999973297119), range0.getUpperBound(), 0.01);
      assertEquals(3084894.4470000267, range0.getLength(), 0.01);
      assertEquals((-3084899.0), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertEquals(3, numberArray0.length);
      assertTrue(stack0.contains("/kbs<FXWX%G+1}c"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[/kbs<FXWX%G+1}c]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-1542451.7764999866), range0.getCentralValue(), 0.01);
      assertEquals((-4.552999973297119), range0.getUpperBound(), 0.01);
      assertEquals(3084894.4470000267, range0.getLength(), 0.01);
      assertEquals((-3084899.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("99LqY=@C 8C{n1:]Ww");
      assertTrue(boolean0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) "99LqY=@C 8C{n1:]Ww", (Comparable) "99LqY=@C 8C{n1:]Ww");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1730.5;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1745.47320979399;
      doubleArray1[3] = 1247.1410335;
      doubleArray1[4] = 2451.7950596470955;
      doubleArray1[5] = (-1.7976931348623157E308);
      doubleArray1[6] = (-435.132405);
      doubleArray1[7] = 1.5;
      doubleArray1[8] = 0.5;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals(7174.909302941086, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 999;
      Byte byte0 = new Byte((byte)64);
      assertNotNull(byte0);
      assertEquals((byte)64, (byte)byte0);
      
      numberArray1[1] = (Number) byte0;
      numberArray1[1] = (Number) 999;
      numberArray1[3] = (Number) 0;
      numberArray1[4] = (Number) 999;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      numberArray2[1] = (Number) byte0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-5.400918225407359);
      doubleArray1[1] = (-5.400918225407359);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-5.400918225407359);
      doubleArray2[1] = (-5.400918225407359);
      doubleArray2[2] = (-5.400918225407359);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-5.400918225407359);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertTrue(boolean0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Requires 'start' < 'end'.");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DomainOrder domainOrder0 = categoryTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      categoryTableXYDataset0.add(0.0, 1082.0, "Requires 'start' < 'end'.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add("/kbs<FXWX%G+1}c");
      assertTrue(boolean0);
      assertTrue(stack0.contains("/kbs<FXWX%G+1}c"));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[/kbs<FXWX%G+1}c]", stack0.toString());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("/kbs<FXWX%G+1}c");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3864.15), 1494.9433206504223);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1494.9433206504223, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3864.15), simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramBin0.setItemCount((-264));
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1494.9433206504223, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3864.15), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-264), simpleHistogramBin0.getItemCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1494.9433206504223, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3864.15), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-264), simpleHistogramBin0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(5359.093320650422, range0.getLength(), 0.01);
      assertEquals(1494.9433206504223, range0.getUpperBound(), 0.01);
      assertEquals((-3864.15), range0.getLowerBound(), 0.01);
      assertEquals((-1184.603339674789), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains("/kbs<FXWX%G+1}c"));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[/kbs<FXWX%G+1}c]", stack0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(5359.093320650422, range0.getLength(), 0.01);
      assertEquals(1494.9433206504223, range0.getUpperBound(), 0.01);
      assertEquals((-3864.15), range0.getLowerBound(), 0.01);
      assertEquals((-1184.603339674789), range0.getCentralValue(), 0.01);
      assertEquals((-0.04926206434635455), range1.getCentralValue(), 0.01);
      assertEquals((-0.04926206434635455), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-0.04926206434635455), range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("GkNt&mRygZ@?d@Z~\"Is");
      assertTrue(boolean0);
      assertTrue(stack0.contains("GkNt&mRygZ@?d@Z~\"Is"));
      assertFalse(stack0.empty());
      assertEquals("[GkNt&mRygZ@?d@Z~\"Is]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) null, (Comparable) "GkNt&mRygZ@?d@Z~\"Is", (Comparable) "GkNt&mRygZ@?d@Z~\"Is");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      defaultStatisticalCategoryDataset1.addChangeListener(xYDatasetTableModel0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertTrue(stack0.contains("GkNt&mRygZ@?d@Z~\"Is"));
      assertFalse(stack0.empty());
      assertEquals("[GkNt&mRygZ@?d@Z~\"Is]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset1, false);
      assertNull(range1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("G");
      assertTrue(boolean0);
      assertTrue(stack0.contains("G"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[G]", stack0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains("G"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[G]", stack0.toString());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("!l}[fn]a", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertTrue(boolean0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Requires 'start' < 'end'.");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1836.639222985), (-4.553), true, true);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-1836.639222985), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-4.553), simpleHistogramBin0.getUpperBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-1836.639222985), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-4.553), simpleHistogramBin0.getUpperBound(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1832.086222985, range0.getLength(), 0.01);
      assertEquals((-4.553), range0.getUpperBound(), 0.01);
      assertEquals((-920.5961114925001), range0.getCentralValue(), 0.01);
      assertEquals((-1836.639222985), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1836.639222985), range1.getLowerBound(), 0.01);
      assertEquals((-4.553), range1.getUpperBound(), 0.01);
      assertEquals((-920.5961114925001), range1.getCentralValue(), 0.01);
      assertEquals(1832.086222985, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) "Requires 'start' < 'end'.");
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Date[] dateArray0 = new Date[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray0[0], doubleArray0[0], doubleArray0[0], doubleArray0[0], doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.clearSelection();
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = vector0.add(xIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertTrue(vector0.contains(xIntervalSeriesCollection0));
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      vector0.setSize(60);
      assertTrue(vector0.contains(xIntervalSeriesCollection0));
      assertEquals(60, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(60, vector0.capacity());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 93;
      int int1 = 5;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 93, 5);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(5, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(93, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4099, 47);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(47, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4099, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(47, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4099, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2067.91472), (-2067.91472));
      assertNotNull(lineFunction2D0);
      assertEquals((-2067.91472), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2067.91472), lineFunction2D0.getIntercept(), 0.01);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 1073741824, 1073741824);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1073741824, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1073741824, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(1073741824, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1073741824, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("99LqY=@C 8C{n1:]Ww");
      assertTrue(boolean0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) "99LqY=@C 8C{n1:]Ww", (Comparable) "99LqY=@C 8C{n1:]Ww");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("99LqY=@C 8C{n1:]Ww");
      assertTrue(boolean0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) "99LqY=@C 8C{n1:]Ww", (Comparable) "99LqY=@C 8C{n1:]Ww");
      Stack<String> stack1 = new Stack<String>();
      assertNotNull(stack1);
      assertFalse(stack1.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.equals((Object)stack0));
      
      Stream<String> stream0 = stack1.stream();
      assertNotNull(stream0);
      assertFalse(stack1.contains("99LqY=@C 8C{n1:]Ww"));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add("--YqE7H#qL-");
      assertTrue(boolean1);
      assertTrue(stack1.contains("--YqE7H#qL-"));
      assertFalse(stack1.contains("99LqY=@C 8C{n1:]Ww"));
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[--YqE7H#qL-]", stack1.toString());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack1, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1178));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1178);
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = (double) (-1178);
      doubleArray1[3] = (double) (-1178);
      doubleArray1[4] = (double) (-1178);
      doubleArray1[5] = (double) (-1178);
      doubleArray1[6] = (double) (-1178);
      doubleArray1[7] = (double) (-1178);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.283185307179586;
      doubleArray2[1] = 6.283185307179586;
      doubleArray2[2] = 6.283185307179586;
      doubleArray2[3] = 6.283185307179586;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) (-1178);
      doubleArray2[6] = (double) (-1178);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1178), 2146503230);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-1178), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2146503230, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      vector0.setSize(32);
      assertEquals(32, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertEquals(32, vector0.size());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      Week week0 = new Week(32, 32);
      assertNotNull(week0);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(32, week0.getYearValue());
      assertEquals(32, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1728L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.shift(range0, (double) 32, true);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(32.0, range1.getLowerBound(), 0.01);
      assertEquals(32.0, range1.getCentralValue(), 0.01);
      assertEquals(32.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range1, true);
      assertNull(range2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(32, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertEquals(32, vector0.size());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(32.0, range1.getLowerBound(), 0.01);
      assertEquals(32.0, range1.getCentralValue(), 0.01);
      assertEquals(32.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) vector0, range1, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[0][9];
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((String) null, "&>^l~RNW#R+ty", numberArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, numberArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("&>^l~RNW#R+ty", 61, 61);
      assertNotNull(matrixSeries0);
      assertEquals(61, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3721, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(61, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(61, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3721, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(61, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(61, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3721, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(61, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(30.0, range0.getCentralValue(), 0.01);
      assertEquals(60.0, range0.getUpperBound(), 0.01);
      assertEquals(60.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(60.0, number0);
      assertEquals(61, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3721, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(61, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      String string0 = ")MYp&k~Io#";
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset("", (String) null, ")MYp&k~Io#", "=bC(Q^+zX2");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      boolean boolean1 = stack0.add("%/kbsoFXWX%G+1}c");
      assertTrue(boolean1);
      assertTrue(stack0.contains("%/kbsoFXWX%G+1}c"));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[%/kbsoFXWX%G+1}c]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("%/kbsoFXWX%G+1}c");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-4.553), 1651.97976586239, true, true);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-4.553), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1651.97976586239, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-4.553), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1651.97976586239, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-4.553), range0.getLowerBound(), 0.01);
      assertEquals(823.7133829311949, range0.getCentralValue(), 0.01);
      assertEquals(1651.97976586239, range0.getUpperBound(), 0.01);
      assertEquals(1656.53276586239, range0.getLength(), 0.01);
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1651.97976586239;
      doubleArray1[1] = 1651.97976586239;
      doubleArray1[2] = 1651.97976586239;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-4.553);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean2);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Comparable<DefaultStatisticalCategoryDataset>[] comparableArray0 = (Comparable<DefaultStatisticalCategoryDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<DefaultStatisticalCategoryDataset>) simpleHistogramBin0;
      comparableArray0[1] = (Comparable<DefaultStatisticalCategoryDataset>) simpleHistogramBin0;
      Comparable<TimePeriodValuesCollection>[] comparableArray1 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'columnKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, 1853.888, "JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = 1971.5513181671454;
      categoryTableXYDataset0.add(1971.5513181671454, 1971.5513181671454, "!\"-zunL=\u0004 !4a3'3`Y");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1853.888, number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(number0.equals((Object)double0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double double1 = (-3994.220134076);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
//      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D((-3994.220134076), (-86.687006118874));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'std' > 0.
//         //
//         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, 1853.888, "JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = 1971.5513181671454;
      categoryTableXYDataset0.add(1971.5513181671454, 1971.5513181671454, ",!\"-zunL=\u0004 !4a3'3`Y");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1853.888, number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(number0.equals((Object)double0));
      
      double double1 = (-3994.220134076);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
//      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D((-3994.220134076), (-86.687006118874));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'std' > 0.
//         //
//         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(instant0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      vector0.setSize(32);
      assertEquals(32, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(32, vector0.capacity());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(460.6598521637451, 460.6598521637451);
      assertNotNull(lineFunction2D0);
      assertEquals(460.6598521637451, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(460.6598521637451, lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 1, 3.0, 53, fixedMillisecond0);
      assertNotNull(xYSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(460.6598521637451, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(460.6598521637451, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(921.3197043274902, xYSeries0.getMinY(), 0.01);
      assertEquals(53, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertEquals(3.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(1842.6394086549803, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 19236.21891867397);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(19236.21891867397, range0.getCentralValue(), 0.01);
      assertEquals(19236.21891867397, range0.getUpperBound(), 0.01);
      assertEquals(19236.21891867397, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN);
      assertNotNull(simpleHistogramBin0);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(Double.NaN, 1.0);
      assertNotNull(simpleHistogramBin1);
      assertEquals(1.0, simpleHistogramBin1.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin1.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      simpleHistogramDataset0.addBin(simpleHistogramBin1);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1.0, simpleHistogramBin1.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin1.getLowerBound(), 0.01);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertNotSame(simpleHistogramBin1, simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      assertFalse(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number1);
      assertEquals(Double.NaN, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      vector0.setSize(32);
      assertEquals(32, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertEquals(32, vector0.capacity());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(32));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.shift(range0, (double) 32, true);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(32.0, range1.getLowerBound(), 0.01);
      assertEquals(32.0, range1.getUpperBound(), 0.01);
      assertEquals(32.0, range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range1, true);
      assertNull(range2);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(32, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertEquals(32, vector0.capacity());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(32.0, range1.getLowerBound(), 0.01);
      assertEquals(32.0, range1.getUpperBound(), 0.01);
      assertEquals(32.0, range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add("99LqY=@C 8C{n1:]Ww");
      assertTrue(boolean0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertFalse(stack0.isEmpty());
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) "99LqY=@C 8C{n1:]Ww", (Comparable) "99LqY=@C 8C{n1:]Ww");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      defaultStatisticalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(stack0.contains("99LqY=@C 8C{n1:]Ww"));
      assertFalse(stack0.isEmpty());
      assertEquals("[99LqY=@C 8C{n1:]Ww]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(400.0, range0.getLength(), 0.01);
      assertEquals(200.0, range0.getCentralValue(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("99LqY=@C 8C{n1:]Ww");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("e");
      assertTrue(boolean0);
      assertTrue(stack0.contains("e"));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[e]", stack0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) instant0, (Comparable) integer0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(regularTimePeriod0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-1L), regularTimePeriod0.getSerialIndex());
      assertEquals((-1L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-1L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3028.0;
      doubleArray1[1] = 1634.42148;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 2141.63216;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 1812, 3527);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1812, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3527, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range1);
      assertEquals(1812, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3527, slidingCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      assertEquals(ChronoUnit.HALF_DAYS, chronoUnit0);
      
      Instant instant1 = MockInstant.now();
      assertNotNull(instant1);
      assertNotSame(instant1, instant0);
      assertTrue(instant1.equals((Object)instant0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(chronoUnit0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(instant0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset1);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(instant0.equals((Object)instant1));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Day day0 = minute0.getDay();
      assertNotNull(day0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(day0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1.0), 0.0, false, true);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-1.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-1.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(categoryTableXYDataset0));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNull(range1);
      assertFalse(stack0.contains(categoryTableXYDataset0));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      vector0.setSize(60);
      assertEquals(60, vector0.capacity());
      assertEquals(60, vector0.size());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(regularTimePeriod0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(60));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(3, doubleArray0.length);
      assertFalse(stack0.contains(true));
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 678.230379143218);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(678.230379143218, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(678.230379143218, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(0.0, 1.0);
      assertNotNull(simpleHistogramBin1);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertEquals(1.0, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals(0.0, simpleHistogramBin1.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin1.isSelected());
      assertFalse(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(678.230379143218, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(678.230379143218, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(678.230379143218, range0.getLength(), 0.01);
      assertEquals(339.115189571609, range0.getCentralValue(), 0.01);
      assertEquals(678.230379143218, range0.getUpperBound(), 0.01);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(678.230379143218, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(678.230379143218, range0.getLength(), 0.01);
      assertEquals(339.115189571609, range0.getCentralValue(), 0.01);
      assertEquals(678.230379143218, range0.getUpperBound(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertFalse(boolean0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(678.230379143218, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("lgU]By]L@V\"p)51=KZ5");
      assertTrue(boolean0);
      assertTrue(stack0.contains("lgU]By]L@V\"p)51=KZ5"));
      assertEquals("[lgU]By]L@V\"p)51=KZ5]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("lgU]By]L@V\"p)51=KZ5"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean1 = stack0.addAll((Collection<? extends String>) set0);
      assertFalse(boolean1);
      assertTrue(stack0.contains("lgU]By]L@V\"p)51=KZ5"));
      assertFalse(set0.contains("lgU]By]L@V\"p)51=KZ5"));
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("[lgU]By]L@V\"p)51=KZ5]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains("lgU]By]L@V\"p)51=KZ5"));
      assertEquals("[lgU]By]L@V\"p)51=KZ5]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("lgU]By]L@V\"p)51=KZ5", 11, 305);
      assertNotNull(matrixSeries0);
      assertEquals(3355, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(11, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(305, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(3355, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(11, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(305, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, stack0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains("lgU]By]L@V\"p)51=KZ5"));
      assertEquals("[lgU]By]L@V\"p)51=KZ5]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(3355, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(11, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(305, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(304.0, range1.getLength(), 0.01);
      assertEquals(304.0, range1.getUpperBound(), 0.01);
      assertEquals(152.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Float float0 = new Float(922.6F);
      assertNotNull(float0);
      assertEquals(922.6F, (float)float0, 0.01F);
      
      defaultCategoryDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(922.5999755859375, range0.getUpperBound(), 0.01);
      assertEquals(922.5999755859375, range0.getCentralValue(), 0.01);
      assertEquals(922.5999755859375, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      assertEquals(ChronoUnit.HALF_DAYS, chronoUnit0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(chronoUnit0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-154.8471028);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 3240.66213769;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 6.283185307179586;
      doubleArray1[5] = 8.59412389;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3240.66213769;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3240.66213769;
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 6.283185307179586;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 3240.66213769;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 8.59412389;
      doubleArray3[6] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 6.283185307179586;
      doubleArray4[2] = 8.59412389;
      doubleArray4[3] = (-154.8471028);
      doubleArray4[4] = 3240.66213769;
      doubleArray4[5] = (-154.8471028);
      doubleArray4[6] = 8.59412389;
      doubleArray4[7] = (-154.8471028);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3240.66213769, range0.getUpperBound(), 0.01);
      assertEquals(3395.5092404899997, range0.getLength(), 0.01);
      assertEquals(1542.907517445, range0.getCentralValue(), 0.01);
      assertEquals((-154.8471028), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(1753.4599251, 1753.4599251, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 2);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.HALF_DAYS;
      assertEquals(ChronoUnit.HALF_DAYS, chronoUnit0);
      
      Instant instant1 = MockInstant.truncatedTo(instant0, chronoUnit0);
      assertNotNull(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(chronoUnit0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      MockDate mockDate0 = new MockDate(59, 0, 0);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3076.309713132, 920.3197043274902, 920.3197043274902, (-2707.36256957801), 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 00:00:00 GMT 1958", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-837.869), 920.3197043274902, (-577.13025), (-577.13025));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Dec 31 00:00:00 GMT 1958", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 00:00:00 GMT 1958", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem1);
      assertNotNull(timeSeries0);
      assertEquals("Wed Dec 31 00:00:00 GMT 1958", mockDate0.toString());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Wed Dec 31 00:00:00 GMT 1958", mockDate0.toString());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1.0, 920.3197043274902);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(920.3197043274902, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(920.3197043274902, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(920.3197043274902, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Double double0 = new Double(920.3197043274902);
      assertNotNull(double0);
      assertEquals(920.3197043274902, (double)double0, 0.01);
      
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 920.3197043274902;
      doubleArray1[1] = 920.3197043274902;
      doubleArray1[2] = 920.3197043274902;
      doubleArray1[6] = 920.3197043274902;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 920.3197043274902;
      doubleArray1[6] = 920.3197043274902;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 920.3197043274902;
      doubleArray2[1] = 920.3197043274902;
      doubleArray2[2] = 920.3197043274902;
      doubleArray2[3] = 920.3197043274902;
      doubleArray2[4] = 1966.0;
      doubleArray2[5] = 920.3197043274902;
      doubleArray2[6] = 920.3197043274902;
      doubleArray2[7] = 920.3197043274902;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 14.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2232.7497235379824);
      doubleArray4[1] = 14.5;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("0", "0", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1966.0, range0.getUpperBound(), 0.01);
      assertEquals(4198.749723537982, range0.getLength(), 0.01);
      assertEquals((-2232.7497235379824), range0.getLowerBound(), 0.01);
      assertEquals((-133.3748617689912), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range1);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3076.309713132, 920.3197043274902, 920.3197043274902, (-2707.36256957801), 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, (-837.869), 920.3197043274902, (-577.13025), (-577.13025));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      TimeSeries timeSeries0 = new TimeSeries(oHLCDataItem1);
      assertNotNull(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(920.3197043274902, number0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.8;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 6.283185307179586;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 6.283185307179586;
      doubleArray2[2] = 71.3627;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 1.0;
      doubleArray3[7] = 71.3627;
      doubleArray3[8] = 765.179641051;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-3181.5089869813), (-3181.5089869813), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1.6438184898683208));
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(3181.5089869813, range0.getLength(), 0.01);
      assertEquals((-1592.3983119805184), range0.getCentralValue(), 0.01);
      assertEquals((-3183.1528054711684), range0.getLowerBound(), 0.01);
      assertEquals((-1.6438184898683208), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(3181.5089869813, range1.getLength(), 0.01);
      assertEquals((-1590.75449349065), range1.getCentralValue(), 0.01);
      assertEquals((-3181.5089869813), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent("l%");
      assertNotNull(seriesChangeEvent0);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-2137526971), (-2137526971));
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-2137526971), seriesChangeInfo0.getIndex2());
      assertEquals((-2137526971), seriesChangeInfo0.getIndex1());
      
      seriesChangeEvent0.setSummary(seriesChangeInfo0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      assertEquals((-2137526971), seriesChangeInfo0.getIndex2());
      assertEquals((-2137526971), seriesChangeInfo0.getIndex1());
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NEGATIVE_INFINITY, (-1.0));
      assertNotNull(simpleHistogramBin0);
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.NEGATIVE_INFINITY, simpleHistogramBin0.getLowerBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.NEGATIVE_INFINITY, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.NEGATIVE_INFINITY, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.NEGATIVE_INFINITY, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Float float0 = new Float((-786.4F));
      assertNotNull(float0);
      assertEquals((-786.4F), (float)float0, 0.01F);
      
      boolean boolean0 = arrayList0.add(float0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((-786.4F)));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, false);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((-786.4F)));
      assertEquals((-1.0), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.NEGATIVE_INFINITY, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2964.7847;
      doubleArray1[1] = 1055.7134349285;
      doubleArray1[2] = 266.09972296749015;
      doubleArray1[3] = (-2047.328084944);
      doubleArray1[4] = (-2021.2012414047472);
      doubleArray1[5] = (-2505.9);
      doubleArray1[6] = 2.0;
      doubleArray1[7] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      boolean boolean1 = stack0.add("/kbs<FXWX%G+1}c");
      assertTrue(boolean1);
      assertTrue(stack0.contains("/kbs<FXWX%G+1}c"));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[/kbs<FXWX%G+1}c]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("/kbs<FXWX%G+1}c");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      TimeSeries timeSeries0 = new TimeSeries("/kbs<FXWX%G+1}c", "JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", ";");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(";", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(";", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
      assertNotNull(range1);
      assertTrue(stack0.contains("/kbs<FXWX%G+1}c"));
      assertFalse(stack0.contains("JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database."));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[/kbs<FXWX%G+1}c]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(";", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1875.6;
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1875.6;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 1875.6;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 1875.6;
      doubleArray2[6] = 1875.6;
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = 1875.6;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(3751.2, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(524, (-1247), (-262), (-1247), 524, 14);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 14, (-2330.06), (-2738.69943038), (-577.13025), (-283.9095402884701));
      assertNotNull(oHLCDataItem0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-1247), Double.NEGATIVE_INFINITY, (-577.13025), (-262), (-283.9095402884701));
      assertNotNull(oHLCDataItem1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 3006.2045093, (-577.13025), 14.5, (-283.9095402884701), (-2029.684773));
      assertNotNull(oHLCDataItem2);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 14.5, (-2029.684773), 0.0, 1169.626101, 524);
      assertNotNull(oHLCDataItem3);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, (-1247), (-1.0), 0.0, 3006.2045093, 524.9794807919469);
      assertNotNull(oHLCDataItem4);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, (-187.91), (-1247), 3006.2045093, (-283.9095402884701), (-187.91));
      assertNotNull(oHLCDataItem5);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(date0, 524.9794807919469, 740.697227571, 970.239, 0.0, (-187.91));
      assertNotNull(oHLCDataItem6);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(date0, 1055.7134349285, 128.147242963, (-2738.69943038), 0.8, (-2738.69943038));
      assertNotNull(oHLCDataItem7);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      OHLCDataItem oHLCDataItem8 = new OHLCDataItem(date0, 1055.7134349285, Double.NEGATIVE_INFINITY, (-2707.36256957801), 1854.6803354671729, 524);
      assertNotNull(oHLCDataItem8);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=524,MONTH=-1247,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-262,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1247,HOUR_OF_DAY=-1247,MINUTE=524,SECOND=14,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem7));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem5));
      
      oHLCDataItemArray0[8] = oHLCDataItem8;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(fixedMillisecond0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(740.697227571, number0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-20));
      assertEquals(0.0, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][0];
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 991);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(991, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[][] doubleArray0 = new double[14][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(14, defaultIntervalCategoryDataset0.getRowCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(11L);
      assertNotNull(fixedMillisecond0);
      assertEquals(11L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(11L, fixedMillisecond0.getLastMillisecond());
      assertEquals(11L, fixedMillisecond0.getSerialIndex());
      assertEquals(11L, fixedMillisecond0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(11L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(11L, fixedMillisecond0.getLastMillisecond());
      assertEquals(11L, fixedMillisecond0.getSerialIndex());
      assertEquals(11L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(10L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(10L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(10L, regularTimePeriod0.getSerialIndex());
      assertEquals(10L, regularTimePeriod0.getLastMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(60, 12, 12, 12, 60, 60);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 11L, 11L, (-1.0), 2949.5998886026528, (-702.154828));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 12 13:01:00 GMT 1961", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(regularTimePeriod0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(11L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(11L, fixedMillisecond0.getLastMillisecond());
      assertEquals(11L, fixedMillisecond0.getSerialIndex());
      assertEquals(11L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(10L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(10L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(10L, regularTimePeriod0.getSerialIndex());
      assertEquals(10L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(11L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(11L, fixedMillisecond0.getLastMillisecond());
      assertEquals(11L, fixedMillisecond0.getSerialIndex());
      assertEquals(11L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(10L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(10L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(10L, regularTimePeriod0.getSerialIndex());
      assertEquals(10L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(12.0, range0.getLength(), 0.01);
      assertEquals(11.0, range0.getUpperBound(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Date[] dateArray0 = new Date[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.clearSelection();
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      vector0.setSize(2732);
      assertEquals(2732, vector0.capacity());
      assertEquals(2732, vector0.size());
      assertFalse(vector0.isEmpty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      boolean boolean1 = stack0.add("/kbs<FXWX%G+1}c");
      assertTrue(boolean1);
      assertTrue(stack0.contains("/kbs<FXWX%G+1}c"));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[/kbs<FXWX%G+1}c]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("/kbs<FXWX%G+1}c");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(14.10576158389392, 1651.97976586239);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1651.97976586239, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(14.10576158389392, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1651.97976586239, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(14.10576158389392, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(833.0427637231419, range0.getCentralValue(), 0.01);
      assertEquals(1651.97976586239, range0.getUpperBound(), 0.01);
      assertEquals(14.10576158389392, range0.getLowerBound(), 0.01);
      assertEquals(1637.8740042784962, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains("/kbs<FXWX%G+1}c"));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[/kbs<FXWX%G+1}c]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(833.0427637231419, range0.getCentralValue(), 0.01);
      assertEquals(1651.97976586239, range0.getUpperBound(), 0.01);
      assertEquals(14.10576158389392, range0.getLowerBound(), 0.01);
      assertEquals(1637.8740042784962, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, (List) stack0, false);
      assertNotNull(range2);
      assertTrue(stack0.contains("/kbs<FXWX%G+1}c"));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[/kbs<FXWX%G+1}c]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(833.0427637231419, range2.getLowerBound(), 0.01);
      assertEquals(833.0427637231419, range2.getCentralValue(), 0.01);
      assertEquals(833.0427637231419, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "HJfD", "HJfD");
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("HJfD", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("HJfD", timeSeries0.getRangeDescription());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 504.79);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(504.79, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(504.79, timeSeries0.getMaxY(), 0.01);
      assertEquals("HJfD", timeSeries0.getDomainDescription());
      assertEquals("HJfD", timeSeries0.getRangeDescription());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(504.79, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(504.79, timeSeries0.getMaxY(), 0.01);
      assertEquals("HJfD", timeSeries0.getDomainDescription());
      assertEquals("HJfD", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0508942140764), 14.5);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-3310.0508942140764), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-3310.0508942140764), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range2);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-2.147483648E9), (-2115.3178885015), "n,dG");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2.147483648E9));
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2.147483648E9), range0.getUpperBound(), 0.01);
      assertEquals((-2.147484705658944E9), range0.getCentralValue(), 0.01);
      assertEquals(2115.317888736725, range0.getLength(), 0.01);
      assertEquals((-2.1474857633178887E9), range0.getLowerBound(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t$)\u0003/mN+");
      assertFalse(boolean0);
      
      Hour hour0 = Hour.parseHour("n,dG");
      assertNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "t$)\u0003/mN+", (double) 23, 2);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "HJfD", "HJfD");
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals("HJfD", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("HJfD", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 504.79);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals("HJfD", timeSeries0.getRangeDescription());
      assertEquals(504.79, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("HJfD", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(504.79, timeSeries0.getMinY(), 0.01);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals("HJfD", timeSeries0.getRangeDescription());
      assertEquals(504.79, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("HJfD", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(504.79, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals("HJfD", timeSeries0.getRangeDescription());
      assertEquals(504.79, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("HJfD", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(504.79, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(504.79, range0.getUpperBound(), 0.01);
      assertEquals(504.79, range0.getCentralValue(), 0.01);
      assertEquals(504.79, range0.getLowerBound(), 0.01);
      
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 504.79;
      doubleArray1[1] = 504.79;
      doubleArray1[2] = 504.79;
      doubleArray1[3] = 504.79;
      doubleArray1[4] = 504.79;
      doubleArray1[5] = 504.79;
      doubleArray1[6] = 504.79;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 504.79;
      doubleArray2[1] = 504.79;
      doubleArray2[2] = 504.79;
      doubleArray2[3] = 504.79;
      doubleArray2[4] = 504.79;
      doubleArray2[5] = 504.79;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 504.79;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 504.79;
      doubleArray4[1] = 504.79;
      doubleArray4[2] = 504.79;
      doubleArray4[3] = 504.79;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 504.79;
      doubleArray5[1] = 504.79;
      doubleArray5[2] = 504.79;
      doubleArray5[3] = 504.79;
      doubleArray5[4] = 504.79;
      doubleArray5[5] = 504.79;
      doubleArray5[6] = 504.79;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 504.79;
      doubleArray6[1] = 504.79;
      doubleArray6[2] = 504.79;
      doubleArray6[3] = 504.79;
      doubleArray6[4] = 504.79;
      doubleArray6[5] = 504.79;
      doubleArray6[6] = 504.79;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Date[] dateArray0 = new Date[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.clearSelection();
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      vector0.setSize(2732);
      assertEquals(2732, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(2732, vector0.capacity());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 460.6598521637451;
      doubleArray1[1] = 2420.888940807617;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 3190.996066198;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3190.996066198;
      doubleArray2[1] = 3190.996066198;
      doubleArray2[2] = 3190.996066198;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Date[] dateArray0 = new Date[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      defaultHighLowDataset0.clearSelection();
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      int int0 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 75);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(75, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2895.7520858409), 1269.71871191597);
      assertNotNull(simpleHistogramBin0);
      assertEquals(1269.71871191597, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2895.7520858409), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1269.71871191597, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-2895.7520858409), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-813.0166869624649), range0.getCentralValue(), 0.01);
      assertEquals((-813.0166869624649), range0.getUpperBound(), 0.01);
      assertEquals((-813.0166869624649), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-813.0166869624649), range0.getCentralValue(), 0.01);
      assertEquals((-813.0166869624649), range0.getUpperBound(), 0.01);
      assertEquals((-813.0166869624649), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean2 = defaultStatisticalCategoryDataset0.hasListener(simpleHistogramDataset0);
      assertFalse(boolean2);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2797.767), (-2797.767));
      assertNotNull(powerFunction2D0);
      assertEquals((-2797.767), powerFunction2D0.getA(), 0.01);
      assertEquals((-2797.767), powerFunction2D0.getB(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-2797.767), 4437.1972544018, 92, "");
      assertNotNull(xYSeries0);
      assertEquals((-2797.767), powerFunction2D0.getA(), 0.01);
      assertEquals((-2797.767), powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(4437.1972544018, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(92, xYSeries0.getItemCount());
      assertEquals(-0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-2797.767), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(-0.0, xYSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 1.5);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.5, simpleHistogramBin0.getUpperBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.5, simpleHistogramBin0.getUpperBound(), 0.01);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3324.316979998936), 914.6035806);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-3324.316979998936), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-3324.316979998936), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-3324.316979998936), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals((-3324.316979998936), number0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-3324.316979998936), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertNotNull(number1);
      assertEquals(914.6035806, number1);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-3324.316979998936), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-3324.316979998936), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1204.856699699468), range0.getCentralValue(), 0.01);
      assertEquals(4238.9205605989355, range0.getLength(), 0.01);
      assertEquals((-3324.316979998936), range0.getLowerBound(), 0.01);
      assertEquals(914.6035806, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range1);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-3324.316979998936), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 914.6035806);
      assertNotNull(simpleHistogramBin0);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals((-1197.6982097), range0.getCentralValue(), 0.01);
      assertEquals(914.6035806, range0.getUpperBound(), 0.01);
      assertEquals(4224.6035806, range0.getLength(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 1092);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1092, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", (-3310.0));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1092, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0508942140764), 14.5);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-3310.0508942140764), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-3310.0508942140764), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-3310.0508942140764), range0.getLowerBound(), 0.01);
      assertEquals(3324.5508942140764, range0.getLength(), 0.01);
      assertEquals((-1647.7754471070382), range0.getCentralValue(), 0.01);
      assertEquals(14.5, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-3310.0508942140764), range1.getLowerBound(), 0.01);
      assertEquals(3324.5508942140764, range1.getLength(), 0.01);
      assertEquals((-1647.7754471070382), range1.getCentralValue(), 0.01);
      assertEquals(14.5, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      boolean boolean2 = stack0.add("");
      assertTrue(boolean2);
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[, ]", stack0.toString());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals(14.5, number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, (List) stack0, true);
      assertNotNull(range2);
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[, ]", stack0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(14.5, range2.getUpperBound(), 0.01);
      assertEquals(3324.5508942140764, range2.getLength(), 0.01);
      assertEquals((-1647.7754471070382), range2.getCentralValue(), 0.01);
      assertEquals((-3310.0508942140764), range2.getLowerBound(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1632.754087599121);
      doubleArray1[1] = 3482.6756695395;
      doubleArray1[2] = (-967.3791077);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(924.9607909701896, range0.getCentralValue(), 0.01);
      assertEquals((-1632.754087599121), range0.getLowerBound(), 0.01);
      assertEquals(3482.6756695395, range0.getUpperBound(), 0.01);
      assertEquals(5115.429757138621, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3482.6756695395, range1.getUpperBound(), 0.01);
      assertEquals((-1632.754087599121), range1.getLowerBound(), 0.01);
      assertEquals(924.9607909701896, range1.getCentralValue(), 0.01);
      assertEquals(5115.429757138621, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 6);
      SpreadsheetDate spreadsheetDate0 = null;
//      try {
        spreadsheetDate0 = new SpreadsheetDate((-607));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SpreadsheetDate: Serial must be in range 2 to 2958465.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[14][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(14, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(14, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(14, defaultIntervalCategoryDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(14, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(14, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(14, defaultIntervalCategoryDataset0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1041.7470661480252;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1041.7470661480252;
      doubleArray2[1] = 740.072279601;
      doubleArray2[2] = 1041.7470661480252;
      doubleArray2[3] = 1041.7470661480252;
      doubleArray2[4] = 1041.7470661480252;
      doubleArray2[5] = 1041.7470661480252;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 740.072279601;
      doubleArray3[1] = 1041.7470661480252;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[19];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1041.7470661480252;
      doubleArray4[1] = 1041.7470661480252;
      doubleArray4[2] = 740.072279601;
      doubleArray4[3] = 1041.7470661480252;
      doubleArray4[4] = 740.072279601;
      doubleArray4[5] = 740.072279601;
      doubleArray4[6] = 740.072279601;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 1041.7470661480252;
      doubleArray6[1] = 740.072279601;
      doubleArray6[2] = 1041.7470661480252;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("1|V)2!r~?rO_U");
      assertTrue(boolean0);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertEquals("[1|V)2!r~?rO_U]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertEquals("[1|V)2!r~?rO_U, ]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 14.5);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramBin0.setItemCount(1309);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1309, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1309, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(14.5, range0.getUpperBound(), 0.01);
      assertEquals(3324.5, range0.getLength(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals((-1647.75), range0.getCentralValue(), 0.01);
      
      Range range1 = new Range((-3310.0), (-898.1846391380022));
      assertNotNull(range1);
      assertEquals(2411.8153608619978, range1.getLength(), 0.01);
      assertEquals((-2104.092319569001), range1.getCentralValue(), 0.01);
      assertEquals((-898.1846391380022), range1.getUpperBound(), 0.01);
      assertEquals((-3310.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNotNull(range2);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertEquals("[1|V)2!r~?rO_U, ]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(14.5, range0.getUpperBound(), 0.01);
      assertEquals(3324.5, range0.getLength(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals((-1647.75), range0.getCentralValue(), 0.01);
      assertEquals(0.39374342006316737, range2.getLowerBound(), 0.01);
      assertEquals(0.39374342006316737, range2.getCentralValue(), 0.01);
      assertEquals(0.39374342006316737, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals(0.39374342006316737, number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNotNull(number1);
      assertEquals(0.39374342006316737, number1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0508942140764), 14.5);
      assertNotNull(simpleHistogramBin0);
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0508942140764), simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0508942140764), simpleHistogramBin0.getLowerBound(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(14.5, range0.getUpperBound(), 0.01);
      assertEquals((-1647.7754471070382), range0.getCentralValue(), 0.01);
      assertEquals((-3310.0508942140764), range0.getLowerBound(), 0.01);
      assertEquals(3324.5508942140764, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(14.5, range1.getUpperBound(), 0.01);
      assertEquals(3324.5508942140764, range1.getLength(), 0.01);
      assertEquals((-1647.7754471070382), range1.getCentralValue(), 0.01);
      assertEquals((-3310.0508942140764), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals(14.5, number0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3324.31698);
      doubleArray1[1] = 88.89802758;
      doubleArray1[2] = 1183.2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3324.275;
      doubleArray2[1] = (-3324.31698);
      doubleArray2[2] = 88.89802758;
      doubleArray2[3] = 1183.2;
      doubleArray2[4] = 1183.2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1183.2;
      doubleArray3[1] = 3324.275;
      doubleArray3[2] = 1183.2;
      doubleArray3[3] = 1183.2;
      doubleArray3[4] = 1183.2;
      doubleArray3[5] = 1183.2;
      doubleArray3[6] = 1041.49902;
      doubleArray3[7] = (-3324.31698);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1183.2;
      doubleArray4[1] = 1041.49902;
      doubleArray4[2] = 1183.2;
      doubleArray4[3] = 3324.275;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("/", "/", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2062));
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2062), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "/", (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Date[] dateArray0 = new Date[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range1);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 914.6035806);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-1197.6982097), range0.getCentralValue(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals(914.6035806, range0.getUpperBound(), 0.01);
      assertEquals(4224.6035806, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-1197.6982097), range0.getCentralValue(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals(914.6035806, range0.getUpperBound(), 0.01);
      assertEquals(4224.6035806, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, false);
      assertNotNull(range2);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1197.6982097), range2.getLowerBound(), 0.01);
      assertEquals((-1197.6982097), range2.getCentralValue(), 0.01);
      assertEquals((-1197.6982097), range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range3);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-3310.0), range3.getLowerBound(), 0.01);
      assertEquals((-1197.6982097), range3.getCentralValue(), 0.01);
      assertEquals(914.6035806, range3.getUpperBound(), 0.01);
      assertEquals(4224.6035806, range3.getLength(), 0.01);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      Date date0 = fixedMillisecond0.getStart();
      assertNotNull(date0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 983.0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = new Range(983.0, 983.0);
      assertNotNull(range0);
      assertEquals(983.0, range0.getLowerBound(), 0.01);
      assertEquals(983.0, range0.getCentralValue(), 0.01);
      assertEquals(983.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(983.0, number0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range2);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range3);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(983.0, range3.getLowerBound(), 0.01);
      assertEquals(983.0, range3.getCentralValue(), 0.01);
      assertEquals(983.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range4);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1.39240928132E12, range4.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range4.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range4.getLowerBound(), 0.01);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("1|V)2!r~?rO_U");
      assertTrue(boolean0);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[1|V)2!r~?rO_U]", stack0.toString());
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1|V)2!r~?rO_U, ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 14.5);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(3324.5, range0.getLength(), 0.01);
      assertEquals((-1647.75), range0.getCentralValue(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals(14.5, range0.getUpperBound(), 0.01);
      
      Range range1 = new Range((-3310.0), (-898.1846391380022));
      assertNotNull(range1);
      assertEquals((-3310.0), range1.getLowerBound(), 0.01);
      assertEquals((-2104.092319569001), range1.getCentralValue(), 0.01);
      assertEquals((-898.1846391380022), range1.getUpperBound(), 0.01);
      assertEquals(2411.8153608619978, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNotNull(range2);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1|V)2!r~?rO_U, ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(3324.5, range0.getLength(), 0.01);
      assertEquals((-1647.75), range0.getCentralValue(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals(14.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), (-2624.7013952500984));
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2624.7013952500984), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2624.7013952500984), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2624.7013952500984), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2624.7013952500984), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-2624.7013952500984), range0.getUpperBound(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals(685.2986047499016, range0.getLength(), 0.01);
      assertEquals((-2967.350697625049), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(simpleHistogramDataset0);
      assertNotNull(range1);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2624.7013952500984), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.expand(range1, (-3310.0), (-315.3872149144241));
      assertNotNull(range2);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2624.7013952500984), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNotNull(range3);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2624.7013952500984), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-2624.7013952500984), range0.getUpperBound(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals(685.2986047499016, range0.getLength(), 0.01);
      assertEquals((-2967.350697625049), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, true);
      assertNotNull(range4);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2624.7013952500984), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-3310.0), range4.getLowerBound(), 0.01);
      assertEquals((-2967.350697625049), range4.getCentralValue(), 0.01);
      assertEquals(685.2986047499016, range4.getLength(), 0.01);
      assertEquals((-2624.7013952500984), range4.getUpperBound(), 0.01);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range3));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range5 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNotNull(range5);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-2624.7013952500984), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertNotSame(range5, range3);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertTrue(range5.equals((Object)range3));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertFalse(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        ZoneOffset.ofHoursMinutes((-190), 1262);
//        fail("Expecting exception: DateTimeException");
      
//      } catch(DateTimeException e) {
//         //
//         // Zone offset hours not in valid range: value -190 is not in the range -18 to 18
//         //
//         verifyException("java.time.ZoneOffset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "";
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(string0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(string0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 200.92);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(200.92, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(200.92, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(Double.NaN, 200.92);
      assertNotNull(simpleHistogramBin1);
      assertEquals(200.92, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin1.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin1.isSelected());
      assertFalse(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      simpleHistogramDataset0.addBin(simpleHistogramBin1);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(200.92, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(200.92, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin1.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin1.isSelected());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertNotSame(simpleHistogramBin1, simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      assertFalse(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(200.92, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add("1|V)2!r~?rO_U");
      assertTrue(boolean0);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertEquals("[1|V)2!r~?rO_U]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertEquals("[1|V)2!r~?rO_U, ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 14.5);
      assertNotNull(simpleHistogramBin0);
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals((-1647.75), range0.getCentralValue(), 0.01);
      assertEquals(14.5, range0.getUpperBound(), 0.01);
      assertEquals(3324.5, range0.getLength(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("1|V)2!r~?rO_U");
      assertTrue(boolean0);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[1|V)2!r~?rO_U]", stack0.toString());
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[1|V)2!r~?rO_U, ]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), (-1155.403664847));
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-1155.403664847), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals((-1155.403664847), simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-2232.7018324235), range0.getCentralValue(), 0.01);
      assertEquals((-2232.7018324235), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2232.7018324235), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[1|V)2!r~?rO_U, ]", stack0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-2232.7018324235), range0.getCentralValue(), 0.01);
      assertEquals((-2232.7018324235), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2232.7018324235), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 914.6035806);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1197.6982097), range0.getCentralValue(), 0.01);
      assertEquals(4224.6035806, range0.getLength(), 0.01);
      assertEquals(914.6035806, range0.getUpperBound(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals((-1197.6982097), range0.getCentralValue(), 0.01);
      assertEquals(4224.6035806, range0.getLength(), 0.01);
      assertEquals(914.6035806, range0.getUpperBound(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1054));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 914.6035806);
      assertNotNull(simpleHistogramBin0);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(914.6035806, range0.getUpperBound(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals((-1197.6982097), range0.getCentralValue(), 0.01);
      assertEquals(4224.6035806, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(914.6035806, range0.getUpperBound(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals((-1197.6982097), range0.getCentralValue(), 0.01);
      assertEquals(4224.6035806, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, false);
      assertNotNull(range2);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(914.6035806, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1197.6982097), range2.getLowerBound(), 0.01);
      assertEquals((-1197.6982097), range2.getCentralValue(), 0.01);
      assertEquals((-1197.6982097), range2.getUpperBound(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Week week0 = new Week((-1279), year0);
      assertNotNull(week0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106743L, week0.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      TimeSeries timeSeries0 = new TimeSeries(week0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106743L, week0.getSerialIndex());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      timeSeries0.add((RegularTimePeriod) year0, (-2166.27537399));
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106743L, week0.getSerialIndex());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-2166.27537399), timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals((-2166.27537399), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106743L, week0.getSerialIndex());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-2166.27537399), timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals((-2166.27537399), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106743L, week0.getSerialIndex());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-2166.27537399), timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals((-2166.27537399), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2166.27537399), range0.getUpperBound(), 0.01);
      assertEquals((-2166.27537399), range0.getCentralValue(), 0.01);
      assertEquals((-2166.27537399), range0.getLowerBound(), 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range1);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106743L, week0.getSerialIndex());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-2166.27537399), timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals((-2166.27537399), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2166.27537399), range1.getUpperBound(), 0.01);
      assertEquals((-2166.27537399), range1.getCentralValue(), 0.01);
      assertEquals((-2166.27537399), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 983.0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = new Range(983.0, 983.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(983.0, range0.getLowerBound(), 0.01);
      assertEquals(983.0, range0.getCentralValue(), 0.01);
      assertEquals(983.0, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(983.0, number0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range1);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(983.0, range1.getLowerBound(), 0.01);
      assertEquals(983.0, range1.getCentralValue(), 0.01);
      assertEquals(983.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number1);
      assertEquals(983.0, number1);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("1|V)2!r~?rO_U");
      assertTrue(boolean0);
      assertTrue(stack0.contains("1|V)2!r~?rO_U"));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[1|V)2!r~?rO_U]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1|V)2!r~?rO_U, ]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 14.5);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(14.5, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(14.5, range0.getUpperBound(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals((-1647.75), range0.getCentralValue(), 0.01);
      assertEquals(3324.5, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNotNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1|V)2!r~?rO_U, ]", stack0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(14.5, range0.getUpperBound(), 0.01);
      assertEquals((-3310.0), range0.getLowerBound(), 0.01);
      assertEquals((-1647.75), range0.getCentralValue(), 0.01);
      assertEquals(3324.5, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range1 = Range.shift(range0, 156.05508184469);
      assertNotNull(range1);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(156.05508184469, range1.getCentralValue(), 0.01);
      assertEquals(156.05508184469, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(156.05508184469, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("['QkQr^j.nY5+*{j<R");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, true, false);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(simpleHistogramDataset0, false);
      assertNotNull(intervalXYDelegate0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      
      simpleHistogramDataset0.addChangeListener(intervalXYDelegate0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNull(range2);
      assertFalse(stack0.contains("['QkQr^j.nY5+*{j<R"));
      assertTrue(stack0.contains(""));
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotSame(range0, range1);
      assertFalse(range0.equals((Object)range1));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 1);
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      comparableArray0[0] = (Comparable<String>) week0;
      Comparable<TimeTableXYDataset>[] comparableArray1 = (Comparable<TimeTableXYDataset>[]) Array.newInstance(Comparable.class, 6);
      comparableArray1[0] = (Comparable<TimeTableXYDataset>) week0;
      comparableArray1[1] = (Comparable<TimeTableXYDataset>) week0;
      comparableArray1[2] = (Comparable<TimeTableXYDataset>) week0;
      comparableArray1[3] = (Comparable<TimeTableXYDataset>) week0;
      comparableArray1[4] = (Comparable<TimeTableXYDataset>) week0;
      comparableArray1[5] = (Comparable<TimeTableXYDataset>) week0;
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (-1109.551);
      doubleArray2[2] = (double) 53;
      doubleArray2[3] = (double) 53;
      doubleArray2[4] = (double) 53;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 53;
      doubleArray2[8] = (double) 53;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 53;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (-2538.3003444);
      doubleArray3[3] = (-1109.551);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 53;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'columnKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 983.0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(983.0, range0.getLowerBound(), 0.01);
      assertEquals(983.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(983.0, range0.getUpperBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-888.5375857705745);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-407.3175761);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray1[4] = 1521.7640376799925;
      doubleArray2[2] = (-888.5375857705745);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-888.5375857705745);
      doubleArray2[6] = (-407.3175761);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Q_Ln:YC%30+BGlUL", "yB%kS%7|Z", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(1521.7640376799925, range1.getUpperBound(), 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
//      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-432), (-432));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[7][5];
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1519.4110325266242;
      doubleArray2[1] = 1547.9908;
      doubleArray2[2] = 2964.7847;
      doubleArray2[3] = (-110.5477531457385);
      doubleArray2[4] = 1547.5730981723748;
      doubleArray2[5] = 3746.8987043341;
      doubleArray2[6] = (-2236.2717616178);
      doubleArray2[7] = 10.0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 983.0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = new Range(983.0, 983.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(983.0, range0.getCentralValue(), 0.01);
      assertEquals(983.0, range0.getUpperBound(), 0.01);
      assertEquals(983.0, range0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(983.0, number0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 983.0);
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = new Range(983.0, 983.0);
      assertNotNull(range0);
      assertEquals(983.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(983.0, range0.getCentralValue(), 0.01);
      assertEquals(983.0, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(983.0, number0);
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range1);
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range2);
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range3);
      assertNull(timeSeries0.getDescription());
      assertEquals(983.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(983.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(983.0, range3.getLowerBound(), 0.01);
      assertEquals(983.0, range3.getCentralValue(), 0.01);
      assertEquals(983.0, range3.getUpperBound(), 0.01);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2067.91472), (-2067.91472));
      assertNotNull(lineFunction2D0);
      assertEquals((-2067.91472), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2067.91472), lineFunction2D0.getIntercept(), 0.01);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1970, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(25569, serialDate0.toSerial());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-2067.91472), 2848.312571, 540, serialDate0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-2067.91472), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2067.91472), lineFunction2D0.getIntercept(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1970, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(25569, serialDate0.toSerial());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals((-2067.91472), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2067.91472), lineFunction2D0.getIntercept(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getMonth());
      assertEquals(1970, serialDate0.getYYYY());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(25569, serialDate0.toSerial());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(4274203.37447268, range0.getUpperBound(), 0.01);
      assertEquals(1.0166338781924624E7, range0.getLength(), 0.01);
      assertEquals((-808966.0164896329), range0.getCentralValue(), 0.01);
      assertEquals((-5892135.407451945), range0.getLowerBound(), 0.01);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("['QkQr^j.nY5+*{j<R");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, true, false);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertFalse(stack0.contains("['QkQr^j.nY5+*{j<R"));
      assertTrue(stack0.contains(""));
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 890);
      assertNotNull(categoryToPieDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(890, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(15, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 920.8197043274902, 1547.9908, 15, "x<y.G6D~l-,Fmx");
      assertNotNull(xYSeriesCollection0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 15, 6401);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(6401, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(15, slidingCategoryDataset0.getFirstCategoryIndex());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2.147483648E9);
      doubleArray2[1] = (-2.147483648E9);
      doubleArray2[2] = (-2.147483648E9);
      doubleArray2[3] = (-2.147483648E9);
      doubleArray2[4] = (-2.147483648E9);
      doubleArray2[5] = (-2.147483648E9);
      doubleArray2[6] = (-2.147483648E9);
      doubleArray2[7] = (-2.147483648E9);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2.147483648E9);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(6.442450944E9, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-3.221225472E9), range0.getCentralValue(), 0.01);
      assertEquals((-6.442450944E9), range0.getLowerBound(), 0.01);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
      assertNull(range1);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(15, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 920.8197043274902, 1547.9908, 15, "x<y.G6D~l-,Fmx");
      assertNotNull(xYSeriesCollection0);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(920.8197043274902, range0.getLowerBound(), 0.01);
      assertEquals(1547.9908, range0.getUpperBound(), 0.01);
      assertEquals(627.1710956725099, range0.getLength(), 0.01);
      assertEquals(1234.405252163745, range0.getCentralValue(), 0.01);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x<y.G6D~l-,Fmx");
      assertFalse(boolean0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 553, 15);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(553, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(15, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(" -[X`w:E?<j)");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 53);
      assertNotNull(pieDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      List<Second> list0 = null;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) null, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      int int0 = 11;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1704), 11);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1704), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(11, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      int int1 = (-1472);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (-1472));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      CategoryDataset categoryDataset0 = null;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 1081, 1055);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1055, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1081, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 273, 5);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(273, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(15, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 920.8197043274902, 1547.9908, 15, "x<y.G6D~l-,Fmx");
      assertNotNull(xYSeriesCollection0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(628.1710956725099, range0.getLength(), 0.01);
      assertEquals(1548.4908, range0.getUpperBound(), 0.01);
      assertEquals(1234.405252163745, range0.getCentralValue(), 0.01);
      assertEquals(920.3197043274902, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0836551232166585E-4, range1.getLowerBound(), 0.01);
      assertEquals(1.877116306016477E-4, range1.getCentralValue(), 0.01);
      assertEquals(1.5869223655996367E-4, range1.getLength(), 0.01);
      assertEquals(2.670577488816295E-4, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(15, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      NormalDistributionFunction2D normalDistributionFunction2D1 = new NormalDistributionFunction2D(2331.982703533156, 15);
      assertNotNull(normalDistributionFunction2D1);
      assertEquals(15.0, normalDistributionFunction2D1.getStandardDeviation(), 0.01);
      assertEquals(2331.982703533156, normalDistributionFunction2D1.getMean(), 0.01);
      assertFalse(normalDistributionFunction2D1.equals((Object)normalDistributionFunction2D0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D1, (-2706.5), 920.8197043274902, 15, "x<y.G6D~l-,Fmx");
      assertNotNull(xYSeriesCollection0);
      assertEquals(15.0, normalDistributionFunction2D1.getStandardDeviation(), 0.01);
      assertEquals(2331.982703533156, normalDistributionFunction2D1.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotSame(normalDistributionFunction2D1, normalDistributionFunction2D0);
      assertFalse(normalDistributionFunction2D1.equals((Object)normalDistributionFunction2D0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(15.0, normalDistributionFunction2D1.getStandardDeviation(), 0.01);
      assertEquals(2331.982703533156, normalDistributionFunction2D1.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(3628.3197043274904, range0.getLength(), 0.01);
      assertEquals(921.3197043274904, range0.getUpperBound(), 0.01);
      assertEquals((-2707.0), range0.getLowerBound(), 0.01);
      assertEquals((-892.8401478362548), range0.getCentralValue(), 0.01);
      assertNotSame(normalDistributionFunction2D1, normalDistributionFunction2D0);
      assertFalse(normalDistributionFunction2D1.equals((Object)normalDistributionFunction2D0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(15, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 26.07354468819745, 920.8197043274902, 15, "x<y.G6D~l-,Fmx");
      assertNotNull(xYSeriesCollection0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(894.7461596392927, range0.getLength(), 0.01);
      assertEquals(473.4466245078438, range0.getCentralValue(), 0.01);
      assertEquals(26.07354468819745, range0.getLowerBound(), 0.01);
      assertEquals(920.8197043274902, range0.getUpperBound(), 0.01);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(920.8197043274902));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, false);
      assertNull(range1);
      assertFalse(vector0.contains(920.8197043274902));
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 15;
      doubleArray1[1] = 920.8197043274902;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 26.07354468819745;
      doubleArray2[1] = 26.07354468819745;
      doubleArray2[2] = 920.8197043274902;
      doubleArray2[3] = 920.8197043274902;
      doubleArray2[4] = (double) 15;
      doubleArray2[5] = 26.07354468819745;
      doubleArray2[6] = 920.8197043274902;
      doubleArray2[7] = 26.07354468819745;
      doubleArray2[8] = (double) 15;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 15;
      doubleArray3[1] = (double) 15;
      doubleArray3[2] = (double) 15;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 88.8638;
      doubleArray5[1] = 26.07354468819745;
      doubleArray5[2] = (double) 15;
      doubleArray5[3] = 26.07354468819745;
      doubleArray5[4] = 26.07354468819745;
      doubleArray5[5] = (double) 15;
      doubleArray5[6] = 920.8197043274902;
      doubleArray5[7] = (double) 15;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray0[5] = doubleArray6;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("x<y.G6D~l-,Fmx", "x<y.G6D~l-,Fmx", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotNull(range2);
      assertEquals(6, doubleArray0.length);
      assertEquals(15.0, range2.getLowerBound(), 0.01);
      assertEquals(905.8197043274902, range2.getLength(), 0.01);
      assertEquals(467.9098521637451, range2.getCentralValue(), 0.01);
      assertEquals(920.8197043274902, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("['QkQr^j.nY5+*{j<R");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("['QkQr^j.nY5+*{j<R"));
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2580.0634891;
      doubleArray1[1] = (-1154.6363244659365);
      doubleArray1[2] = 1.5;
      doubleArray1[3] = 936.025;
      doubleArray1[4] = 1000.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.5;
      doubleArray2[1] = (-1154.6363244659365);
      doubleArray2[2] = (-1154.6363244659365);
      doubleArray2[3] = 1.5;
      doubleArray2[4] = (-3212.751);
      doubleArray2[5] = 1.5;
      doubleArray2[6] = 1.5;
      doubleArray2[7] = 1549.846;
      doubleArray2[8] = 1000.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2580.0634891;
      doubleArray3[1] = (-3212.751);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (-44.68890963);
      doubleArray3[4] = (-1154.6363244659365);
      doubleArray3[5] = (-3212.751);
      doubleArray3[6] = (-1154.6363244659365);
      doubleArray3[7] = 1549.846;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (-1154.6363244659365);
      doubleArray4[2] = (-3212.751);
      doubleArray4[3] = (-44.68890963);
      doubleArray4[4] = 936.025;
      doubleArray4[5] = (-44.68890963);
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = 1000.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 2109.0;
      doubleArray5[1] = (-3212.751);
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1000.0;
      doubleArray5[4] = 2580.0634891;
      doubleArray5[5] = 1000.0;
      doubleArray5[6] = 936.025;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (-1154.6363244659365);
      doubleArray7[1] = 1549.846;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-3212.751);
      doubleArray7[4] = (-1154.6363244659365);
      doubleArray7[5] = (-1154.6363244659365);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 936.025;
      doubleArray8[2] = (-628.962241846011);
      doubleArray8[3] = 2580.0634891;
      doubleArray8[4] = 1.5;
      doubleArray8[5] = 2580.0634891;
      doubleArray8[6] = 477.11953996;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("nYi=|", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(2580.0634891, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(15, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 920.8197043274902, 1547.9908, 15, "x<y.G6D~l-,Fmx");
      assertNotNull(xYSeriesCollection0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      int int0 = xYSeriesCollection0.indexOf("x<y.G6D~l-,Fmx");
      assertEquals(0, int0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1548.4908, range0.getUpperBound(), 0.01);
      assertEquals(628.1710956725099, range0.getLength(), 0.01);
      assertEquals(920.3197043274902, range0.getLowerBound(), 0.01);
      assertEquals(1234.405252163745, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.5869223655996367E-4, range1.getLength(), 0.01);
      assertEquals(2.670577488816295E-4, range1.getUpperBound(), 0.01);
      assertEquals(1.877116306016477E-4, range1.getCentralValue(), 0.01);
      assertEquals(1.0836551232166585E-4, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) "Null 'seriesKey' argument.", (Comparable) second0);
      assertEquals(0, linkedList0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "Null 'seriesKey' argument.");
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = new Range(4059.80446, 4059.80446);
      assertNotNull(range0);
      assertEquals(4059.80446, range0.getLowerBound(), 0.01);
      assertEquals(4059.80446, range0.getCentralValue(), 0.01);
      assertEquals(4059.80446, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("['QkQr^j.nY5+*{j<R");
      assertTrue(boolean0);
      assertTrue(stack0.contains("['QkQr^j.nY5+*{j<R"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[['QkQr^j.nY5+*{j<R]", stack0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(15, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 920.8197043274902, 1547.9908, 15, "x<y.G6D~l-,Fmx");
      assertNotNull(xYSeriesCollection0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(920.3197043274902, range0.getLowerBound(), 0.01);
      assertEquals(1548.4908, range0.getUpperBound(), 0.01);
      assertEquals(628.1710956725099, range0.getLength(), 0.01);
      assertEquals(1234.405252163745, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      int int0 = Integer.MAX_VALUE;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, Integer.MAX_VALUE);
      assertNotNull(pieDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNull(range1);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      int int1 = 3421;
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Month month0 = null;
//      try {
        month0 = new Month(3421, year0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Month outside valid range.
//         //
//         verifyException("org.jfree.data.time.Month", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(15, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 920.8197043274902, 1547.9908, 15, "x<y.G6D~l-,Fmx");
      assertNotNull(xYSeriesCollection0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(628.1710956725099, range0.getLength(), 0.01);
      assertEquals(920.3197043274902, range0.getLowerBound(), 0.01);
      assertEquals(1548.4908, range0.getUpperBound(), 0.01);
      assertEquals(1234.405252163745, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(15.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(628.1710956725099, range1.getLength(), 0.01);
      assertEquals(1548.4908, range1.getUpperBound(), 0.01);
      assertEquals(1234.405252163745, range1.getCentralValue(), 0.01);
      assertEquals(920.3197043274902, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+(%#", "+(%#", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getColumnIndex("+(%#");
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      Date[] dateArray0 = new Date[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range1);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("Null 'tasks' argument.");
      assertTrue(boolean0);
      assertTrue(stack0.contains("Null 'tasks' argument."));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Null 'tasks' argument.]", stack0.toString());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Null 'tasks' argument.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains("Null 'tasks' argument."));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Null 'tasks' argument.]", stack0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      boolean boolean1 = stack0.add("Null 'dataset' argument.");
      assertTrue(boolean1);
      assertTrue(stack0.contains("Null 'tasks' argument."));
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[Null 'tasks' argument., Null 'dataset' argument.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, stack0, true);
      assertNull(range1);
      assertTrue(stack0.contains("Null 'tasks' argument."));
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[Null 'tasks' argument., Null 'dataset' argument.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(9, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 59.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1154.679785552, 1040.18666239552);
      assertNotNull(lineFunction2D0);
      assertEquals(1040.18666239552, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1154.679785552, lineFunction2D0.getIntercept(), 0.01);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2348.5034222054), (-454.345), 2, month0);
      assertNotNull(xYSeries0);
      assertEquals(1040.18666239552, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1154.679785552, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-471448.92934054055), xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-454.345), xYSeries0.getMaxX(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-2348.5034222054), xYSeries0.getMinX(), 0.01);
      assertEquals((-2441727.2565827398), xYSeries0.getMinY(), 0.01);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      double double0 = 1044.6487;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1044.6487);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = new Range((-3375.0484863472), (-1.0));
      assertNotNull(range0);
      assertEquals((-3375.0484863472), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1688.0242431736), range0.getCentralValue(), 0.01);
      assertEquals(3374.0484863472, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals((-3375.0484863472), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1688.0242431736), range0.getCentralValue(), 0.01);
      assertEquals(3374.0484863472, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1799.532652096);
      doubleArray1[1] = (-40.22);
      doubleArray1[2] = (-2232.7018324235);
      doubleArray1[3] = 384.316210281825;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 384.316210281825;
      doubleArray2[1] = (-2232.7018324235);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1799.532652096);
      doubleArray3[1] = (-2232.7018324235);
      doubleArray3[2] = (-40.22);
      doubleArray3[3] = 384.316210281825;
      doubleArray3[4] = (-1799.532652096);
      doubleArray3[5] = (-2232.7018324235);
      doubleArray3[6] = 10.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-40.22);
      doubleArray4[1] = (-1471.5677604606135);
      doubleArray4[2] = (-40.22);
      doubleArray4[3] = (-1799.532652096);
      doubleArray4[4] = (-2232.7018324235);
      doubleArray4[5] = 384.316210281825;
      doubleArray4[6] = (-1799.532652096);
      doubleArray4[7] = 10.0;
      doubleArray4[8] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 2.0;
      doubleArray5[1] = 384.316210281825;
      doubleArray5[2] = (-1799.532652096);
      doubleArray5[3] = (-2232.7018324235);
      doubleArray5[4] = 1691.40415;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-1799.532652096);
      doubleArray6[1] = (-1799.532652096);
      doubleArray6[2] = 6.283185307179586;
      doubleArray6[3] = 384.316210281825;
      doubleArray6[4] = (-1471.5677604606135);
      doubleArray6[5] = (-2232.7018324235);
      doubleArray6[6] = 1691.40415;
      doubleArray6[7] = 384.316210281825;
      doubleArray6[8] = (-1471.5677604606135);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 6.283185307179586;
      doubleArray7[1] = 2.0;
      doubleArray7[2] = (-1075.401459129);
      doubleArray7[3] = 384.316210281825;
      doubleArray7[4] = (-2232.7018324235);
      doubleArray7[5] = (-40.22);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = 6.283185307179586;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 53;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("Null 'tasks' argument.");
      assertTrue(boolean0);
      assertTrue(stack0.contains("Null 'tasks' argument."));
      assertFalse(stack0.isEmpty());
      assertEquals("[Null 'tasks' argument.]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf("Null 'tasks' argument.");
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Null 'tasks' argument.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("B/Wmm}{9MC");
      assertTrue(boolean0);
      assertTrue(stack0.contains("B/Wmm}{9MC"));
      assertEquals("[B/Wmm}{9MC]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Stream<String> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertTrue(stack0.contains("B/Wmm}{9MC"));
      assertEquals("[B/Wmm}{9MC]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Null 'tasks' argument.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.xy.XYIntervalSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x<y.G6D~l-,Fmx");
      assertFalse(boolean0);
      
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3683.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3683.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 3683.0;
      doubleArray4[1] = 3683.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 3683.0;
      doubleArray5[1] = 3683.0;
      doubleArray5[2] = 2652.3522183609266;
      doubleArray5[3] = 3683.0;
      doubleArray5[4] = 3683.0;
      doubleArray5[5] = (-1614.9135718);
      doubleArray5[6] = 3683.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 3683.0;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "x<y.G6D~l-,Fmx", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      System.setCurrentTimeMillis((-2027L));
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      boolean boolean3 = arrayList0.add(integer0);
      assertTrue(boolean3);
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      Range range1 = Range.shift(range0, (double) (-2027L));
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2027.0), range1.getCentralValue(), 0.01);
      assertEquals((-2027.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2027.0), range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.shift(range0, (double) (-2027L), true);
      assertNotNull(range2);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2027.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-2027.0), range2.getCentralValue(), 0.01);
      assertEquals((-2027.0), range2.getUpperBound(), 0.01);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range1, false);
      assertNull(range3);
      assertTrue(arrayList0.contains(integer0));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-2027.0), range1.getCentralValue(), 0.01);
      assertEquals((-2027.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2027.0), range1.getLowerBound(), 0.01);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      assertNotNull(datasetGroup0);
      assertEquals("", datasetGroup0.getID());
      
      jDBCXYDataset0.setGroup(datasetGroup0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("", datasetGroup0.getID());
      
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) integer0;
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = (Number) integer0;
      numberArray1[7] = (Number) integer0;
      numberArray1[8] = (Number) integer0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("N0\"(GP|z:6xxA-{^J", (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range4 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range4);
      assertEquals(1, numberArray0.length);
      assertEquals((-30000.0), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-30000.0), range4.getCentralValue(), 0.01);
      assertEquals((-30000.0), range4.getUpperBound(), 0.01);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" -[X`w:E?<j)");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Number number0 = defaultPieDataset0.getValue(1);
      assertNull(number0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) " -[X`w:E?<j)", (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = null;
      Short short0 = new Short((short)451);
      assertNotNull(short0);
      assertEquals((short)451, (short)short0);
      
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) 53;
      numberArray1[3] = null;
      numberArray1[4] = (Number) 53;
      numberArray1[5] = (Number) 53;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset(" -[X`w:E?<j)", " -[X`w:E?<j)", numberArray0);
      assertNotNull(categoryDataset1);
      assertEquals(1, numberArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "");
      assertNotNull(pieDataset0);
      assertEquals(1, numberArray0.length);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1063, 481, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(480, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("Null 'tasks' argument.");
      assertTrue(boolean0);
      assertTrue(stack0.contains("Null 'tasks' argument."));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Null 'tasks' argument.]", stack0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains("Null 'tasks' argument."));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Null 'tasks' argument.]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = 1000.0;
      doubleArray1[2] = 846.1509339;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1000.0;
      doubleArray2[1] = 1000.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 6.283185307179586;
      doubleArray3[1] = 1000.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 846.1509339;
      doubleArray4[1] = (-20.1144065356644);
      doubleArray4[2] = 846.1509339;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "}*QBe", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3000.0, number0);
      assertEquals(4, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals((-20.1144065356644), number1);
      assertEquals(4, doubleArray0.length);
      assertFalse(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number2);
      assertEquals(3000.0, number2);
      assertEquals(4, doubleArray0.length);
      assertTrue(number2.equals((Object)number0));
      assertFalse(number2.equals((Object)number1));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-396.82506419528477));
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = new Range((-396.82506419528477), (-396.82506419528477));
      assertNotNull(range0);
      assertEquals((-396.82506419528477), range0.getLowerBound(), 0.01);
      assertEquals((-396.82506419528477), range0.getCentralValue(), 0.01);
      assertEquals((-396.82506419528477), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(timeSeriesCollection0));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, false);
      assertNull(range2);
      assertFalse(vector0.contains(timeSeriesCollection0));
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1011L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1011L, fixedMillisecond0.getSerialIndex());
      assertEquals(1011L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1011L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1011L, fixedMillisecond0.getMiddleMillisecond());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, (double) 15);
      assertNotNull(range1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(15.0, range1.getLowerBound(), 0.01);
      assertEquals(15.0, range1.getCentralValue(), 0.01);
      assertEquals(15.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Range range2 = Range.shift(range0, 914.952111835714);
      assertNotNull(range2);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(914.952111835714, range2.getLowerBound(), 0.01);
      assertEquals(914.952111835714, range2.getCentralValue(), 0.01);
      assertEquals(914.952111835714, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.expandToInclude(range0, 1.7976931348623157E308);
      assertNotNull(range3);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(8.988465674311579E307, range3.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range3.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range3.getLength(), 0.01);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      assertNotNull(intervalXYDelegate0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      jDBCXYDataset0.addChangeListener(intervalXYDelegate0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      Byte byte0 = new Byte((byte)68);
      assertNotNull(byte0);
      assertEquals((byte)68, (byte)byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains((byte)68));
      assertEquals(1, linkedList0.size());
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, range0, false);
      assertNull(range4);
      assertTrue(linkedList0.contains((byte)68));
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1000L;
      doubleArray0[3] = (double) 1000L;
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(integer0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(integer0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1011L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1011L, fixedMillisecond0.getSerialIndex());
      assertEquals(1011L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1011L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1011L, fixedMillisecond0.getMiddleMillisecond());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(983L, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(983.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-513.4272892885642), 983L, 15, 983L);
      assertNotNull(xYSeriesCollection0);
      assertEquals(983.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(983.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(983.5, range0.getUpperBound(), 0.01);
      assertEquals(1497.4272892885642, range0.getLength(), 0.01);
      assertEquals(234.7863553557179, range0.getCentralValue(), 0.01);
      assertEquals((-513.9272892885642), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      System.setCurrentTimeMillis((-2027L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-2027L);
      doubleArray1[1] = (double) (-2027L);
      doubleArray1[2] = (double) (-2027L);
      doubleArray1[3] = (double) (-2027L);
      doubleArray1[1] = (double) (-2027L);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#m8?1wb", "+(%#", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Date[] dateArray0 = new Date[1];
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertNotNull(spreadsheetDate0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", date0.toString());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      
      dateArray0[0] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((-2027.0), dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {(-2027.0), (-2027.0), (-2027.0), (-2027.0), 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {(-2027.0), (-2027.0), (-2027.0), (-2027.0), 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2027.0), range0.getLowerBound(), 0.01);
      assertEquals((-2027.0), range0.getCentralValue(), 0.01);
      assertEquals((-2027.0), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range1);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {(-2027.0), (-2027.0), (-2027.0), (-2027.0), 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2027.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2027.0), range1.getUpperBound(), 0.01);
      assertEquals((-2027.0), range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1011L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1011L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1011L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1011L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1011L, fixedMillisecond0.getSerialIndex());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, (double) 15);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(15.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(15.0, range1.getCentralValue(), 0.01);
      assertEquals(15.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) fixedMillisecond0, (Number) null);
      assertEquals(1011L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1011L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1011L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1011L, fixedMillisecond0.getSerialIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.POSITIVE_INFINITY, Double.NaN);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, simpleHistogramBin0.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 200.92);
      assertNotNull(simpleHistogramBin0);
      assertEquals(200.92, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleHistogramBin0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(200.92, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      SimpleHistogramBin simpleHistogramBin1 = new SimpleHistogramBin(Double.NaN, 200.92);
      assertNotNull(simpleHistogramBin1);
      assertEquals(0, simpleHistogramBin1.getItemCount());
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(200.92, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, simpleHistogramBin1.getLowerBound(), 0.01);
      assertFalse(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      simpleHistogramBin1.setItemCount(22);
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(200.92, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals(22, simpleHistogramBin1.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin1.getLowerBound(), 0.01);
      assertNotSame(simpleHistogramBin1, simpleHistogramBin0);
      assertFalse(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      simpleHistogramDataset0.addBin(simpleHistogramBin1);
      assertEquals(200.92, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(simpleHistogramBin1.isSelected());
      assertEquals(200.92, simpleHistogramBin1.getUpperBound(), 0.01);
      assertEquals(22, simpleHistogramBin1.getItemCount());
      assertEquals(Double.NaN, simpleHistogramBin1.getLowerBound(), 0.01);
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertNotSame(simpleHistogramBin1, simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      assertFalse(simpleHistogramBin1.equals((Object)simpleHistogramBin0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals(200.92, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals((-3310.0), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotSame(simpleHistogramBin0, simpleHistogramBin1);
      assertFalse(simpleHistogramBin0.equals((Object)simpleHistogramBin1));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1000L, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 1000.5, Double.POSITIVE_INFINITY, 15, fixedMillisecond0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "`!8Y[");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      System.setCurrentTimeMillis((-2027L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-2027L);
      doubleArray1[1] = (double) (-2027L);
      doubleArray1[2] = (double) (-2027L);
      doubleArray1[3] = (double) (-2027L);
      doubleArray1[1] = (double) (-2027L);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#m8?1wb", "+(%#", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Date[] dateArray0 = new Date[1];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertNotNull(spreadsheetDate0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", date0.toString());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      
      dateArray0[0] = date0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((-2027.0), dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {(-2027.0), (-2027.0), (-2027.0), (-2027.0), 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {(-2027.0), (-2027.0), (-2027.0), (-2027.0), 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2027.0), range0.getLowerBound(), 0.01);
      assertEquals((-2027.0), range0.getUpperBound(), 0.01);
      assertEquals((-2027.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x<y.G6D~l-,Fmx");
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("x<y.G6D~l-,Fmx", "x<y.G6D~l-,Fmx", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) vector0, (Comparable) "x<y.G6D~l-,Fmx", (Comparable) "x<y.G6D~l-,Fmx");
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(1, doubleArray0.length);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x<y.G6D~l-,Fmx");
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("x<y.G6D~l-,Fmx", "x<y.G6D~l-,Fmx", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1547.9908, 920.5749710173376);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1547.9908, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.5749710173376, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(15, 1952257861);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1952257860, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, 15);
      assertNotNull(xYBarDataset0);
      assertEquals(1952257860, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(15.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      dynamicTimeSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertEquals(1952257860, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(15.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1000L, 1000L);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1000.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-513.4272892885642), 1000L, 20, 1000L);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1000.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals((-513.9272892885642), (double)double0, 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1000.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1000.5, range0.getUpperBound(), 0.01);
      assertEquals(243.2863553557179, range0.getCentralValue(), 0.01);
      assertEquals(1514.4272892885642, range0.getLength(), 0.01);
      assertEquals((-513.9272892885642), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 1.0);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add("['QkQr^j.nY5+*{j<R");
      assertTrue(boolean0);
      assertTrue(stack0.contains("['QkQr^j.nY5+*{j<R"));
      assertEquals(10, stack0.capacity());
      assertEquals("[['QkQr^j.nY5+*{j<R]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNull(range2);
      assertTrue(stack0.contains("['QkQr^j.nY5+*{j<R"));
      assertEquals(10, stack0.capacity());
      assertEquals("[['QkQr^j.nY5+*{j<R]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DomainOrder domainOrder0 = vectorSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
//      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-1097), 1, timeZone0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 1125);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stack0);
      assertNotNull(predicate0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertNotNull(predicate2);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      boolean boolean0 = stack0.removeIf(predicate2);
      assertFalse(boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      defaultPieDataset0.setValue((Comparable) 0.0, (Number) 0.0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.shift(range0, 1180.4);
      assertNotNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1180.4, range1.getLowerBound(), 0.01);
      assertEquals(1180.4, range1.getCentralValue(), 0.01);
      assertEquals(1180.4, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertNotNull(timeZone1);
      assertEquals("GMT", timeZone1.getID());
      assertNotSame(timeZone1, timeZone0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      
      Range range2 = Range.expandToInclude(range0, (-1462.21494329571));
      assertNotNull(range2);
      assertEquals((-1462.21494329571), range2.getLowerBound(), 0.01);
      assertEquals(1462.21494329571, range2.getLength(), 0.01);
      assertEquals((-731.107471647855), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(timeZone0, timeZone1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertFalse(range0.equals((Object)range1));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, range1, false);
      assertNull(range3);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1180.4, range1.getLowerBound(), 0.01);
      assertEquals(1180.4, range1.getCentralValue(), 0.01);
      assertEquals(1180.4, range1.getUpperBound(), 0.01);
      assertNotSame(timeZone0, timeZone1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x<y.G6D~l-,Fmx");
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("x<y.G6D~l-,Fmx", "x<y.G6D~l-,Fmx", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = new Range(4771.498570870916, 4771.498570870916);
      assertNotNull(range0);
      assertEquals(4771.498570870916, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4771.498570870916, range0.getCentralValue(), 0.01);
      assertEquals(4771.498570870916, range0.getUpperBound(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<Long> stack0 = new Stack<Long>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Long long0 = new Long((-1264L));
      assertNotNull(long0);
      assertEquals((-1264L), (long)long0);
      
      boolean boolean1 = stack0.add(long0);
      assertTrue(boolean1);
      assertTrue(stack0.contains(long0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-1264]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x<y.G6D~l-,Fmx");
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("x<y.G6D~l-,Fmx", "x<y.G6D~l-,Fmx", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("x<y.G6D~l-,Fmx"));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = stack0.add("The number of column keys does not match the number of columns in the data array.");
      assertTrue(boolean1);
      assertTrue(stack0.contains("The number of column keys does not match the number of columns in the data array."));
      assertFalse(stack0.contains("x<y.G6D~l-,Fmx"));
      assertEquals("[The number of column keys does not match the number of columns in the data array.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1011L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1011L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1011L, fixedMillisecond0.getSerialIndex());
      assertEquals(1011L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1011L, fixedMillisecond0.getMiddleMillisecond());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(983L, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(983.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-513.4272892885642), 983L, 15, 983L);
      assertNotNull(xYSeriesCollection0);
      assertEquals(983.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(983.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(983.0, range0.getUpperBound(), 0.01);
      assertEquals(234.7863553557179, range0.getCentralValue(), 0.01);
      assertEquals((-513.4272892885642), range0.getLowerBound(), 0.01);
      assertEquals(1496.4272892885642, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".", ".", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      assertEquals(1, doubleArray0.length);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        vectorSeriesCollection0.getSeries(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 1.0);
      assertNotNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("['QkQr^j.nY5+*{j<R");
      assertTrue(boolean0);
      assertTrue(stack0.contains("['QkQr^j.nY5+*{j<R"));
      assertEquals("[['QkQr^j.nY5+*{j<R]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range2);
      assertTrue(stack0.contains("['QkQr^j.nY5+*{j<R"));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("[['QkQr^j.nY5+*{j<R]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1000L;
      doubleArray0[3] = (double) 1000L;
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 1000.0);
      assertNotNull(pieDataset0);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number1);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1000L, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-513.4272892885642), 1000L, 15, 1000L);
      assertNotNull(xYSeriesCollection0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(4.33246897874319E-4, range0.getUpperBound(), 0.01);
      assertEquals(1.1224167556926128E-4, range0.getLowerBound(), 0.01);
      assertEquals(2.7274428672179014E-4, range0.getCentralValue(), 0.01);
      assertEquals(3.210052223050577E-4, range0.getLength(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1000L;
      doubleArray1[1] = (double) 1000L;
      doubleArray1[2] = (double) 1000L;
      doubleArray1[3] = (double) 1000L;
      doubleArray1[4] = (double) 1000L;
      doubleArray1[5] = (double) 1000L;
      doubleArray1[6] = (double) 1000L;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of column keys does not match the number of columns in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) "fY<V_");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1000L;
      doubleArray0[3] = (double) 1000L;
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      defaultPieDataset0.setValue((Comparable) bigInteger0, (Number) 1000.0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      List list0 = defaultPieDataset0.getKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range2);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNull(range3);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertEquals(3, doubleArray0.length);
      assertTrue(stack0.contains(""));
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1000L, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-517.1585894991912), 1000L, 15, 1000L);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals((-517.6585894991912), (double)double0, 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-517.6585894991912), range0.getLowerBound(), 0.01);
      assertEquals(241.42070525040447, range0.getCentralValue(), 0.01);
      assertEquals(1000.5000000000001, range0.getUpperBound(), 0.01);
      assertEquals(1518.1585894991913, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.1149571726625765E-4, range1.getLowerBound(), 0.01);
      assertEquals(3.2175118060806133E-4, range1.getLength(), 0.01);
      assertEquals(4.33246897874319E-4, range1.getUpperBound(), 0.01);
      assertEquals(2.7237130757028834E-4, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      
      String string0 = fixedMillisecond0.toString();
      assertNotNull(string0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", string0);
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      
      comparableArray0[0] = (Comparable<Object>) fixedMillisecond0;
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1000L;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1000L, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-513.4272892885642), 1000L, 15, 1000L);
      assertNotNull(xYSeriesCollection0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals((-513.9272892885642), (double)double0, 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1514.4272892885642, range0.getLength(), 0.01);
      assertEquals((-513.9272892885642), range0.getLowerBound(), 0.01);
      assertEquals(1000.5, range0.getUpperBound(), 0.01);
      assertEquals(243.2863553557179, range0.getCentralValue(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) fixedMillisecond0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) defaultPieDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) fixedMillisecond0);
      assertNotNull(defaultPieDataset1);
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) fixedMillisecond0, 1111.624776674614);
      assertNotNull(defaultPieDataset2);
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1000L, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-513.4272892885642), 1000L, 15, 1000L);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals((-513.9272892885642), (double)double0, 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-513.9272892885642), range0.getLowerBound(), 0.01);
      assertEquals(1000.5, range0.getUpperBound(), 0.01);
      assertEquals(243.2863553557179, range0.getCentralValue(), 0.01);
      assertEquals(1514.4272892885642, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-396.82506419528477));
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-396.82506419528477), range0.getLowerBound(), 0.01);
      assertEquals((-396.82506419528477), range0.getUpperBound(), 0.01);
      assertEquals((-396.82506419528477), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals((-396.82506419528477), number0);
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range1);
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals((-396.82506419528477), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-396.82506419528477), range1.getCentralValue(), 0.01);
      assertEquals((-396.82506419528477), range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertFalse(boolean0);
      assertEquals((-396.82506419528477), timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-396.82506419528477), timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-397.5));
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-397.5), timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-397.5), timeSeries0.getMinY(), 0.01);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-397.5), timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-397.5), timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-397.5), timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-397.5), timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-397.5), range0.getLowerBound(), 0.01);
      assertEquals((-397.5), range0.getCentralValue(), 0.01);
      assertEquals((-397.5), range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals((-397.5), number0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-397.5), timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-397.5), timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 1090);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stack0);
      assertNotNull(predicate0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertNotNull(predicate2);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      boolean boolean0 = stack0.removeIf(predicate2);
      assertFalse(boolean0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      defaultPieDataset0.setValue((Comparable) 0.0, (Number) 0.0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(boolean1 == boolean0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, (-877.0615));
      assertNotNull(lineFunction2D0);
      assertEquals((-877.0615), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-877.0615), 0.0, 6, bigInteger0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((-877.0615), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(769236.87478225, range0.getLength(), 0.01);
      assertEquals(384618.437391125, range0.getCentralValue(), 0.01);
      assertEquals(769236.87478225, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((-877.0615), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      System.setCurrentTimeMillis((-2027L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) (-1998L));
      assertNull(range1);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultMultiValueCategoryDataset0.add(arrayList0, "", "");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-1.7976931348623157E308));
      assertNotNull(range2);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range2, true);
      assertNull(range3);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getUpperBound(), 0.01);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 1.5);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      MockDate mockDate0 = new MockDate(386, (-3582), (-860), 0, (-529));
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Tue Feb 19 15:11:00 GMT 1985", mockDate0.toString());
      assertEquals(477673860000L, simpleTimePeriod0.getStartMillis());
      assertEquals(477673860000L, simpleTimePeriod0.getEndMillis());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(simpleTimePeriod0);
      assertNotNull(keyToGroupMap0);
      assertEquals("Tue Feb 19 15:11:00 GMT 1985", mockDate0.toString());
      assertEquals(477673860000L, simpleTimePeriod0.getStartMillis());
      assertEquals(477673860000L, simpleTimePeriod0.getEndMillis());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Feb 19 15:11:00 GMT 1985", mockDate0.toString());
      assertEquals(477673860000L, simpleTimePeriod0.getStartMillis());
      assertEquals(477673860000L, simpleTimePeriod0.getEndMillis());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) null, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1086.0, 1.0);
      assertNotNull(lineFunction2D0);
      assertEquals(1086.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 1, 1.0, 1, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("x<y.G6D~l-,Fmx");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(3467.884, 3467.884);
      assertNotNull(lineFunction2D0);
      assertEquals(3467.884, lineFunction2D0.getSlope(), 0.01);
      assertEquals(3467.884, lineFunction2D0.getIntercept(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3467.884;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3467.884;
      doubleArray2[1] = 3467.884;
      doubleArray2[2] = (double) (-1998L);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3467.884;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (-1998L);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5465.884, range0.getLength(), 0.01);
      assertEquals(734.942, range0.getCentralValue(), 0.01);
      assertEquals((-1998.0), range0.getLowerBound(), 0.01);
      assertEquals(3467.884, range0.getUpperBound(), 0.01);
      
      defaultMultiValueCategoryDataset0.validateObject();
      MatrixSeries matrixSeries0 = new MatrixSeries("P<Q?p_bpC0NmkVC", 2365, 1091);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stack0);
      assertNotNull(predicate0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertNotNull(predicate2);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      boolean boolean0 = stack0.removeIf(predicate2);
      assertFalse(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      defaultPieDataset0.setValue((Comparable) 0.0, (Number) 0.0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(boolean1 == boolean0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) bigInteger0, (-1840.7498168345999), (-324));
      assertNotNull(pieDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-513.4272892885642);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("y", "y", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(513.4272892885642, range0.getLength(), 0.01);
      assertEquals((-513.4272892885642), range0.getLowerBound(), 0.01);
      assertEquals((-256.7136446442821), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1848.0));
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals((-2361.427289288564), range1.getLowerBound(), 0.01);
      assertEquals((-1848.0), range1.getUpperBound(), 0.01);
      assertEquals((-2104.713644644282), range1.getCentralValue(), 0.01);
      assertEquals(513.4272892885642, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) "", (Comparable) second0);
      assertEquals(0, linkedList0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, (-907));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-907), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MockDate mockDate0 = new MockDate((-2346L));
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertEquals(57, second0.getSecond());
      assertEquals((-2346L), second0.getFirstMillisecond());
      assertEquals((-1347L), second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) 0.0, (Comparable) 0.0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(boolean0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertNotNull(range2);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) 0.0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("x<y.G6D~l-,Fmx", "x<y.G6D~l-,Fmx", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("x<y.G6D~l-,Fmx"));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("Null 'columnKeys' argument.");
      assertTrue(boolean0);
      assertTrue(stack0.contains("Null 'columnKeys' argument."));
      assertFalse(stack0.contains("x<y.G6D~l-,Fmx"));
      assertEquals("[Null 'columnKeys' argument.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) day0, (-2531.76));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1000L, 920.8197043274902);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-513.4272892885642), 1000L, 15, 1000L);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals((-513.9272892885642), (double)double0, 0.01);
      assertEquals(1000.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(920.8197043274902, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, (List) null, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.SerialDate");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      assertNotNull(styledEditorKit_UnderlineAction0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("org.jfree.data.time.SerialDate"));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Stack<String> stack1 = new Stack<String>();
      assertNotNull(stack1);
      assertFalse(stack1.contains("org.jfree.data.time.SerialDate"));
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add("There is no existing value for the specified 'period'.");
      assertTrue(boolean1);
      assertTrue(stack1.contains("There is no existing value for the specified 'period'."));
      assertFalse(stack1.contains("org.jfree.data.time.SerialDate"));
      assertEquals("[There is no existing value for the specified 'period'.]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stack1.retainAll(stack0);
      assertTrue(boolean2);
      assertFalse(stack0.contains("There is no existing value for the specified 'period'."));
      assertFalse(stack1.contains("There is no existing value for the specified 'period'."));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) stack1, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" -[X`w:E?<j)");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      MockDate mockDate0 = new MockDate(1, 440, 440, 174, (-4938));
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotNull(object0);
      assertEquals("Thu Nov 17 19:42:00 GMT 1938", mockDate0.toString());
      assertEquals("Thu Nov 17 19:42:00 GMT 1938", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertTrue(object0.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Thu Nov 17 19:42:00 GMT 1938", mockDate0.toString());
      assertEquals((-982124280000L), second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-982124279001L), second0.getLastMillisecond());
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) vector0, (Comparable) second0, (Comparable) week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals("Thu Nov 17 19:42:00 GMT 1938", mockDate0.toString());
      assertEquals((-982124280000L), second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-982124279001L), second0.getLastMillisecond());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotSame(mockDate0, object0);
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) mockDate0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Short[] shortArray0 = new Short[20];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      TimeSeries timeSeries0 = new TimeSeries(short0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(range0);
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Short[] shortArray0 = new Short[20];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      JList<Short> jList0 = new JList<Short>(shortArray0);
      assertNotNull(jList0);
      assertEquals(20, shortArray0.length);
      assertFalse(jList0.isFocusCycleRoot());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      
      Dimension dimension0 = jList0.getPreferredSize();
      assertNotNull(dimension0);
      assertEquals(20, shortArray0.length);
      assertFalse(jList0.isFocusCycleRoot());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(56.0, dimension0.getHeight(), 0.01);
      assertEquals(9.0, dimension0.getWidth(), 0.01);
      assertEquals(9, dimension0.width);
      assertEquals(56, dimension0.height);
      
      List<Short> list0 = jList0.getSelectedValuesList();
      assertNotNull(list0);
      assertEquals(20, shortArray0.length);
      assertFalse(list0.contains((short)0));
      assertFalse(jList0.isFocusCycleRoot());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2603.939549045;
      doubleArray0[1] = 139.789511236012;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2603.939549045, 139.789511236012}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.7976931348623157E308), 139.789511236012, 182, 139.789511236012);
      assertNotNull(xYSeries0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2603.939549045, 139.789511236012}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertEquals(182, xYSeries0.getItemCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      
      int int1 = 495;
      // Undeclared exception!
//      try { 
        xYSeries0.createCopy(495, 495);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 495, Size: 182
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NaN, Double.NaN);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number1);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotNull(object0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertTrue(object0.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(999L, second0.getLastMillisecond());
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) "", (Comparable) second0);
      assertEquals(0, linkedList0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(999L, second0.getLastMillisecond());
      assertNotSame(mockDate0, object0);
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "");
      assertNotNull(pieDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, 59);
      assertNotNull(lineFunction2D0);
      assertEquals(59.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-3176.084), 2976.34712, 947, "");
      assertNotNull(xYSeries0);
      assertEquals(59.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-3176.084), xYSeries0.getMinX(), 0.01);
      assertEquals(2976.3471199999994, xYSeries0.getMaxX(), 0.01);
      assertEquals(947, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      assertNotNull(mockDate1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) "", (Comparable) second0);
      assertEquals(0, linkedList0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertNotSame(mockDate0, mockDate1);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(59, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(59, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(59, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      double double1 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 59);
      assertEquals(0.0, double1, 0.01);
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(59, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 1964.027, (-2166.27537399), 2134, mockDate1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      
      String string0 = fixedMillisecond0.toString();
      assertNotNull(string0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", string0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      
      comparableArray0[0] = (Comparable<Object>) fixedMillisecond0;
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1000L;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = null;
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Stream<CategoryTableXYDataset> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      ListIterator<CategoryTableXYDataset> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(categoryTableXYDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean2 = arrayList0.add(categoryTableXYDataset0);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(categoryTableXYDataset0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) arrayList0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotNull(object0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertTrue(object0.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) "", (Comparable) second0);
      assertEquals(0, linkedList0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertNotSame(mockDate0, object0);
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "");
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, (-877.0615));
      assertNotNull(pieDataset1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(mockDate0.equals((Object)object0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 13);
      double[][] doubleArray0 = new double[2][3];
      Comparable<XYSeriesCollection>[] comparableArray1 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1000L;
      doubleArray0[3] = (double) 1000L;
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(1, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      defaultPieDataset0.setValue((Comparable) bigInteger0, (Number) 1000.0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("r=Ob'|!X.zG");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(53L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 53L, 0.5, 0.5, (-3580.09610506), 0.5);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "r=Ob'|!X.zG", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2277);
      assertNotNull(pieDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(53L, (-4334.660905983257));
      assertNotNull(powerFunction2D0);
      assertEquals((-4334.660905983257), powerFunction2D0.getB(), 0.01);
      assertEquals(53.0, powerFunction2D0.getA(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.5, 193.33514639489397, 2277, mockDate0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = stack0.add(xIntervalSeriesCollection0);
      assertTrue(boolean1);
      assertTrue(stack0.contains(xIntervalSeriesCollection0));
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      double double0 = 3354.91;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      GanttCategoryDataset ganttCategoryDataset0 = null;
      int int0 = (-2576);
      int int1 = (-1);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-2576), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-2576), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) 0.0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 2323);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(double0);
      assertEquals((-1), int0);
      
      TimeSeries timeSeries0 = new TimeSeries(double0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1000L;
      JList<Short> jList0 = new JList<Short>();
      assertNotNull(jList0);
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      
      Dimension dimension0 = jList0.getPreferredSize();
      assertNotNull(dimension0);
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      
      List<Short> list0 = jList0.getSelectedValuesList();
      assertNotNull(list0);
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list1 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Range range0 = new Range(1000.0, 1000L);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1000.0, range0.getLowerBound(), 0.01);
      assertEquals(1000.0, range0.getUpperBound(), 0.01);
      assertEquals(1000.0, range0.getCentralValue(), 0.01);
      
      defaultMultiValueCategoryDataset0.validateObject();
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, list1, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stack0);
      assertNotNull(predicate0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertNotNull(predicate2);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      boolean boolean0 = stack0.removeIf(predicate2);
      assertFalse(boolean0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      defaultPieDataset0.setValue((Comparable) 0.0, (Number) 0.0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(boolean1 == boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4523), "{2");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id={2,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      assertEquals("{2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("java.util.SimpleTimeZone[id={2,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      assertEquals("{2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      // Undeclared exception!
//      try { 
        taskSeriesCollection1.getValue((Comparable) "{2", (Comparable) "{2");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultWindDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(double0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("Kp;0");
      assertTrue(boolean0);
      assertTrue(stack0.contains("Kp;0"));
      assertEquals("[Kp;0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, false);
      assertNull(range1);
      assertTrue(stack0.contains("Kp;0"));
      assertEquals("[Kp;0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Null 'seriesKey' argument.");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate0.negate();
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertNotNull(predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      boolean boolean0 = vector0.removeIf(predicate3);
      assertFalse(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      defaultPieDataset1.setValue((Comparable) "fY<V_", (Number) bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertFalse(boolean1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(boolean1 == boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4523), "fY<V_");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=fY<V_,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      assertEquals("fY<V_", simpleTimeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=fY<V_,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      assertEquals("fY<V_", simpleTimeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      String string0 = "";
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(string0));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains(string0));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      PieDataset pieDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (-510), 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-510), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-510), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(vector0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      System.setCurrentTimeMillis((-2027L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) (-1998L));
      assertNull(range1);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultMultiValueCategoryDataset0.add(arrayList0, "", "");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-1.7976931348623157E308));
      assertNotNull(range2);
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range2, true);
      assertNull(range3);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#m8?1wb", "+(%#", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range2);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "r=Ob'|!X.zG");
      assertNotNull(simpleTimeZone0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.setDomainIsPointsInTime(false);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("r=Ob'|!X.zG");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(defaultCategoryDataset0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) "");
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range2);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range3);
      assertEquals(1.0, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = timeTableXYDataset0.getDomainLowerBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 3102.72493);
      assertNotNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(3102.72493, range2.getCentralValue(), 0.01);
      assertEquals(3102.72493, range2.getUpperBound(), 0.01);
      assertEquals(3102.72493, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0);
      assertNull(range3);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Null 'seriesKey' argument.");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate0.negate();
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertNotNull(predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      boolean boolean0 = vector0.removeIf(predicate3);
      assertFalse(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      defaultPieDataset1.setValue((Comparable) "fY<V_", (Number) bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertFalse(boolean1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(boolean1 == boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4523), "fY<V_");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=fY<V_,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("fY<V_", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("java.util.SimpleTimeZone[id=fY<V_,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("fY<V_", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-4523));
      assertEquals(0.0, double0, 0.01);
      assertEquals("java.util.SimpleTimeZone[id=fY<V_,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("fY<V_", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3109, "Null 'rowKeys' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      String string0 = simpleTimeZone0.getDisplayName();
      assertNotNull(string0);
      assertEquals("GMT+00:00", string0);
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NaN, Double.NaN);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) 3109;
      doubleArray1[2] = (-3176.084);
      doubleArray1[3] = (-816.0479);
      doubleArray1[4] = (-3176.084);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-816.0479);
      doubleArray3[1] = (-3176.084);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-816.0479);
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-816.0479);
      doubleArray4[4] = (-816.0479);
      doubleArray4[5] = (-1050.2228033879612);
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = timeTableXYDataset0.getDomainLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NaN);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range2 = defaultTableXYDataset0.getDomainBounds(false);
      assertNull(range2);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DefaultPieDataset defaultPieDataset2 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset2);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertTrue(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(double0);
      assertEquals((-1), int0);
      
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "P/3`%;Y@nksi{a(q", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      boolean boolean0 = vector0.removeIf(predicate3);
      assertFalse(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = timeTableXYDataset0.getDomainLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1970.75098303918);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1970.75098303918, range1.getLowerBound(), 0.01);
      assertEquals(1970.75098303918, range1.getCentralValue(), 0.01);
      assertEquals(1970.75098303918, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(boolean1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertFalse(number0.equals((Object)double0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 152);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 152, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3109, "Null 'rowKeys' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NaN, Double.NaN);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-3176.084), 2846.203, 15, double0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(2, 2);
      assertNotNull(defaultTableModel0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 2);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("r=Ob'|!X.zG");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number1);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Number number2 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number2);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      
      MockDate mockDate0 = new MockDate(1082, 1082, 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1596.2971114754234, 1276.37, 544.1848308484, 544.1848308484, (-1650.1111862698));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Mar 01 00:00:00 GMT 3072", mockDate0.toString());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Fri Mar 01 00:00:00 GMT 3072", mockDate0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 7);
      assertNotNull(pieDataset0);
      assertEquals("Fri Mar 01 00:00:00 GMT 3072", mockDate0.toString());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, (-1650.1111862698));
      assertNotNull(powerFunction2D0);
      assertEquals((-1650.1111862698), powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 544.1848308484, 0, mockDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) (-1998L));
      assertNull(range1);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      defaultMultiValueCategoryDataset0.add(arrayList0, "", "");
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-1.7976931348623157E308));
      assertNotNull(range2);
      assertEquals((-1.7976931348623157E308), range2.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range2, false);
      assertNull(range3);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1.7976931348623157E308), range2.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 517);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 517, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      
      MockDate mockDate0 = new MockDate(1082, 1082, 1);
      assertNotNull(mockDate0);
      
      double double1 = 1596.2971114754234;
      double double2 = 1276.37;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-80);
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) (byte) (-80));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3064.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3064.0;
      doubleArray2[1] = (-5912.682195938536);
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) yIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range2);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1532.0, range2.getCentralValue(), 0.01);
      assertEquals(3064.0, range2.getUpperBound(), 0.01);
      assertEquals(3064.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultTableXYDataset0.prune();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(defaultTableXYDataset0));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.contains(defaultTableXYDataset0));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      Range range2 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range2);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
      assertNull(range2);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = timeTableXYDataset0.getDomainLowerBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range3);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getCentralValue(), 0.01);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3064.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3064.0;
      doubleArray2[1] = (-5912.682195938536);
      doubleArray2[2] = 3064.0;
      doubleArray2[3] = 3064.0;
      doubleArray2[4] = 3064.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) double0);
      assertNotNull(defaultPieDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNotNull(range2);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, vector0, false);
      assertNull(range4);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("['QkQr^j.nY5+*{j<R");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, true, false);
      assertNotNull(simpleHistogramBin0);
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1.0, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(0.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertFalse(stack0.contains("['QkQr^j.nY5+*{j<R"));
      assertTrue(stack0.contains(""));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 1.0);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Vector<Short> vector0 = new Vector<Short>(120);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(120, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, range0, false);
      assertNull(range2);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals(120, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      System.setCurrentTimeMillis((-2027L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      defaultMultiValueCategoryDataset0.add(arrayList0, "", "");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-1.7976931348623157E308));
      assertNotNull(range1);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 1.0);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Vector<Short> vector0 = new Vector<Short>(2);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(2, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, range0, true);
      assertNull(range2);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(2, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(2, 2);
      assertNotNull(defaultTableModel0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-2658));
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0);
      assertNull(range1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      int int0 = 1;
      Week week0 = new Week((-9999), 1085);
      assertNotNull(week0);
      assertEquals(57490L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1085, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-15), week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)98;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)55, (byte)14, (byte) (-70), (byte)0, (byte)4, (byte)60, (byte)9, (byte)106, (byte)98}, byteArray0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 1, 1, 1, week0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 1000.0;
      doubleArray1[4] = (-29.750568707489);
      doubleArray1[5] = 2904.56120390839;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1019.9244427395;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1402.98503;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-29.750568707489);
      doubleArray2[3] = 1019.9244427395;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-29.750568707489);
      doubleArray2[6] = (-29.750568707489);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1019.9244427395;
      doubleArray3[1] = 3704.9319019347;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1019.9244427395;
      doubleArray4[1] = 1402.98503;
      doubleArray4[2] = 1019.9244427395;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-3344));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = "(D,E";
      Locale locale0 = new Locale("Gc4W4qO]LT", "Gc4W4qO]LT", "(D,E");
      assertNotNull(locale0);
      assertEquals("gc4w4qo]lt_GC4W4QO]LT_(D,E", locale0.toString());
      assertEquals("(D,E", locale0.getVariant());
      assertEquals("gc4w4qo]lt", locale0.getLanguage());
      assertEquals("GC4W4QO]LT", locale0.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("gc4w4qo]lt_GC4W4QO]LT_(D,E", locale0.toString());
      assertEquals("(D,E", locale0.getVariant());
      assertEquals("gc4w4qo]lt", locale0.getLanguage());
      assertEquals("GC4W4QO]LT", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = linkedList0.add(yIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(yIntervalSeriesCollection0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(double0);
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (double) (-1));
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(range2);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(double0);
      assertEquals((-1), int0);
      
      TimeSeries timeSeries0 = new TimeSeries(double0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (-510), 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-510), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      
      int int0 = slidingCategoryDataset0.getColumnCount();
      assertEquals(1, int0);
      assertEquals((-510), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-510), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (-877.0615));
      assertNotNull(range1);
      assertEquals((-510), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-877.0615), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-877.0615), range1.getCentralValue(), 0.01);
      assertEquals((-877.0615), range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertNull(range2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MockDate mockDate0 = new MockDate((-2346L));
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertEquals((-2346L), second0.getFirstMillisecond());
      assertEquals((-1347L), second0.getLastMillisecond());
      assertEquals(57, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultIntervalCategoryDataset> stack0 = new Stack<DefaultIntervalCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(boolean0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
      assertNull(range1);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertNotNull(range2);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) 0.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      assertNotNull(styledEditorKit_UnderlineAction0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNull(number1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, false);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (-510), 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-510), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-510), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, false);
      assertNull(range1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = new Locale("r+V$ K", "Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.");
      assertNotNull(locale0);
      assertEquals("DUPLICATE ITEMS IN 'ROWKEYS'.", locale0.getCountry());
      assertEquals("r+v$ k", locale0.getLanguage());
      assertEquals("r+v$ k_DUPLICATE ITEMS IN 'ROWKEYS'._Duplicate items in 'rowKeys'.", locale0.toString());
      assertEquals("Duplicate items in 'rowKeys'.", locale0.getVariant());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 1082);
      assertNotNull(pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1082, 1082);
      assertNotNull(powerFunction2D0);
      assertEquals(1082.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1082.0, powerFunction2D0.getA(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1082, 1082, 1082, "r+V$ K");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertNotNull(range3);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3109, "Null 'rowKeys' arument.");
      assertNotNull(simpleTimeZone0);
      assertEquals("Null 'rowKeys' arument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' arument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)54;
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#m8?1wb", "+(%#", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getColumnIndex("+(%#");
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(0.0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      
      comparableArray0[0] = (Comparable<Object>) fixedMillisecond0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1000L;
      doubleArray0[2] = (double) 1000L;
      doubleArray0[3] = (double) 1000L;
      doubleArray0[4] = (double) 1000L;
      TimeSeries timeSeries0 = new TimeSeries(1000.0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "r=Ob'|!X.zG");
      assertNotNull(simpleTimeZone0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean1 = timeTableXYDataset0.hasListener(intervalXYDelegate0);
      assertFalse(boolean1);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("r=Ob'|!X.zG");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultTableXYDataset0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(998L, second0.getLastMillisecond());
      assertEquals((-1L), second0.getFirstMillisecond());
      assertEquals(59, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1095, 0, 1, 1095, 9, 1095);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = second0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(499L, long0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(998L, second0.getLastMillisecond());
      assertEquals((-1L), second0.getFirstMillisecond());
      assertEquals(59, second0.getSecond());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1969,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) vector0, (Comparable) second0, (Comparable) second0);
      assertFalse(vector0.contains(defaultTableXYDataset0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(998L, second0.getLastMillisecond());
      assertEquals((-1L), second0.getFirstMillisecond());
      assertEquals(59, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertFalse(vector0.contains(defaultTableXYDataset0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, vector0, true);
      assertNull(range2);
      assertFalse(vector0.contains(defaultTableXYDataset0));
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3109, "Null 'rowKeys' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.7976931348623157E308, 1.7976931348623157E308);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1.7976931348623157E308, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.7976931348623157E308, normalDistributionFunction2D0.getMean(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, stack0, true);
      assertNull(range0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "r=Ob'|!X.zG");
      assertNotNull(simpleTimeZone0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.validateObject();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, (-1374.8), 1);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("r=Ob'|!X.zG", "Ei)sEx6VLjX&", "org.jfree.data.statistics.BoxAndWhiskerItem");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("org.jfree.data.statistics.BoxAndWhiskerItem", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Ei)sEx6VLjX&", timePeriodValues0.getDomainDescription());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-1296), (-1));
      assertNotNull(timePeriodValues1);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("org.jfree.data.statistics.BoxAndWhiskerItem", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Ei)sEx6VLjX&", timePeriodValues0.getDomainDescription());
      assertEquals("Ei)sEx6VLjX&", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("org.jfree.data.statistics.BoxAndWhiskerItem", timePeriodValues1.getRangeDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("org.jfree.data.statistics.BoxAndWhiskerItem", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Ei)sEx6VLjX&", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Ei)sEx6VLjX&");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      boolean boolean0 = true;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
//      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-1), 668);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, (-2238.618609813));
      assertNull(range1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList1 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("Q0[Hul0mV+", "g-q<|HGy1A{:V", ";{9");
      assertNotNull(locale0);
      assertEquals(";{9", locale0.getVariant());
      assertEquals("q0[hul0mv+_G-Q<|HGY1A{:V_;{9", locale0.toString());
      assertEquals("q0[hul0mv+", locale0.getLanguage());
      assertEquals("G-Q<|HGY1A{:V", locale0.getCountry());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Q0[Hul0mV+", (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertNull(range2);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNull(range3);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) "g-q<|HGy1A{:V");
      assertNotNull(pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2167.3304529916286));
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2167.3304529916286), range0.getUpperBound(), 0.01);
      assertEquals((-2167.3304529916286), range0.getLowerBound(), 0.01);
      assertEquals((-2167.3304529916286), range0.getCentralValue(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-2167.3304529916286);
      doubleArray0[1] = doubleArray0[0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("u7aWkbes~MI", "u7aWkbes~MI", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("u7aWkbes~MI", "u7aWkbes~MI", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertTrue(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      defaultCategoryDataset0.addValue((Number) (-2167.3304529916286), (Comparable) "u7aWkbes~MI", (Comparable) "u7aWkbes~MI");
      assertEquals(2, doubleArray0.length);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2167.3304529916286, range1.getLength(), 0.01);
      assertEquals((-2167.3304529916286), range1.getLowerBound(), 0.01);
      assertEquals((-1083.6652264958143), range1.getCentralValue(), 0.01);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotSame(range1, range0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1129);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1129, Size: 3
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      
      comparableArray0[0] = (Comparable<Object>) fixedMillisecond0;
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1000L;
      doubleArray1[2] = (double) 1000L;
      doubleArray1[3] = (double) 1000L;
      doubleArray1[4] = (double) 1000L;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-513.4272892885642);
      doubleArray2[1] = (double) 1000L;
      doubleArray2[2] = (double) 1000L;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1000.0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1000.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1000.0, range0.getCentralValue(), 0.01);
      assertEquals(1000.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      PieDataset pieDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      int int0 = 305;
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 305);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      boolean boolean1 = arrayList0.add(defaultTableXYDataset0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(defaultTableXYDataset0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(boolean1 == boolean0);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset1);
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertTrue(defaultTableXYDataset1.isAutoPrune());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      boolean boolean2 = arrayList0.add(defaultTableXYDataset1);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(defaultTableXYDataset0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertTrue(defaultTableXYDataset1.isAutoPrune());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, false);
      assertNotNull(intervalXYDelegate0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "r=Ob'|!X.zG");
      assertNotNull(simpleTimeZone0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("r=Ob'|!X.zG");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2166.27537399));
      assertNotNull(range0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2166.27537399), range0.getCentralValue(), 0.01);
      assertEquals((-2166.27537399), range0.getUpperBound(), 0.01);
      assertEquals((-2166.27537399), range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(31, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(31, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=31,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals(31, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=31,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = simpleTimeZone0.getOffset(0L);
      assertEquals(31, int0);
      assertEquals(31, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=31,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset1);
      assertEquals(31, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=31,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      timeTableXYDataset1.setDomainIsPointsInTime(true);
      assertEquals(31, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=31,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(timeTableXYDataset1.getDomainIsPointsInTime());
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertFalse(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      JLayer<JList<Double>> jLayer0 = new JLayer<JList<Double>>();
      assertNotNull(jLayer0);
      assertFalse(jLayer0.getIgnoreRepaint());
      assertFalse(jLayer0.isFocusTraversalPolicySet());
      assertTrue(jLayer0.getFocusTraversalKeysEnabled());
      assertFalse(jLayer0.isFocusCycleRoot());
      assertFalse(jLayer0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = timeTableXYDataset1.hasListener(jLayer0);
      assertFalse(boolean0);
      assertEquals(31, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=31,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(timeTableXYDataset1.getDomainIsPointsInTime());
      assertFalse(jLayer0.getIgnoreRepaint());
      assertFalse(jLayer0.isFocusTraversalPolicySet());
      assertTrue(jLayer0.getFocusTraversalKeysEnabled());
      assertFalse(jLayer0.isFocusCycleRoot());
      assertFalse(jLayer0.isFocusTraversalPolicyProvider());
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertFalse(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertEquals(31, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=31,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertFalse(timeTableXYDataset0.equals((Object)timeTableXYDataset1));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset1);
      assertNull(range2);
      assertEquals(31, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=31,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(timeTableXYDataset1.getDomainIsPointsInTime());
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertFalse(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range3);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 1427);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1427, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "r=Ob'|!X.zG");
      assertNotNull(simpleTimeZone0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = timeTableXYDataset0.hasListener(intervalXYDelegate0);
      assertFalse(boolean0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("r=Ob'|!X.zG");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range2);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range3);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Null 'seriesKey' argument.");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate0.negate();
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertNotNull(predicate3);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      
      boolean boolean0 = vector0.removeIf(predicate3);
      assertFalse(boolean0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "r=Ob'|!X.zG");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = timeTableXYDataset0.hasListener(intervalXYDelegate0);
      assertFalse(boolean0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("r=Ob'|!X.zG");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number1);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 305);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) (-1998L));
      assertNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-3245));
      assertNotNull(pieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("", "", "&?Ns");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("&?Ns", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(number1.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.removeAll(stack0);
      assertFalse(boolean0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Year year0 = new Year((-2298));
      assertNotNull(year0);
      assertEquals((-2298), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-2298", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-2298L), year0.getSerialIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Week week0 = new Week((-2298), year0);
      assertNotNull(week0);
      assertEquals((-2298), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-2298", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-2298L), year0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-2298), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-121788L), week0.getSerialIndex());
      assertEquals(6, week0.getWeek());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 1);
      assertNotNull(timeSeriesDataItem0);
      assertEquals((-2298), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-2298", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-2298L), year0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-2298), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-121788L), week0.getSerialIndex());
      assertEquals(6, week0.getWeek());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      assertNotNull(timeSeries0);
      assertEquals((-2298), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-2298", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-2298L), year0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-2298), week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-121788L), week0.getSerialIndex());
      assertEquals(6, week0.getWeek());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Day day0 = Day.parseDay("v6+*04) l1e/");
      assertNull(day0);
      
      short short0 = (short)1285;
      Short short1 = new Short((short)1285);
      assertNotNull(short1);
      assertEquals((short)1285, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      // Undeclared exception!
//      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) short1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2167.3304529916286));
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2167.3304529916286), range0.getCentralValue(), 0.01);
      assertEquals((-2167.3304529916286), range0.getUpperBound(), 0.01);
      assertEquals((-2167.3304529916286), range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2167.3304529916286);
      doubleArray1[1] = (-2167.3304529916286);
      doubleArray1[2] = (-2167.3304529916286);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) (-2167.3304529916286), Double.NEGATIVE_INFINITY, (-2233));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("Gc4W4qO]LT", "Gc4W4qO]LT", "(D,E");
      assertNotNull(locale0);
      assertEquals("GC4W4QO]LT", locale0.getCountry());
      assertEquals("gc4w4qo]lt", locale0.getLanguage());
      assertEquals("gc4w4qo]lt_GC4W4QO]LT_(D,E", locale0.toString());
      assertEquals("(D,E", locale0.getVariant());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GC4W4QO]LT", locale0.getCountry());
      assertEquals("gc4w4qo]lt", locale0.getLanguage());
      assertEquals("gc4w4qo]lt_GC4W4QO]LT_(D,E", locale0.toString());
      assertEquals("(D,E", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = arrayList0.add(timeTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(timeTableXYDataset0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GC4W4QO]LT", locale0.getCountry());
      assertEquals("gc4w4qo]lt", locale0.getLanguage());
      assertEquals("gc4w4qo]lt_GC4W4QO]LT_(D,E", locale0.toString());
      assertEquals("(D,E", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GC4W4QO]LT", locale0.getCountry());
      assertEquals("gc4w4qo]lt", locale0.getLanguage());
      assertEquals("gc4w4qo]lt_GC4W4QO]LT_(D,E", locale0.toString());
      assertEquals("(D,E", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Gc4W4qO]LT", (-3176.084), (-1296));
      assertNotNull(pieDataset0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("(D,E", "Gc4W4qO]LT", "_PY6W6Jz|fjj@t");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("_PY6W6Jz|fjj@t", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Gc4W4qO]LT", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-1), (-1296));
      assertNotNull(timePeriodValues1);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("_PY6W6Jz|fjj@t", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Gc4W4qO]LT", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Gc4W4qO]LT", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("_PY6W6Jz|fjj@t", timePeriodValues1.getRangeDescription());
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("_PY6W6Jz|fjj@t", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Gc4W4qO]LT", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Gc4W4qO]LT", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("_PY6W6Jz|fjj@t", timePeriodValues1.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range2);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("_PY6W6Jz|fjj@t", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Gc4W4qO]LT", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Gc4W4qO]LT", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("_PY6W6Jz|fjj@t", timePeriodValues1.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2167.3304529916286));
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2167.3304529916286), range0.getLowerBound(), 0.01);
      assertEquals((-2167.3304529916286), range0.getCentralValue(), 0.01);
      assertEquals((-2167.3304529916286), range0.getUpperBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2167.3304529916286);
      doubleArray1[1] = (-2167.3304529916286);
      doubleArray1[2] = (-2167.3304529916286);
      doubleArray0[1] = doubleArray0[0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("u7aWkbes~MI", "u7aWkbes~MI", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("r+V$ K", "Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.");
      assertNotNull(locale0);
      assertEquals("Duplicate items in 'rowKeys'.", locale0.getVariant());
      assertEquals("DUPLICATE ITEMS IN 'ROWKEYS'.", locale0.getCountry());
      assertEquals("r+v$ k", locale0.getLanguage());
      assertEquals("r+v$ k_DUPLICATE ITEMS IN 'ROWKEYS'._Duplicate items in 'rowKeys'.", locale0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Duplicate items in 'rowKeys'.", locale0.getVariant());
      assertEquals("DUPLICATE ITEMS IN 'ROWKEYS'.", locale0.getCountry());
      assertEquals("r+v$ k", locale0.getLanguage());
      assertEquals("r+v$ k_DUPLICATE ITEMS IN 'ROWKEYS'._Duplicate items in 'rowKeys'.", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = arrayList0.add(timeTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(timeTableXYDataset0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Duplicate items in 'rowKeys'.", locale0.getVariant());
      assertEquals("DUPLICATE ITEMS IN 'ROWKEYS'.", locale0.getCountry());
      assertEquals("r+v$ k", locale0.getLanguage());
      assertEquals("r+v$ k_DUPLICATE ITEMS IN 'ROWKEYS'._Duplicate items in 'rowKeys'.", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset1);
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset1, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2167.3304529916286));
      assertNotNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals((-2167.3304529916286), range0.getLowerBound(), 0.01);
      assertEquals((-2167.3304529916286), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2167.3304529916286), range0.getUpperBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-3245));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 305);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) (-1998L));
      assertNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-3245));
      assertNotNull(pieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = "";
      Locale locale0 = new Locale("", "", "&?Ns");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("&?Ns", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "&?Ns", (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowData' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      timeTableXYDataset1.setDomainIsPointsInTime(true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(timeTableXYDataset1.getDomainIsPointsInTime());
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertFalse(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      boolean boolean0 = timeTableXYDataset0.hasListener(defaultTableXYDataset0);
      assertFalse(boolean0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertFalse(timeTableXYDataset0.equals((Object)timeTableXYDataset1));
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Duplicate items in 'rowKeys'.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset1);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(timeTableXYDataset1.getDomainIsPointsInTime());
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertFalse(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "r+V$ K", (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowData' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1180.99133), Double.POSITIVE_INFINITY, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1464.43));
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1464.43), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "", 3544.89, 2402);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Hour hour0 = Hour.parseHour("");
      assertNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, (-982.5), 2);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      boolean boolean0 = true;
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultWindDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(defaultWindDataset0);
      assertNotNull(intervalXYDelegate1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      
      Range range0 = intervalXYDelegate1.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate1.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertTrue(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, (List) linkedList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.SerialDate");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      assertNotNull(styledEditorKit_UnderlineAction0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, false);
      assertNotNull(intervalXYDelegate0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      ActionEvent actionEvent0 = new ActionEvent(intervalXYDelegate0, 1, "org.jfree.data.time.SerialDate", 1);
      assertNotNull(actionEvent0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals("org.jfree.data.time.SerialDate", actionEvent0.getActionCommand());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals(1, actionEvent0.getID());
      assertEquals(1, actionEvent0.getModifiers());
      
      actionEvent0.setSource("org.jfree.data.time.SerialDate");
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals("org.jfree.data.time.SerialDate", actionEvent0.getActionCommand());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals(1, actionEvent0.getID());
      assertEquals(1, actionEvent0.getModifiers());
      
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultKeyedValuesDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("{yBupdSjhVUhD~W-Z]b");
      assertTrue(boolean0);
      assertTrue(stack0.contains("{yBupdSjhVUhD~W-Z]b"));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[{yBupdSjhVUhD~W-Z]b]", stack0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(boolean1 == boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Hour hour0 = Hour.parseHour("N!_F");
      assertNull(hour0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertNull(number1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      // Undeclared exception!
//      try { 
        mockSimpleDateFormat0.parse("", (ParsePosition) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Number[][] numberArray0 = new Number[4][8];
      Number[] numberArray1 = new Number[4];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(";~jwpEeVa^zYG}|.oJB3", "=", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(4, numberArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1933.29, 1933.29);
      assertNotNull(powerFunction2D0);
      assertEquals(1933.29, powerFunction2D0.getA(), 0.01);
      assertEquals(1933.29, powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 5910, 1933.29, 5910, ";~jwpEeVa^zYG}|.oJB3");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) "", (Comparable) second0);
      assertEquals(0, linkedList0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3109, "Null 'rowKeys' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.7976931348623157E308, 1.7976931348623157E308);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1.7976931348623157E308, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.7976931348623157E308, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-3176.084), 2846.203, 15, double0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.7976931348623157E308, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.7976931348623157E308, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(double1);
      assertEquals((-3176.584), (double)double1, 0.01);
      assertEquals(1.7976931348623157E308, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.7976931348623157E308, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "Null 'rowKeys' argument.", (-3358.3));
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", "fY<V_", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Null 'seriesKey' argument.");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate0.negate();
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      boolean boolean0 = vector0.removeIf(predicate2);
      assertFalse(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      defaultPieDataset1.setValue((Comparable) "fY<V_", (Number) bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertFalse(boolean1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(boolean1 == boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4523), "fY<V_");
      assertNotNull(simpleTimeZone0);
      assertEquals("fY<V_", simpleTimeZone0.getID());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=fY<V_,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("fY<V_", simpleTimeZone0.getID());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=fY<V_,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset1);
      assertEquals(10.0, double0, 0.01);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      double double1 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-650));
      assertEquals(0.0, double1, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("fY<V_", simpleTimeZone0.getID());
      assertEquals((-4523), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=fY<V_,offset=-4523,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1050.0;
      doubleArray1[1] = 3596.80136;
      doubleArray1[2] = (-3182.189);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3596.80136;
      doubleArray2[1] = (-3182.189);
      doubleArray2[2] = 3596.80136;
      doubleArray2[3] = 3596.80136;
      doubleArray2[4] = 3596.80136;
      doubleArray2[5] = 3596.80136;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1050.0;
      doubleArray3[1] = 1050.0;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = (-3182.189);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("x<y.G6D~l-,Fmx", "x<y.G6D~l-,Fmx", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-3182.189), number0);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(3, doubleArray0.length);
      assertEquals((-3182.189), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      
      comparableArray0[0] = (Comparable<Object>) fixedMillisecond0;
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1000L;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "+e5qx\"p", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.5);
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.5, range1.getLowerBound(), 0.01);
      assertEquals(1.5, range1.getCentralValue(), 0.01);
      assertEquals(1.5, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      
      comparableArray0[0] = (Comparable<Object>) fixedMillisecond0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1000L;
      doubleArray0[2] = (double) 1000L;
      doubleArray0[3] = (double) 1000L;
      doubleArray0[4] = (double) 1000L;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-513.4272892885642);
      doubleArray1[1] = (double) 1000L;
      doubleArray1[2] = (double) 1000L;
      doubleArray1[3] = (double) 1000L;
      doubleArray1[4] = (double) 1000L;
      doubleArray1[5] = (double) 1000L;
      doubleArray1[6] = (double) 1000L;
      doubleArray1[7] = 1000.0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      
      comparableArray0[0] = (Comparable<Object>) fixedMillisecond0;
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1000L;
      doubleArray1[2] = (double) 1000L;
      doubleArray1[3] = (double) 1000L;
      doubleArray1[4] = (double) 1000L;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-538.8085492528389);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 334);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2146988099));
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2146988099), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 1000.0, (-3532.2));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2166.27537399));
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2166.27537399), range0.getCentralValue(), 0.01);
      assertEquals((-2166.27537399), range0.getUpperBound(), 0.01);
      assertEquals((-2166.27537399), range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "r=Ob'|!X.zG");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = timeTableXYDataset0.hasListener(defaultTableXYDataset0);
      assertFalse(boolean0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("r=Ob'|!X.zG", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r=Ob'|!X.zG,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertTrue(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range2);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range3);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Range range4 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1);
      assertNull(range4);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-73), (byte) (-96), (byte)54}, byteArray0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 60);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, (double) (byte) (-73));
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertNull(number0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number2);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("Gc4W4qO]LT", "(D,E", "Gc4W4qO]LT");
      assertNotNull(locale0);
      assertEquals("Gc4W4qO]LT", locale0.getVariant());
      assertEquals("gc4w4qo]lt", locale0.getLanguage());
      assertEquals("(D,E", locale0.getCountry());
      assertEquals("gc4w4qo]lt_(D,E_Gc4W4qO]LT", locale0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Gc4W4qO]LT", locale0.getVariant());
      assertEquals("gc4w4qo]lt", locale0.getLanguage());
      assertEquals("(D,E", locale0.getCountry());
      assertEquals("gc4w4qo]lt_(D,E_Gc4W4qO]LT", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = arrayList0.add(timeTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(timeTableXYDataset0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Gc4W4qO]LT", locale0.getVariant());
      assertEquals("gc4w4qo]lt", locale0.getLanguage());
      assertEquals("(D,E", locale0.getCountry());
      assertEquals("gc4w4qo]lt_(D,E_Gc4W4qO]LT", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1084, 10);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(10, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1084, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      DomainOrder domainOrder0 = jDBCXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 305);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) (-1998L));
      assertNull(range1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("", "", "&?Ns");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("&?Ns", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1477), 1051);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1477), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1051, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      ListIterator<YIntervalSeriesCollection> listIterator0 = vector0.listIterator();
      assertNotNull(listIterator0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range2);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      double[] doubleArray0 = new double[3];
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("r+V$ K", "Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.");
      assertNotNull(locale0);
      assertEquals("r+v$ k_DUPLICATE ITEMS IN 'ROWKEYS'._Duplicate items in 'rowKeys'.", locale0.toString());
      assertEquals("r+v$ k", locale0.getLanguage());
      assertEquals("DUPLICATE ITEMS IN 'ROWKEYS'.", locale0.getCountry());
      assertEquals("Duplicate items in 'rowKeys'.", locale0.getVariant());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("r+v$ k_DUPLICATE ITEMS IN 'ROWKEYS'._Duplicate items in 'rowKeys'.", locale0.toString());
      assertEquals("r+v$ k", locale0.getLanguage());
      assertEquals("DUPLICATE ITEMS IN 'ROWKEYS'.", locale0.getCountry());
      assertEquals("Duplicate items in 'rowKeys'.", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = arrayList0.add(timeTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(timeTableXYDataset0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("r+v$ k_DUPLICATE ITEMS IN 'ROWKEYS'._Duplicate items in 'rowKeys'.", locale0.toString());
      assertEquals("r+v$ k", locale0.getLanguage());
      assertEquals("DUPLICATE ITEMS IN 'ROWKEYS'.", locale0.getCountry());
      assertEquals("Duplicate items in 'rowKeys'.", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Object[][] objectArray0 = new Object[0][4];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultWindDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3109, "Null 'rowKeys' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(3109, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=3109,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertNull(number1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2166.27537399));
      assertNotNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2166.27537399), range0.getCentralValue(), 0.01);
      assertEquals((-2166.27537399), range0.getUpperBound(), 0.01);
      assertEquals((-2166.27537399), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2166.27537399);
      doubleArray0[1] = (-2166.27537399);
      doubleArray0[2] = (-2166.27537399);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2166.27537399);
      doubleArray1[1] = 474.2189245532;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1051, 1078);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1078, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1051, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 1600, 1600);
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1078, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1051, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1600, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(1600, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[0];
      int int0 = slidingGanttCategoryDataset0.getColumnIndex(474.2189245532);
      assertEquals((-1), int0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1078, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1051, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 635);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2166.27537399));
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2166.27537399), range0.getCentralValue(), 0.01);
      assertEquals((-2166.27537399), range0.getUpperBound(), 0.01);
      assertEquals((-2166.27537399), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2166.27537399);
      doubleArray0[1] = (-2166.27537399);
      doubleArray0[2] = (-2166.27537399);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2166.27537399);
      doubleArray1[1] = 474.2189245532;
      doubleArray1[2] = (-391.7715874849037);
      double[][] doubleArray2 = new double[9][3];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-2875.739238);
      doubleArray3[1] = (-2166.27537399);
      doubleArray3[2] = (-2166.27537399);
      doubleArray3[3] = (-2166.27537399);
      doubleArray3[4] = (-391.7715874849037);
      doubleArray2[2] = doubleArray3;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      doubleArray2[8] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray2);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray2.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      assertNotNull(fixedMillisecond0);
      assertEquals(1000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1000L, fixedMillisecond0.getSerialIndex());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "More data than series to put them in");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("More data than series to put them in", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=More data than series to put them in,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      simpleTimeZone0.setID("More data than series to put them in");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("More data than series to put them in", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=More data than series to put them in,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("More data than series to put them in", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=More data than series to put them in,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(223.57116985, 0.8);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(223.57116985, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(0.8, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      boolean boolean0 = stack0.add(defaultTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(stack0.contains(defaultTableXYDataset0));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, stack0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Object[][] objectArray0 = new Object[0][4];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultWindDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      assertNull(number0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range2);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(305, 0);
      assertNotNull(defaultTableModel0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultTableModel0));
      assertEquals(0, linkedList0.size());
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, vector0, false);
      assertNull(range2);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Q_Ln:YC%30+BGlUL", "2Iag62Ku&NZ?@1{/G", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      assertNull(range3);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      
      MockDate mockDate0 = new MockDate(1082, 1082, 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1596.2971114754234, 1276.37, 544.1848308484, 544.1848308484, 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Mar 01 00:00:00 GMT 3072", mockDate0.toString());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals("Fri Mar 01 00:00:00 GMT 3072", mockDate0.toString());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(2, 0);
      assertNotNull(defaultTableModel0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultTableModel0);
      assertNotNull(seriesChangeEvent0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertNotNull(range2);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      long long0 = (-1998L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1998L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-1998L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1998L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1998L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1998L), fixedMillisecond0.getLastMillisecond());
      
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Year year0 = new Year((-1));
      assertNotNull(year0);
      assertEquals("-1", year0.toString());
      assertEquals((-1L), year0.getSerialIndex());
      assertEquals((-1), year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1060, 1060, year0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("-1", year0.toString());
      assertEquals((-1L), year0.getSerialIndex());
      assertEquals((-1), year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1059, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertNull(range0);
      assertEquals("-1", year0.toString());
      assertEquals((-1L), year0.getSerialIndex());
      assertEquals((-1), year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1059, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-9999);
      doubleArray1[1] = (double) 9999;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.SelectableValue", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(19998.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals(9999.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate((-1235L));
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(58, second0.getSecond());
      assertEquals((-1235L), second0.getFirstMillisecond());
      assertEquals((-236L), second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) second0, (Comparable) mockDate0);
      assertEquals(0, linkedList0.size());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(58, second0.getSecond());
      assertEquals((-1235L), second0.getFirstMillisecond());
      assertEquals((-236L), second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2166.27537399));
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2166.27537399), range0.getCentralValue(), 0.01);
      assertEquals((-2166.27537399), range0.getUpperBound(), 0.01);
      assertEquals((-2166.27537399), range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2166.27537399);
      doubleArray1[1] = (-2166.27537399);
      doubleArray1[2] = (-2166.27537399);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("u7aWkbes~MI", "u7aWkbes~MI", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals((-4332.55074798), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-2166.27537399), range1.getCentralValue(), 0.01);
      assertEquals(4332.55074798, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-10.6502644893);
      doubleArray0[1] = (-2208.220529);
      doubleArray0[2] = 2846.203;
      doubleArray0[3] = (-1156.5);
      doubleArray0[4] = 3377.504109685499;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray1, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray2, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray3);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray3, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-10.6502644893));
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(boolean1 == boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 60, (-1686));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(60, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1686), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 456);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(60, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1686), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) (-10.6502644893), (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(60, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1686), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(60, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1686), slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-10.6502644893);
      doubleArray0[1] = (-2208.220529);
      doubleArray0[2] = 2846.203;
      doubleArray0[3] = (-1156.5);
      doubleArray0[4] = 3377.504109685499;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray1, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray2, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray3);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499}, doubleArray3, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-10.6502644893));
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 456, 9999);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(9999, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(456, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 2146729404);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(9999, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(456, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 562.579781451, (-1156.5), 1068, 2846.203);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-10.6502644893);
      doubleArray0[1] = (-2208.220529);
      doubleArray0[2] = 2846.203;
      doubleArray0[3] = (-1156.5);
      doubleArray0[4] = 3377.504109685499;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray3);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.6502644893), (-2208.220529), 2846.203, (-1156.5), 3377.504109685499, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1156.5));
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("qkFt");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(timeTableXYDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean2 = arrayList0.add(timeTableXYDataset0);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(timeTableXYDataset0));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) arrayList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "";
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(defaultMultiValueCategoryDataset0));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add(defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(stack0.contains(defaultMultiValueCategoryDataset0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 305);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) (-1998L));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeZone.getDefault();
      Locale locale0 = new Locale("", "", "&?Ns");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1477), 1051);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 1);
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, linkedList0, true);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-10.6502644893);
      doubleArray0[1] = (-2208.220529);
      doubleArray0[2] = 2846.203;
      doubleArray0[3] = (-1156.5);
      int int0 = (-894);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1869.23, (-4496.315904));
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1.0), 1869.23, Integer.MAX_VALUE, (-2208.220529));
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2166.27537399));
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2166.27537399);
      doubleArray1[1] = (-2166.27537399);
      doubleArray1[2] = (-2166.27537399);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2166.27537399);
      doubleArray2[1] = 474.2189245532;
      doubleArray2[2] = (-391.7715874849037);
      doubleArray2[3] = (-2166.27537399);
      doubleArray2[4] = (-2166.27537399);
      doubleArray2[5] = (-2166.27537399);
      String[] stringArray0 = new String[16];
      stringArray0[0] = "u7aWkbes~MI";
      stringArray0[1] = "u7aWkbes~MI";
      stringArray0[2] = "u7aWkbes~MI";
      Number[][] numberArray0 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second(mockDate0);
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) "", (Comparable) second0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "");
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2445, "DY83g,lx73\"");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      int int0 = 1839;
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>(1839);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, true);
      String string0 = null;
      String string1 = "zf&<,}";
      Number[][] numberArray0 = new Number[7][0];
      Number[] numberArray1 = new Number[2];
      String string2 = "OU*xK`D3/G\"su";
      BigInteger bigInteger0 = null;
//      try {
        bigInteger0 = new BigInteger("OU*xK`D3/G\"su", 1839);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // Radix out of range
//         //
//         verifyException("java.math.BigInteger", e);
//      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "q9L<s&'@Ji/,S?";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "q9L<s&'@Ji/,S?";
      stringArray0[6] = "-'";
      stringArray0[7] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2166.27537399));
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2166.27537399);
      doubleArray0[1] = (-2166.27537399);
      doubleArray0[2] = (-2166.27537399);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2166.27537399);
      doubleArray1[1] = 474.2189245532;
      doubleArray1[2] = (-391.7715874849037);
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Object[][] objectArray0 = new Object[0][4];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultWindDataset0.setGroup(datasetGroup0);
      DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3109, "Null 'rowKeys' argument.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.7976931348623157E308, 1.7976931348623157E308);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-3176.084), 2846.203, 15, double0);
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals((-3176.584), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Q_Ln:YC%30+BGlUL", "2Iag62Ku&NZ?@1{/G", doubleArray0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = "<_";
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("<_", "<_", (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      int int0 = (-1);
      DatasetUtilities.calculateStackTotal(jDBCXYDataset0, (-1));
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      CategoryDataset categoryDataset0 = null;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-397.0));
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Range range0 = new Range((-397.0), (-397.0));
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) double0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      long long0 = 5L;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(5L);
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      comparableArray0[1] = (Comparable<XYSeriesCollection>) fixedMillisecond0;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'rowKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-10.6502644893);
      doubleArray0[1] = (-2208.220529);
      doubleArray0[2] = 2846.203;
      doubleArray0[3] = (-1156.5);
      doubleArray0[4] = 3377.504109685499;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1156.5));
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 456, (-1686));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 2146729404);
      assertNotNull(pieDataset0);
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "org.jfree.data.time.SerialDate";
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.SerialDate");
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 305);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 3081.109107);
      int int0 = (-3245);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-3245));
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeZone.getDefault();
      Locale locale0 = new Locale("GzNOY-Br`'xWx>&CG", "org.jfree.data.general.DefaultKeyedValuesDataset", "");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      arrayList0.add(timeTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Byte byte0 = new Byte((byte)1);
      ActionEvent actionEvent0 = new ActionEvent(byte0, 3357, "Qnv'+`i[#");
      actionEvent0.paramString();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      actionEvent0.setSource(jDBCXYDataset0);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      styledEditorKit_UnderlineAction0.actionPerformed(actionEvent0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      timeTableXYDataset0.hasListener(styledEditorKit_UnderlineAction0);
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("1|V)2!r~?rO_U");
      stack0.add("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(14.5, 2559.56220144);
      SimpleHistogramDataset simpleHistogramDataset1 = new SimpleHistogramDataset("");
      simpleHistogramDataset1.addBin(simpleHistogramBin0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset1, false);
      DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset1, (List) stack0, range0, true);
      DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset1, stack0, false);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(2, 0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultTableModel0);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, linkedList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Stack<String> stack0 = new Stack<String>();
      stack0.add((String) null);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(fixedMillisecond0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(2394.0, Double.NaN);
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Month month0 = new Month();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, (-456), (-456));
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (-456));
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.SerialDate");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, false);
      ActionEvent actionEvent0 = new ActionEvent(intervalXYDelegate0, 1, "org.jfree.data.time.SerialDate", 1);
      actionEvent0.setSource("org.jfree.data.time.SerialDate");
      styledEditorKit_UnderlineAction0.actionPerformed(actionEvent0);
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      timeTableXYDataset0.hasListener(styledEditorKit_UnderlineAction0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultKeyedValuesDataset0.sortByKeys(sortOrder0);
      DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.time.SerialDate", (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1000L;
      doubleArray0[3] = (double) 1000L;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1000.0, 920.8197043274902);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-513.4272892885642), 1000.0, 15, 0.0);
      XYSeries xYSeries0 = new XYSeries(1000.0, true, true);
      xYSeriesCollection0.removeSeries(xYSeries0);
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals((-513.9272892885642), (double)double0, 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(1.1224167556926128E-4, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(2, 0);
      defaultTableModel0.setNumRows(0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultTableModel0);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-371.335));
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getGroup();
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      TimeSeriesDataItem timeSeriesDataItem0 = null;
//      try {
        timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) null, (Number) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'period' argument.
//         //
//         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
//      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYSeries xYSeries0 = new XYSeries("5x1aX_]1Z", false);
      xYSeries0.clone();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-888.5375857705745);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-407.3175761);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1521.7640376799925;
      doubleArray2[2] = (-888.5375857705745);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-888.5375857705745);
      doubleArray2[6] = (-407.3175761);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Q_Ln:YC%30+BGlUL", "yB%kS%7|Z", doubleArray0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ActionEvent actionEvent0 = new ActionEvent(jDBCXYDataset0, 3357, "Qnv'+`i[#");
      actionEvent0.paramString();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      actionEvent0.setSource(yIntervalSeriesCollection0);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      styledEditorKit_UnderlineAction0.actionPerformed(actionEvent0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      timeTableXYDataset0.hasListener(jDBCXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.findMaximumDomainValue(yIntervalSeriesCollection0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Stack<String> stack0 = new Stack<String>();
      stack0.add("j@c,e5N#/BoJ,f~");
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("j@c,e5N#/BoJ,f~");
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, true);
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Q_Ln:YC%30+BGlUL", "2Iag62Ku&NZ?@1{/G", doubleArray0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      DatasetUtilities.findRangeBounds(categoryDataset0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      // Undeclared exception!
//      try { 
        ZoneOffset.ofHoursMinutesSeconds(100, 100, 100);
//        fail("Expecting exception: DateTimeException");
      
//      } catch(DateTimeException e) {
//         //
//         // Zone offset hours not in valid range: value 100 is not in the range -18 to 18
//         //
//         verifyException("java.time.ZoneOffset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, true);
      intervalXYDelegate0.getDomainBounds(true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-888.5375857705745);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-407.3175761);
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1521.7640376799925;
      doubleArray2[2] = (-888.5375857705745);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-888.5375857705745);
      doubleArray2[6] = (-407.3175761);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Q_Ln:YC%30+BGlUL", "yB%kS%7|Z", doubleArray0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
//      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-432), (-432));
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Object[][] objectArray0 = new Object[0][4];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultWindDataset0.setGroup(datasetGroup0);
      DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      double double0 = 1.0;
      LineFunction2D lineFunction2D0 = new LineFunction2D(1.7976931348623157E308, 1.0);
      double double1 = (-1176.2);
      int int0 = 2798;
      int int1 = (-639);
      int int2 = 2146729404;
      // Undeclared exception!
//      try { 
        SerialDate.createInstance(2146729404);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SpreadsheetDate: Serial must be in range 2 to 2958465.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.SerialDate");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      ActionEvent actionEvent0 = new ActionEvent(styledEditorKit_UnderlineAction0, 1492, "org.jfree.data.time.SerialDate", 1492);
      actionEvent0.paramString();
      actionEvent0.setSource(timeZone0);
      styledEditorKit_UnderlineAction0.actionPerformed(actionEvent0);
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      timeTableXYDataset0.hasListener(styledEditorKit_UnderlineAction0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 0.0, (-894), 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      Locale locale0 = new Locale("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0, locale0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      arrayList0.add(defaultTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYSeries xYSeries0 = new XYSeries("5x1aX_]1Z", false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(589.852755514, 3295.4699347, "\"jf~uXa%4fzM\"n");
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(3295.4699347, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1753.4599251, 1753.4599251, "");
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-20));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "fY<V_", doubleArray0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      vector0.removeIf(predicate3);
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getDomainLowerBound(false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1970.75098303918);
      assertNotNull(range0);
      
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", 3532.214283670471, 1082);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      arrayList0.add(defaultTableXYDataset0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) arrayList0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2166.27537399));
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(categoryTableXYDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      Range.shift(range0, (-2166.27537399));
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      LinkedList<DefaultTableModel> linkedList1 = new LinkedList<DefaultTableModel>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      linkedList1.add(defaultTableModel0);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2166.27537399));
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      Month month0 = new Month();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) month0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Object[][] objectArray0 = new Object[0][4];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultWindDataset0.setGroup(datasetGroup0);
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) list0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" -[X`w:E?<j)");
      Locale locale0 = Locale.ENGLISH;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Week week0 = new Week();
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1, 634.508293421579, true, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 53);
      DatasetUtilities.createCategoryDataset((Comparable) " -[X`w:E?<j)", (KeyedValues) pieDataset0);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("Null 'tasks' argument.");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Null 'tasks' argument.");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, (-2238.618609813));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      ArrayList<TimeTableXYDataset> arrayList1 = new ArrayList<TimeTableXYDataset>();
      TimeZone.getDefault();
      Locale locale0 = new Locale("Q0[Hul0mV+", "g-q<|HGy1A{:V", ";{9");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1477), 1057);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 1057);
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList1, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, (-2238.618609813));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      ArrayList<TimeTableXYDataset> arrayList1 = new ArrayList<TimeTableXYDataset>();
      TimeZone.getDefault();
      Locale locale0 = new Locale("Q0[Hul0mV+", "g-q<|HGy1A{:V", ";{9");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1477), 1057);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 1057);
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYDataset0);
      assertNull(number1);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 410);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      int int0 = 305;
      DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 305);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) (-1998L));
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-3245));
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("", "", "&?Ns");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      arrayList0.add(timeTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      System.setCurrentTimeMillis((-1998L));
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2208.220529);
      doubleArray0[1] = (double) (-1998L);
      doubleArray0[2] = 3377.504109685499;
      doubleArray0[3] = (-391.7715874849037);
      doubleArray0[4] = 2846.203;
      doubleArray0[5] = (double) (-1998L);
      doubleArray0[6] = 3377.504109685499;
      doubleArray0[7] = 2846.203;
      doubleArray0[8] = (-10.6502644893);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1998.0));
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2261), (-2261));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, 8);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.SerialDate");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      ActionEvent actionEvent0 = new ActionEvent(styledEditorKit_UnderlineAction0, 1492, "org.jfree.data.time.SerialDate", 1492);
      actionEvent0.paramString();
      actionEvent0.setSource(timeZone0);
      styledEditorKit_UnderlineAction0.actionPerformed(actionEvent0);
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      timeTableXYDataset0.hasListener(styledEditorKit_UnderlineAction0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.time.SerialDate", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Object[][] objectArray0 = new Object[0][4];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultWindDataset0.setGroup(datasetGroup0);
      DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-888.5375857705745);
      Number[][] numberArray0 = new Number[0][6];
      DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.", numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-1796.47696844512));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1159.25), 4288.63);
      int int0 = 31;
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 4288.63, (-1159.25), 31, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 2445;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 2445;
      doubleArray1[5] = (-1.7248532741511589);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray4[3] = (-1.7248532741511589);
      doubleArray4[4] = (-407.3175761);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      Locale locale0 = Locale.FRENCH;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
//      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Null 'visibleSeriesKeys' argument.", locale0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal pattern character 'N'
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "|@xZ}}@t)yS9ulo#", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 2015.04796187693);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Stack<Float> stack0 = new Stack<Float>();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      double double1 = 3242.27407282;
      polynomialFunction2D0.getCoefficients();
      int int0 = (-894);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.getGroups();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-888.5375857705745);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-407.3175761);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1521.7640376799925;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1521.7640376799925;
      doubleArray2[2] = (-888.5375857705745);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-888.5375857705745);
      doubleArray2[6] = (-407.3175761);
      doubleArray2[7] = 1521.7640376799925;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) 0.0, (Comparable) 0.0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("1|V)2!r~?rO_U");
      stack0.add("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3310.0), 14.5);
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, true);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      Object[][] objectArray0 = new Object[9][7];
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) linkedList0;
      objectArray1[1] = (Object) linkedList0;
      objectArray1[2] = (Object) linkedList0;
      objectArray1[3] = (Object) linkedList0;
      objectArray1[4] = (Object) linkedList0;
      objectArray1[5] = (Object) null;
      objectArray1[6] = (Object) linkedList0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[3];
      objectArray2[0] = (Object) linkedList0;
      objectArray2[1] = (Object) null;
      objectArray2[2] = (Object) linkedList0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[2];
      objectArray3[0] = (Object) null;
      objectArray3[1] = (Object) linkedList0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[8];
      Object object0 = new Object();
      objectArray4[0] = object0;
      objectArray4[1] = (Object) linkedList0;
      objectArray4[2] = (Object) null;
      Object object1 = new Object();
      objectArray4[3] = object1;
      objectArray4[4] = (Object) linkedList0;
      objectArray4[5] = (Object) null;
      objectArray4[6] = (Object) linkedList0;
      Object object2 = new Object();
      objectArray4[7] = object2;
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[7];
      objectArray5[0] = (Object) null;
      objectArray5[1] = (Object) null;
      objectArray5[2] = (Object) null;
      objectArray5[3] = (Object) null;
      Object object3 = new Object();
      objectArray5[4] = object3;
      objectArray5[5] = object1;
      objectArray5[6] = object1;
      objectArray0[4] = objectArray5;
      Object[] objectArray6 = new Object[9];
      Object object4 = new Object();
      objectArray6[0] = object4;
      objectArray6[1] = (Object) null;
      objectArray6[2] = object0;
      objectArray6[3] = (Object) null;
      objectArray6[4] = (Object) linkedList0;
      objectArray6[5] = object2;
      objectArray6[6] = object2;
      objectArray6[7] = object2;
      objectArray6[8] = object3;
      objectArray0[5] = objectArray6;
      Object[] objectArray7 = new Object[4];
      Object object5 = new Object();
      objectArray7[0] = object5;
      Object object6 = new Object();
      objectArray7[1] = object6;
      objectArray7[2] = object1;
      Object object7 = new Object();
      objectArray7[3] = object7;
      objectArray0[6] = objectArray7;
      Object[] objectArray8 = new Object[3];
      objectArray8[0] = object7;
      objectArray8[1] = object5;
      objectArray8[2] = object4;
      objectArray0[7] = objectArray8;
      Object[] objectArray9 = new Object[9];
      objectArray9[0] = object3;
      objectArray9[1] = object7;
      objectArray9[2] = object4;
      objectArray9[3] = (Object) linkedList0;
      objectArray9[4] = object4;
      objectArray9[5] = (Object) linkedList0;
      objectArray9[6] = object0;
      objectArray9[7] = object5;
      objectArray9[8] = object5;
      objectArray0[8] = objectArray9;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray6);
      linkedList0.push(defaultTableModel0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-385.31871611);
      doubleArray1[3] = 591.8017513072639;
      doubleArray1[4] = 147.0;
      doubleArray1[5] = (-1857.453751);
      doubleArray1[6] = (-831.9);
      doubleArray1[7] = 1.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-1857.453751);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-831.9);
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = 1.0;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = 591.8017513072639;
      doubleArray6[5] = 1.0;
      doubleArray6[6] = 591.8017513072639;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = Double.NEGATIVE_INFINITY;
      doubleArray7[1] = (-385.31871611);
      doubleArray7[2] = (-2595.172293);
      doubleArray7[3] = 591.8017513072639;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      int int0 = 0;
      Comparable<DefaultOHLCDataset> comparable0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 6.283185307179586, 0.0, 0, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-888.5375857705745);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-407.3175761);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1521.7640376799925;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1521.7640376799925;
      doubleArray2[2] = (-888.5375857705745);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-888.5375857705745);
      doubleArray2[6] = (-407.3175761);
      doubleArray2[7] = 1521.7640376799925;
      doubleArray2[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("yB%kS%7|Z", "yB%kS%7|Z", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(1521.7640376799925, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2445, "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = "qQm";
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("qQm", (String) null, (Number[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.getGroups();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Object[][] objectArray0 = new Object[0][4];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultWindDataset0.setGroup(datasetGroup0);
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      double double0 = 1.7976931348623157E308;
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, (List) list0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Object[][] objectArray0 = new Object[0][4];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      defaultWindDataset0.setGroup(datasetGroup0);
      List list0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeZone timeZone0 = TimeZone.getTimeZone("The number of row keys does not match the number of rows in the data array.");
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = locale0.stripExtensions();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale1);
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      timeTableXYDataset0.hasListener(taskSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) "The number of row keys does not match the number of rows in the data array.", (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      int int0 = 0;
      // Undeclared exception!
//      try { 
        SerialDate.createInstance(0, (-1), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'year' argument must be in range 1900 to 9999.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.SerialDate");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      ActionEvent actionEvent0 = new ActionEvent(styledEditorKit_UnderlineAction0, 1492, "org.jfree.data.time.SerialDate", 1492);
      actionEvent0.setSource(timeZone0);
      styledEditorKit_UnderlineAction0.actionPerformed(actionEvent0);
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      timeTableXYDataset0.hasListener(styledEditorKit_UnderlineAction0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.data.time.SerialDate", (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(2, 0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultTableModel0);
      jDBCXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "|@xZ}}@t)yS9ulo#", numberArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 2015.04796187693);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Stack<Float> stack0 = new Stack<Float>();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getColumnKeys();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      int int0 = 2333;
      int int1 = (-1);
      SimpleTimeZone simpleTimeZone0 = null;
//      try {
        simpleTimeZone0 = new SimpleTimeZone(23, "Q*>>I*Y", 23, 0, 0, 0, 0, (-3299), 2333, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal end time -1
//         //
//         verifyException("java.util.SimpleTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      int int0 = (-894);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 2846.203, 0.0, (-894), 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      comparableArray0[0] = (Comparable<Object>) fixedMillisecond0;
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1000L;
      doubleArray1[1] = (double) 1000L;
      doubleArray1[2] = (double) 1000L;
      doubleArray1[3] = (double) 1000L;
      doubleArray1[4] = (double) 1000L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-513.4272892885642);
      doubleArray2[1] = (double) 1000L;
      doubleArray2[2] = (double) 1000L;
      doubleArray2[3] = (double) 1000L;
      doubleArray2[4] = (double) 1000L;
      doubleArray2[5] = (double) 1000L;
      doubleArray2[6] = (double) 1000L;
      doubleArray2[7] = (-362.530114492);
      doubleArray2[8] = (-816.0479);
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("A4!");
      DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = null;
      numberArray1[1] = null;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      decimalFormat0.parse("A4!", parsePosition0);
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.SerialDate");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      ActionEvent actionEvent0 = new ActionEvent(styledEditorKit_UnderlineAction0, 1492, "org.jfree.data.time.SerialDate", 1492);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(14, 0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1492, (-1359373819), timeZone0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(dynamicTimeSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3569, 5089);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      int int0 = 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      Short[] shortArray0 = new Short[1];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      JList<Short> jList0 = new JList<Short>(shortArray0);
      jList0.getPreferredSize();
      List<Short> list0 = jList0.getSelectedValuesList();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      defaultMultiValueCategoryDataset0.validateObject();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) list0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      taskSeriesCollection0.hasListener((EventListener) null);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      int int0 = 421;
      jDBCXYDataset0.close();
      // Undeclared exception!
//      try { 
        jDBCXYDataset0.getYValue(421, 0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 0, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
//      try { 
        SerialDate.createInstance(1708, (-1555), (-1549));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'year' argument must be in range 1900 to 9999.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2166.27537399));
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
  }
}
