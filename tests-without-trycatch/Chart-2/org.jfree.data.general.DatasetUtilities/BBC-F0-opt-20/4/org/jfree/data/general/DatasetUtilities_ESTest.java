/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:27:05 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.MultipleGradientPaint;
import java.awt.event.WindowFocusListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.EventListener;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Predicate;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthMenuUI;
import javax.swing.plaf.synth.SynthOptionPaneUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryDatasetSelectionState;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetSelectionState;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MockDate mockDate0 = new MockDate(162, 162, 162, 162, 162);
      Date[] dateArray0 = new Date[2];
      dateArray0[1] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 157, 157);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) integer0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 156, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Number[][] numberArray0 = new Number[4][9];
      Number[] numberArray1 = new Number[4];
      Byte byte0 = new Byte((byte)1);
      numberArray1[1] = (Number) byte0;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      numberArray1[1] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray1[2] = (Number) bigInteger0;
      Float float0 = new Float((double) (byte)1);
      numberArray1[3] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      BigInteger bigInteger1 = BigInteger.TEN;
      numberArray3[0] = (Number) bigInteger1;
      numberArray3[1] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      numberArray4[0] = (Number) float0;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) bigInteger0;
      numberArray4[3] = (Number) integer1;
      numberArray0[3] = numberArray4;
      DatasetUtilities.createCategoryDataset("Null 'seriesKey' argument.", "Null 'seriesKey' argument.", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'seriesKey' argument.", (byte)1, (byte)1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range(100.0, Double.POSITIVE_INFINITY);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      MockDate mockDate0 = new MockDate();
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) arrayList0);
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) list0, range0, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      MockDate mockDate0 = new MockDate((-1L));
      MockDate mockDate1 = new MockDate(4593, 4591, 4591, 4591, 4593, 401);
      mockDate1.getTime();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 4591, 401, 1962.493317505, 3171.2297323, 3171.2297323);
      LinkedList<OHLCDataItem> linkedList0 = new LinkedList<OHLCDataItem>();
      linkedList0.add(oHLCDataItem0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      linkedList0.add(oHLCDataItem0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      MockDate mockDate0 = new MockDate(162, 162, 162);
      mockDate0.toInstant();
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 162;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray1);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      double[][] doubleArray2 = new double[1][5];
      doubleArray2[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray2);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(linkedList0, multipleGradientPaint_CycleMethod0, multipleGradientPaint_CycleMethod0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) multipleGradientPaint_CycleMethod0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, (-852.437224), 1896);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      System.setCurrentTimeMillis(2968L);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 2968L);
      defaultStatisticalCategoryDataset0.removeChangeListener(xYBarDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      defaultStatisticalCategoryDataset0.clear();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      LinkedList<OHLCDataItem> linkedList0 = new LinkedList<OHLCDataItem>();
      MockDate mockDate0 = new MockDate(2760L);
      mockDate0.getTime();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1962.493317505, 2968L, 2968L, (-1331.2908), 1962.493317505);
      linkedList0.add(oHLCDataItem0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate(165, 165, 73, 165, (-2979), 641);
      Instant instant0 = mockDate0.toInstant();
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 641;
      doubleArray0[1] = (double) 641;
      doubleArray0[2] = (-53.32265111472);
      doubleArray0[3] = (double) 641;
      doubleArray0[4] = (double) 165;
      doubleArray0[5] = (double) 641;
      doubleArray0[6] = (double) (-2979);
      doubleArray0[6] = (double) 73;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2639, 17, 17);
      mockDate0.toInstant();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Comparable<DefaultIntervalCategoryDataset>[] comparableArray0 = (Comparable<DefaultIntervalCategoryDataset>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<DefaultIntervalCategoryDataset>) millisecond0;
      comparableArray0[1] = (Comparable<DefaultIntervalCategoryDataset>) millisecond0;
      comparableArray0[2] = (Comparable<DefaultIntervalCategoryDataset>) millisecond0;
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.63234685657676032E17;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 929.892634;
      doubleArray2[3] = (double) 17;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 2639;
      doubleArray1[6] = doubleArray2;
      doubleArray1[7] = doubleArray0;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) comparableArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'columnKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.5, 3569.0881895393736, "3~J)[^'GRG$");
      Short short0 = new Short((short)2702);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short)2702);
      linkedList0.add(short1);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2186, 2958465, 2958465, (-1907), 1142);
      Instant instant0 = mockDate0.toInstant();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1142;
      doubleArray0[1] = 1023.306495159665;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = new Range(1142.0, 1142);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)132);
      Short short1 = new Short((short) (-589));
      linkedList0.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.getIndex(multipleGradientPaint_CycleMethod0);
      defaultKeyedValuesDataset0.setValue((Comparable) multipleGradientPaint_CycleMethod0, 1979.1433917578872);
      defaultKeyedValuesDataset0.equals(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) multipleGradientPaint_CycleMethod0, 1979.1433917578872);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(linkedList0, multipleGradientPaint_CycleMethod0, multipleGradientPaint_CycleMethod0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) multipleGradientPaint_CycleMethod0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) multipleGradientPaint_CycleMethod0, 0.0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      Number[][] numberArray0 = new Number[8][7];
      Number[] numberArray1 = new Number[3];
      ChoiceFormat choiceFormat0 = new ChoiceFormat("VW ");
      ParsePosition parsePosition0 = new ParsePosition((-1221));
      Number number0 = choiceFormat0.parse("VW ", parsePosition0);
      numberArray1[0] = number0;
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray1[1] = (Number) bigInteger0;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      numberArray1[2] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray3[2] = (Number) integer1;
      numberArray3[3] = number0;
      numberArray3[4] = (Number) bigInteger0;
      numberArray3[5] = (Number) bigInteger0;
      numberArray3[6] = number0;
      numberArray3[7] = (Number) bigInteger0;
      numberArray3[8] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[4];
      numberArray5[0] = number0;
      numberArray5[1] = number0;
      numberArray5[2] = number0;
      numberArray5[3] = (Number) integer0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[6];
      numberArray6[0] = number0;
      numberArray6[1] = number0;
      numberArray6[2] = (Number) integer0;
      numberArray6[3] = (Number) integer1;
      numberArray6[4] = number0;
      numberArray6[5] = (Number) integer1;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[6];
      numberArray7[0] = (Number) bigInteger0;
      numberArray7[1] = number0;
      numberArray7[2] = (Number) integer1;
      numberArray7[3] = (Number) bigInteger0;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      numberArray7[4] = (Number) integer2;
      numberArray7[5] = (Number) integer0;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[3];
      numberArray8[0] = (Number) integer2;
      numberArray8[1] = (Number) integer1;
      numberArray8[2] = (Number) integer2;
      numberArray0[7] = numberArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      int int0 = 2827;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 2827);
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2827, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) multipleGradientPaint_CycleMethod0, (Comparable) integer0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate();
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Byte byte0 = new Byte((byte)7);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) byte0, (Number) byte0, (List) arrayList0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0, "/0qC;=a0m$)A;mR!PQJ", "/0qC;=a0m$)A;mR!PQJ");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) multipleGradientPaint_CycleMethod0, (Comparable) integer0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.NaN, (-254.411), "TU");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      BigInteger bigInteger0 = BigInteger.ZERO;
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1993), 872);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range(1086.526171755, 1086.526171755);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      MockDate mockDate0 = new MockDate();
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List) arrayList0);
      defaultBoxAndWhiskerXYDataset0.add(mockDate0, boxAndWhiskerItem0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) list0, range0, true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getSeriesCount();
      categoryTableXYDataset0.add(1.7976931348623157E308, (-4287.4734), "}6a6rPVD[");
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate0 = new MockDate((-1521), 2774, 1264, (-1), 143);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 143, (-1521), (-679.0), 1264, 2774);
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("}6a6rPVD[", oHLCDataItemArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1334.0, (-1.0), "1");
      categoryTableXYDataset0.add((-283.75132), (-283.75132), "}6a6rPVD[");
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3454, 3454, 3454, 1528, 1528);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2253.325329426307), (-1579.6811679), 3454, Double.NaN, Double.NaN);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-104.50389862060547), (-2253.325329426307), Double.NaN, (-1145.302667), Double.NaN);
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1528, 1528, (-104.50389862060547), Double.NaN, (-104.50389862060547));
      oHLCDataItemArray0[5] = oHLCDataItem2;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1.7976931348623157E308, 1.7976931348623157E308, "}6a6rPVD[");
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      HashSet<ChronoLocalDate> hashSet0 = new HashSet<ChronoLocalDate>();
      linkedList0.retainAll(hashSet0);
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(3035.5117, Double.POSITIVE_INFINITY, "1");
      categoryTableXYDataset0.getDomainLowerBound(false);
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "}[L>='GDFM(#h");
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 1525);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) integer0, 7.714787082E13);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1525, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-104.503900061), (-104.503900061));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(157, "The number of row keys does not match the number of rows in the data array.");
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 4.0, Double.NaN, 3973.0, (-2589.78704777), 157);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, oHLCDataItemArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (3973.0) <= upper (-Infinity).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double((-3681.6));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2";
      stringArray0[1] = ">L>)]6ONWGX0.;*<U";
      stringArray0[2] = "(1=@}lMZt@";
      stringArray0[3] = "^g!Nrxir'VC";
      stringArray0[4] = "7yd,zc;g@0{4}]$ H";
      stringArray0[5] = "3";
      stringArray0[6] = "5";
      stringArray0[7] = "1";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 0.0, "(rwYfl1.r1j(E9");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 164);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "(rwYfl1.r1j(E9", (KeyedValues) pieDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) multipleGradientPaint_CycleMethod0, (Comparable) multipleGradientPaint_CycleMethod0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      BigInteger bigInteger0 = BigInteger.TEN;
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray1[2] = (Number) bigInteger0;
      numberArray1[3] = (Number) bigInteger0;
      numberArray1[4] = (Number) bigInteger0;
      numberArray1[5] = (Number) bigInteger0;
      numberArray1[6] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      Double double0 = new Double((-5904.8819));
      numberArray3[0] = (Number) double0;
      numberArray3[1] = (Number) bigInteger0;
      numberArray3[2] = (Number) bigInteger0;
      numberArray3[3] = (Number) bigInteger0;
      numberArray3[4] = (Number) bigInteger0;
      numberArray3[5] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1679L);
      Hour hour0 = new Hour(mockDate0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      datasetGroup0.clone();
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(185.0);
      defaultBoxAndWhiskerXYDataset0.setGroup(datasetGroup0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      Number[][] numberArray0 = new Number[3][7];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 23;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) 0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      numberArray3[0] = (Number) 23;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) 23;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1.7976931348623157E308, 1.7976931348623157E308, "}66rPVD[");
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.7976931348623157E308, 1.7976931348623157E308);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 4222;
      MockDate mockDate0 = new MockDate(126, 4222, 148, 4222, 4);
      MockDate mockDate1 = new MockDate();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      mockDate1.toInstant();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset("-equiNes 'samples' > 1", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      mockDate0.clone();
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset1, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)905);
      Short short1 = new Short((short)142);
      linkedList0.add(short1);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
//      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(999, (-2335.44933253944));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'std' > 0.
//         //
//         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-254.411), (-254.411), "_U");
      Short short0 = new Short((short) (-1477));
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short1 = new Short((short) (-1477));
      linkedList0.add(short1);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1.7976931348623157E308, 1.7976931348623157E308, "}66rPVD[");
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 2127.5);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate((-1409L));
      mockDate0.toInstant();
      Date[] dateArray0 = new Date[8];
      SerialDate serialDate0 = SerialDate.createInstance(121);
      SerialDate serialDate1 = SerialDate.addDays(133, serialDate0);
      Date date0 = serialDate1.toDate();
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 133;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(4.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      mockDate0.clone();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      linkedList0.add(short0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 536.6613;
      doubleArray1[1] = (-3377.6);
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-455.1436688426366);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 536.6613;
      doubleArray3[2] = 2846.11;
      doubleArray3[3] = 0.8;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-3377.6);
      doubleArray4[1] = 536.6613;
      doubleArray4[2] = (-455.1436688426366);
      doubleArray4[3] = (-3377.6);
      doubleArray4[4] = 0.8;
      doubleArray4[5] = (-455.1436688426366);
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = (-455.1436688426366);
      doubleArray4[8] = (-3377.6);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 2846.11;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 536.6613;
      doubleArray5[3] = 536.6613;
      doubleArray5[4] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 2846.11;
      doubleArray6[1] = (-455.1436688426366);
      doubleArray6[2] = 0.8;
      doubleArray6[3] = 0.8;
      doubleArray6[4] = 536.6613;
      doubleArray6[5] = 536.6613;
      doubleArray6[6] = 0.8;
      doubleArray6[7] = 536.6613;
      doubleArray6[8] = 0.8;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Instant instant0 = MockInstant.now();
      MockDate mockDate1 = new MockDate(1496, 1496, 1496, 1496, 1496, 1496);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[13];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "nF4f0\"";
      stringArray0[2] = "Null 'columnKeys' argument.";
      stringArray0[3] = "O<g@xNt";
      stringArray0[4] = "Null 'columnKeys' argument.";
      stringArray0[5] = "eHYHS]ul7b3io1?|";
      stringArray0[6] = "i-G-";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      defaultIntervalCategoryDataset0.getRowKeys();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 53.0;
      doubleArray1[1] = 1.39240928132E12;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1744);
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(13);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      serialDate0.toDate();
      defaultKeyedValues2DDataset0.setValue((double) 1900, (Comparable) serialDate0, (Comparable) serialDate0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-104.503900061), (double) 5, "[");
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 165, 0);
      DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) multipleGradientPaint_CycleMethod0, (Comparable) multipleGradientPaint_CycleMethod0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) multipleGradientPaint_CycleMethod0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultMultiValueCategoryDataset0.equals(defaultBoxAndWhiskerCategoryDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      arrayList0.add(defaultMultiValueCategoryDataset1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, range0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53, 53, 53, 53, 37);
      MockDate mockDate1 = new MockDate(53, 53, 53, 53, 53);
      Millisecond millisecond0 = new Millisecond();
      MockInstant.now();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 53;
      doubleArray0[2] = 3064.7696;
      doubleArray0[3] = (double) 999;
      doubleArray0[4] = (double) 53;
      doubleArray0[5] = (double) 37;
      doubleArray0[6] = (double) 53;
      doubleArray0[7] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(multipleGradientPaint_CycleMethod0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset1, false);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      Short short0 = new Short((short)2401);
      Short short1 = new Short((short)31);
      linkedList1.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2477, 13, 185, 1142, 7);
      Instant instant0 = mockDate0.toInstant();
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1142;
      doubleArray0[1] = (double) 185;
      doubleArray0[2] = (double) 1142;
      doubleArray0[3] = (double) 2477;
      doubleArray0[4] = 1023.306495159665;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      Short short1 = new Short((short) (-589));
      linkedList0.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 185, (short) (-589));
      DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList1 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset1, linkedList1, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset1, (List) linkedList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      boolean boolean0 = true;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Duplicate items in 'columnKeys'.", true);
      categoryTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      Random.setNextRandom(7);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "Null 'x' argument.";
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "Null 'x' argument.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(15);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      xYSeries0.add((-156.940718), 53.0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2.147483648E9);
      doubleArray0[1] = 7.601183322E13;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 3933.46454593;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, (-1.0), 4, 2.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      String string0 = "org.jfree.data.general.DefaultHeatMapDataset";
      categoryTableXYDataset0.add(number0, (Number) null, "org.jfree.data.general.DefaultHeatMapDataset", false);
      categoryTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      Random.setNextRandom(7);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "org.jfree.data.general.DefaultHeatMapDataset");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(";H52$=/Zo+F.7Rg[", ";H52$=/Zo+F.7Rg[", numberArray0);
      Integer integer0 = new Integer((-1));
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) ";H52$=/Zo+F.7Rg[", (Comparable) integer0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-1));
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) ";H52$=/Zo+F.7Rg[", (double) (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("-equiNes 'samples' > 1", 16, 16);
      SynthMenuUI synthMenuUI0 = new SynthMenuUI();
      matrixSeries0.removePropertyChangeListener(synthMenuUI0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-104.503900061), (-104.503900061));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(float0);
      keyToGroupMap0.getGroups();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-786));
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SerialDate.createInstance(13);
      Number[][] numberArray0 = new Number[3][7];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 1;
      numberArray1[1] = (Number) 1900;
      numberArray1[2] = (Number) 6;
      numberArray1[3] = (Number) 4;
      numberArray1[4] = (Number) 7;
      numberArray1[5] = (Number) 6;
      numberArray1[6] = (Number) 3;
      numberArray1[7] = (Number) 4;
      numberArray1[8] = (Number) 1900;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[0] = (Number) 3;
      numberArray2[1] = (Number) 9999;
      numberArray2[2] = (Number) 2958465;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      numberArray2[3] = (Number) bigInteger0;
      numberArray2[4] = (Number) 1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = (Number) 0;
      numberArray3[1] = (Number) (byte)0;
      numberArray3[2] = (Number) 0;
      Float float0 = new Float((double) 1);
      numberArray3[3] = (Number) float0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      double[][] doubleArray1 = new double[9][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2639;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 999;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray1[6] = doubleArray3;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(linkedList0, multipleGradientPaint_CycleMethod0, multipleGradientPaint_CycleMethod0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[][] doubleArray0 = new double[10][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("8,q<wc?5", "8,q<wc?5", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      int int0 = 137;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 137, 137);
      // Undeclared exception!
//      try { 
        slidingCategoryDataset0.getColumnKey(137);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 274, Size: 4
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53, 684, 684, 684, 2);
      MockDate mockDate1 = new MockDate(684, 684, 53, 684, 53);
      Millisecond millisecond0 = new Millisecond(mockDate1);
      mockDate0.toInstant();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      mockDate1.after(mockDate0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((Number) 0, (Number) 0, (Comparable) mockDate1, (Comparable) millisecond0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53, 684, 684, 684, 2);
      MockDate mockDate1 = new MockDate(684, 684, 53, 684, 53);
      Millisecond millisecond0 = new Millisecond(mockDate1);
      mockDate0.toInstant();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Null 'anchor' argument.";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      defaultMultiValueCategoryDataset0.getRangeBounds(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 0.5);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.validateObject();
      Float float0 = new Float(798.429962993785);
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.toInstant();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 798.429962993785;
      doubleArray0[4] = 798.429962993785;
      doubleArray0[5] = 798.429962993785;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, false);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      defaultKeyedValues2DDataset0.setValue(450.49610137939453, (Comparable) regularTimePeriod0, (Comparable) regularTimePeriod0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-3594), 153);
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "Null 'columnKeys' argument.", false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-920));
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1764.41209698;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-920);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) (-920);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) (-920);
      doubleArray2[5] = (double) (-920);
      doubleArray2[6] = (double) (-920);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 1764.41209698;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1764.41209698;
      doubleArray5[3] = (double) (-920);
      doubleArray5[4] = 1764.41209698;
      doubleArray5[5] = 1764.41209698;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 1764.41209698;
      doubleArray9[1] = 1764.41209698;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = 1764.41209698;
      doubleArray9[4] = 1764.41209698;
      doubleArray9[5] = 0.0;
      doubleArray9[6] = 0.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Range range0 = new Range((-2.1268275E12), (-2.1268275E12));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Vector<TimePeriodValuesCollection> vector0 = new Vector<TimePeriodValuesCollection>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2.1268275E12);
      doubleArray1[1] = (-2.1268275E12);
      doubleArray1[2] = (-2.1268275E12);
      doubleArray1[3] = (-2.1268275E12);
      doubleArray1[4] = (-2.1268275E12);
      doubleArray1[5] = (-2.1268275E12);
      doubleArray1[6] = (-2.1268275E12);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-2.1268275E12);
      doubleArray3[1] = (-2.1268275E12);
      doubleArray3[2] = (-2.1268275E12);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<Object> stack0 = new Stack<Object>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(integer0, (OHLCDataItem[]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MockDate mockDate0 = new MockDate(4, 4, (-604), (-604), 155);
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      mockDate0.toInstant();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-604);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 4;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (double) (-604);
      doubleArray1[2] = (double) 999;
      doubleArray1[3] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList1 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, true);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList1, range0, true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      MockDate mockDate1 = new MockDate(4, 2639, 4, 1, 2639);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "B,8");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MatrixSeries matrixSeries0 = new MatrixSeries("d", 13, 13);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset1);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-2.147483648E9), (-2.147483648E9), "'JCS*3=Of6 ]MPIKHm");
      categoryTableXYDataset0.add(0.0, 0.0, "'JCS*3=Of6 ]MPIKHm");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate(4, 4, 2639, 2639, 2639, 1);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, (-1020.47929), (-1975.893900233), 1632.2821903412198, Double.NEGATIVE_INFINITY, 1632.2821903412198);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (1632.2821903412198) <= upper (-1975.893900233).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate(13);
      Instant instant0 = mockDate0.toInstant();
      Date[] dateArray0 = new Date[2];
      MockDate mockDate1 = new MockDate(1, 1, 13, 1, 1);
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-32080.72099188141);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 13;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray1);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList1 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList1.add(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList1, true);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList1, false);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList2, range0, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockDate mockDate0 = new MockDate();
      mockDate0.toInstant();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      mockDate0.toInstant();
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(bigInteger0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float((-2314.67706));
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2314.67706);
      doubleArray0[1] = (-2314.67706);
      doubleArray0[2] = (-2314.67706);
      doubleArray0[3] = (-2314.67706);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1141.01078491908;
      doubleArray1[1] = (-2314.67706);
      doubleArray1[2] = (-2314.67706);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      vector0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) vector0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) "N", (-549.7180373529761));
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "N", (-549.7180373529761));
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(151, 151, (-2781));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1.0, 2186.2, (-213.4), (-213.4), Double.NEGATIVE_INFINITY);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("N", oHLCDataItemArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 39);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2629, (-613), (-613), 15, 15);
      mockDate0.toInstant();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      MockInstant.now();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 15;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("]");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(20, (-613), millisecond0, timeZone0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, true);
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 1;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 15.0;
      numberArray1[3] = (Number) 1;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 15.0;
      numberArray1[6] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = (Number) 2;
      numberArray2[1] = (Number) 999;
      numberArray2[2] = (Number) 2;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = (Number) 999;
      numberArray3[1] = (Number) 999;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]", "]", numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) mockDate0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.NaN, 1760.16, "updateValue: can't update null.");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-213.4);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1760.16;
      doubleArray3[1] = (-213.4);
      doubleArray3[2] = 1760.16;
      doubleArray3[3] = 300.0;
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = (-213.4);
      doubleArray0[2] = doubleArray3;
      DatasetUtilities.createCategoryDataset("updateValue: can't update null.", "", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      mockDate0.toInstant();
      Date[] dateArray0 = new Date[4];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2.147483648E9);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList1, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList1, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      arrayList0.add(yIntervalSeriesCollection0);
      arrayList0.add(yIntervalSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-383.0);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = 1900.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.8;
      doubleArray1[6] = 2226.080835;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 2226.080835;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-383.0);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (-383.0);
      doubleArray3[4] = (-383.0);
      doubleArray3[5] = 2226.080835;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = 2.0;
      doubleArray3[8] = 1900.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-383.0);
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 2226.080835;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-383.0);
      doubleArray6[1] = 2.0;
      doubleArray6[2] = 1900.0;
      doubleArray6[3] = (-383.0);
      doubleArray6[4] = 1.0;
      doubleArray6[5] = 1900.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, Double.POSITIVE_INFINITY);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(13);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((double) 1900, (Comparable) serialDate0, (Comparable) serialDate0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 4, 0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-12));
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) serialDate0, (double) 2, 3);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-920));
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (-920);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2.0;
      doubleArray1[6] = 4238.647387971075;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) (-920);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 4238.647387971075;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 4238.647387971075;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue(Double.NaN, (Comparable) float0, (Comparable) float0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.isEmptyOrNull((XYDataset) yIntervalSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue(Double.NaN, (Comparable) float0, (Comparable) float0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      Stack<Object> stack0 = new Stack<Object>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(".", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.parse(".");
      Millisecond millisecond0 = new Millisecond(date0);
      MockDate mockDate0 = new MockDate();
      mockDate0.toInstant();
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = date0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 999;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 999;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (double) 999;
      doubleArray1[2] = (double) 999;
      doubleArray1[3] = (double) 999;
      doubleArray1[4] = (double) 999;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(".", dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray1);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList1, true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 8, 8);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = (-552.6);
      doubleArray1[4] = (double) 8;
      doubleArray1[5] = (double) 8;
      doubleArray1[6] = (double) 8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-552.6);
      doubleArray2[1] = (-552.6);
      doubleArray2[2] = (double) 8;
      doubleArray2[3] = (double) 8;
      doubleArray2[4] = (double) 8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 8;
      doubleArray3[1] = (double) 8;
      doubleArray3[2] = (-2166.17644);
      doubleArray3[3] = (double) 8;
      doubleArray3[4] = (-552.6);
      doubleArray3[5] = (-552.6);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 0.0, "(rwYfl1.r1j(E9");
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 167.1081;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 724.093899;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 724.093899;
      doubleArray4[1] = 724.093899;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 724.093899;
      doubleArray6[1] = 823.1653151859;
      doubleArray6[2] = 724.093899;
      doubleArray6[3] = 167.1081;
      doubleArray6[4] = 167.1081;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 823.1653151859;
      doubleArray7[1] = 823.1653151859;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-2.147483648E9);
      doubleArray7[5] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (-2.147483648E9);
      doubleArray8[1] = 167.1081;
      doubleArray8[2] = 167.1081;
      doubleArray8[3] = 823.1653151859;
      doubleArray8[4] = 2027.4;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = 2027.4;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2625, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate(4, 4, 4, 2625, 2625);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList1, true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-104.503900061), (-104.503900061));
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
      MatrixSeries matrixSeries0 = new MatrixSeries("Hr{L", 9, 9);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(";H52$=/Zo+F.7Rg[", ";H52$=/Zo+F.7Rg[", numberArray0);
      defaultCategoryDataset0.validateObject();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(13);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((double) 1900, (Comparable) serialDate0, (Comparable) serialDate0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 4, 0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1, 4, 4);
      mockDate0.toInstant();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) linkedList1, true);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      defaultKeyedValues2DDataset0.setValue(0.0, (Comparable) "FH52$=QZo+F.7Rg[", (Comparable) fixedMillisecond0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MockDate mockDate0 = new MockDate((-5293), (-5293), (-5293), (-5293), 13);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      mockDate0.toInstant();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.getRangeBounds(true);
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Second second0 = new Second(mockDate0, timeZone0);
      second0.getMiddleMillisecond();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      arrayList0.add(xYSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number[][] numberArray0 = new Number[2][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("FH52$=QZo+F.7Rg[", "FH52$=QZo+F.7Rg[", numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 962);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "FH52$=QZo+F.7Rg[", (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 962, Size: 3
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate();
      mockDate0.toInstant();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      Instant instant0 = mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      DefaultHighLowDataset defaultHighLowDataset2 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset1, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      defaultHighLowDataset0.validateObject();
      Short short0 = new Short((short)337);
      Short short1 = new Short((short)337);
      linkedList0.add(short1);
      mockDate0.clone();
      linkedList0.add(short0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset1, (List) linkedList0, range0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.validateObject();
      Float float0 = new Float(0.8);
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(376, (-2110), timeZone0);
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      Instant instant0 = mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      Float float0 = new Float((double) 1);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) 0, (Comparable) instant0, (Comparable) mockDate0);
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MatrixSeries matrixSeries0 = new MatrixSeries("d", 1, 13);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = new Integer(13);
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      DatasetUtilities.createCategoryDataset("-equiNes 'samples' > 1", "-equiNes 'samples' > 1", doubleArray0);
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-1), (-1), 991, (-1), (-911), (-3485));
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-3485);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 991;
      doubleArray2[1] = (double) 991;
      doubleArray2[2] = (double) (-911);
      doubleArray2[3] = (double) (-911);
      doubleArray2[4] = (double) (-3485);
      doubleArray2[5] = (double) (-911);
      doubleArray2[6] = (double) (-911);
      doubleArray2[7] = (double) (-3485);
      doubleArray2[8] = (double) 991;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("-equiNes 'samples' > 1", dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray2);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      Short short1 = new Short((short) (-2372));
      linkedList0.add(short1);
      mockDate0.clone();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SerialDate.createInstance(13);
      Number[][] numberArray0 = new Number[3][7];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 1;
      numberArray1[1] = (Number) 1900;
      numberArray1[2] = (Number) 6;
      numberArray1[3] = (Number) 4;
      numberArray1[4] = (Number) 7;
      numberArray1[5] = (Number) 6;
      numberArray1[6] = (Number) 3;
      numberArray1[7] = (Number) 4;
      numberArray1[8] = (Number) 1900;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[0] = (Number) 3;
      numberArray1[3] = (Number) 9999;
      numberArray2[2] = (Number) 2958465;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      numberArray2[3] = (Number) bigInteger0;
      numberArray2[4] = (Number) 1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray1[0] = (Number) 0;
      numberArray3[1] = (Number) (byte)0;
      numberArray3[2] = (Number) 0;
      Float float0 = new Float((double) 1);
      numberArray3[3] = (Number) float0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.validateObject();
      Float float0 = new Float(216.56922);
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range(216.56922, 216.56922);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) list0, range0, true);
      TimeZone timeZone1 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, (-1351), timeZone1);
      Range.expandToInclude((Range) null, 2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-3597));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-2570), 6);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float(0.43322505221566554);
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Float float1 = new Float((-1.0F));
      defaultKeyedValues2DDataset0.setValue((Number) float1, (Comparable) float1, (Comparable) float1);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      linkedList0.add(short0);
      mockDate1.clone();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset1);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate2 = (MockDate)millisecond0.getStart();
      defaultKeyedValues2DDataset0.setValue((Number) 0, (Comparable) mockDate1, (Comparable) mockDate2);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate2 = (MockDate)millisecond0.getStart();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 999;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate2, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Hour hour0 = new Hour(mockDate0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) 23;
      doubleArray1[2] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-5441));
      linkedList0.add(short0);
      mockDate2.clone();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double double0 = (-104.503900061);
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Short short0 = new Short((short)179);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<Long> vector0 = new Vector<Long>();
      defaultKeyedValues2DDataset0.setValue(0.0, (Comparable) float0, (Comparable) float0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      Number[][] numberArray0 = new Number[8][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) short0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      numberArray4[0] = (Number) short0;
      numberArray4[1] = (Number) float0;
      numberArray4[2] = (Number) float0;
//      try { 
        Short.valueOf("nT{", 1);
//        fail("Expecting exception: NumberFormatException");
      
//      } catch(NumberFormatException e) {
//         //
//         // radix 1 less than Character.MIN_RADIX
//         //
//         verifyException("java.lang.Integer", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = new Range(0, 0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      linkedList0.add(short0);
      mockDate1.clone();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset1);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate(1);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(dateArray0[0]);
      Instant instant0 = mockDate1.toInstant();
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 999;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 999;
      doubleArray1[8] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(dateArray0[0], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset1, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1610);
      linkedList0.add(short0);
      mockDate1.clone();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float(388.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (-2511));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(388.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
      DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      long long0 = 5L;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(5L, 5L);
      defaultMultiValueCategoryDataset0.add(stack0, simpleTimePeriod0, simpleTimePeriod0);
      defaultMultiValueCategoryDataset0.getColumnIndex(simpleTimePeriod0);
      defaultMultiValueCategoryDataset0.validateObject();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) simpleTimePeriod0);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<Short>) simpleTimePeriod0;
      comparableArray0[1] = (Comparable<Short>) simpleTimePeriod0;
      comparableArray0[2] = (Comparable<Short>) simpleTimePeriod0;
      comparableArray0[3] = (Comparable<Short>) simpleTimePeriod0;
      comparableArray0[4] = (Comparable<Short>) simpleTimePeriod0;
      comparableArray0[5] = (Comparable<Short>) simpleTimePeriod0;
      comparableArray0[6] = (Comparable<Short>) simpleTimePeriod0;
      Minute minute0 = null;
//      try {
        minute0 = new Minute(0, (Hour) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'hour' argument.
//         //
//         verifyException("org.jfree.data.time.Minute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      int int0 = 170;
      long long0 = (-2140L);
      MockDate mockDate0 = new MockDate((-2140L));
      Month month0 = new Month(mockDate0);
      int int1 = 175;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1152), "", (-1152), 0, 0, 0, 175, 0, (-1152), 175);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 170, month0, simpleTimeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      linkedList0.add(short0);
      mockDate1.clone();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      linkedList0.add(short0);
      mockDate1.clone();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset1);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 2937;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 2937);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) float0, (-553.015));
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-1));
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 2, 9999);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) 9999);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 9999);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 9999;
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray2[2] = (double) 9999;
      doubleArray2[3] = (double) 9999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 9999;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (double) 9999;
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 9999;
      doubleArray5[1] = (double) 9999;
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = 1.7976931348623157E308;
      doubleArray6[2] = 1.7976931348623157E308;
      doubleArray6[3] = (double) 2;
      doubleArray6[4] = (double) 2;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MatrixSeries matrixSeries0 = new MatrixSeries("d", 1, 13);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = new Integer(13);
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      matrixSeriesCollection0.validateObject();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      defaultMultiValueCategoryDataset0.getRangeBounds(true);
      MockDate mockDate0 = new MockDate((-2140L));
      Month month0 = new Month(mockDate0);
      month0.next();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) mockDate0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(175, (-1152));
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, (-2140L), 175, 175, month0);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      millisecond0.getStart();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float(388.0);
      MockDate mockDate0 = new MockDate((-780L));
      TimeZone timeZone0 = TimeZone.getTimeZone("w(Dk+Q3`Hv");
      Day day0 = new Day(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) regularTimePeriod0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range(Double.NEGATIVE_INFINITY, (-2234.613026706121));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(regularTimePeriod0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) list0, range0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(617, 617, timeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float(388.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) float0, 388.0, 129);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Week week0 = new Week(1688, 3525);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) week0);
      Month month0 = new Month(1, (-1));
      TimeSeries timeSeries0 = new TimeSeries(month0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 1);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0, true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, false);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      millisecond0.getStart();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      mockDate1.setTime(999);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-3000.088), 2.0);
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-3000.088), (-1.0), 156, mockDate1);
      DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      Double double0 = new Double(156);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float(172.0F);
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      Float float1 = new Float((-1.0));
      defaultKeyedValues2DDataset0.setValue((Number) float1, (Comparable) float1, (Comparable) float1);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float1);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      Float float1 = new Float(1805.453);
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = 1805.453;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[18];
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = (double) 4;
      doubleArray2[2] = 1805.453;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = 1805.453;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 4;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = 1805.453;
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray3[6] = (double) 1;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      MockDate mockDate0 = new MockDate((-2140L));
      Month month0 = new Month(mockDate0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 175, 0, 0, 175);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 170, month0, simpleTimeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float(388.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      defaultBoxAndWhiskerXYDataset0.equals(defaultKeyedValues2DDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) float0, 1.0, (-770));
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockDate mockDate0 = new MockDate(13, 13, 1592, 2639, 147);
      Instant instant0 = mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      mockDate1.toInstant();
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (-3000.088);
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1592;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (-3000.088);
      doubleArray1[3] = (double) 2639;
      doubleArray1[4] = (double) 1592;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 1592;
      doubleArray2[1] = (double) 2639;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-3000.088);
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 4;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray2, doubleArray3);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.findMaximumDomainValue(timePeriodValuesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (1592.0) <= upper (4.0).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      MockDate mockDate0 = new MockDate();
      mockDate0.toInstant();
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-104.503900061);
      doubleArray0[2] = (-3000.088);
      doubleArray0[3] = (-104.503900061);
      doubleArray0[4] = 1369.478398403;
      doubleArray0[5] = (-104.503900061);
      doubleArray0[6] = (-668.0);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(dateArray0[3], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset1, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      linkedList0.add(short0);
      mockDate0.clone();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset1);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getRangeBounds(true);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      MockDate mockDate0 = new MockDate((-2140L));
      Month month0 = new Month(mockDate0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1152), "", (-1152), 0, 0, 0, 175, 0, (-1152), 175);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 170, month0, simpleTimeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      mockDate1.getTime();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)378);
      linkedList0.add(short0);
      Short short1 = new Short((short) (-589));
      linkedList0.add(short1);
      mockDate1.clone();
      DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset1, linkedList0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-3000.088), 2.0);
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-3000.088), (-1.0), 156, mockDate1);
      DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.clone();
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1207), 582, (-1.0), (-1.0), (-1.0));
      Number number0 = oHLCDataItem0.getVolume();
      categoryTableXYDataset0.add(number0, number0, "", false);
      categoryTableXYDataset0.getItemCount(582);
      categoryTableXYDataset0.add((double) 582, (double) (-1207), "org.jfree.data.general.DefaultKeyedValueDataset");
      Number[][] numberArray0 = new Number[1][0];
      DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaultKeyedValueDataset", "3-%-=", numberArray0);
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Float float0 = new Float(388.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("The number of column keys does not match the number of columns in the data array.");
      ((DefaultCategoryDataset) categoryDataset0).getColumnIndex("The number of column keys does not match the number of columns in the data array.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((float) (-1));
      linkedList0.add(float0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Float float0 = new Float(388.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("65i}@", "org.jfree.data.xy.AbstractXYDataset", "65i}@");
      timePeriodValues0.setKey("org.jfree.data.xy.AbstractXYDataset");
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.next();
      TimePeriodValues timePeriodValues1 = new TimePeriodValues(regularTimePeriod0);
      int int0 = 1594;
      TimePeriodValues timePeriodValues2 = timePeriodValues1.createCopy(1594, 0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues2);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1594;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = (-2127129115);
      MockDate mockDate0 = new MockDate((-2127129115), 0, 1773, 1770, 1896, (-2127129115));
      MockDate mockDate1 = new MockDate(1773, (-2557), 1770, (-929), (-2127129104));
      mockDate0.clone();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultHighLowDataset0.addChangeListener(xYTaskDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      // Undeclared exception!
//      try { 
        Range.scale(range0, (-1343.1192358985122));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Negative 'factor' argument.
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float(15.857774717144892);
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, 4);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      linkedList0.add(short0);
      mockDate1.clone();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset1, true);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 479L);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      defaultMultiValueCategoryDataset0.add(arrayList0, simpleTimePeriod0, "The number of column keys does not match the number of columns in the data array.");
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) simpleTimePeriod0, 1.0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      MatrixSeries matrixSeries0 = new MatrixSeries("beJ,#rhl5", 137, 13);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float(2519.5493485446996);
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range(248.78981913939452, 2519.5493485446996);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-760.1393062));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) float0, (-104.503900061), (-1982));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      defaultKeyedValues2DDataset0.clear();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Range range0 = new Range((-1.0), (-1.0));
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, (OHLCDataItem[]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 0.0, "(rwYfl1.r1j(E9");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Float float0 = new Float((-105.03727888356636));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-105.03727888356636), (-105.03727888356636));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      defaultBoxAndWhiskerXYDataset0.indexOf(float0);
      LinkedList<JDBCXYDataset> linkedList0 = new LinkedList<JDBCXYDataset>();
      linkedList0.iterator();
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) null, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.clone();
      categoryTableXYDataset0.getItemCount(593);
      Date[] dateArray0 = new Date[2];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(3806);
      mockSimpleDateFormat0.parse("org.jfree.data.general.DefaultKeyedValueDataset", parsePosition0);
      dateArray0[0] = null;
      MockDate mockDate0 = new MockDate((-1207), 593, (-1));
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 593;
      doubleArray0[1] = (double) 3806;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3806;
      doubleArray0[4] = (double) 3806;
      doubleArray0[5] = (double) (-1207);
      doubleArray0[6] = (double) 593;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("org.jfree.data.general.DefaultKeyedValueDataset", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      System.setCurrentTimeMillis((-292L));
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1267.94663282803, Double.NEGATIVE_INFINITY, "(rwYfl1.r1j(E9");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Number[][] numberArray0 = new Number[4][0];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) float0;
      numberArray2[6] = (Number) float0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray2[7] = (Number) bigInteger0;
      numberArray2[8] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      numberArray4[0] = (Number) float0;
      numberArray4[1] = (Number) bigInteger0;
      numberArray4[2] = (Number) float0;
      numberArray4[3] = (Number) bigInteger0;
      numberArray4[4] = (Number) float0;
      numberArray4[5] = (Number) float0;
      numberArray4[6] = (Number) float0;
      numberArray4[7] = (Number) bigInteger0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-991));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2127129105), 0, 1773, 1770, 1896, (-2127129105));
      MockDate mockDate1 = new MockDate(1773, (-2557), 1770, (-929), (-2127129104));
      mockDate0.clone();
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 752, 1771);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, 0.5);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-104.503900061), (-104.503900061));
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0.0, 0.0, 2298.761195793981, 2298.761195793981);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1531.71175979304, (-900.3870720059), 1531.71175979304, 2298.761195793981, 2298.761195793981);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 0.0, (-104.503900061), 2298.761195793981, (-2.127129104E9), (-900.3870720059));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, (-1103.619547091279), (-2588.8533951625905), (-4804.7488487), 4170.616120633074);
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-2.127129104E9), 600.31, (-1103.619547091279), 1531.71175979304, 2298.761195793981);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem4, oHLCDataItemArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-104.503900061), (-104.503900061));
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0.0, 0.0, 2298.761195793981, 2298.761195793981);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1531.71175979304, (-900.3870720059), 1531.71175979304, 2298.761195793981, 2298.761195793981);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 0.0, (-104.503900061), 2298.761195793981, (-2.127129104E9), (-900.3870720059));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-553.0150733309), 41.982, (-553.0150733309), (-51.0), 1316.226);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1316.226, (-104.503900061), 2298.761195793981, 174.069497143, 0.0);
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, oHLCDataItemArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, (-917));
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getItemCount(760);
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      categoryTableXYDataset1.add(0.8, (double) 0, "Null 'rowKey' argument.");
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset1, false);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, (-917));
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2639;
      doubleArray1[1] = (-3000.088);
      doubleArray1[2] = (-104.503900061);
      doubleArray1[3] = (double) 999;
      doubleArray1[4] = (-3000.088);
      doubleArray1[5] = (double) (-917);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(dateArray0[0], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      System.setCurrentTimeMillis(1952L);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Float float0 = new Float((-4695.9568784918));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float1 = null;
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      Number[][] numberArray0 = new Number[0][7];
      DatasetUtilities.createCategoryDataset("~4fG&4-Jn", "~4fG&4-Jn", numberArray0);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(335);
      spreadsheetDate0.toDate();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1212, (-2024));
      SerialDate serialDate0 = SerialDate.addYears(2, spreadsheetDate0);
      // Undeclared exception!
//      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) serialDate0, (Comparable) null, 1561);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'columnKey' argument.
//         //
//         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 231);
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), (-1L));
      defaultMultiValueCategoryDataset0.add(stack0, simpleTimePeriod0, simpleTimePeriod0);
      simpleTimePeriod0.equals(stack0);
      defaultMultiValueCategoryDataset0.validateObject();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(simpleTimePeriod0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), (-1L));
      defaultMultiValueCategoryDataset0.add(stack0, simpleTimePeriod0, simpleTimePeriod0);
      defaultMultiValueCategoryDataset0.validateObject();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.setValue((Comparable) simpleTimePeriod0, 0.0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(3086, 3086, (-4000), 1, (-4000), 1);
      Day day0 = new Day(mockDate0);
      XYSeries xYSeries0 = new XYSeries(day0, true, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset2 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset1);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      Number[][] numberArray0 = new Number[2][3];
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "org.jfree.data.general.DefaultKeyedValueDataset");
      DatasetUtilities.createCategoryDataset("FH52$=QZo+F.7Rg[", "FH52$=QZo+F.7Rg[", numberArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 508.0440342418995);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset1);
      MockDate mockDate0 = new MockDate((-3115), 175, 12);
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addLast(regularTimePeriod0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) mockDate0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      linkedList0.removeIf(predicate2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Second second0 = new Second();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, false);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset1);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      double[][] doubleArray1 = new double[4][8];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYIntervalSeriesCollection0, true);
      xYIntervalSeriesCollection0.removeChangeListener(intervalXYDelegate0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      DatasetUtilities.findMinimumDomainValue(defaultBoxAndWhiskerXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REPEAT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      int int0 = (-269);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(float0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (KeyToGroupMap) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-1.0), (-1.0));
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, list0, true);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = 2742;
      Week week0 = new Week(2742, (-190));
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      Number[][] numberArray0 = new Number[2][3];
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, 1095.4659301673, "org.jfree.data.general.DefaultKeyedValueDataset");
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("FH52$=QZo+F.7Rg[", "FH52$=QZo+F.7Rg[", numberArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "FH52$=QZo+F.7Rg[");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      Short short0 = new Short((short) (-916));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-916);
      doubleArray0[1] = (double) (short) (-916);
      doubleArray0[2] = (double) (short) (-916);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Float float0 = new Float(388.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 388.0;
      doubleArray2[1] = 388.0;
      doubleArray2[2] = 388.0;
      doubleArray2[3] = 388.0;
      doubleArray2[4] = (-637.074887497);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("aVwFR)Qf", "aVwFR)Qf", doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      dateArray0[1] = (Date) mockDate1;
      mockDate0.toInstant();
      mockDate1.clone();
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[1], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(categoryTableXYDataset0);
      xYIntervalSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(xYIntervalSeriesCollection0, true);
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MockDate mockDate0 = new MockDate(4, 4, (-786), 4, 2795);
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Date[] dateArray1 = new Date[0];
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray1, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) linkedList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(700);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 0.0, 179, fixedMillisecond0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.clear();
      int int0 = 155;
      MockDate mockDate0 = new MockDate(155, 155, 59);
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(regularTimePeriod0);
      linkedList0.addLast(defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 2253.71272573;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = (-1.0);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("FF|1V", "FF|1V", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1.0));
      keyToGroupMap0.getGroupIndex((-1.0));
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-1.0));
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 91);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = new ArrayList<DefaultIntervalCategoryDataset>();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 2286);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) float0, (-3851.5505218553), 2286);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2286, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Quarter quarter0 = new Quarter();
      defaultKeyedValues2DDataset0.setValue((Number) 4, (Comparable) quarter0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) 4);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("Requires 'xSamples' > 0", "");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      dateArray0[1] = (Date) mockDate1;
      mockDate0.toInstant();
      mockDate1.clone();
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[1], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      defaultHighLowDataset1.setSelectionState((XYDatasetSelectionState) null);
      DefaultHighLowDataset.createNumberArray(doubleArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset1, (List) linkedList0, range0, true);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      String string0 = "org.jfree.data.xy.VectorSeries";
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(float0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = (-1408);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-1408));
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.clear();
      MockDate mockDate0 = new MockDate(155, 155, 59);
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(regularTimePeriod0);
      linkedList0.addLast(defaultBoxAndWhiskerXYDataset0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.add(linkedList0, multipleGradientPaint_CycleMethod0, multipleGradientPaint_CycleMethod0);
      defaultMultiValueCategoryDataset0.validateObject();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Second second0 = new Second();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.NO_CYCLE;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2788.28940808;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(850, 213);
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, (-315.8120742746055));
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      DatasetUtilities.createCategoryDataset(";jNz&", ";jNz&", doubleArray1);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.setValue((double) 1, (Comparable) 2788.28940808, (Comparable) ";jNz&");
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = new Integer(365);
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, Double.NEGATIVE_INFINITY);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Float float0 = new Float((-104.503900061));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue(678.28, (Comparable) float0, (Comparable) float0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 148, 0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.spliterator();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, false);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1231.400505872);
      doubleArray0[1] = 1141.29747293183;
      doubleArray0[2] = (-1487.77);
      doubleArray0[3] = 185.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(day0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      LinkedList<XIntervalSeriesCollection> linkedList0 = new LinkedList<XIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate(1064, 867, 435);
      TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Quarter quarter0 = new Quarter();
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) quarter0, (Comparable) mockDate0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 1924.05987494);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Float float1 = new Float(2119.8037387441987);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float1, (Comparable) float1, (Comparable) float1);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.spliterator();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) list0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      Range.combine((Range) null, (Range) null);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-427.390856284);
      doubleArray0[1] = (-427.390856284);
      doubleArray0[2] = (-427.390856284);
      doubleArray0[3] = (-427.390856284);
      doubleArray0[4] = (-427.390856284);
      doubleArray0[5] = (-427.390856284);
      doubleArray0[6] = (-427.390856284);
      doubleArray0[7] = (-427.390856284);
      doubleArray0[8] = (-427.390856284);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-427.390856284));
      // Undeclared exception!
//      try { 
        SerialDate.createInstance((-1), 9999, (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'year' argument must be in range 1900 to 9999.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      Short short0 = new Short((short)1);
      defaultKeyedValues2DDataset0.setValue((Number) short0, (Comparable) short0, (Comparable) short0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.spliterator();
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      LinkedList<XYBarDataset> linkedList1 = new LinkedList<XYBarDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList1, true);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Short short0 = new Short((short)179);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<Long> vector0 = new Vector<Long>();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-104.503900061);
      doubleArray0[2] = (double) (short)179;
      doubleArray0[3] = (-104.503900061);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-104.503900061));
      FixedMillisecond fixedMillisecond0 = null;
//      try {
        fixedMillisecond0 = new FixedMillisecond((Date) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.FixedMillisecond", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Duplicate items in 'columnKeys'.");
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2286);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2286, Size: 8
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = new String[0];
      double[][] doubleArray0 = new double[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) stringArray0, doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 555.1393688046825);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      Quarter quarter0 = new Quarter();
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(quarter0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 4, timeZone0);
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.getRowCount();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.spliterator();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) linkedList0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-104.503900061));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      linkedList0.clear();
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate(1064, 867, 435);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) quarter0, (Comparable) mockDate0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 1924.05987494);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      defaultKeyedValues2DDataset0.setValue((double) 1, (Comparable) quarter0, (Comparable) mockDate0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) list0, range0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      dateArray0[1] = (Date) mockDate1;
      mockDate0.toInstant();
      mockDate1.clone();
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[1], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset1, (List) linkedList0, range0, true);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      mockDate1.toInstant();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "org.jfree.data.xy.VectorSeries");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      dateArray0[1] = (Date) mockDate1;
      mockDate0.toInstant();
      MockDate mockDate2 = (MockDate)mockDate1.clone();
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[1], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      boolean boolean0 = false;
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(mockDate2);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1272, (-989), (-2127129104), (-989), (-2127129104));
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (double) (-2127129105);
      doubleArray0[2] = (double) (-2127129105);
      doubleArray0[3] = (double) (-2127129104);
      mockDate1.clone();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      Range.combine((Range) null, (Range) null);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (-427.390856284));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(";'v!$CQzVSm");
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(";'v!$CQzVSm");
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      keyToGroupMap0.clone();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (double) 8);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Week week0 = new Week(2742, (-190));
      TimeSeries timeSeries0 = new TimeSeries(week0, "rJtI\"b2@]Ktx79", "rJtI\"b2@]Ktx79");
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      timeZone0.getDisplayName(locale0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "65i}@", "65i}@");
      int int0 = 2669;
      timePeriodValues0.setKey("65i}@");
      month0.next();
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2669, 2669);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      String string0 = "";
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "65i}@", doubleArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "Null 'columnKeys' argument.");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0, "65i}@", "65i}@");
      timePeriodValues0.setKey("65i}@");
      month0.next();
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2669, 2669);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "65i}@", doubleArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      Stack<Integer> stack0 = new Stack<Integer>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getDomainOrder();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Integer integer0 = new Integer(365);
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, Double.NEGATIVE_INFINITY);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(integer0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      defaultKeyedValues2DDataset0.getRowCount();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Duplicate items in 'columnKeys'.");
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("The number of column keys does not match the number of columns in the data array.");
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "The number of column keys does not match the number of columns in the data array.", (-531.911987796));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129081), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129081), 1, (-2127129081));
      dateArray0[1] = (Date) mockDate1;
      Instant instant0 = mockDate0.toInstant();
      mockDate1.clone();
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[1], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      WindowFocusListener windowFocusListener0 = mock(WindowFocusListener.class, new ViolatedAssumptionAnswer());
      WindowFocusListener windowFocusListener1 = AWTEventMulticaster.add(windowFocusListener0, windowFocusListener0);
      AWTEventMulticaster.remove(windowFocusListener1, windowFocusListener1);
      AWTEventMulticaster.remove((WindowFocusListener) null, (WindowFocusListener) null);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      defaultHighLowDataset0.hasListener((EventListener) null);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) instant0, (-317.83));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Short short0 = new Short((short)179);
      defaultKeyedValues2DDataset0.setValue((Number) short0, (Comparable) short0, (Comparable) short0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset1.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) short0, 1924.05987494, 8);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      Number[][] numberArray0 = new Number[2][3];
      categoryTableXYDataset0.add(0.8, 1804.453, "org.jfree.data.general.DefaultKeyedValueDataset");
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray0[1] = numberArray2;
      DatasetUtilities.createCategoryDataset("s*<QOsN<4%,=D", "org.jfree.data.general.DefaultKeyedValueDataset", numberArray0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1272, (-989), (-2127129104), (-989), (-2127129104));
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (double) (-2127129105);
      doubleArray0[2] = (double) (-2127129105);
      doubleArray0[3] = (double) (-2127129104);
      doubleArray0[4] = (double) (-2127129105);
      mockDate1.clone();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.8;
      doubleArray1[1] = 4297.67064075786;
      doubleArray1[2] = (-104.503900061);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 4297.67064075786;
      doubleArray2[1] = (-217.3798155052);
      doubleArray2[2] = 0.8;
      doubleArray2[3] = 0.8;
      doubleArray2[4] = (-104.503900061);
      doubleArray2[5] = 4297.67064075786;
      doubleArray2[6] = (-104.503900061);
      doubleArray2[7] = 4297.67064075786;
      doubleArray2[8] = 4297.67064075786;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-104.503900061);
      doubleArray3[1] = 4297.67064075786;
      doubleArray3[2] = 0.8;
      doubleArray3[3] = (-217.3798155052);
      doubleArray3[4] = 4297.67064075786;
      doubleArray3[5] = (-217.3798155052);
      doubleArray3[6] = (-104.503900061);
      doubleArray3[7] = 0.8;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2788.28940808;
      doubleArray1[1] = 2788.28940808;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0, true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) 2788.28940808);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate(1064, 867, 435);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) quarter0, (Comparable) mockDate0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 1924.05987494);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(quarter0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, true);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, (-917));
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short) (-589));
      linkedList0.add(short0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-1.0));
      MockDate mockDate0 = new MockDate(2639, 1, 1, 4, (-917));
      mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Millisecond millisecond0 = new Millisecond(mockDate1);
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      dateArray0[1] = (Date) mockDate1;
      mockDate0.toInstant();
      mockDate1.clone();
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(dateArray0[1], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DefaultHighLowDataset defaultHighLowDataset1 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset1, (List) linkedList0, range0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "org.jfree.data.xy.VectorSeries");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[0];
      double[][] doubleArray0 = new double[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) stringArray0, doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 555.0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      Quarter quarter0 = new Quarter();
      quarter0.next();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) arrayList0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList0.spliterator();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "s*<QOsN<4%,=D", 1439.665);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "s*<QOsN<4%,=D", (KeyedValues) pieDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[0];
      double[][] doubleArray0 = new double[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) stringArray0, doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 555.1393688046825);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      Quarter quarter0 = new Quarter();
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(quarter0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      quarter0.getYear();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 4, timeZone0);
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate(1064, 867, 435);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) quarter0, (Comparable) mockDate0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 1924.05987494);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) quarter0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1267.94663282803, Double.NEGATIVE_INFINITY, "(rwYfl1.r1j(E9");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      String string0 = "The 'year' argument must be in range 1900 to 9999.";
      categoryTableXYDataset0.add(2712.1, (-460.913), "The 'year' argument must be in range 1900 to 9999.");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Short short0 = new Short((short)179);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<Long> vector0 = new Vector<Long>();
      defaultKeyedValues2DDataset0.setValue(0.0, (Comparable) float0, (Comparable) float0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (int) (short)179);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 179, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      Number[][] numberArray0 = new Number[2][3];
      categoryTableXYDataset0.add(0.8, 1804.453, "org.jfree.data.general.DefaultKeyedValueDataset");
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      Hour hour0 = new Hour();
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) hour0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Date[] dateArray0 = new Date[3];
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-3000.088);
      doubleArray0[2] = (-3000.088);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((-3000.088), dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      XYSeries xYSeries0 = new XYSeries((-3000.088), true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Minute minute0 = new Minute();
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<TimeSeriesCollection>) minute0;
      comparableArray0[1] = (Comparable<TimeSeriesCollection>) minute0;
      comparableArray0[2] = (Comparable<TimeSeriesCollection>) minute0;
      comparableArray0[3] = (Comparable<TimeSeriesCollection>) minute0;
      comparableArray0[4] = (Comparable<TimeSeriesCollection>) minute0;
      comparableArray0[5] = (Comparable<TimeSeriesCollection>) minute0;
      comparableArray0[6] = (Comparable<TimeSeriesCollection>) minute0;
      comparableArray0[7] = (Comparable<TimeSeriesCollection>) minute0;
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 59;
      doubleArray1[2] = 4721.089;
      doubleArray1[3] = (double) 59;
      doubleArray1[4] = (double) 59;
      doubleArray1[5] = (double) 0;
      minute0.getMiddleMillisecond();
      doubleArray1[6] = (double) 59;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'rowKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-669), (-2557), (-669), (-1633), (-989), (-30));
      MockDate mockDate1 = new MockDate((-2557), 1, (-2127129104), 1, (-1825));
      mockDate1.clone();
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getStartX(154, 31);
      categoryTableXYDataset0.add(number0, number0, "Requires 'start' < 'end'.", true);
      categoryTableXYDataset0.add(0.0, 0.0, "(rwYfl1.r1j(E9");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 0.0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      String string0 = "org.jfree.data.general.DefaultKeyedValueDataset";
      categoryTableXYDataset0.add(0.8, 1804.453, "org.jfree.data.general.DefaultKeyedValueDataset");
      Number[] numberArray0 = new Number[1];
      Number[] numberArray1 = new Number[9];
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "m");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      String string0 = "org.jfree.data.general.DefaultKeyedValueDataset";
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1267.94663282803, 1804.453, "s*<QOsN<4%,=D");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "org.jfree.data.general.DefaultKeyedValueDataset");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // A connection must be supplied.
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Duplicate items in 'columnKeys'.");
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2286);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      mockDate1.after(dateArray0[0]);
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-2127129105);
      mockDate1.clone();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (double) 1;
      mockDate0.toInstant();
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-2127129105);
      mockDate1.clone();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      WindowFocusListener windowFocusListener0 = mock(WindowFocusListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowFocusListener0, windowFocusListener0);
      AWTEventMulticaster.add((WindowFocusListener) null, (WindowFocusListener) null);
      defaultHighLowDataset0.hasListener((EventListener) null);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateXYRangeBounds(vectorSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-2127129105);
      mockDate1.clone();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Double double0 = new Double((-1633));
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.indexOf(1.0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1503.0269309279606;
      doubleArray1[1] = 1503.0269309279606;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 198.73166716926752;
      doubleArray2[1] = 198.73166716926752;
      doubleArray2[2] = 198.73166716926752;
      doubleArray2[3] = 1503.0269309279606;
      doubleArray2[4] = 198.73166716926752;
      doubleArray2[5] = 1503.0269309279606;
      doubleArray2[6] = 198.73166716926752;
      doubleArray2[7] = (-768.8921676006804);
      doubleArray2[8] = 1503.0269309279606;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.indexOf(1503.0269309279606);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      Number[][] numberArray0 = new Number[2][3];
      categoryTableXYDataset0.add(0.8, 1804.453, "org.jfree.data.general.DefaultKeyedValueDataset");
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray0[1] = numberArray2;
      DatasetUtilities.createCategoryDataset("s*<QOsN<4%,=D", "org.jfree.data.general.DefaultKeyedValueDataset", numberArray0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2788.28940808;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(850, 213);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      Range range1 = Range.shift(range0, 1962.218513389);
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, (-315.8120742746055));
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      stack0.add(xYBarDataset0);
      Range.shift(range1, 1.0);
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range2 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range2, false);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((-104.503900061), (Comparable) float0, (Comparable) float0);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(13);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-116.65392852), 615.8276410983827, 2, fixedMillisecond0);
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 1600, timeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-217.3798155052));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) list0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate((-1633), (-2127129105), 659, (-1), (-315), (-2557));
      MockDate mockDate1 = new MockDate((-1896), 3548, 1609, (-2127129104), (-1896));
      MockDate mockDate2 = new MockDate(857, (-989), (-1), (-1104), 863, 3548);
      mockDate2.clone();
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2127129104), 1029.975, true, false);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate2;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2127129104);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(simpleHistogramBin0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.indexOf((-2.127129104E9));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-2127129105);
      mockDate1.clone();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Double double0 = new Double((-1633));
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.indexOf(1.0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-2127129105);
      mockDate1.clone();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Double double0 = new Double((-1633));
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.indexOf(1.0);
      Number[][] numberArray0 = new Number[0][5];
      DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "Null 'dataset' argument.", numberArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(1379, 188, 2316.629714236308, (-315.99471113272), (-411.69491186492), 188);
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-104.503900061);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-2146354159));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      Float float1 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Short short0 = new Short((short)179);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      Number[] numberArray0 = new Number[1];
      Short short0 = new Short((short) (-903));
      numberArray0[0] = (Number) short0;
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (short) (-916);
      doubleArray1[1] = (double) (short) (-916);
      doubleArray1[2] = (double) (short) (-916);
      doubleArray1[3] = (double) (short) (-916);
      doubleArray1[4] = (double) (short) (-916);
      doubleArray1[6] = (double) (short) (-916);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) (-916.0));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate((-989), (-2127129105), (-2127129104), (-1633), (-2127129105), (-2557));
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1263, (-989), (-2127129104), 1, (-2127129104));
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-2127129105);
      mockDate1.clone();
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.indexOf(1.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) vectorSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = 3;
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 3);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      Number[] numberArray0 = new Number[1];
      Short short0 = new Short((short) (-903));
      numberArray0[0] = (Number) short0;
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (short) (-903);
      doubleArray1[1] = (double) (short) (-903);
      doubleArray1[2] = (double) (short) (-903);
      doubleArray1[3] = (double) (short) (-903);
      doubleArray1[4] = (double) (short) (-903);
      doubleArray1[5] = (double) (short) (-903);
      doubleArray1[6] = (double) (short) (-903);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.Vector", "org.jfree.data.xy.Vector", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((-104.503900061), (Comparable) float0, (Comparable) float0);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>(13);
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(13);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-116.65392852), 615.8276410983827, 2, fixedMillisecond0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-116.65392852));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(float0);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(simpleHistogramDataset0, false);
      defaultKeyedValues2DDataset0.removeChangeListener(intervalXYDelegate0);
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-104.503900061);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      System.setCurrentTimeMillis(190L);
      DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, 1);
      Instant instant0 = mockDate0.toInstant();
      MockDate mockDate1 = new MockDate();
      mockDate1.clone();
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate1;
      mockDate0.toInstant();
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) mockDate1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((-104.503900061), (Comparable) float0, (Comparable) float0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2871.39990234375), 1.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-2871.39990234375);
      doubleArray0[2] = 3234.067;
      doubleArray0[3] = (-2871.39990234375);
      doubleArray0[4] = (-104.503900061);
      doubleArray0[5] = (-2871.39990234375);
      doubleArray0[6] = (-104.503900061);
      doubleArray0[7] = (double) 2;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2871.39990234375), 1894.3, 607, 2.0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-359), (-359));
      DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      Number[] numberArray0 = new Number[1];
      Short short0 = new Short((short) (-916));
      numberArray0[0] = (Number) short0;
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (short) (-916);
      doubleArray1[1] = (double) (short) (-916);
      doubleArray1[2] = (double) (short) (-916);
      doubleArray1[3] = (double) (short) (-916);
      doubleArray1[4] = (double) (short) (-916);
      doubleArray1[5] = (double) (short) (-916);
      doubleArray1[6] = (double) (short) (-916);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 21.301199346;
      doubleArray1[1] = (-1997.35);
      doubleArray1[2] = (-232.609375);
      doubleArray1[3] = 100.0;
      doubleArray1[4] = 1863.424212333892;
      doubleArray1[5] = 1266.66;
      doubleArray1[6] = (-1677.61932);
      doubleArray1[7] = (-1316.11241627);
      doubleArray1[8] = (-925.18);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1997.35);
      doubleArray2[1] = 1266.66;
      doubleArray2[2] = 1266.66;
      doubleArray2[3] = (-1997.35);
      doubleArray2[4] = (-1316.11241627);
      doubleArray2[5] = (-232.609375);
      doubleArray2[6] = (-1316.11241627);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.indexOf((-1997.35));
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 7
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      defaultIntervalXYDataset0.addChangeListener(xYTaskDataset0);
      Vector<TimePeriodValuesCollection> vector0 = new Vector<TimePeriodValuesCollection>();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultIntervalXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      Range range1 = jDBCXYDataset0.getRangeBounds(true);
      Range.expandToInclude(range1, Double.NEGATIVE_INFINITY);
      Range range2 = Range.shift(range0, (-219.6));
      Range.shift(range2, (-219.6));
      DatasetGroup datasetGroup0 = new DatasetGroup("A\"*,");
      DefaultIntervalCategoryDataset[] defaultIntervalCategoryDatasetArray0 = new DefaultIntervalCategoryDataset[5];
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 9);
      // Undeclared exception!
//      try { 
        Quarter.parseQuarter("");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Missing Q.
//         //
//         verifyException("org.jfree.data.time.Quarter", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      Month month0 = new Month();
      comparableArray0[0] = (Comparable<YIntervalSeriesCollection>) month0;
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1711.50059597593;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) comparableArray0, (Comparable[]) stringArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of column keys does not match the number of columns in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(999, 5);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      Range range1 = Range.shift(range0, (-1.0));
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 4732.3);
      stack0.add(xYBarDataset0);
      Range.shift(range0, (-104.503900061));
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range1, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Quarter quarter0 = new Quarter();
      quarter0.next();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 1);
      DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Short short0 = new Short((short)179);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2788.28940808;
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-480), (-480));
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1711.50059597593;
      doubleArray1[1] = 1634.90802;
      doubleArray1[2] = 1711.50059597593;
      doubleArray1[3] = (-1518.7125047675);
      doubleArray1[4] = 434.6566162109375;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-171.58313439419643);
      doubleArray1[7] = 1503.0269309279606;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[14];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1711.50059597593;
      doubleArray2[2] = (-171.58313439419643);
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.DefaultXYZDataset", "", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1.0));
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-104.503900061), (-104.503900061));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-104.503900061));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, list0, false);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) float0, (-104.503900061), (-1071));
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      System.setCurrentTimeMillis((-1071));
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Millisecond millisecond0 = new Millisecond();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) millisecond0, (-2654.8478684), (-1915));
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) millisecond0, (KeyedValues) pieDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-104.503900061), (-104.503900061));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-104.503900061));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, false);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) float0, (-1.0), 1750);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList1 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      arrayList1.ensureCapacity(45);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 2.0);
      Integer integer0 = new Integer(45);
      JDBCXYDataset jDBCXYDataset0 = null;
//      try {
        jDBCXYDataset0 = new JDBCXYDataset("ERROR : Relative To String", "`;+/s|,k", ".91~S`", "S");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-104.503900061);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 3595.0344921);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(float0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, (List) list0, range0, false);
      Range.scale(range0, Double.POSITIVE_INFINITY);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset2 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset2.clone();
      PolynomialFunction2D polynomialFunction2D0 = null;
//      try {
        polynomialFunction2D0 = new PolynomialFunction2D((double[]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'coefficients' argument
//         //
//         verifyException("org.jfree.data.function.PolynomialFunction2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYTaskDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      DatasetUtilities.iterateToFindDomainBounds(xYTaskDataset0, linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2788.28940808;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1081, 873);
      DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 893.5528829780683;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 700);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 893.5528829780683, (-1513.2502059156234));
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 893.5528829780683, (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowData' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-232.60937594091746));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 434.6566162109375);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultKeyedValues2DDataset0.getValue((Comparable) float0, (Comparable) float0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) list0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1893.95098262);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1299.56470551618;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 2629.1455665735093;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-232.60937594091746));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 434.6566162109375);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultKeyedValues2DDataset0.getValue((Comparable) float0, (Comparable) float0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, list0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((-104.503900061), (Comparable) float0, (Comparable) float0);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1032.59);
      doubleArray2[1] = (-431.02576);
      doubleArray2[2] = (-104.503900061);
      doubleArray2[3] = (-104.503900061);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      DatasetUtilities.createCategoryDataset("]{=,_aK4K*?(", "]{=,_aK4K*?(", doubleArray1);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2788.28940808;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 700);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 2788.28940808, 410.306);
      DatasetUtilities.createCategoryDataset((Comparable) 2788.28940808, (KeyedValues) pieDataset1);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(999, 5);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      stack0.removeAllElements();
      Range range1 = Range.shift(range0, (-1.0));
      Range.shift(range0, (-104.503900061));
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range1, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((String) null, (String) null, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      double[][] doubleArray0 = new double[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) stringArray0, doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-551.469778019));
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Minute minute0 = null;
//      try {
        minute0 = new Minute(1792, 1792, 1039, 1792, 1039);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'year' argument must be in range 1900 to 9999.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2871.39990234375), 888.0);
      DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, linkedList0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, linkedList0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2405, (-2222));
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) linkedList0, true);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      Float float0 = new Float((-105.0));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYZDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-242.694083), 2640.838031680561);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1634.90802, 2163.304, 1064, float0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, list0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) float0);
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 2163.304);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2788.28940808;
      doubleArray1[1] = 2788.28940808;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      linkedList0.add((Object) timePeriodValuesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 100);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Quarter quarter0 = new Quarter();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(9999);
      Day day0 = new Day(spreadsheetDate0);
      day0.next();
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) quarter0, 0.5);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 100);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1200.86646), (-1785.3609884400676));
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1.0), 0.0, 2146449313, float0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      double[][] doubleArray0 = new double[0][3];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2871.39990234375), 888.0);
      DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, linkedList0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1688.1376356);
      doubleArray1[1] = (-2648.359521566263);
      doubleArray1[2] = 461.22;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = (-414.0666603701808);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-2648.359521566263);
      doubleArray2[1] = (-2648.359521566263);
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-414.0666603701808);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 461.22;
      doubleArray3[1] = (-414.0666603701808);
      doubleArray3[2] = (-2648.359521566263);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-414.0666603701808);
      doubleArray4[1] = (-551.469778019);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-551.469778019);
      doubleArray5[1] = (-1688.1376356);
      doubleArray5[2] = (-414.0666603701808);
      doubleArray5[3] = (-551.469778019);
      doubleArray5[4] = (-247.285181);
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray5[6] = 461.22;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = (-414.0666603701808);
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = (-551.469778019);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-414.0666603701808);
      doubleArray7[1] = 461.22;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 461.22);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2788.28940808;
      doubleArray1[1] = 2788.28940808;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("Duplicate items in 'columnKeys'.");
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = new LinkedList<Integer>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList1, range0, false);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double double0 = (-104.503900061);
      Float float0 = new Float((-104.503900061));
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)60;
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) (byte) (-23), (Comparable) bigInteger0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = new Range((-104.503900061), (byte)60);
      double double1 = 0.0;
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      boolean boolean0 = true;
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      int int0 = 274;
      int int1 = 840;
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'start' < 'end'.", 274, 840);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, Double.POSITIVE_INFINITY);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-9));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Short short0 = new Short((short)179);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, true);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 2272.761700819276;
      doubleArray0[2] = 2272.761700819276;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2272.761700819276;
      doubleArray0[2] = 2055.9069293142;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getRowKeys();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-1448.290167035275));
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((-104.503900061), (Comparable) float0, (Comparable) float0);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>(13);
      boolean boolean0 = false;
      int int0 = (-2479);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 13);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 13, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Stack<Short> stack0 = new Stack<Short>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, true);
      Short short0 = new Short((short)1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      Float float1 = new Float((double) 2);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, list0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-104.503900061);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) float0;
      numberArray1[1] = (Number) (-104.503900061);
      numberArray1[2] = (Number) (-104.503900061);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) (-104.503900061);
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = (Number) (-104.503900061);
      numberArray3[1] = (Number) (-104.503900061);
      numberArray3[2] = (Number) (-104.503900061);
      numberArray3[3] = (Number) float0;
      numberArray0[2] = numberArray3;
      DatasetUtilities.createCategoryDataset("org.jfree.data.general.DefaultKeyedValueDataset", "Requires 'w' > 0.0.", numberArray0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getColumnIndex(float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Integer integer0 = new Integer(166);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-104.503900061));
      defaultKeyedValues2DDataset0.getColumnCount();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, false);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      Double double0 = new Double(1);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-104.503900061);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-104.503900061));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-104.503900061);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 3025.0986296886;
      doubleArray0[5] = (-104.503900061);
      doubleArray0[7] = (-720.7);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      XIntervalSeriesCollection xIntervalSeriesCollection1 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection1, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getColumnCount();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 192);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 0.0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-2451.602922538482));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double double0 = (-104.503900061);
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = new Vector<XYIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      defaultKeyedValues2DDataset0.getColumnCount();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      stack0.add(defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2269.629770311706;
      doubleArray0[1] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3365.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1430.39369);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 25.0019;
      doubleArray0[8] = Double.NaN;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2841L));
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.0), (-1430.39369), 179, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals((-104.50389862060547), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      assertEquals(502.74805068969727, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      int int0 = 192;
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 192);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      String string0 = "'/sVo\"";
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 192, 0.0, 192, "'/sVo\"");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Float float0 = new Float((-104.503900061));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultMultiValueCategoryDataset0.getRowKeys();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3081L);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 1427.0, 700, 179, (-104.503900061));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[][][] objectArray0 = new Object[0][9][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      linkedList0.add(multipleGradientPaint_CycleMethod0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Invalid series index: -1
//         //
//         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-104.503900061));
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, list0, false);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[][][] objectArray0 = new Object[0][9][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) stringArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[][][] objectArray0 = new Object[0][9][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2871.39990234375), 888.0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-2871.39990234375), (-2871.39990234375), 2, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 2272.761700819276;
      doubleArray0[2] = 2272.761700819276;
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = 2055.9069293142;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) 2272.761700819276);
      String string0 = "";
      String string1 = null;
      Number[][] numberArray0 = new Number[3][6];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 2055.9069293142;
      numberArray1[1] = (Number) 2055.9069293142;
      numberArray1[2] = (Number) 2272.761700819276;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      int int0 = (-767);
      int int1 = (-3943);
      // Undeclared exception!
//      try { 
        defaultIntervalXYDataset0.getEndX((-767), (-3943));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-104.503900061);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, false);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      Double double0 = new Double((-2429.0));
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[][][] objectArray0 = new Object[0][9][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, linkedList0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) stringArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float(2554.696627);
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Range.scale(range0, 2554.696627);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-858.712);
      doubleArray0[2] = 2055.9069293142;
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1889.953829);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultStatisticalCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      double[] doubleArray0 = new double[8];
      String string0 = "pI";
      double[][] doubleArray1 = new double[2][9];
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2788.28940808;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("pI", "9?m*G] )\"rR7Z}", doubleArray1);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 2055.9069293142);
      int int0 = (-982);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-982));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      double[] doubleArray0 = new double[3];
      defaultKeyedValues2DDataset0.getColumnCount();
      doubleArray0[0] = (-104.503900061);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 2272.761700819276;
      doubleArray0[2] = 2272.761700819276;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2272.761700819276;
      doubleArray1[2] = 2055.9069293142;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2788.28940808;
      doubleArray1[1] = 2788.28940808;
      DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2788.28940808, 2788.28940808);
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 10);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      Range.expandToInclude(range0, 555.0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (-2223));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-2223));
      assertNotNull(pieDataset0);
      
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      Integer integer0 = new Integer(4);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) integer0, (KeyedValues) pieDataset0);
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) integer0);
      Object[][][] objectArray0 = new Object[5][1][0];
      Object[][] objectArray1 = new Object[5][6];
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) pieDataset0;
      objectArray2[1] = (Object) defaultKeyedValues2DDataset0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) categoryDataset0;
      objectArray2[4] = (Object) null;
      Object object0 = new Object();
      objectArray2[5] = object0;
      Object object1 = new Object();
      objectArray2[6] = object1;
      objectArray2[7] = (Object) categoryDataset0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[4];
      objectArray3[0] = (Object) null;
      objectArray3[1] = (Object) list0;
      Object object2 = new Object();
      objectArray3[2] = object2;
      Object object3 = new Object();
      objectArray3[3] = object3;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[5];
      objectArray4[0] = (Object) null;
      objectArray4[1] = (Object) null;
      objectArray4[2] = (Object) integer0;
      objectArray4[3] = (Object) pieDataset0;
      objectArray4[4] = (Object) null;
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[7];
      objectArray5[0] = (Object) categoryDataset0;
      objectArray5[1] = object2;
      objectArray5[2] = (Object) null;
      objectArray5[3] = (Object) null;
      objectArray5[4] = (Object) integer0;
      objectArray5[5] = (Object) pieDataset0;
      objectArray5[6] = (Object) null;
      objectArray1[3] = objectArray5;
      Object[] objectArray6 = new Object[7];
      Object object4 = new Object();
      objectArray6[0] = object4;
      objectArray6[1] = (Object) null;
      Object object5 = new Object();
      objectArray6[2] = object5;
      objectArray6[3] = (Object) null;
      Object object6 = new Object();
      objectArray6[4] = object6;
      objectArray6[5] = object3;
      objectArray6[6] = (Object) integer0;
      objectArray1[4] = objectArray6;
      objectArray0[0] = objectArray1;
      Object[][] objectArray7 = new Object[2][2];
      Object[] objectArray8 = new Object[5];
      objectArray8[0] = (Object) defaultKeyedValues2DDataset0;
      objectArray8[1] = object5;
      objectArray8[2] = object4;
      Object object7 = new Object();
      objectArray8[3] = object7;
      objectArray8[4] = (Object) list0;
      objectArray7[0] = objectArray8;
      objectArray7[1] = objectArray4;
      objectArray0[1] = objectArray7;
      Object[][] objectArray9 = new Object[1][1];
      Object[] objectArray10 = new Object[4];
      objectArray10[0] = (Object) pieDataset0;
      objectArray10[1] = (Object) categoryDataset0;
      Object object8 = new Object();
      objectArray10[2] = object8;
      objectArray10[3] = (Object) pieDataset0;
      objectArray9[0] = objectArray10;
      objectArray0[2] = objectArray9;
      Object[][] objectArray11 = new Object[5][0];
      objectArray11[0] = objectArray4;
      Object[] objectArray12 = new Object[6];
      objectArray12[0] = object4;
      objectArray12[1] = object8;
      objectArray12[2] = (Object) categoryDataset0;
      objectArray12[3] = (Object) pieDataset1;
      objectArray12[4] = (Object) categoryDataset0;
      objectArray12[5] = (Object) list0;
      objectArray11[1] = objectArray12;
      objectArray11[2] = objectArray2;
      Object[] objectArray13 = new Object[5];
      objectArray13[0] = object7;
      objectArray13[1] = object3;
      Object object9 = new Object();
      objectArray13[2] = object9;
      objectArray13[3] = (Object) categoryDataset0;
      objectArray13[4] = (Object) defaultKeyedValues2DDataset0;
      objectArray11[3] = objectArray13;
      objectArray11[4] = objectArray3;
      objectArray0[3] = objectArray11;
      Object[][] objectArray14 = new Object[8][8];
      Object[] objectArray15 = new Object[0];
      objectArray14[0] = objectArray15;
      objectArray14[1] = objectArray2;
      objectArray14[2] = objectArray4;
      objectArray14[3] = objectArray4;
      objectArray14[4] = objectArray12;
      Object[] objectArray16 = new Object[2];
      objectArray16[0] = object5;
      objectArray16[1] = object1;
      objectArray14[5] = objectArray16;
      Object[] objectArray17 = new Object[1];
      objectArray17[0] = object0;
      objectArray14[6] = objectArray17;
      objectArray14[7] = objectArray6;
      objectArray0[4] = objectArray14;
      DefaultWindDataset defaultWindDataset0 = null;
//      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.general.DefaultKeyedValues2DDataset cannot be cast to java.lang.Number
//         //
//         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-386.991464);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 2941.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, Double.POSITIVE_INFINITY, 2941.0, (-185), Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      boolean boolean0 = true;
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(82, 999);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LinkedList<MultipleGradientPaint.CycleMethod> linkedList0 = new LinkedList<MultipleGradientPaint.CycleMethod>();
      defaultWindDataset0.getDomainOrder();
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2871.39990234375), 888.0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2273.444306969;
      doubleArray1[1] = 2273.444306969;
      doubleArray1[2] = 2273.444306969;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 2273.444306969;
      doubleArray2[1] = 2273.444306969;
      doubleArray2[2] = 2055.9069293142;
      doubleArray2[3] = 2273.444306969;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "w", 2941, 0, 0, 4631, 0, 4631, 0, 1, 0, 2941, 4631);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      Range.expandToInclude(range0, 555.0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 4373);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      Quarter quarter0 = new Quarter();
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) regularTimePeriod0, (double) 4);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 4);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-104.503900061));
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-858.712);
      doubleArray0[2] = 2055.9069293142;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2055.9069293142;
      doubleArray0[6] = (-3364.7120919);
      doubleArray0[7] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-858.712), 2055.9069293142, (-14), (-858.712));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.GERMANY;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      XIntervalSeriesCollection xIntervalSeriesCollection1 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection1, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>(2146544915);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2788.28940808;
      doubleArray1[1] = 2055.9069293142;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-618.332267676));
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-982));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      SynthOptionPaneUI synthOptionPaneUI0 = new SynthOptionPaneUI();
      defaultXYZDataset0.hasListener(synthOptionPaneUI0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 162);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 162;
      doubleArray0[2] = (double) 162;
      doubleArray0[3] = (double) 162;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1288.18910865;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      arrayList0.add(xYIntervalSeriesCollection0);
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, arrayList0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 2266);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2266, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-283.75132), (-283.75132), "}6a6rPVD[");
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-283.75132), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "org.jfree.data.time.Quarter", false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-920));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      int int0 = 192;
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 192);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "'/sVo\"";
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "'/sVo\"");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      locale0.toLanguageTag();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-2146713744));
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 450.49610137939453);
      timeTableXYDataset0.setDomainIsPointsInTime(true);
      timeTableXYDataset0.getDomainBounds(true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-2146713744));
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 450.49610137939453;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 450.49610137939453;
      doubleArray2[8] = 450.49610137939453;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 450.49610137939453;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 450.49610137939453;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) (-2146713744);
      doubleArray4[1] = 1338.1946616069;
      doubleArray4[2] = 450.49610137939453;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 450.49610137939453;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1338.1946616069;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (double) (-2146713744);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (double) (-2146713744);
      doubleArray5[7] = 450.49610137939453;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("und", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"[mCF[/ILY> Fn{C";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 1.0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      SynthOptionPaneUI synthOptionPaneUI0 = new SynthOptionPaneUI();
      defaultXYZDataset0.hasListener(synthOptionPaneUI0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, true);
      String string0 = null;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 162);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1653.46790801665);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1331.2560446;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, arrayList0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      String[] stringArray0 = new String[3];
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      stringArray0[1] = "";
      defaultKeyedValues2DDataset0.setValue((-2552.2993), (Comparable) "", (Comparable) "");
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      xIntervalSeriesCollection0.addChangeListener((DatasetChangeListener) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, false);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Collection<String> collection0 = null;
      // Undeclared exception!
//      try { 
        Range.shift((Range) null, 100.33463855533478);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'base' argument.
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, false);
      String string0 = null;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((String) null, (String) null, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, true);
      arrayList0.ensureCapacity(2);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, 2);
      Integer integer0 = new Integer(249);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) integer0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, true);
      arrayList0.ensureCapacity(0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, 0);
      Integer integer0 = new Integer(249);
      assertEquals(249, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      Number[] numberArray0 = new Number[2];
      Short short0 = new Short((short)19);
      numberArray0[0] = (Number) short0;
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 0.0);
      // Undeclared exception!
//      try { 
        xYBarDataset0.getStartX((-1566), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "w", 2941, 0, 0, 4631, 0, 4631, 0, 1, 0, 2941, 4631);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-104.503900061);
      doubleArray0[1] = (-104.503900061);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(float0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      String[] stringArray0 = new String[8];
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      stringArray0[1] = "";
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 685);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 685, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2788.28940808;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(672);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 2788.28940808, 179, fixedMillisecond0);
      assertEquals(179, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-858.712);
      doubleArray0[2] = 2055.9069293142;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2055.9069293142;
      doubleArray0[6] = (-3364.7120919);
      doubleArray0[7] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-858.712), 2055.9069293142, 2, (-858.712));
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(2055.9069293142, xYSeries0.getMaxX(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3364.7120919);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NaN, 672.7974309262, 672, (-3364.7120919));
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2788.28940808;
      doubleArray1[1] = 2055.9069293142;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2055.9069293142, 2055.9069293142);
      MockDate mockDate0 = new MockDate((-50), (-50), 0, (-50), 0, 2);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      week0.previous();
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-3365.0), Double.NEGATIVE_INFINITY, 334, week0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Float float0 = new Float((-104.503900061));
      defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-2223));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      Second.parseSecond("");
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) null;
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 59;
      doubleArray2[1] = 6.283185307179586;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 59;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 59;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 6.283185307179586;
      doubleArray3[2] = (double) 59;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 59;
      doubleArray3[5] = 6.283185307179586;
      doubleArray3[6] = 6.283185307179586;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 59;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = 4308.3169;
      doubleArray4[3] = (double) 59;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 6.283185307179586;
      doubleArray5[1] = Double.NaN;
      doubleArray5[2] = 6.283185307179586;
      doubleArray5[3] = 6.283185307179586;
      doubleArray5[4] = (double) 59;
      doubleArray5[5] = 2273.444306969;
      doubleArray5[6] = 6.283185307179586;
      doubleArray5[7] = (double) 59;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 6.283185307179586;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 2273.444306969;
      doubleArray8[1] = (double) 59;
      doubleArray8[2] = (double) 59;
      doubleArray8[3] = 6.283185307179586;
      doubleArray8[4] = 2273.444306969;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'columnKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = "Duplicate items in 'columnKeys'.";
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2788.28940808;
      double double0 = 2055.9069293142;
      doubleArray1[1] = 2055.9069293142;
      doubleArray0[0] = doubleArray1;
      DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "Duplicate items in 'columnKeys'.", doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("^q)A80!!VQ*H;DpnJ", "^q)A80!!VQ*H;DpnJ", (Number[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3365.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3365.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-3365.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3365.0);
      doubleArray0[7] = (-3365.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-3365.0), 0.0, 2, 1.0);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-3365.0), xYSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      categoryTableXYDataset0.clone();
      categoryTableXYDataset0.getItemCount((-1207));
      Number[][] numberArray0 = new Number[2][3];
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, 1095.4659301673, "org.jfree.data.general.DefaultKeyedValueDataset");
      DatasetUtilities.createCategoryDataset("FH52$=QZo+F.7Rg[", "FH52$=QZo+F.7Rg[", numberArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1095.4659301673, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      DatasetUtilities.createCategoryDataset("#|}|N(ln qy", "", doubleArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      stringArray0[1] = "";
      stringArray0[2] = "#|}|N(ln qy";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "#|}|N(ln qy";
      stringArray0[6] = "DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.";
      stringArray0[7] = "#|}|N(ln qy";
      Object[][][] objectArray0 = new Object[2][4][0];
      Object[][] objectArray1 = new Object[7][0];
      Object[] objectArray2 = new Object[0];
      objectArray1[0] = objectArray2;
      objectArray1[1] = (Object[]) doubleArray0;
      objectArray1[2] = (Object[]) stringArray0;
      objectArray1[3] = (Object[]) doubleArray0;
      objectArray1[4] = (Object[]) doubleArray0;
      objectArray1[5] = (Object[]) doubleArray0;
      objectArray1[6] = (Object[]) doubleArray0;
      objectArray0[0] = objectArray1;
      Object[][] objectArray3 = new Object[2][2];
      objectArray3[0] = (Object[]) stringArray0;
      objectArray3[1] = (Object[]) doubleArray0;
      objectArray0[1] = objectArray3;
      DefaultWindDataset defaultWindDataset0 = null;
//      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of series keys does not match the number of series in the data array.
//         //
//         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      DatasetUtilities.createCategoryDataset("#|}|N(ln qy", "", doubleArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.iterateXYRangeBounds(yIntervalSeriesCollection0);
      stringArray0[1] = "";
      stringArray0[2] = "#|}|N(ln qy";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "#|}|N(ln qy";
      stringArray0[7] = "#|}|N(ln qy";
      Object[][][] objectArray0 = new Object[2][4][0];
      Object[][] objectArray1 = new Object[7][0];
      Object[] objectArray2 = new Object[0];
      objectArray1[0] = objectArray2;
      objectArray1[1] = (Object[]) doubleArray0;
      objectArray1[2] = (Object[]) stringArray0;
      objectArray1[4] = (Object[]) doubleArray0;
      objectArray1[5] = (Object[]) doubleArray0;
      objectArray1[6] = (Object[]) doubleArray0;
      objectArray0[0] = objectArray1;
      Object[][] objectArray3 = new Object[2][2];
      objectArray3[0] = (Object[]) stringArray0;
      objectArray3[1] = (Object[]) doubleArray0;
      objectArray0[1] = objectArray3;
      DefaultWindDataset defaultWindDataset0 = null;
//      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of series keys does not match the number of series in the data array.
//         //
//         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, arrayList0, false);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      XIntervalSeriesCollection xIntervalSeriesCollection1 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection1, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3250, "w", 2941, 0, 0, 4631, 0, 4631, 0, 1, 0, 2941, 4631);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      CategoryDatasetSelectionState categoryDatasetSelectionState0 = defaultKeyedValues2DDataset0.getSelectionState();
      defaultKeyedValues2DDataset0.setSelectionState(categoryDatasetSelectionState0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 555.0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 778.18;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 8.730821140963473;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zx`", "3bM2tv9BdB`UG`", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null 'rowKeys' argument.";
      stringArray0[1] = "r$Qo=p,?Sk+]_>Q%YkI";
      stringArray0[2] = "The number of column keys does not match the number of columns in the data array.";
      stringArray0[3] = "Null 'f' argument.";
      stringArray0[4] = "\"[mCF[/ILY> Fn{C";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xIntervalSeriesCollection0, 0.0);
      xIntervalSeriesCollection0.addChangeListener(xYBarDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      Minute minute0 = null;
//      try {
        minute0 = new Minute((Date) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'time' argument.
//         //
//         verifyException("org.jfree.data.time.Minute", e);
//      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 1.0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) null, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = "#|}|N(ln qy";
      String string1 = "";
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#|}|N(ln qy", "", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-5505));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      Number[][] numberArray0 = new Number[7][4];
      Number[] numberArray1 = new Number[2];
      Short short0 = new Short((short)0);
      numberArray1[0] = (Number) short0;
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 0.0);
      // Undeclared exception!
//      try { 
        xYBarDataset0.getStartX((-1566), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-377.3898);
      doubleArray2[1] = 695.2486525609901;
      doubleArray2[2] = 0.8;
      doubleArray2[3] = (-2492.316286);
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-377.3898);
      doubleArray3[1] = 0.8;
      doubleArray3[2] = 695.2486525609901;
      doubleArray3[3] = 695.2486525609901;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 2738.853208033;
      doubleArray3[6] = 695.2486525609901;
      doubleArray3[7] = 695.2486525609901;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 2738.853208033;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-2.147483648E9);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.8;
      doubleArray4[7] = (-377.3898);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-2492.316286);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 2738.853208033;
      doubleArray6[1] = 695.2486525609901;
      doubleArray6[2] = 2738.853208033;
      doubleArray6[3] = (-2492.316286);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = (-2492.316286);
      doubleArray7[1] = 695.2486525609901;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = (-2.147483648E9);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (-2492.316286);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-2492.316286);
      doubleArray8[3] = 1.0;
      doubleArray8[4] = 0.0;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, Double.POSITIVE_INFINITY);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 9);
      Date date0 = null;
      Week week0 = null;
//      try {
        week0 = new Week((Date) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'time' argument.
//         //
//         verifyException("org.jfree.data.time.Week", e);
//      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-858.712);
      doubleArray0[2] = 2055.9069293142;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3364.7120919);
      doubleArray0[7] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 2055.9069293142, 2, (-858.712));
      assertEquals(2055.9069293142, xYSeries0.getMaxX(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      double double0 = 0.0;
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 111.4966906081);
      int int0 = 0;
      int int1 = 0;
      MockDate mockDate0 = new MockDate((-50), (-50), (-50), (-2121), (-2121), 0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-4388.6617478), (-4388.6617478), 0, week0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }
}
