/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:27:41 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2L);
      assertNotNull(mockDate0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2L, (-1290.76), (-1290.76), (-2.147483648E9), Double.NaN);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-117.6757225317717), Double.NaN, (-1290.76), 438.226745477197, 438.226745477197);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-117.6757225317717), (-6096.998342), Double.NaN, (-2.147483648E9), Double.NaN);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1290.76), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1290.76), range0.getUpperBound(), 0.01);
      assertEquals((-1290.76), range0.getCentralValue(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) (-9999), "|L!]s##.");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-9999);
      doubleArray1[1] = (double) 9999;
      doubleArray1[2] = (double) 9999;
      doubleArray1[3] = (double) 9999;
      doubleArray1[4] = (double) (-9999);
      doubleArray1[5] = (double) (-9999);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 9999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 9999;
      doubleArray3[1] = (double) (-9999);
      doubleArray3[2] = (double) 9999;
      doubleArray3[3] = (double) 9999;
      doubleArray3[4] = (double) (-9999);
      doubleArray3[5] = (double) 9999;
      doubleArray3[6] = (double) 9999;
      doubleArray3[7] = (double) 9999;
      doubleArray3[8] = (double) (-9999);
      doubleArray0[2] = doubleArray3;
      double[][] doubleArray4 = new double[3][9];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray4);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2.0, 2.0);
      assertEquals(2.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Month month0 = new Month();
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertNotNull(month0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-2189.257525004554), 2.0, 664, month0);
      assertEquals(2.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(2.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2189.257525004554), range0.getLowerBound(), 0.01);
      assertEquals((-1093.628762502277), range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2191.257525004554, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, false);
      assertEquals(2.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-2189.257525004554), range0.getLowerBound(), 0.01);
      assertEquals((-1093.628762502277), range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2191.257525004554, range0.getLength(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.clear();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("|Tw3Zhk]'2", 2, 59);
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(118, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(118, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(118, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2, 2413.5);
      assertEquals(2.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2413.5, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 1.0, 1904.467167871854, 9, "|Tw3Zhk]'2");
      assertEquals(2.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2413.5, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.2115386076405421E-4, xYSeries0.getMinY(), 0.01);
      assertEquals(9, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1904.467167871854, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.6529614508280807E-4, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(118, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, number0);
      assertNotNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, doubleArray0.length);
      assertNotNull(list0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1311), 365, (-1311), (-1311), 365);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=365,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1311,HOUR_OF_DAY=-1311,MINUTE=365,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 365, 365, (-101.8977023098893), (-101.8977023098893), (-101.8977023098893));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=365,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1311,HOUR_OF_DAY=-1311,MINUTE=365,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-1311), (-1311), (-101.8977023098893), (-101.8977023098893), (-101.8977023098893));
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=365,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1311,HOUR_OF_DAY=-1311,MINUTE=365,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockGregorianCalendar0, oHLCDataItemArray0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=365,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1311,HOUR_OF_DAY=-1311,MINUTE=365,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, (-2009.033));
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2009.033), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) list0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      Double double0 = new Double(304.47004013);
      assertEquals(304.47004013, (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) (-9999), (Number) (-9999), (Comparable) year0, (Comparable) year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(double0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.contains(double0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = null;
      int int0 = 625;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 625, 625);
      assertEquals(625, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(625, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) 9999, "org.jfree.data.xy.CategoryTableXYDataset");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((CategoryTableXYDataset) null);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (double) (-9999));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.392409271321E12, range1.getUpperBound(), 0.01);
      assertEquals(1.392409271321E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.392409271321E12, range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("-]hb", 3, 3);
      assertNull(matrixSeries0.getDescription());
      assertEquals(3, matrixSeries0.getRowCount());
      assertEquals(3, matrixSeries0.getColumnsCount());
      assertEquals(9, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(3, matrixSeries0.getRowCount());
      assertEquals(3, matrixSeries0.getColumnsCount());
      assertEquals(9, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(3, matrixSeries0.getRowCount());
      assertEquals(3, matrixSeries0.getColumnsCount());
      assertEquals(9, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, 104.6613, "null4");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((CategoryTableXYDataset) null);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertTrue(boolean0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][0];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertEquals(3, numberArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultCategoryDataset0.addValue((Number) float0, (Comparable) float0, (Comparable) float0);
      assertEquals(3, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, numberArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate(21L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 21L, 21L, 21L, 21L, 21L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = true;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, 21L);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(21.0, range1.getUpperBound(), 0.01);
      assertEquals(21.0, range1.getCentralValue(), 0.01);
      assertEquals(21.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) 9999, "org.jfree.dataxy.CategoryableYDataset");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      System.setCurrentTimeMillis(9999);
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
      
      boolean boolean0 = linkedList0.add((DefaultHighLowDataset) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range1 = Range.expandToInclude((Range) null, (-1368.85));
      assertEquals((-1368.85), range1.getCentralValue(), 0.01);
      assertEquals((-1368.85), range1.getLowerBound(), 0.01);
      assertEquals((-1368.85), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range1, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[][] doubleArray0 = new double[17][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(17, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(17, doubleArray0.length);
      assertNotNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'dataset' argument.", 7, 7);
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, vector0, false);
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(6.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertNotNull(list0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1311), 163, (-1311), 2, 163);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1.0, 163, (-101.8977023098893), (-101.8977023098893), (-101.8977023098893));
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 1.0, (-1311), (-101.8977023098893), (-101.8977023098893), 2043.71807);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockGregorianCalendar0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, (-2009.033));
      assertEquals((-2009.033), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) list0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-2009.033), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(264.89770230988927, range1.getLength(), 0.01);
      assertEquals(163.0, range1.getUpperBound(), 0.01);
      assertEquals((-101.8977023098893), range1.getLowerBound(), 0.01);
      assertEquals(30.55114884505535, range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) list0, false);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1.22192928E13), range2.getLowerBound(), 0.01);
      assertEquals((-1.22192928E13), range2.getUpperBound(), 0.01);
      assertEquals((-1.22192928E13), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(1, doubleArray0.length);
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = (-2147483628);
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Double double0 = new Double((-2147483628));
      assertEquals((-2.147483628E9), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = (-703.7);
      double double2 = (-3278.176);
      double double3 = 1944.7789;
      double double4 = Double.POSITIVE_INFINITY;
      double double5 = (-1497.257148040688);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-703.7), (-703.7), (-3278.176), 1944.7789, (-703.7), (double) (-2147483628), Double.POSITIVE_INFINITY, (-1497.257148040688), (List) arrayList0);
      assertFalse(arrayList0.contains(double4));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) double0, (Comparable) double0);
      assertFalse(arrayList0.contains(double4));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.contains(double4));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (-703.7) <= upper (-2.147483628E9).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(1407);
      assertEquals(1407.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(double0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Double double1 = new Double(2377.132499917166);
      assertEquals(2377.132499917166, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = arrayList0.add(double1);
      assertFalse(arrayList0.contains(double0));
      assertTrue(arrayList0.contains(double1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockDate mockDate0 = new MockDate((-102L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-102L), 2377.132499917166, (-335.74153), Double.NEGATIVE_INFINITY, (-2582.7841417882946));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, (-335.74153), (-2582.7841417882946), 1407, 1.0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, Double.NaN, 2377.132499917166, Double.NEGATIVE_INFINITY, 2632.3689);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 1.0, Double.NEGATIVE_INFINITY, (-1.0), 2863.577658002512, 2632.3689);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 3109.539, 4840.74485569101, (-102L), 1407, 4840.74485569101);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double1, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7423.528997479305, range0.getLength(), 0.01);
      assertEquals(4840.74485569101, range0.getUpperBound(), 0.01);
      assertEquals((-2582.7841417882946), range0.getLowerBound(), 0.01);
      assertEquals(1128.9803569513579, range0.getCentralValue(), 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 674.3, Double.NEGATIVE_INFINITY, 839, oHLCDataItem0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) 9999, "org.jfree.data.xy.CategoryTableXYDataset");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((CategoryTableXYDataset) null);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertNotSame(range1, range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, doubleArray0.length);
      assertNotNull(list0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1311), 163, (-1311), 2, 163);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1.0, 163, (-101.8977023098893), (-101.8977023098893), (-101.8977023098893));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 1.0, (-1311), (-101.8977023098893), (-101.8977023098893), 2043.71807);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockGregorianCalendar0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultOHLCDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, (-2009.033));
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2009.033), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) list0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2009.033), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals((-101.8977023098893), range1.getLowerBound(), 0.01);
      assertEquals(264.89770230988927, range1.getLength(), 0.01);
      assertEquals(30.55114884505535, range1.getCentralValue(), 0.01);
      assertEquals(163.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(1, doubleArray0.length);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-101.8977023098893), range3.getCentralValue(), 0.01);
      assertEquals((-101.8977023098893), range3.getUpperBound(), 0.01);
      assertEquals((-101.8977023098893), range3.getLowerBound(), 0.01);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NaN, Double.NaN);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = Double.NaN;
      doubleArray3[6] = Double.NaN;
      doubleArray3[7] = Double.NaN;
      doubleArray3[8] = Double.NaN;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, doubleArray0.length);
      assertNotNull(list0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[2];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray1[0] = (Number) bigInteger0;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Number number0 = jDBCPieDataset0.getValue(174);
      assertNull(number0);
      
      numberArray1[1] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) bigInteger0;
      numberArray2[2] = null;
      numberArray2[3] = (Number) bigInteger0;
      numberArray2[4] = null;
      numberArray2[5] = (Number) bigInteger0;
      numberArray2[6] = (Number) bigInteger0;
      numberArray2[7] = null;
      numberArray2[8] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, numberArray0.length);
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, numberArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, doubleArray0.length);
      assertNotNull(list0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1311), 163, (-1311), 167, 163);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=167,HOUR_OF_DAY=167,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1.0, 163, (-101.8977023098893), (-101.8977023098893), (-101.8977023098893));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=167,HOUR_OF_DAY=167,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 1.0, (-1311), (-101.8977023098893), (-101.8977023098893), 2043.71807);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=167,HOUR_OF_DAY=167,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockGregorianCalendar0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=167,HOUR_OF_DAY=167,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, (-2009.033));
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2009.033), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) list0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-2009.033), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-101.8977023098893), range1.getUpperBound(), 0.01);
      assertEquals((-101.8977023098893), range1.getCentralValue(), 0.01);
      assertEquals((-101.8977023098893), range1.getLowerBound(), 0.01);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1311,MONTH=163,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1311,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=167,HOUR_OF_DAY=167,MINUTE=163,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      System.setCurrentTimeMillis((-1L));
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals((-2L), week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals((-1L), week1.getFirstMillisecond());
      assertFalse(week1.equals((Object)week0));
      assertNotNull(week1);
      
      MockDate mockDate0 = new MockDate(1);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = (MockDate)mockDate0.clone();
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals((-2L), week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals((-1L), week1.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(4, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      
      boolean boolean0 = linkedList0.add(defaultHighLowDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(linkedList0.contains(defaultHighLowDataset0));
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(8, week1.getWeek());
      assertEquals((-2L), week1.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals((-1L), week1.getFirstMillisecond());
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(4, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, 1);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range1, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.DefaultHighLowDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Double double0 = new Double((-2147483628));
      assertEquals((-2.147483628E9), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, (-2147483628));
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(171, 182);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(181, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[13][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(13, doubleArray0.length);
      assertNotNull(list0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(13, doubleArray0.length);
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NaN);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, number0);
      assertEquals(13, doubleArray0.length);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), 1079, 1079, 1079, 1079);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Comparable<TimePeriodValuesCollection>[] comparableArray0 = (Comparable<TimePeriodValuesCollection>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<TimePeriodValuesCollection>) oHLCDataItem0;
      comparableArray0[2] = (Comparable<TimePeriodValuesCollection>) oHLCDataItem0;
      double[][] doubleArray0 = new double[0][9];
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'columnKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1L), (-1L), (-1L), (-1L), (-1L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-1L);
      doubleArray3[1] = (double) (-1L);
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) (-1L);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = (double) (-1L);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) (-1L);
      doubleArray5[3] = (double) (-1L);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) (-1L);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = (double) (-1L);
      doubleArray6[5] = (double) (-1L);
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray6[8] = (double) (-1L);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = Double.POSITIVE_INFINITY;
      doubleArray7[2] = Double.POSITIVE_INFINITY;
      doubleArray7[3] = (double) (-1L);
      doubleArray7[4] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = Double.POSITIVE_INFINITY;
      doubleArray8[1] = (double) (-1L);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = Double.POSITIVE_INFINITY;
      doubleArray8[4] = Double.POSITIVE_INFINITY;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = (-1.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = Double.POSITIVE_INFINITY;
      doubleArray9[1] = Double.POSITIVE_INFINITY;
      doubleArray9[2] = (double) (-1L);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertNotSame(range1, range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(9, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 9999;
      doubleArray1[1] = (double) (-9999);
      doubleArray1[2] = (double) 9999;
      doubleArray1[3] = (double) 9999;
      doubleArray1[4] = (double) 9999;
      doubleArray1[5] = (double) 9999;
      doubleArray1[6] = (double) 9999;
      doubleArray1[7] = (double) (-9999);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-25.925760534861);
      doubleArray2[1] = (double) (-9999);
      doubleArray2[2] = (double) (-9999);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Number[][] numberArray0 = new Number[15][9];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) integer0;
      numberArray4[1] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray4[2] = (Number) bigInteger0;
      numberArray4[3] = (Number) integer0;
      numberArray4[4] = (Number) integer0;
      numberArray4[5] = (Number) integer0;
      numberArray4[6] = (Number) integer0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(15, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(15, list0.size());
      assertEquals(15, numberArray0.length);
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(15, list0.size());
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertEquals(15, numberArray0.length);
      assertNotNull(range0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, number0);
      assertEquals(15, numberArray0.length);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][9];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) integer0;
      numberArray4[1] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray4[2] = (Number) bigInteger0;
      numberArray4[3] = (Number) integer0;
      numberArray4[4] = (Number) integer0;
      numberArray4[5] = (Number) integer0;
      numberArray4[6] = (Number) integer0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(4, numberArray0.length);
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(300.0, range0.getUpperBound(), 0.01);
      assertEquals(300.0, range0.getLowerBound(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4, numberArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2268, 12);
      assertEquals(12, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2268, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      System.setCurrentTimeMillis((-1L));
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", object0.toString());
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (-1L));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = Range.combine(range1, range1);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range1, true);
      assertNotSame(range1, range2);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range2));
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2957.0);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-2012.243249006862);
      doubleArray1[4] = (-211.83546087491);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 3249.4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2957.0);
      doubleArray2[1] = 3249.4;
      doubleArray2[2] = (-2012.243249006862);
      doubleArray2[3] = (-211.83546087491);
      doubleArray2[4] = (-2012.243249006862);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = (-2957.0);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3249.4;
      doubleArray3[1] = 3249.4;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 3249.4;
      doubleArray3[4] = (-211.83546087491);
      doubleArray3[5] = 3249.4;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (-2957.0);
      doubleArray3[8] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2012.243249006862);
      doubleArray4[1] = 3249.4;
      doubleArray4[2] = (-2012.243249006862);
      doubleArray4[3] = 3249.4;
      doubleArray4[4] = (-2957.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-211.83546087491);
      doubleArray5[2] = (-211.83546087491);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = 3249.4;
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = (-2957.0);
      doubleArray7[1] = (-211.83546087491);
      doubleArray7[2] = (-211.83546087491);
      doubleArray7[3] = Double.NEGATIVE_INFINITY;
      doubleArray7[4] = Double.POSITIVE_INFINITY;
      doubleArray7[5] = 3249.4;
      doubleArray7[6] = (-576.419621703005);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = Double.POSITIVE_INFINITY;
      doubleArray8[1] = (-211.83546087491);
      doubleArray8[2] = Double.POSITIVE_INFINITY;
      doubleArray8[3] = Double.POSITIVE_INFINITY;
      doubleArray8[4] = (-211.83546087491);
      doubleArray8[5] = 4285.266181912329;
      doubleArray8[6] = 3249.4;
      doubleArray8[7] = Double.POSITIVE_INFINITY;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = 0.0;
      doubleArray9[1] = 0.0;
      doubleArray9[2] = 0.0;
      doubleArray9[3] = (-2012.243249006862);
      doubleArray9[4] = 4285.266181912329;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1931, 53, 1931, 1, 99.41789802);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1931, 0.5, (-1831.6020909301399), 1, 1931);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean1 = taskSeriesCollection0.hasListener((EventListener) null);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1884.6020909301399, range1.getLength(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals((-1831.6020909301399), range1.getLowerBound(), 0.01);
      assertEquals((-889.3010454650699), range1.getCentralValue(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      System.setCurrentTimeMillis(1);
      Object object0 = mockDate0.clone();
      assertNotSame(object0, mockDate0);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean2 = linkedList0.add((DefaultHighLowDataset) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range1, true);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1884.6020909301399, range1.getLength(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals((-1831.6020909301399), range1.getLowerBound(), 0.01);
      assertEquals((-889.3010454650699), range1.getCentralValue(), 0.01);
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertNull(range2);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1095, (-1), week0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-2), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertTrue(mockDate0.equals((Object)object0));
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotSame(mockDate0, object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-2), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertTrue(mockDate0.equals((Object)object0));
      assertNull(range3);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
//      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.0, Double.NEGATIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'std' > 0.
//         //
//         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) 9999, "org.jfree.data.xy.CategoryTableXYDataset");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((CategoryTableXYDataset) null);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(9999);
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertEquals("Thu Jan 01 00:00:09 GMT 1970", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:09 GMT 1970", object0.toString());
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (-9999));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range1, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[23][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(23, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(23, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(23, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      MockDate mockDate0 = new MockDate(155, 165, 304, 12, 156);
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Wed Jul 31 14:36:00 GMT 2069", mockDate0.toString());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(2069, quarter0.getYearValue());
      assertEquals(8279L, quarter0.getSerialIndex());
      assertEquals(3142506960000L, quarter0.getFirstMillisecond());
      assertEquals(3142506960000L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      
      timeTableXYDataset0.add((TimePeriod) quarter0, Double.NaN, "=zCzq+");
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Wed Jul 31 14:36:00 GMT 2069", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(3, quarter0.getQuarter());
      assertEquals(2069, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8279L, quarter0.getSerialIndex());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-505.1813961958761);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Invalid series: ", ",K?cYIi8", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = new Double((-505.1813961958761));
      assertEquals((-505.1813961958761), (double)double0, 0.01);
      assertNotNull(double0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 153);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(153, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-505.1813961958761), (-2025.2));
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 153, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Double double0 = new Double((-1557.2918247346558));
      assertEquals((-1557.2918247346558), (double)double0, 0.01);
      assertNotNull(double0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (0.0) <= upper (-3114.5836494693117).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Short short0 = new Short((short) (-690));
      assertEquals((short) (-690), (short)short0);
      assertNotNull(short0);
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.CHANGE_KEY;
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertNotNull(seriesChangeType0);
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (short) (-690), 46);
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals((-690), seriesChangeInfo0.getIndex1());
      assertEquals(46, seriesChangeInfo0.getIndex2());
      assertNotNull(seriesChangeInfo0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(short0, seriesChangeInfo0);
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals((-690), seriesChangeInfo0.getIndex1());
      assertEquals(46, seriesChangeInfo0.getIndex2());
      assertNotNull(seriesChangeEvent0);
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("SeriesChangeType.CHANGE_KEY", seriesChangeType0.toString());
      assertEquals((-690), seriesChangeInfo0.getIndex1());
      assertEquals(46, seriesChangeInfo0.getIndex2());
      assertEquals(6, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(6, doubleArray0.length);
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(range0);
      
      Year year0 = new Year((-533));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals((-533L), year0.getSerialIndex());
      assertEquals("-533", year0.toString());
      assertEquals((-533), year0.getYear());
      assertNotNull(year0);
      
      Week week0 = new Week(892, year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals((-533L), year0.getSerialIndex());
      assertEquals("-533", year0.toString());
      assertEquals((-533), year0.getYear());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-28125L), week0.getSerialIndex());
      assertEquals((-533), week0.getYearValue());
      assertEquals(124, week0.getWeek());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals((-533L), year0.getSerialIndex());
      assertEquals("-533", year0.toString());
      assertEquals((-533), year0.getYear());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-28125L), week0.getSerialIndex());
      assertEquals((-533), week0.getYearValue());
      assertEquals(124, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(123, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-28126L), week1.getSerialIndex());
      assertEquals((-533), week1.getYearValue());
      assertFalse(week1.equals((Object)week0));
      assertNotNull(week1);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(892, (short) (-690), week1, zoneInfo0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals((-533L), year0.getSerialIndex());
      assertEquals("-533", year0.toString());
      assertEquals((-533), year0.getYear());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-28125L), week0.getSerialIndex());
      assertEquals((-533), week0.getYearValue());
      assertEquals(124, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(123, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-28126L), week1.getSerialIndex());
      assertEquals((-533), week1.getYearValue());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-691), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, true);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals((-533L), year0.getSerialIndex());
      assertEquals("-533", year0.toString());
      assertEquals((-533), year0.getYear());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-28125L), week0.getSerialIndex());
      assertEquals((-533), week0.getYearValue());
      assertEquals(124, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(123, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals((-28126L), week1.getSerialIndex());
      assertEquals((-533), week1.getYearValue());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-691), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(6, doubleArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      assertNotNull(list0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockDate mockDate0 = new MockDate(9999, 9999, 0, (-795), 0, (-795));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, (-812.5412748909), (-812.5412748909), 211.7332281799, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 26 20:46:45 GMT 12732", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-9999), (-812.5412748909), 9999, (-812.5412748909), 331.529681279231);
      assertEquals("Fri Feb 26 20:46:45 GMT 12732", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 9999, (-101.8977023098893), 9999, 1321.37985643, (-1.667203078E12));
      assertEquals("Fri Feb 26 20:46:45 GMT 12732", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = new Range((-1234.5), (-202.1911379467283));
      assertEquals((-202.1911379467283), range0.getUpperBound(), 0.01);
      assertEquals((-718.3455689733642), range0.getCentralValue(), 0.01);
      assertEquals(1032.3088620532717, range0.getLength(), 0.01);
      assertEquals((-1234.5), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) list0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      double[] doubleArray0 = new double[4];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 9999, 1079, (-2146826665), 11);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2146826665,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0L, long0);
      
      doubleArray0[0] = (double) (-9999);
      doubleArray0[1] = (double) 9999;
      doubleArray0[2] = (double) 9999;
      doubleArray0[3] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-9999.0), 9999.0, 9999.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 1.39240928132E12, 5, (-9999.0));
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(5, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.39240928132E12, xYSeries0.getMaxX(), 0.01);
      assertEquals((-9999.0), xYSeries0.getMaxY(), 0.01);
      assertEquals((-2.699338175818633E40), xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertArrayEquals(new double[] {(-9999.0), 9999.0, 9999.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1263;
      doubleArray1[1] = (double) 1263;
      doubleArray1[2] = (double) 1263;
      doubleArray1[4] = (double) 1263;
      doubleArray1[5] = (double) 1263;
      doubleArray1[6] = (double) 1263;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-619), 1263);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1263, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-619), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[2] = (double) 305;
      doubleArray1[3] = (double) 305;
      doubleArray1[5] = (double) 305;
      doubleArray1[6] = (double) 305;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(305.0, range0.getLength(), 0.01);
      assertEquals(305.0, range0.getUpperBound(), 0.01);
      assertEquals(152.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 2022.026;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = (-235.457252146292);
      doubleArray1[4] = 4096.7;
      doubleArray1[5] = 545.3004393740699;
      doubleArray1[6] = (-1670.0932341379);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2022.026;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 545.3004393740699;
      doubleArray2[3] = 545.3004393740699;
      doubleArray2[4] = (-1670.0932341379);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 5
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) (-9999), "org.jfree.data.xy.CategoryTableXYDataset");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[13][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(13, doubleArray0.length);
      assertNotNull(list0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(1094, 1080, 8, (-405), 8, 1384);
      assertNotNull(mockDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(8);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Month month0 = new Month(mockDate0, timeZone0);
      assertEquals("Sat Dec 22 03:31:04 GMT 3083", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(37008L, month0.getSerialIndex());
      assertEquals(35153580664000L, month0.getFirstMillisecond());
      assertEquals(12, month0.getMonth());
      assertEquals(3083, month0.getYearValue());
      assertEquals(35153580664000L, month0.getLastMillisecond());
      assertNotNull(month0);
      
      Month month1 = (Month)month0.next();
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals("Sat Dec 22 03:31:04 GMT 3083", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(37008L, month0.getSerialIndex());
      assertEquals(35153580664000L, month0.getFirstMillisecond());
      assertEquals(12, month0.getMonth());
      assertEquals(3083, month0.getYearValue());
      assertEquals(35153580664000L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(3084, month1.getYearValue());
      assertEquals(37009L, month1.getSerialIndex());
      assertEquals(1, month1.getMonth());
      assertFalse(month1.equals((Object)month0));
      assertNotNull(month1);
      
      defaultMultiValueCategoryDataset0.add(list0, month0, month1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals("Sat Dec 22 03:31:04 GMT 3083", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(37008L, month0.getSerialIndex());
      assertEquals(35153580664000L, month0.getFirstMillisecond());
      assertEquals(12, month0.getMonth());
      assertEquals(3083, month0.getYearValue());
      assertEquals(35153580664000L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(3084, month1.getYearValue());
      assertEquals(37009L, month1.getSerialIndex());
      assertEquals(1, month1.getMonth());
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertEquals(13, doubleArray0.length);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      XYDataItem xYDataItem0 = new XYDataItem((double) (-9999), (double) (-9999));
      assertEquals((-9999.0), xYDataItem0.getXValue(), 0.01);
      assertEquals((-9999.0), xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 9999;
      numberArray2[2] = (Number) 9999;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(9999.0, range0.getCentralValue(), 0.01);
      assertEquals(9999.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, numberArray0.length);
      assertNotNull(range0);
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(9999.0, range0.getCentralValue(), 0.01);
      assertEquals(9999.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(2, numberArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Month month0 = new Month(mockDate0, timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals(1970, month0.getYearValue());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1, month0.getMonth());
      assertEquals(0L, month0.getFirstMillisecond());
      assertEquals(0L, month0.getLastMillisecond());
      assertNotNull(month0);
      
      timeTableXYDataset0.add((TimePeriod) month0, (double) 0L, "JDBCCategoryDataset.executeQuery() : insufficient columns returned from the database.");
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.POSITIVE_INFINITY);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 5, Double.POSITIVE_INFINITY, 5, "i+:TG'");
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(5, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(range0);
      
      System.setCurrentTimeMillis(1000L);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[][] doubleArray1 = new double[6][3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertNotNull(range0);
      
      Number[][] numberArray0 = new Number[5][9];
      Number[] numberArray1 = new Number[5];
      Long long0 = Long.getLong("Null 'rowKeys' argument.", 0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      numberArray1[0] = (Number) long0;
      Float float0 = new Float(2465.22883150514);
      assertEquals(2465.2288F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[1] = (Number) float0;
      Byte byte0 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte0);
      assertNotNull(byte0);
      
      numberArray1[2] = (Number) byte0;
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      numberArray1[3] = number0;
      Float float1 = new Float(2465.22883150514);
      assertEquals(2465.2288F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      numberArray1[4] = (Number) float1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) long0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) long0;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) float0;
      numberArray3[3] = (Number) float0;
      numberArray3[4] = (Number) byte0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) float1;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) byte0;
      numberArray4[3] = (Number) integer0;
      numberArray4[4] = (Number) integer0;
      numberArray4[5] = number0;
      numberArray4[6] = number0;
      numberArray4[7] = (Number) long0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) float1;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getRowCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(5, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[][] doubleArray0 = new double[13][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(13, list0.size());
      assertEquals(13, doubleArray0.length);
      assertNotNull(list0);
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1L), (-1368.8), (-1L), (-1L), (-1368.8));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (-1.0) <= upper (-1368.8).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertEquals(6, doubleArray0.length);
      assertNotNull(list0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(range0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) list0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      MockDate mockDate0 = new MockDate((-1243L));
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(23, hour0.getHour());
      assertEquals((-1243L), hour0.getFirstMillisecond());
      assertEquals((-1243L), hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, Double.POSITIVE_INFINITY, "u_.FtS9'2<bB,tU");
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, hour0.getHour());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {23.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 23, 508.23487, 0, hour0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) (-9999), "org.jfree.data.xy.CategoryTableXYDataset");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) (-9999);
      numberArray1[1] = (Number) (-9999);
      numberArray1[2] = (Number) (-9999);
      numberArray1[3] = (Number) (-9999);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      numberArray1[4] = number0;
      numberArray1[5] = (Number) (-9999);
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9_;00P3D]=^:^,+S", "PieDatasetChangeType.NEW", numberArray0);
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-9999));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, numberArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      year0.peg(mockGregorianCalendar0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      double double0 = timeTableXYDataset0.getDomainLowerBound(false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, double0, 0.01);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) (-9999), "org.jfree.data.xy.CategoryTableXYDataset");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNotSame(range1, range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-9999), (-735));
      assertEquals((-735), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-9999), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 9999, (-9999));
      assertEquals((-735), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-9999), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(9999, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-9999), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, 2.0, ",K?cYIi 8\u0006");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      timeTableXYDataset0.setSelectionState(xYSeriesCollection0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(2.0, double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertEquals(6, doubleArray0.length);
      assertNotNull(list0);
      
      Double double0 = new Double(3628.906);
      assertEquals(3628.906, (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(double0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(double0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.contains(double0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3628.906, range0.getUpperBound(), 0.01);
      assertEquals(3628.906, range0.getCentralValue(), 0.01);
      assertEquals(3628.906, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertEquals(6, doubleArray0.length);
      assertNotNull(list0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockDate mockDate0 = new MockDate(9999, 9999, 0, (-817), 0, (-817));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, (-812.5412748909), (-812.5412748909), 211.7332281799, Double.POSITIVE_INFINITY);
      assertEquals("Thu Feb 25 22:46:23 GMT 12732", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.7976931348623157E308, Double.POSITIVE_INFINITY, 0, 0, (-9999));
      assertEquals("Thu Feb 25 22:46:23 GMT 12732", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-9999), (-812.5412748909), 9999, (-812.5412748909), 331.529681279231);
      assertEquals("Thu Feb 25 22:46:23 GMT 12732", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 1.0, (-101.8977023098893), 1.0, 1321.37985643, (-1.667203078E12));
      assertEquals("Thu Feb 25 22:46:23 GMT 12732", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1.0, 9999.0, 211.7332281799, 1.7976931348623157E308, (-9999));
      assertEquals("Thu Feb 25 22:46:23 GMT 12732", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = new Range((-1234.5), (-202.1911379467283));
      assertEquals((-202.1911379467283), range0.getUpperBound(), 0.01);
      assertEquals(1032.3088620532717, range0.getLength(), 0.01);
      assertEquals((-1234.5), range0.getLowerBound(), 0.01);
      assertEquals((-718.3455689733642), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) list0, range0, false);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-202.1911379467283), range0.getUpperBound(), 0.01);
      assertEquals(1032.3088620532717, range0.getLength(), 0.01);
      assertEquals((-1234.5), range0.getLowerBound(), 0.01);
      assertEquals((-718.3455689733642), range0.getCentralValue(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(6, doubleArray0.length);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNull(range1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), 1263, 1263, 1255, 1261);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, (-4682.62307), ",K?cYIi 8\u0006");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-4682.62307), double0, 0.01);
      
      Double double1 = new Double((-4682.62307));
      assertEquals((-4682.62307), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-4682.62307), range0.getUpperBound(), 0.01);
      assertEquals((-4682.62307), range0.getCentralValue(), 0.01);
      assertEquals((-4682.62307), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset("The number of column keys does not match the number of columns in the data array.", "Column key (", "O~+", "_'}1z30u5YF1q&*qrw");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1263, 1263, 1263, 1263, 1263, 1263);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), 1263, 1263, 1263, 1263);
      assertEquals("Sat Nov 07 12:24:03 GMT 3271", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[10];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Sat Nov 07 12:24:03 GMT 3271", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Sat Nov 07 12:24:03 GMT 3271", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(10, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate0, "null13", "null13");
      assertEquals("Sat Nov 07 12:24:03 GMT 3271", mockDate0.toString());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("null13", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("null13", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals("Sat Nov 07 12:24:03 GMT 3271", mockDate0.toString());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("null13", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("null13", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals("Sat Nov 07 12:24:03 GMT 3271", mockDate0.toString());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("null13", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("null13", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Second second0 = new Second(mockDate0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      timeTableXYDataset0.add((TimePeriod) second0, (-326.115), "qikz@12");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Random.setNextRandom((-2339));
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((CategoryTableXYDataset) null);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(999.0, range0.getLength(), 0.01);
      assertEquals(1.3924092818195E12, range0.getCentralValue(), 0.01);
      assertEquals(1.392409282319E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2137.9110691658902), (-4152.033167035795));
      assertEquals((-2137.9110691658902), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-4152.033167035795), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(0L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) millisecond0, (Comparable) millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(0L, millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getFirstMillisecond());
      
      Double double0 = new Double(2809.32397069949);
      assertEquals(2809.32397069949, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList<Double> arrayList1 = new ArrayList<Double>();
      assertFalse(arrayList1.contains(2809.32397069949));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      boolean boolean0 = arrayList1.add(double0);
      assertTrue(arrayList1.contains(2809.32397069949));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList1, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 1263;
      MockDate mockDate0 = new MockDate(1263, 1263, 1263, 1263, 1263, 1263);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), 1263, 1263, 1263, 1263);
      assertEquals("Sat Nov 07 12:24:03 GMT 3271", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Sat Nov 07 12:24:03 GMT 3271", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = new Range((-1.7976931348623157E308), (-3580.20953975336));
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals((-3580.20953975336), range0.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Number[][] numberArray0 = new Number[2][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("ZYy~A#MK", "ZYy~A#MK", numberArray0);
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.setValue(2.0, (Comparable) "ZYy~A#MK", (Comparable) "ZYy~A#MK");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) "ZYy~A#MK");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double((-1048.66083247));
      assertEquals((-1048.66083247), (double)double0, 0.01);
      assertNotNull(double0);
      
      MockDate mockDate0 = new MockDate(2, 2, 39);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", mockDate0.toString());
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", mockDate0.toString());
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", date0.toString());
      assertNotNull(date0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains((-1048.66083247)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Double double1 = new Double(39);
      assertEquals(39.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = arrayList0.add(double1);
      assertFalse(arrayList0.contains((-1048.66083247)));
      assertTrue(arrayList0.contains(double1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 39, (-505.78180491012097), (-1422.482774842), 2, (-2264.19781));
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-505.78180491012097), 4.1082467043E13, (-1422.482774842), (-1491.00211), 382.3482898086689);
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 382.3482898086689, 1.5, Double.POSITIVE_INFINITY, 382.3482898086689, (-979.0));
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 2, (-979.0), (-1048.66083247), Double.NaN, (-2264.19781));
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem3);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem3;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", mockDate0.toString());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2.0541233520788758E13, range0.getCentralValue(), 0.01);
      assertEquals(4.1082467043E13, range0.getUpperBound(), 0.01);
      assertEquals(4.1082467044422484E13, range0.getLength(), 0.01);
      assertEquals((-1422.482774842), range0.getLowerBound(), 0.01);
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", mockDate0.toString());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Tue Apr 08 00:00:00 GMT 1902", mockDate0.toString());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2.137536E12), range1.getLowerBound(), 0.01);
      assertEquals((-2.137536E12), range1.getUpperBound(), 0.01);
      assertEquals((-2.137536E12), range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(42.6265781);
      assertEquals(42.6265781, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer(918);
      assertEquals(918, (int)integer0);
      assertNotNull(integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) integer0, (Comparable) double0, (Comparable) double0);
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(double0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Double double1 = new Double(42.6265781);
      assertEquals(42.6265781, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = arrayList0.add(double1);
      assertTrue(arrayList0.contains(42.6265781));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(42.6265781));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(960.6265781, range0.getUpperBound(), 0.01);
      assertEquals(1836.0, range0.getLength(), 0.01);
      assertEquals(42.62657809999996, range0.getCentralValue(), 0.01);
      assertEquals((-875.3734219), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(138);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(17, serialDate0.getDayOfMonth());
      assertEquals(138, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(5, serialDate0.getMonth());
      assertEquals(1900, serialDate0.getYYYY());
      assertNotNull(serialDate0);
      
      Integer integer0 = new Integer((-1703));
      assertEquals((-1703), (int)integer0);
      assertNotNull(integer0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      timeTableXYDataset0.add((TimePeriod) second0, Double.NEGATIVE_INFINITY, "u_.FtS9'2<bB,tU");
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.POSITIVE_INFINITY);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1563.9183660834);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (-1168.819915694);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1563.9183660834);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-1563.9183660834);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = (-1168.819915694);
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 1.5;
      doubleArray2[7] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = (-1563.9183660834);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = (-1168.819915694);
      doubleArray3[5] = 1420.8138988644087;
      doubleArray3[6] = (-1.0);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, doubleArray0.length);
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 234.72342);
      assertNotSame(range1, range0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(234.72342, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(3, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1263;
      doubleArray0[1] = (double) 1263;
      doubleArray0[2] = (double) 1263;
      doubleArray0[3] = (double) 1263;
      doubleArray0[4] = (double) 1263;
      doubleArray0[5] = (double) 1263;
      doubleArray0[6] = (double) 1263;
      doubleArray0[7] = 3654.7;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 3654.7}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.0), 3654.7, 50, 1263.0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3.183134145263778E28, xYSeries0.getMaxY(), 0.01);
      assertEquals(3654.7, xYSeries0.getMaxX(), 0.01);
      assertEquals((-2391.7), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(50, xYSeries0.getItemCount());
      assertArrayEquals(new double[] {1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 3654.7}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3.183134145263778E28, xYSeries0.getMaxY(), 0.01);
      assertEquals(3654.7, xYSeries0.getMaxX(), 0.01);
      assertEquals((-2391.7), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(50, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 3654.7}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3.183134145263778E28, xYSeries0.getMaxY(), 0.01);
      assertEquals(3654.7, xYSeries0.getMaxX(), 0.01);
      assertEquals((-2391.7), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(50, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(3655.2, range0.getUpperBound(), 0.01);
      assertEquals(1826.85, range0.getCentralValue(), 0.01);
      assertEquals((-1.5), range0.getLowerBound(), 0.01);
      assertEquals(3656.7, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 1263.0, 3654.7}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 50, 1263);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1263, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(50, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1263, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(50, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      
      timeTableXYDataset0.add((TimePeriod) regularTimePeriod0, (-4682.62307), ",K?cYIi8\u0006");
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-4682.62307), double0, 0.01);
      
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(keyToGroupMap0);
      
      int int0 = keyToGroupMap0.getKeyCount(",K?cYIi8\u0006");
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, int0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      year0.peg(mockGregorianCalendar0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Random.setNextRandom((-9999));
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack1 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 9999, (-375));
      assertEquals(9999, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-375), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, (-9999));
      assertEquals(9999, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-375), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) year0, (double) (-375));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(6, doubleArray0.length);
      assertNotNull(list0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 9999);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(9999.0, range1.getUpperBound(), 0.01);
      assertEquals(4999.5, range1.getCentralValue(), 0.01);
      assertEquals(9999.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(6, doubleArray0.length);
      assertNotNull(range1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) list0, range0, true);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(range0, range1);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(range0.equals((Object)range1));
      assertEquals(6, doubleArray0.length);
      assertEquals(0, oHLCDataItemArray0.length);
      assertNull(range2);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) year0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-505.78180491012097);
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Mz&Q0M#^:Qkz(", ",K?cYIi8", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.fireSelectionEvent();
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double((-505.78180491012097));
      assertEquals((-505.78180491012097), (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-505.78180491012097), range0.getLowerBound(), 0.01);
      assertEquals((-252.89090245506048), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(505.78180491012097, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotSame(range1, range0);
      assertEquals((-505.78180491012097), range1.getUpperBound(), 0.01);
      assertEquals((-505.78180491012097), range1.getCentralValue(), 0.01);
      assertEquals((-505.78180491012097), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1263, 1263, 1263, 1263, 1263, 1263);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.7976931348623157E308);
      doubleArray2[1] = (double) 9;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("h)>", (String) null, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 9);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(9, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 9, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1263, 1263, 1263, 1263, 1263, 1444);
      assertNotNull(mockDate0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Double double0 = new Double(941.992375669687);
      assertEquals(941.992375669687, (double)double0, 0.01);
      assertNotNull(double0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(941.992375669687));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), (-161.92841310400507), Double.NEGATIVE_INFINITY, (-2264.19781), 1263);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      boolean boolean1 = mockDate0.before(date0);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3025.1241521, 3025.1241521, 3025.1241521, Double.NEGATIVE_INFINITY, (-161.92841310400507));
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 941.992375669687, (-161.92841310400507), 1263, 1444, Double.NEGATIVE_INFINITY);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), Double.NEGATIVE_INFINITY, 1263, 1444, 1444);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(3025.1241521, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) mockDate0);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertFalse(arrayList0.contains(Double.NEGATIVE_INFINITY));
      assertTrue(arrayList0.contains(941.992375669687));
      assertNotSame(range1, range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(4.1082467224E13, range1.getUpperBound(), 0.01);
      assertEquals(4.1082467224E13, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(4.1082467224E13, range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(3025.1241521, range2.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = year0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392409281320L, long0);
      
      year0.peg(mockGregorianCalendar0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) 1392409281320L, "qikz@12");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, number0);
      assertNotNull(number0);
      
      Random.setNextRandom((-9999));
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((CategoryTableXYDataset) null);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      timeTableXYDataset0.add((TimePeriod) second0, (-1611.6), "org.jfree.data.xy.CategoryTableXYDataset");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(999.0, range0.getLength(), 0.01);
      assertEquals(1.392409282319E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.3924092818195E12, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = new Integer((-9999));
      assertEquals((-9999), long0);
      
      Class<DefaultMultiValueCategoryDataset> class0 = DefaultMultiValueCategoryDataset.class;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, date0, (TimeZone) null);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNull(regularTimePeriod0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, 203.9686211525, "qikz@12");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = new Range(9999, 9999);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(9999.0, range0.getCentralValue(), 0.01);
      assertEquals(9999.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(203.9686211525, number0);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(203.9686211525, range1.getUpperBound(), 0.01);
      assertEquals(203.9686211525, range1.getLowerBound(), 0.01);
      assertEquals(203.9686211525, range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = new Double(1111.549);
      assertEquals(1111.549, (double)double0, 0.01);
      assertNotNull(double0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (double) 9999, "qV>Dz@1");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      MockDate mockDate0 = new MockDate(9999, 1078, 158, 551, 23, 158);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1111.549, (-3140.3635956), 1078, 158, (-1.7976931348623157E308));
      assertEquals("Sat Apr 29 23:25:38 GMT 11989", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(9999.0, number0);
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Year year0 = new Year(1076);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("1076", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1076L, year0.getSerialIndex());
      assertEquals(1076, year0.getYear());
      assertNotNull(year0);
      
      Year year1 = (Year)year0.next();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals("1076", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1076L, year0.getSerialIndex());
      assertEquals(1076, year0.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1077L, year1.getSerialIndex());
      assertEquals("1077", year1.toString());
      assertEquals(1077, year1.getYear());
      assertFalse(year1.equals((Object)year0));
      assertNotNull(year1);
      
      timeTableXYDataset0.add((TimePeriod) year1, (-322.4), "org.jfree.data.xy.CategoryTableXYDataset");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("1076", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1076L, year0.getSerialIndex());
      assertEquals(1076, year0.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1077L, year1.getSerialIndex());
      assertEquals("1077", year1.toString());
      assertEquals(1077, year1.getYear());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      int int0 = 38;
      int int1 = (-2315);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-2315));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1263, 1263, 1263, 1263, 1263, 1444);
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      int int0 = 28;
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 28);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(vector0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-2456));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double((-342.31));
      assertEquals((-342.31), (double)double0, 0.01);
      assertNotNull(double0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (-1611.6), "org.jfree.data.xy.CategoryTableXYDataset");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 38);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 38, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1166));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1166), categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (-1065.40459734784));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = new Double((-342.31));
      assertEquals((-342.31), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-342.31);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-342.31);
      doubleArray1[3] = (-342.31);
      doubleArray1[4] = (-342.31);
      doubleArray1[5] = (-342.31);
      doubleArray1[6] = (-342.31);
      doubleArray1[7] = (-1596.590492093);
      doubleArray1[8] = (-342.31);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertNotNull(list0);
      
      int int0 = defaultIntervalCategoryDataset0.getColumnIndex((-342.31));
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-797.7952460465), range0.getCentralValue(), 0.01);
      assertEquals(1597.590492093, range0.getLength(), 0.01);
      assertEquals((-1596.590492093), range0.getLowerBound(), 0.01);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(range1, range0);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals((-797.7952460465), range1.getCentralValue(), 0.01);
      assertEquals(1597.590492093, range1.getLength(), 0.01);
      assertEquals((-1596.590492093), range1.getLowerBound(), 0.01);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1263, 1263, 1263, 1263, 1263, 1444);
      assertNotNull(mockDate0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Double double0 = new Double(941.992375669687);
      assertEquals(941.992375669687, (double)double0, 0.01);
      assertNotNull(double0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(941.992375669687));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-727.3), (-161.760945), Double.NEGATIVE_INFINITY, (-2264.19781), 1263);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3025.1241521, 3025.1241521, 3025.1241521, 6.283185307179586, (-161.760945));
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 941.992375669687, (-161.760945), 1263, 1444, Double.NEGATIVE_INFINITY);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), Double.NEGATIVE_INFINITY, 1263, 1444, (-727.3));
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(3025.1241521, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) mockDate0);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 1444);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertFalse(arrayList0.contains((-2264.19781)));
      assertTrue(arrayList0.contains(941.992375669687));
      assertNotSame(range1, range0);
      assertEquals("Sat Nov 07 12:27:04 GMT 3271", mockDate0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(4.1082467224E13, range1.getUpperBound(), 0.01);
      assertEquals(4.1082467224E13, range1.getCentralValue(), 0.01);
      assertEquals(4.1082467224E13, range1.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(range1.equals((Object)range0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = new Double((-342.31));
      assertEquals((-342.31), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains((-342.31)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains((-342.31)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(double0);
      assertTrue(arrayList0.contains((-342.31)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      
      Number[][] numberArray0 = new Number[5][1];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) double0;
      numberArray2[4] = (Number) double0;
      numberArray2[5] = (Number) double0;
      numberArray2[6] = (Number) double0;
      numberArray2[7] = (Number) double0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) double0;
      numberArray3[1] = (Number) double0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) double0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2478.046033);
      doubleArray1[1] = 190.8287;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = (-2688.3434);
      doubleArray1[4] = (-1651.8457946687683);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1651.8457946687683);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 190.8287;
      doubleArray3[1] = 190.8287;
      doubleArray3[2] = (-1651.8457946687683);
      doubleArray3[3] = 1.5;
      doubleArray3[4] = (-1651.8457946687683);
      doubleArray3[5] = 190.8287;
      doubleArray3[6] = 190.8287;
      doubleArray3[7] = 190.8287;
      doubleArray3[8] = (-1955.217991);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-2478.046033);
      doubleArray5[1] = (-1651.8457946687683);
      doubleArray5[2] = 190.8287;
      doubleArray5[3] = 1.5;
      doubleArray5[4] = (-2688.3434);
      doubleArray5[5] = (-2688.3434);
      doubleArray5[6] = (-1651.8457946687683);
      doubleArray5[7] = (-1955.217991);
      doubleArray5[8] = 306.870094;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-1458.0192102668586);
      doubleArray6[1] = 306.870094;
      doubleArray6[2] = 1.5;
      doubleArray6[3] = (-2688.3434);
      doubleArray6[4] = 190.8287;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 1.5;
      doubleArray7[1] = 190.8287;
      doubleArray7[2] = 10202.9686211525;
      doubleArray7[3] = 740.0;
      doubleArray7[4] = (-2688.3434);
      doubleArray7[5] = 1.7976931348623157E308;
      doubleArray7[6] = 306.870094;
      doubleArray7[7] = 306.870094;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = (-1458.0192102668586);
      doubleArray8[1] = (-1569.9997);
      doubleArray8[2] = 306.870094;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1.7976931348623157E308));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = year0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1392409281320L, long0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, 203.9686211525, "qikz@12");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = new Range(9999, 9999);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(9999.0, range0.getCentralValue(), 0.01);
      assertEquals(9999.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(203.9686211525, number0);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNotSame(range1, range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (-3514.34703), "qikz@12");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 9999);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(3514.34703, range0.getLength(), 0.01);
      assertEquals(8241.826485, range0.getCentralValue(), 0.01);
      assertEquals(6484.65297, range0.getLowerBound(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      MockDate mockDate1 = new MockDate(0L);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 1, (-2633.0), 1, 99.41789802, 99.41789802);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, 1, 1, (-1969.226), 0.0, 6.283185307179586);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 0L, (-1585.51736), (-2633.0), 6.283185307179586, 2025.925151574);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem1;
      oHLCDataItemArray0[7] = oHLCDataItem1;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset1 = (DefaultOHLCDataset)defaultOHLCDataset0.clone();
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(9, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(double0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(6.9620464066E11, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLength(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(320L);
      assertEquals(320L, fixedMillisecond0.getSerialIndex());
      assertEquals(320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(fixedMillisecond0);
      assertEquals(320L, fixedMillisecond0.getSerialIndex());
      assertEquals(320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertEquals(320L, fixedMillisecond0.getSerialIndex());
      assertEquals(320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("!");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      simpleHistogramDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(320L, fixedMillisecond0.getSerialIndex());
      assertEquals(320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertEquals(320L, fixedMillisecond0.getSerialIndex());
      assertEquals(320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(320L, fixedMillisecond0.getSerialIndex());
      assertEquals(320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number1);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 320L;
      doubleArray1[1] = (double) 320L;
      doubleArray1[2] = (double) 320L;
      doubleArray1[3] = (double) 320L;
      doubleArray1[4] = (double) 320L;
      doubleArray1[5] = (double) 320L;
      doubleArray1[6] = (double) 320L;
      doubleArray1[7] = (double) 320L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 320L;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 320L;
      doubleArray3[1] = (double) 320L;
      doubleArray3[2] = (double) 320L;
      doubleArray3[3] = 192.938716833001;
      doubleArray3[4] = (double) 320L;
      doubleArray3[5] = (double) 320L;
      doubleArray3[6] = (double) 320L;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      defaultIntervalCategoryDataset0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(10, doubleArray0.length);
      assertNotNull(list0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Object object0 = defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertNotSame(object0, defaultStatisticalCategoryDataset0);
      assertTrue(object0.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(object0);
      
      Double double0 = new Double((-204.1891049466));
      assertEquals((-204.1891049466), (double)double0, 0.01);
      assertNotNull(double0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) bigInteger0, (Comparable) double0, (Comparable) bigInteger0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      
      Double double1 = new Double((-204.1891049466));
      assertEquals((-204.1891049466), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = arrayList0.add(double1);
      assertTrue(arrayList0.contains((-204.1891049466)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains((-204.1891049466)));
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-205.1891049466), range0.getLowerBound(), 0.01);
      assertEquals((-204.1891049466), range0.getCentralValue(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals((-203.1891049466), range0.getUpperBound(), 0.01);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("6+:GA", oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Stack<JDBCXYDataset> stack0 = new Stack<JDBCXYDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      Range range1 = new Range(1602.053638300426, 1602.053638300426);
      assertEquals(1602.053638300426, range1.getUpperBound(), 0.01);
      assertEquals(1602.053638300426, range1.getCentralValue(), 0.01);
      assertEquals(1602.053638300426, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range1, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1602.053638300426, range1.getUpperBound(), 0.01);
      assertEquals(1602.053638300426, range1.getCentralValue(), 0.01);
      assertEquals(1602.053638300426, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNull(range2);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(10, 2, (-1757), 273, (-1757), 2);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1757), (-1961.24617), (-1757), (-1.7976931348623157E308), 0.0);
      assertEquals("Thu May 18 03:43:02 GMT 1905", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Thu May 18 03:43:02 GMT 1905", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals("Thu May 18 03:43:02 GMT 1905", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Thu May 18 03:43:02 GMT 1905", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.039372218E12), range0.getUpperBound(), 0.01);
      assertEquals((-2.039372218E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.039372218E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      double double0 = (-505.78180491012097);
      doubleArray1[0] = (-505.78180491012097);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Mz&Q0M#^:Qkz(", ",K?cYIi8", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double1 = new Double((-505.78180491012097));
      assertEquals((-505.78180491012097), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) double1, (-682.843029368798), 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      System.setCurrentTimeMillis(0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(boolean1);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertEquals((-505.78180491012097), range0.getUpperBound(), 0.01);
      assertEquals((-505.78180491012097), range0.getCentralValue(), 0.01);
      assertEquals((-505.78180491012097), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
//      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null, dateFormatSymbols0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("java.text.SimpleDateFormat", e);
//      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = year0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1392409281320L, long0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (-3514.347032160706), "qikz@12");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-3514.347032160706), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = year0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392409281320L, long0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, 203.9686211525, "qikz@12");
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 9999);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(9999.0, range0.getLowerBound(), 0.01);
      assertEquals(10202.9686211525, range0.getUpperBound(), 0.01);
      assertEquals(10100.98431057625, range0.getCentralValue(), 0.01);
      assertEquals(203.96862115250042, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Object object0 = defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertNotSame(object0, defaultStatisticalCategoryDataset0);
      assertTrue(object0.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(object0);
      
      Double double0 = new Double((-1557.0));
      assertEquals((-1557.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertEquals((-1557.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1557.0, range0.getLength(), 0.01);
      assertEquals((-778.5), range0.getCentralValue(), 0.01);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 1602.053638300426);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals((-1557.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1557.0, range0.getLength(), 0.01);
      assertEquals((-778.5), range0.getCentralValue(), 0.01);
      assertEquals(3159.053638300426, range1.getLength(), 0.01);
      assertEquals(1602.053638300426, range1.getUpperBound(), 0.01);
      assertEquals(22.526819150212987, range1.getCentralValue(), 0.01);
      assertEquals((-1557.0), range1.getLowerBound(), 0.01);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) arrayList0, range0, true);
      assertFalse(arrayList0.contains(double0));
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertNotSame(range0, range1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1557.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1557.0, range0.getLength(), 0.01);
      assertEquals((-778.5), range0.getCentralValue(), 0.01);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      assertFalse(range0.equals((Object)range1));
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3654.7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3654.7;
      doubleArray3[1] = 3654.7;
      doubleArray3[2] = 3654.7;
      doubleArray3[3] = 3654.7;
      doubleArray3[4] = 3654.7;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 3654.7;
      doubleArray4[1] = 3654.7;
      doubleArray4[2] = (-2113.549239339);
      doubleArray4[3] = 3654.7;
      doubleArray4[4] = 3654.7;
      doubleArray4[5] = 3654.7;
      doubleArray4[6] = 3654.7;
      doubleArray4[7] = 3654.7;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 3654.7;
      doubleArray5[1] = 3654.7;
      doubleArray5[2] = (-2113.549239339);
      doubleArray5[3] = (-2113.549239339);
      doubleArray5[4] = (-2113.549239339);
      doubleArray5[5] = (-2113.549239339);
      doubleArray5[6] = 3654.7;
      doubleArray5[7] = (-2113.549239339);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double double0 = new Double((-342.31));
      assertEquals((-342.31), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains((-342.31)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains((-342.31)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(double0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (-3514.347032160706), "qikz@12");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = new Range((-9999), 53);
      assertEquals(10052.0, range0.getLength(), 0.01);
      assertEquals(53.0, range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals((-4973.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-3514.347032160706), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3514.347032160706), range1.getCentralValue(), 0.01);
      assertEquals((-3514.347032160706), range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "\"iC@";
      double[][] doubleArray0 = new double[4][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\"iC@", "\"iC@", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int0 = (-1);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "\"iC@", 181.98357309034, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double((-342.31));
      assertEquals((-342.31), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(double0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, oHLCDataItemArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(fixedMillisecond0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      Hour hour0 = new Hour(419, day0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-93), hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      
      Millisecond millisecond2 = (Millisecond)millisecond0.previous();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond2, millisecond1);
      assertNotSame(millisecond2, millisecond0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond2.getFirstMillisecond());
      assertEquals(319L, millisecond2.getMillisecond());
      assertEquals(1392409281320L, millisecond2.getLastMillisecond());
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond0));
      assertNotNull(millisecond2);
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (Number) 0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotNull(timePeriodValue0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNotNull(timePeriodValues0);
      
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond0, millisecond1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertFalse(millisecond0.equals((Object)millisecond1));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Z;I~A#MK");
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNotNull(timePeriodValues0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(10, doubleArray0.length);
      assertNotNull(list0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      Hour hour0 = new Hour(419, day0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals((-93), hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, Double.POSITIVE_INFINITY, ")NX5~I@7j)R)");
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals((-93), hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (-2524.027), ")NX5~I@7j)R)");
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals((-93), hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNotSame(range1, range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2524.027), range1.getUpperBound(), 0.01);
      assertEquals((-2524.027), range1.getCentralValue(), 0.01);
      assertEquals((-2524.027), range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-2456);
      doubleArray1[1] = (double) (-2456);
      doubleArray1[2] = (double) (-2456);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2456);
      doubleArray2[1] = (double) (-2456);
      doubleArray2[2] = (double) (-2456);
      doubleArray2[3] = (-508.696);
      doubleArray2[4] = 218.8265873344;
      doubleArray2[5] = (double) (-2456);
      doubleArray2[6] = (double) (-2456);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-2456);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 218.8265873344;
      doubleArray4[1] = (-508.696);
      doubleArray4[2] = 218.8265873344;
      doubleArray4[3] = (-508.696);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 218.8265873344;
      doubleArray5[1] = 218.8265873344;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-2456.0));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(907, 907);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(907, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(47954L, week0.getSerialIndex());
      assertEquals((-117), week0.getWeek());
      assertNotNull(week0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 4316.62628, 1, Double.NaN, 907, 99.41789802);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1041.8, 53, (-4785.5041956), 907, (-1.7976931348623157E308));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem1;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4838.5041956, range0.getLength(), 0.01);
      assertEquals((-4785.5041956), range0.getLowerBound(), 0.01);
      assertEquals(53.0, range0.getUpperBound(), 0.01);
      assertEquals((-2366.2520978), range0.getCentralValue(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(9, oHLCDataItemArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), 1444);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), 1444, 940.857371790031, (-1), (-1474.94325556));
      assertEquals("Mon Nov 28 23:23:04 GMT 1898", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Mon Nov 28 23:23:04 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals("Mon Nov 28 23:23:04 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals("Mon Nov 28 23:23:04 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1444.0, number0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Mon Nov 28 23:23:04 GMT 1898", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.243378216E12), number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number1);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(boolean0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Z;I~A#MK");
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNotNull(timePeriodValues0);
      
      MockDate mockDate0 = new MockDate((-638L));
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(362L, millisecond0.getMillisecond());
      assertEquals((-638L), millisecond0.getFirstMillisecond());
      assertEquals((-638L), millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(362L, millisecond0.getMillisecond());
      assertEquals((-638L), millisecond0.getFirstMillisecond());
      assertEquals((-638L), millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(363L, millisecond1.getMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      
      Millisecond millisecond2 = (Millisecond)millisecond0.previous();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond2, millisecond1);
      assertNotSame(millisecond2, millisecond0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(362L, millisecond0.getMillisecond());
      assertEquals((-638L), millisecond0.getFirstMillisecond());
      assertEquals((-638L), millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getFirstMillisecond());
      assertEquals(361L, millisecond2.getMillisecond());
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond0));
      assertNotNull(millisecond2);
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond2, (Number) 999);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(362L, millisecond0.getMillisecond());
      assertEquals((-638L), millisecond0.getFirstMillisecond());
      assertEquals((-638L), millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getFirstMillisecond());
      assertEquals(361L, millisecond2.getMillisecond());
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertFalse(millisecond2.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond0));
      assertNotNull(timePeriodValue0);
      
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond2, millisecond1);
      assertNotSame(millisecond2, millisecond0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(362L, millisecond0.getMillisecond());
      assertEquals((-638L), millisecond0.getFirstMillisecond());
      assertEquals((-638L), millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getFirstMillisecond());
      assertEquals(361L, millisecond2.getMillisecond());
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond0.equals((Object)millisecond2));
      assertFalse(millisecond2.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), 1444);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Day day0 = new Day(mockDate1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(day0);
      
      Hour hour0 = new Hour(1444, day0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals((-92), hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(hour0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) day0, 439.8057564, "eJ/,y-gucEJ5");
      assertNotSame(mockDate1, mockDate0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNotSame(range1, range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(439.8057564, range1.getUpperBound(), 0.01);
      assertEquals(439.8057564, range1.getCentralValue(), 0.01);
      assertEquals(439.8057564, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[0] = (-253.6610896111);
      doubleArray2[2] = (-483.353912818);
      doubleArray2[3] = 1651.9389482680567;
      doubleArray2[4] = (-4047.657794697177);
      doubleArray2[5] = 3.0;
      doubleArray2[6] = (-1222.1521624);
      doubleArray2[7] = (-594.0);
      doubleArray2[8] = 6.283185307179586;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'columnKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, (double[][]) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'columnKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-608.14490312);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-608.14490312)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 46, Double.POSITIVE_INFINITY, 46, "6+:GA");
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-608.14490312), xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-608.14490312), xYSeries0.getMinY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(46, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertArrayEquals(new double[] {(-608.14490312)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(xYSeries0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      Hour hour0 = new Hour(46, day0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(46, hour0.getHour());
      assertNotNull(hour0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, 0.0, "n9c8ie}{;%85i0|a?c");
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(46, hour0.getHour());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNotSame(range1, range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Object object0 = defaultPieDataset0.clone();
      assertNotSame(defaultPieDataset0, object0);
      assertNotSame(object0, defaultPieDataset0);
      assertTrue(object0.equals((Object)defaultPieDataset0));
      assertNotNull(object0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)object0));
      assertNotNull(defaultPieDataset1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, object0);
      assertTrue(boolean0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)object0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1324.3151864451377;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 2414.5;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1037.0608368195744;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 2414.5;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 1324.3151864451377;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1037.0608368195744;
      doubleArray3[3] = 1037.0608368195744;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      assertNotNull(list0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(10, doubleArray0.length);
      assertNotNull(list0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Double) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, (List) arrayList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(10, doubleArray0.length);
      assertNotNull(list0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotSame(range1, range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 0.0;
      doubleArray1[5] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(10, doubleArray0.length);
      assertNotNull(list0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Duplicate items in 'columnKeys'.";
      stringArray0[1] = "At6Jg=4Z!)=(<";
      String string0 = "qikz@6";
      stringArray0[2] = "qikz@6";
      stringArray0[3] = "The number of column keys does not match the number of columns in the data array.";
      String string1 = "--0mWh!!pBevQ<u#";
      stringArray0[4] = "--0mWh!!pBevQ<u#";
      stringArray0[5] = "Overlapping bin";
      stringArray0[6] = ";&,gLwwBr";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 9);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "\\GR0_L4!^P";
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-2607), 1900);
      assertEquals((-2607), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1900, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(10, doubleArray0.length);
      assertNotNull(list0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, true);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(10, list0.size());
      assertEquals(10, doubleArray0.length);
      assertNull(range0);
      
      System.setCurrentTimeMillis((-9999));
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range1 = Range.expandToInclude((Range) null, 9999);
      assertEquals(9999.0, range1.getUpperBound(), 0.01);
      assertEquals(9999.0, range1.getCentralValue(), 0.01);
      assertEquals(9999.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) list0, (Range) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Number[][] numberArray0 = new Number[5][8];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1;
      numberArray2[1] = (Number) 1;
      numberArray2[2] = (Number) 53;
      numberArray2[3] = (Number) 53;
      numberArray2[4] = (Number) 1;
      numberArray2[5] = (Number) 1;
      numberArray2[6] = (Number) 53;
      numberArray2[7] = (Number) 1;
      numberArray2[8] = (Number) 1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) 53;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) 1;
      numberArray4[1] = (Number) 1;
      numberArray4[2] = (Number) 1;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      numberArray4[3] = (Number) integer0;
      numberArray4[4] = (Number) 53;
      numberArray4[5] = (Number) 53;
      numberArray4[6] = (Number) 53;
      numberArray4[7] = (Number) 1;
      numberArray4[8] = (Number) 1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[4];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray1));
      
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = (Number) 1;
      numberArray5[2] = (Number) 1;
      numberArray5[3] = (Number) 1;
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(",jx X>$h!sfA", ",jx X>$h!sfA", numberArray0);
      assertEquals(5, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(5, numberArray0.length);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("<", "6+:GA", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-416), (-416), 1444);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), 1444, 940.857371790031, (-310.256064383), (-3208.651));
      assertEquals("Fri Nov 11 09:28:04 GMT 1898", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1444.0, number0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(range0);
      
      System.setCurrentTimeMillis(1444);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.244897116E12), number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.244897116E12), number2);
      assertTrue(number2.equals((Object)number1));
      assertFalse(number2.equals((Object)number0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number2);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range1, range0);
      assertEquals((-310.256064383), range1.getUpperBound(), 0.01);
      assertEquals((-310.256064383), range1.getCentralValue(), 0.01);
      assertEquals((-310.256064383), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      System.setCurrentTimeMillis((-2034L));
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<ChronoLocalDate> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) arrayList0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Double double0 = new Double(2809.32397069949);
      assertEquals(2809.32397069949, (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 817);
      assertNotNull(pieDataset0);
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double1, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(1940, 1, 30, (-9999), 1, 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2135492709, 1.5, 30, 2427.087820883135, (-1.7976931348623157E308));
      assertEquals("Wed Jan 09 09:01:01 GMT 3839", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((-2592.37), oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.5, number0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      System.setCurrentTimeMillis(1940);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5.8980646861E13, (double)double0, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(double0);
      
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5.8980646861E13, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(double1);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2427.087820883135, range1.getUpperBound(), 0.01);
      assertEquals(2427.087820883135, range1.getCentralValue(), 0.01);
      assertEquals(2427.087820883135, range1.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(double0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean2 = linkedList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range1, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2592.37);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      MockDate mockDate0 = new MockDate(1940, 1, 30, (-9999), 1, 1);
      assertNotNull(mockDate0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      System.setCurrentTimeMillis((-879L));
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Month month0 = new Month();
      assertEquals((-879L), month0.getLastMillisecond());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(12, month0.getMonth());
      assertEquals(1969, month0.getYearValue());
      assertEquals((-879L), month0.getFirstMillisecond());
      assertNotNull(month0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("qikz@22");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1254, 1, month0, timeZone0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals((-879L), month0.getLastMillisecond());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(12, month0.getMonth());
      assertEquals(1969, month0.getYearValue());
      assertEquals((-879L), month0.getFirstMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte)30);
      assertEquals((byte)30, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(linkedList0.contains(byte0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = new Double(2809.32397069949);
      assertEquals(2809.32397069949, (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(xYDatasetTableModel0);
      
      defaultCategoryDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(2413.5, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      defaultCategoryDataset0.fireSelectionEvent();
      assertEquals(2, doubleArray0.length);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) 0.0, (-505.78180491012097), 0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset1);
      
      System.setCurrentTimeMillis(0L);
      defaultPieDataset1.insertValue(0, (Comparable) 2413.5, (Number) double0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
//         //
//         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(12L);
      assertNotNull(localDate0);
      
      int int0 = (-1);
      MockDate mockDate0 = new MockDate((-1437), 2062, 2062, (-1437), (-1), (-1437));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 940.857371790031, (-1), (-1.7976931348623157E308), (-1));
      assertEquals("Mon Apr 24 02:35:03 GMT 640", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2592.37);
      doubleArray2[1] = (-2592.37);
      doubleArray2[2] = (-2.1474812345E9);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^~6++>.|v", "Qq/9;0", doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertNotNull(categoryDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(2.1474812345E9, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-2.1474812345E9), range0.getLowerBound(), 0.01);
      assertEquals((-1.07374061725E9), range0.getCentralValue(), 0.01);
      assertEquals(6, doubleArray1.length);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 26);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("<", "6+:GA", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      defaultCategoryDataset0.setValue(Double.POSITIVE_INFINITY, (Comparable) "6+:GA", (Comparable) "6+:GA");
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 2622);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2622, Size: 11
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Double double0 = new Double((-1557.1173904986626));
      assertEquals((-1557.1173904986626), (double)double0, 0.01);
      assertNotNull(double0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNotSame(range2, range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1557.1173904986626, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-778.5586952493313), range2.getCentralValue(), 0.01);
      assertEquals((-1557.1173904986626), range2.getLowerBound(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate((-9999), (-1683), 494, (-9999), 1900, 0);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2964.92, (-1.0), (-1.0), (-1.7976931348623157E308), (-2592.37));
      assertEquals("Tue Dec 17 16:40:00 GMT 8241", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, (OHLCDataItem[]) null);
      assertEquals("Tue Dec 17 16:40:00 GMT 8241", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = taskSeriesCollection0.getColumnIndex(mockDate0);
      assertEquals("Tue Dec 17 16:40:00 GMT 8241", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      System.setCurrentTimeMillis(24L);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(number2);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2592.37);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(1940, 2135492709, 30, (-9999), 1, 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2135492709, 1.5, 30, 2414.5, (-1.7976931348623157E308));
      assertEquals("Tue Sep 08 09:01:01 GMT 177961564", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((-2592.37), oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.5, number0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = taskSeriesCollection0.getColumnIndex(oHLCDataItem0);
      assertEquals("Tue Sep 08 09:01:01 GMT 177961564", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      System.setCurrentTimeMillis(1940);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5.6158623874692608E18, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5.6158623874692608E18, number2);
      assertTrue(number2.equals((Object)number1));
      assertFalse(number2.equals((Object)number0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number2);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (30.0) <= upper (1.5).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, 0.0, (-648));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset1);
      
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(boolean1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(boolean1 == boolean0);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertEquals(2, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "qikz@", 2413.5, (-648));
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultPieDataset2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      double double0 = (-505.78180491012097);
      doubleArray1[0] = (-505.78180491012097);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Invalid series: ", ",K?cYIi8", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double1 = new Double((-505.78180491012097));
      assertEquals((-505.78180491012097), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = 0;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.validateObject();
      assertEquals(1, doubleArray0.length);
      
      defaultPieDataset0.insertValue(0, (Comparable) double1, (Number) (-505.78180491012097));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double1, (-505.78180491012097), 0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
//         //
//         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 1922.8851704716585);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 69.41755326943;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      boolean boolean0 = jDBCCategoryDataset0.hasListener(categoryToPieDataset0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(boolean0);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(3, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, false);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(3, doubleArray0.length);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-1.0), (-1727.9605602431), 2);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(3, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      System.setCurrentTimeMillis(0L);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-505.78180491012097);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("yZha]Vk,X1yv:Dk93{", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = new Double(9999.0);
      assertEquals(9999.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, 0.5, 4464);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      System.setCurrentTimeMillis(4464);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "w+m");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // A connection must be supplied.
//         //
//         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset1);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1891.414311097788), 0.0, 13, "");
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals((-1891.414311097788), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotNull(xYSeries0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertEquals(0.0, (double)double0, 0.01);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-2971));
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Double> arrayList1 = new ArrayList<Double>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      
      Double double0 = new Double((-2035.7925023865));
      assertEquals((-2035.7925023865), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = arrayList1.add(double0);
      assertFalse(arrayList0.contains((-2035.7925023865)));
      assertTrue(arrayList1.contains((-2035.7925023865)));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(double0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (KeyToGroupMap) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1931, 53, 1931, 1, 99.41789802);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1931, 0.5, (-1833.15453703572), 1, 1931);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1833.15453703572), range1.getLowerBound(), 0.01);
      assertEquals(1886.15453703572, range1.getLength(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals((-890.07726851786), range1.getCentralValue(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      System.setCurrentTimeMillis(1);
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range1, true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1833.15453703572), range1.getLowerBound(), 0.01);
      assertEquals(1886.15453703572, range1.getLength(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals((-890.07726851786), range1.getCentralValue(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(3, oHLCDataItemArray0.length);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertNotNull(week0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1931, 53, 1931, 1, 99.41789802);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1931, 0.5, (-1833.15453703572), 1, 1931);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (1931.0) <= upper (53.0).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKey' argument.", "Null 'rowKey' argument.", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertEquals(10, doubleArray0.length);
      assertNull(range0);
      
      byte byte0 = (byte) (-112);
      Byte byte1 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean boolean1 = linkedList0.add(byte1);
      assertTrue(linkedList0.contains((byte) (-112)));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(boolean1 == boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2592.37);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      MockDate mockDate0 = new MockDate(1940, 2135492709, 30, (-9999), 1, 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2135492709, 1.5, 30, 2414.5, (-1.7976931348623157E308));
      assertEquals("Tue Sep 08 09:01:01 GMT 177961564", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((-2592.37), oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.5, number0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = taskSeriesCollection0.getColumnIndex(oHLCDataItem0);
      assertEquals("Tue Sep 08 09:01:01 GMT 177961564", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      System.setCurrentTimeMillis(1940);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5.6158623874692608E18, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5.6158623874692608E18, number2);
      assertFalse(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(number2);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range1, range0);
      assertEquals(2414.5, range1.getCentralValue(), 0.01);
      assertEquals(2414.5, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2414.5, range1.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1107.41);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("/[^KsQ", "kNJyY}+aj", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-1107.41), number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = defaultCategoryDataset0.getRowIndex("/[^KsQ");
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals((-1), int0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(list0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      assertNotNull(localDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("kNJyY}+aj", "/[^KsQ", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset1, defaultCategoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(categoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("/[^KsQ");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset1, defaultCategoryDataset0);
      assertEquals((-1107.41), range0.getUpperBound(), 0.01);
      assertEquals((-1107.41), range0.getCentralValue(), 0.01);
      assertEquals((-1107.41), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(categoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) linkedList0, range0, false);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset1, defaultCategoryDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals((-1107.41), range0.getUpperBound(), 0.01);
      assertEquals((-1107.41), range0.getCentralValue(), 0.01);
      assertEquals((-1107.41), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(categoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range2);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset1, defaultCategoryDataset0);
      assertEquals((-1107.41), number1);
      assertTrue(number1.equals((Object)number0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(categoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      assertNotNull(localDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertTrue(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(localDate0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range1);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(number0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2930.534372);
      doubleArray1[2] = (-2370.1);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 99.41789802;
      doubleArray1[5] = 677.90618;
      doubleArray1[6] = (-1288.1988099731);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-2930.534372), 0.0, (-2370.1), (-1.0), 99.41789802, 677.90618, (-1288.1988099731), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1288.1988099731), 2856.15, 30, 99.41789802);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals((-1288.1988099731), xYSeries0.getMinX(), 0.01);
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals((-6.991799024610002E23), xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-121769.26822727545), xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(2856.1500000000005, xYSeries0.getMaxX(), 0.01);
      assertArrayEquals(new double[] {(-2930.534372), 0.0, (-2370.1), (-1.0), 99.41789802, 677.90618, (-1288.1988099731), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertNotNull(xYSeries0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(number1);
      
      Range range0 = new Range(0.0, 2002.998936903065);
      assertEquals(2002.998936903065, range0.getUpperBound(), 0.01);
      assertEquals(1001.4994684515325, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2002.998936903065, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(7, doubleArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("B8i1np=EtYU54;EK!", "`.|m", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getCategoryCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = defaultKeyedValues2DDataset0.hasListener(defaultIntervalCategoryDataset0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(boolean0);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "B8i1np=EtYU54;EK!", 3090.3936, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 53;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 53;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 53;
      doubleArray1[5] = (double) 1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray2);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {53.0, 1.0, 53.0, 1.0, 53.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 53.0, 1.0, 53.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(3, dateArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(defaultHighLowDataset0);
      
      defaultHighLowDataset0.clearSelection();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {53.0, 1.0, 53.0, 1.0, 53.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 53.0, 1.0, 53.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(3, dateArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(53.0, range0.getUpperBound(), 0.01);
      assertEquals(52.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(27.0, range0.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {53.0, 1.0, 53.0, 1.0, 53.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 53.0, 1.0, 53.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(3, dateArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "Lkl1s>D", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2212);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2212, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((-1713.24534));
      assertEquals((-1713.2454F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(number1);
      
      XYSeries xYSeries0 = new XYSeries("jS", true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.add(number0, (Number) null);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(number0.equals((Object)number1));
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNull(range1);
      
      System.setCurrentTimeMillis(0);
      Random.setNextRandom(1600);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      assertNotNull(localDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(localDate0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, range0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.clearSelection();
      assertEquals(1, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(double0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      UnaryOperator<DefaultBoxAndWhiskerCategoryDataset> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList1.replaceAll(unaryOperator0);
      assertEquals(0, linkedList1.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList1, false);
      assertEquals(0, linkedList1.size());
      assertEquals(1, doubleArray0.length);
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) vector0, false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range0);
      
      Range range1 = jDBCXYDataset0.getRangeBounds(false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Double double0 = new Double((-1557.1173904986626));
      assertEquals((-1557.1173904986626), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains((-1557.1173904986626)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains((-1557.1173904986626)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range2);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertEquals(Double.NaN, number0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Double double0 = new Double(6.283185307179586);
      assertEquals(6.283185307179586, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(834.2608);
      assertEquals(834.2608, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = arrayList0.add(double1);
      assertFalse(arrayList0.contains(6.283185307179586));
      assertTrue(arrayList0.contains(834.2608));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.contains(6.283185307179586));
      assertTrue(arrayList0.contains(834.2608));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 10);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertNull(range0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Double double0 = new Double((-1557.0));
      assertEquals((-1557.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(double0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.contains(double0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, (-1.0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 23, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 23, (-3125.5745755), 1343.07734032988, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      int int0 = oHLCDataItem4.compareTo(oHLCDataItem2);
      assertNotSame(oHLCDataItem2, oHLCDataItem3);
      assertNotSame(oHLCDataItem2, oHLCDataItem4);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem4, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem2);
      assertNotSame(oHLCDataItem4, oHLCDataItem0);
      assertNotSame(oHLCDataItem4, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, int0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23.0, number0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals((-3125.5745755), range1.getLowerBound(), 0.01);
      assertEquals((-1551.28728775), range1.getCentralValue(), 0.01);
      assertEquals(3148.5745755, range1.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      System.setCurrentTimeMillis(0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) oHLCDataItem3);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotSame(oHLCDataItem3, oHLCDataItem4);
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotSame(oHLCDataItem3, oHLCDataItem4);
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1.39240928132E12, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      assertNotNull(localDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertTrue(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(localDate0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, range0, false);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(7, doubleArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(1.39240928132E12);
      assertEquals(1.39240931E12F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(1.39240928132E12));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Double double0 = new Double(1.39240928132E12);
      assertEquals(1.39240928132E12, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 18, 0);
      assertEquals(18, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertEquals(18, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      assertNotNull(localDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertTrue(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(localDate0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Double> arrayList1 = new ArrayList<Double>(arrayList0);
      assertFalse(arrayList0.contains(number0));
      assertFalse(arrayList1.contains(number0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      
      Double double0 = new Double((-2035.7925023865));
      assertEquals((-2035.7925023865), (double)double0, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = arrayList1.add(double0);
      assertFalse(arrayList0.contains(double0));
      assertFalse(arrayList1.contains(number0));
      assertTrue(arrayList1.contains(double0));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, arrayList1, false);
      assertFalse(arrayList0.contains(double0));
      assertFalse(arrayList1.contains(number0));
      assertTrue(arrayList1.contains(double0));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Index outside valid range.
//         //
//         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, stringArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((DefaultHighLowDataset) null);
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals((Object) null);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 0.0, (-508.696), 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      System.setCurrentTimeMillis(0L);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(2413.5, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Object object0 = defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertNotSame(object0, defaultStatisticalCategoryDataset0);
      assertTrue(object0.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(object0);
      
      Double double0 = new Double((-1557.0));
      assertEquals((-1557.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains((-1557.0)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (0.0) <= upper (-3114.0).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) vector0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      Range range1 = jDBCXYDataset0.getRangeBounds(false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener(defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertFalse(boolean0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", 1922.4742883, 1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(defaultIntervalCategoryDataset1, tableOrder0, 1);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, categoryToPieDataset1.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1931, 53, 1931, 1, 99.41789802);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1931, 0.5, (-1833.15453703572), 1, 1931);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      long long0 = week0.getMiddleMillisecond();
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, long0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1833.15453703572), range1.getLowerBound(), 0.01);
      assertEquals(1886.15453703572, range1.getLength(), 0.01);
      assertEquals((-890.07726851786), range1.getCentralValue(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range2);
      
      ArrayDeque<Double> arrayDeque0 = new ArrayDeque<Double>();
      assertFalse(arrayDeque0.contains((-1833.15453703572)));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>(arrayDeque0);
      assertFalse(arrayDeque0.contains((-1833.15453703572)));
      assertFalse(linkedList0.contains((-1833.15453703572)));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = stack0.addAll((Collection<? extends XYIntervalSeriesCollection>) arrayList0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, true);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1884.82);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 6.283185307179586;
      doubleArray1[3] = 581.2924604887;
      doubleArray1[4] = 2003.904496159;
      doubleArray1[5] = 1634.7408691581334;
      doubleArray1[6] = 4627.583059215743;
      doubleArray1[7] = (-476.3835588489512);
      doubleArray1[8] = 1000.86050688;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1884.82);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2592.37);
      doubleArray0[1] = (-2592.37);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2592.37), (-1891.414311097788), 30, (-2592.37));
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4900653.347660572, xYSeries0.getMinY(), 0.01);
      assertEquals(30, xYSeries0.getItemCount());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(xYSeries0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      XYSeries xYSeries1 = new XYSeries((-2592.37), false);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertFalse(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getNotify());
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4900653.347660572, xYSeries0.getMinY(), 0.01);
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.add(number0, (Number) (-2592.37));
      assertNotSame(xYSeries0, xYSeries1);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2592.37), xYSeries0.getMinY(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2592.37), xYSeries0.getMinY(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(701.9556889022119, range0.getLength(), 0.01);
      assertEquals((-2241.892155548894), range0.getCentralValue(), 0.01);
      assertEquals((-2592.87), range0.getLowerBound(), 0.01);
      assertEquals((-1890.914311097788), range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(range1, range0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2592.37), xYSeries0.getMinY(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(3357598.7384499996, range1.getCentralValue(), 0.01);
      assertEquals((-2592.37), range1.getLowerBound(), 0.01);
      assertEquals(6720382.216899999, range1.getLength(), 0.01);
      assertEquals(6717789.846899999, range1.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      defaultXYZDataset0.validateObject();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Short short0 = new Short((short) (-5841));
      assertEquals((short) (-5841), (short)short0);
      assertNotNull(short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertFalse(stack0.contains(short0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Short short1 = new Short((short) (-5841));
      assertEquals((short) (-5841), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-5841));
      assertEquals((short) (-5841), (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      stack0.addElement(short2);
      assertTrue(stack0.contains((short) (-5841)));
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-5841]", stack0.toString());
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(number1);
      
      XYSeries xYSeries0 = new XYSeries(float0, false);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.add(number1, number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(number0.equals((Object)number1));
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, true);
      assertFalse(arrayList0.contains(number0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNull(range1);
      
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = number1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = number1;
      numberArray3[3] = (Number) float0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = number1;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getSeriesCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(4, numberArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset1, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 23, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 23, (-3125.5745755), 1343.07734032988, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      int int0 = oHLCDataItem4.compareTo(oHLCDataItem2);
      assertNotSame(oHLCDataItem2, oHLCDataItem3);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem4);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem4, oHLCDataItem2);
      assertNotSame(oHLCDataItem4, oHLCDataItem1);
      assertNotSame(oHLCDataItem4, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, int0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23.0, number0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      System.setCurrentTimeMillis(0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XYIntervalSeriesCollection[] xYIntervalSeriesCollectionArray0 = new XYIntervalSeriesCollection[0];
      XYIntervalSeriesCollection[] xYIntervalSeriesCollectionArray1 = linkedList0.toArray(xYIntervalSeriesCollectionArray0);
      assertSame(xYIntervalSeriesCollectionArray0, xYIntervalSeriesCollectionArray1);
      assertSame(xYIntervalSeriesCollectionArray1, xYIntervalSeriesCollectionArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, xYIntervalSeriesCollectionArray0.length);
      assertEquals(0, xYIntervalSeriesCollectionArray1.length);
      assertNotNull(xYIntervalSeriesCollectionArray1);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = linkedList0.containsAll(stack0);
      assertEquals(0, linkedList0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2592.37);
      doubleArray0[1] = (-2592.37);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      MockDate mockDate0 = new MockDate(11, 11, 1);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2592.37), 304.47004013, 1, 304.47004013, 0.0);
      assertEquals("Fri Dec 01 00:00:00 GMT 1911", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2437.88392), 2.0, 11, 1215.396670033761, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Dec 01 00:00:00 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      int int0 = oHLCDataItem1.compareTo(oHLCDataItem0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals("Fri Dec 01 00:00:00 GMT 1911", mockDate0.toString());
      assertEquals(0, int0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Dec 01 00:00:00 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.8330624E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.8330624E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.8330624E12), range0.getLowerBound(), 0.01);
      assertEquals("Fri Dec 01 00:00:00 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(7, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, false);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Dec 01 00:00:00 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(7, oHLCDataItemArray0.length);
      assertNull(range1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Dec 01 00:00:00 GMT 1911", mockDate0.toString());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(7, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      XYSeries xYSeries0 = new XYSeries(mockDate0, false);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNotNull(xYSeriesCollection0);
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      xYSeries0.add((Number) 0, (Number) float0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = new Double(2809.32397069949);
      assertEquals(2809.32397069949, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(double0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Vector<DefaultBoxAndWhiskerXYDataset> vector0 = new Vector<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = new Range(2809.32397069949, 2809.32397069949);
      assertEquals(2809.32397069949, range0.getUpperBound(), 0.01);
      assertEquals(2809.32397069949, range0.getCentralValue(), 0.01);
      assertEquals(2809.32397069949, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range0, true);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(2809.32397069949, range0.getUpperBound(), 0.01);
      assertEquals(2809.32397069949, range0.getCentralValue(), 0.01);
      assertEquals(2809.32397069949, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener(defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertFalse(boolean0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", 1922.4742883, 1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(defaultIntervalCategoryDataset1, tableOrder0, 13);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(13, categoryToPieDataset1.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset1);
      
      CategoryToPieDataset categoryToPieDataset2 = (CategoryToPieDataset)categoryToPieDataset1.clone();
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset0);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset1);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(13, categoryToPieDataset1.getExtractIndex());
      assertEquals(13, categoryToPieDataset2.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset2);
      
      categoryToPieDataset0.removeChangeListener(categoryToPieDataset1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset2);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(13, categoryToPieDataset1.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range1);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) vectorSeriesCollection0, (List) stack0, range1, true);
      assertFalse(stack0.contains(1922.4742883));
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(10, doubleArray0.length);
      assertNull(range2);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1922.4742883, 13);
      assertEquals(13.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1922.4742883, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 1171.617297848886, 2632.3689, 6, "");
      assertEquals(13.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1922.4742883, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, (-3125.5745755));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 23, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 23, (-3125.5745755), 1343.07734032988, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      int int0 = oHLCDataItem4.compareTo(oHLCDataItem2);
      assertNotSame(oHLCDataItem2, oHLCDataItem4);
      assertNotSame(oHLCDataItem2, oHLCDataItem3);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem4, oHLCDataItem2);
      assertNotSame(oHLCDataItem4, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem1);
      assertNotSame(oHLCDataItem4, oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, int0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23.0, number0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertNotNull(simpleHistogramDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener(defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertFalse(boolean0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", 1922.4742883, 1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(defaultIntervalCategoryDataset1, tableOrder0, 13);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(13, categoryToPieDataset1.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset1);
      
      categoryToPieDataset0.removeChangeListener(categoryToPieDataset1);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(13, categoryToPieDataset1.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range1);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.0, double0, 0.01);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(double1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(boolean1);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(boolean1 == boolean0);
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "jS", (double) 0, 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset2);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNull(range1);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(float0, "", ">p#g5HyKZ<A`]{#=.Yy");
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(">p#g5HyKZ<A`]{#=.Yy", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 1978);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(">p#g5HyKZ<A`]{#=.Yy", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(">p#g5HyKZ<A`]{#=.Yy", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotNull(timePeriodValues1);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(">p#g5HyKZ<A`]{#=.Yy", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(">p#g5HyKZ<A`]{#=.Yy", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotNull(timePeriodValuesCollection0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(">p#g5HyKZ<A`]{#=.Yy", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(">p#g5HyKZ<A`]{#=.Yy", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNull(range2);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 2143270384);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(Double.POSITIVE_INFINITY));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      XYSeries xYSeries0 = new XYSeries(oHLCDataItem0, true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.add((Number) 23, (Number) 0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(23.5, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(22.5, range0.getLowerBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, true);
      assertFalse(arrayList0.contains(number0));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(23.5, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(22.5, range0.getLowerBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(23.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotNull(xYDataItem1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.add((Number) integer0, (Number) null);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) null, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1339.3, Double.NEGATIVE_INFINITY, 23, 0.0, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 1339.3, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 0.0, (-3125.5745755), 1343.07734032988, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem4);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-4111));
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range1);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) stack0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range2);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, (double) (-4111), (-1420));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      Short short0 = new Short((short) (-88));
      assertEquals((short) (-88), (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = stack0.add(short0);
      assertTrue(stack0.contains(short0));
      assertFalse(stack0.isEmpty());
      assertEquals("[-88]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 4409.7126);
      assertNull(range3);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, stack0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      int int0 = defaultIntervalCategoryDataset0.indexOf("");
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-1), int0);
      assertEquals(10, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.updateXPoints();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      int int0 = 5279;
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-2146556809), 0);
      assertEquals((-2146556809), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("jS", "jS", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset1);
      
      List<JDBCXYDataset> list0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset1, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(10, doubleArray0.length);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList1.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(linkedList1.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList1, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 2413.5;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) (-4111);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-4111);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) (-4111);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2413.5;
      doubleArray2[1] = 2413.5;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, (-1));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      assertSame(tableOrder1, tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      assertNotNull(tableOrder1);
      
      Float float0 = new Float((-3651.72551));
      assertEquals((-3651.7256F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      System.setCurrentTimeMillis(0);
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 16);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals((-1), int0);
      
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 999;
      doubleArray1[2] = 444.05214836;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) (-1);
      doubleArray2[4] = (-2316.0);
      doubleArray2[5] = (double) 999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1494.513528);
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (-2316.0);
      doubleArray3[3] = (double) 999;
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 999;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^|Z#PDP", (String) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(999.0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem1.getXValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotNull(xYDataItem1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xIntervalSeriesCollection0, (List) stack0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertEquals(1, doubleArray0.length);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList1, false);
      assertEquals(0, linkedList1.size());
      assertEquals(1, doubleArray0.length);
      assertNull(range1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NEGATIVE_INFINITY, 0.5);
      assertEquals(Double.NEGATIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(0.5, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-3005.112), (-872.647), 3610, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 1);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of column keys does not match the number of columns in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      double double0 = 1.0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 23, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem3);
      
      Date date0 = hour0.getEnd();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertTrue(date0.equals((Object)mockDate0));
      assertNotNull(date0);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 23, (-3125.5745755), 1343.07734032988, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertTrue(mockDate0.equals((Object)date0));
      assertNotNull(oHLCDataItem4);
      
      int int0 = oHLCDataItem4.compareTo(oHLCDataItem2);
      assertNotSame(oHLCDataItem4, oHLCDataItem2);
      assertNotSame(oHLCDataItem4, oHLCDataItem0);
      assertNotSame(oHLCDataItem4, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem1);
      assertNotSame(mockDate0, date0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem4);
      assertNotSame(oHLCDataItem2, oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, int0);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertTrue(mockDate0.equals((Object)date0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertTrue(mockDate0.equals((Object)date0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(mockDate0, date0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertFalse(boolean0);
      assertTrue(mockDate0.equals((Object)date0));
      assertEquals(5, oHLCDataItemArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean1 = arrayList0.add((Double) number0);
      assertTrue(arrayList0.contains(number0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "=VSiZg@*?.wE", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      MockDate mockDate0 = new MockDate(1699, 1699, 1699, 1699, 340);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) mockDate0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 23, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 23, (-3125.5745755), 1343.07734032988, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      int int0 = oHLCDataItem4.compareTo(oHLCDataItem2);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem2, oHLCDataItem4);
      assertNotSame(oHLCDataItem2, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem1);
      assertNotSame(oHLCDataItem4, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem2);
      assertNotSame(oHLCDataItem4, oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, int0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(boolean0);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23.0, number0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(3148.5745755, range1.getLength(), 0.01);
      assertEquals((-1551.28728775), range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals((-3125.5745755), range1.getLowerBound(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range1);
      
      System.setCurrentTimeMillis(0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) oHLCDataItem3);
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotSame(oHLCDataItem3, oHLCDataItem4);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotSame(oHLCDataItem3, oHLCDataItem4);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1.39240928132E12, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) double0, (Number) float0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(xYDataItem0);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem1.getXValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(xYDataItem1);
      
      int int0 = 223;
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 0, 522.4895, 223, double0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jR", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      int int0 = defaultIntervalCategoryDataset0.indexOf(float0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-1), int0);
      assertEquals(10, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(number1);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NaN, number2);
      assertFalse(number2.equals((Object)number0));
      assertFalse(number2.equals((Object)number1));
      assertNotNull(number2);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      MockDate mockDate0 = new MockDate((-2146556809), 1969, 5279, (-2146556809), 1969);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Jul 04 17:32:26 GMT 191372510", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(6039070960959146464L, week0.getFirstMillisecond());
      assertEquals(7390, week0.getYearValue());
      assertEquals(6039070960959146463L, week0.getLastMillisecond());
      assertEquals(391697L, week0.getSerialIndex());
      assertEquals(27, week0.getWeek());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals("Fri Jul 04 17:32:26 GMT 191372510", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(6039070960959146464L, week0.getFirstMillisecond());
      assertEquals(7390, week0.getYearValue());
      assertEquals(6039070960959146463L, week0.getLastMillisecond());
      assertEquals(391697L, week0.getSerialIndex());
      assertEquals(27, week0.getWeek());
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertEquals("Fri Jul 04 17:32:26 GMT 191372510", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(6039070960959146464L, week0.getFirstMillisecond());
      assertEquals(7390, week0.getYearValue());
      assertEquals(6039070960959146463L, week0.getLastMillisecond());
      assertEquals(391697L, week0.getSerialIndex());
      assertEquals(27, week0.getWeek());
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNull(number1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(boolean0);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(10, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      boolean boolean1 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, stack0, true);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number1);
      
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset("jS", "p|n@oRVo z$5j^p<,", (String) null, (String) null);
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex("");
      assertEquals((-1), int0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "jS", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(number1);
      
      XYSeries xYSeries0 = new XYSeries(float0, false);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.add(number1, number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(number0.equals((Object)number1));
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, true);
      assertFalse(arrayList0.contains(number1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, false);
      assertFalse(arrayList0.contains(number1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset1);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset0, defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset0.equals((Object)defaultBoxAndWhiskerCategoryDataset1));
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack1 = new Stack<Short>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, doubleArray0.length);
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(number1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, (-2565));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2565), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2565), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      int int0 = 1067;
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = new Double(4704.93599);
      assertEquals(4704.93599, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) millisecond0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(4827.0, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(float0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(range0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, (-2.147483647E9));
      assertEquals((-2.147483647E9), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(xYBarDataset0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(number1);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotSame(range1, range0);
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertEquals(2413.5, range1.getUpperBound(), 0.01);
      assertEquals((-8.988465674311579E307), range1.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      TimeSeries timeSeries0 = new TimeSeries("jS", "qikz@19", "qikz@19");
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = defaultCategoryDataset0.equals(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      MockDate mockDate0 = new MockDate((-2146556809), 1969, 5279, (-2146556809), 1969);
      assertNotNull(mockDate0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Double double1 = new Double((-2146556809));
      assertEquals((-2.146556809E9), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertFalse(stack0.contains(double1));
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Double double2 = new Double((-2201.299019));
      assertEquals((-2201.299019), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2201.299019);
      doubleArray1[1] = (double) (-2146556809);
      doubleArray1[2] = 2413.5;
      doubleArray1[3] = (double) 1969;
      doubleArray1[4] = (double) 5279;
      doubleArray1[5] = (double) 1969;
      doubleArray1[6] = (double) (-2146556809);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      doubleArray1[7] = 647.7707362722;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-2201.299019), (-2.146556809E9), 2413.5, 1969.0, 5279.0, 1969.0, (-2.146556809E9), 647.7707362722}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2146556809), 5279, 1969, "jS");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("GR0_L4!^P", "GR0_L4!^P", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = defaultCategoryDataset0.getRowIndex("GR0_L4!^P");
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals((-1), int0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      assertNotNull(localDate0);
      
      ArrayList<Double> arrayList1 = new ArrayList<Double>();
      assertFalse(arrayList1.contains(number0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals((double)double0, (double)number0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(677.90618);
      assertEquals(677.90618, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = arrayList1.add(double1);
      assertFalse(arrayList1.contains(0.0));
      assertTrue(arrayList1.contains(double1));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-1));
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(float0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, false);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range2);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 0.0, (-508.696), 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertNotSame(range3, range0);
      assertEquals((-8.988465674311579E307), range3.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range3.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range3.getLength(), 0.01);
      assertEquals(2414.5, range3.getUpperBound(), 0.01);
      assertFalse(range3.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range3);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-1073741823));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1073741823), categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((-2.147483648E9));
      assertEquals((-2.14748365E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals("jS");
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1073741823), categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1073741823), categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset1);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (-48.916949570656));
      assertNotSame(range3, range0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertEquals((-48.916949570656), range3.getUpperBound(), 0.01);
      assertEquals((-48.916949570656), range3.getCentralValue(), 0.01);
      assertEquals((-48.916949570656), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.equals((Object)range0));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range4);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "qikz@4", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertFalse(stack0.contains(Double.POSITIVE_INFINITY));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Double double0 = new Double(2414.5);
      assertEquals(2414.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(stack0.contains(Double.POSITIVE_INFINITY));
      assertFalse(stack0.contains(2414.5));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[Infinity]", stack0.toString());
      assertTrue(boolean0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(2153.779043, 0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(2153.779043, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, Double.NEGATIVE_INFINITY, (-1741.79859145), 0, mockDate0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertFalse(stack0.contains(double0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      boolean boolean0 = defaultCategoryDataset0.hasListener(defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertFalse(boolean0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "", 1132.054805, 0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertEquals(3, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(10, doubleArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("The 'data' is null.", "The 'data' is null.", doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockDate mockDate0 = new MockDate((-1932), 11, 11, (-1932), 0, 1);
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Thu Sep 21 12:00:01 GMT 33", mockDate0.toString());
      assertEquals(33, week0.getYearValue());
      assertEquals(39, week0.getWeek());
      assertEquals((-63154382399001L), week0.getLastMillisecond());
      assertEquals((-63154382399000L), week0.getFirstMillisecond());
      assertEquals(1788L, week0.getSerialIndex());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(number1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(boolean0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 11);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-608.14490312);
      Number[][] numberArray0 = new Number[3][4];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) (-608.14490312);
      numberArray1[1] = (Number) (-608.14490312);
      numberArray1[2] = (Number) (-608.14490312);
      numberArray1[3] = (Number) (-608.14490312);
      numberArray1[4] = (Number) (-608.14490312);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (-608.14490312);
      numberArray2[1] = (Number) (-608.14490312);
      numberArray2[2] = (Number) (-608.14490312);
      numberArray2[3] = (Number) (-608.14490312);
      numberArray2[4] = (Number) (-608.14490312);
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      numberArray2[5] = (Number) long0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("6+:GA", "d7|QDzfBuAAR-W*kEN!", numberArray0);
      assertEquals(3, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-1216.28980624), number0);
      assertEquals(3, numberArray0.length);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 14);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = categoryToPieDataset0.hasListener(defaultIntervalCategoryDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(14, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Float float0 = new Float((-2592.37));
      assertEquals((-2592.37F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertFalse(stack0.contains(0.0));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(stack0.contains(0.0));
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1339.3, Double.NEGATIVE_INFINITY, 23, 0, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      Float float0 = new Float((-2.147483648E9));
      assertEquals((-2.14748365E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-895));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[][] doubleArray0 = new double[17][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(17, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(1337.2346458927);
      assertEquals(1337.2346F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TimeSeries timeSeries0 = new TimeSeries(Double.POSITIVE_INFINITY);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(1337.2346458927));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
      assertFalse(arrayList0.contains(1337.2346458927));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(17, doubleArray0.length);
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(17, doubleArray0.length);
      assertNotNull(number0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-575.8266561), (-2470.219949591));
      assertEquals((-575.8266561), powerFunction2D0.getA(), 0.01);
      assertEquals((-2470.219949591), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, (-2035.7925023865), 444.05214836, (-1), Double.POSITIVE_INFINITY);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond1.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond1.getMiddleMillisecond());
      assertTrue(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<DefaultOHLCDataset>) fixedMillisecond1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, comparableArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      ArrayList<DefaultIntervalCategoryDataset> arrayList0 = new ArrayList<DefaultIntervalCategoryDataset>();
      assertFalse(arrayList0.contains(defaultIntervalCategoryDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = (-779.650038054);
      doubleArray1[3] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-2.147483648E9), Double.POSITIVE_INFINITY, (-779.650038054), (-2.147483648E9)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertNotNull(polynomialFunction2D0);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray1);
      assertEquals(3, polynomialFunction2D1.getOrder());
      assertArrayEquals(new double[] {(-2.147483648E9), Double.POSITIVE_INFINITY, (-779.650038054), (-2.147483648E9)}, doubleArray1, 0.01);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertEquals(4, doubleArray1.length);
      assertNotNull(polynomialFunction2D1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, 4409.7126, 4409.7126, 837, "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, Double.POSITIVE_INFINITY, 2, double0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(xYSeries0);
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double1);
      
      double[][] doubleArray2 = new double[0][4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", (String) null, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(0, doubleArray2.length);
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(0, doubleArray2.length);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range1);
      
      Range range2 = Range.combine((Range) null, range1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range2);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-898));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(0, doubleArray2.length);
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(0, doubleArray2.length);
      assertNotNull(defaultPieDataset1);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset1, categoryDataset0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertFalse(defaultCategoryDataset1.equals((Object)categoryDataset0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(0, doubleArray2.length);
      assertNotNull(defaultCategoryDataset1);
      
      Range range3 = Range.combine((Range) null, (Range) null);
      assertNull(range3);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) (-898));
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-898.0), range4.getUpperBound(), 0.01);
      assertEquals((-898.0), range4.getCentralValue(), 0.01);
      assertEquals((-898.0), range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertNotNull(range4);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = null;
      int int0 = 1072;
      int int1 = (-852);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1072, (-852));
      assertEquals(1072, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-852), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int2 = 1090;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, 1090);
      assertEquals(1072, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-852), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1090, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      int int0 = 1172;
      // Undeclared exception!
//      try { 
        xIntervalSeriesCollection0.getSeries(1172);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.xy.XIntervalSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 1273);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset1);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(10, doubleArray0.length);
      assertNotNull(list0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertTrue(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotSame(range1, range0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3765.7407;
      doubleArray1[1] = 86.0;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 4224.5715756918;
      doubleArray1[4] = (-2.147483648E9);
      doubleArray1[5] = (-688.628366308);
      doubleArray1[6] = 277.68;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4224.5715756918;
      doubleArray2[1] = 277.68;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 3765.7407;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "qikz@8", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Object object0 = defaultKeyedValues2DDataset0.clone();
      assertNotSame(defaultKeyedValues2DDataset0, object0);
      assertNotSame(object0, defaultKeyedValues2DDataset0);
      assertTrue(object0.equals((Object)defaultKeyedValues2DDataset0));
      assertNotNull(object0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, doubleArray0.length);
      assertNotNull(list0);
      
      Number[][] numberArray0 = new Number[0][0];
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("qikz@8", "qikz@22", numberArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(0, numberArray0.length);
      assertNotNull(categoryDataset1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(boolean0);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(3, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1), (-1));
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(3, doubleArray0.length);
      assertNotNull(slidingCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) list0, true);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(3, doubleArray0.length);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = new Float((-2592.37));
      assertEquals((-2592.37F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      linkedList0.addFirst(defaultBoxAndWhiskerXYDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(505L);
      assertNotNull(localDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.fireSelectionEvent();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2592.37);
      doubleArray2[1] = (double) 505L;
      doubleArray2[2] = (double) 505L;
      doubleArray2[3] = (double) 505L;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 505L;
      doubleArray3[1] = (-2592.37);
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(505.0);
      assertEquals((-1), int0);
      
      doubleArray3[2] = (-2592.37);
      doubleArray3[3] = (-2592.37);
      doubleArray3[4] = (-2592.37);
      doubleArray3[5] = (-2592.37);
      doubleArray3[6] = (-2592.37);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@5", "Duplicate items in 'rowKeys'.", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "Null 'xRange' argument", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-3628.6);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-2160.41906177537);
      doubleArray1[4] = (-2.147483648E9);
      doubleArray1[5] = (-1891.414311097788);
      doubleArray1[6] = 4409.7126;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {2.0, (-3628.6), Double.NEGATIVE_INFINITY, (-2160.41906177537), (-2.147483648E9), (-1891.414311097788), 4409.7126, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-3628.6), Double.NEGATIVE_INFINITY, 837, 2.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1339.3, Double.NEGATIVE_INFINITY, 23, 0.0, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 1339.3, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) arrayList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-1494.513528);
      doubleArray1[2] = 3.29526;
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-4047.657794697177);
      doubleArray2[1] = 3.29526;
      doubleArray2[2] = (-1494.513528);
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = (-1494.513528);
      doubleArray2[5] = (-1494.513528);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TimeSeriesDataset.addValue(): series #", "TimeSeriesDataset.addValue(): series #", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertFalse(stack0.contains(Double.POSITIVE_INFINITY));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals((-4047.657794697177), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 3.29526);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "qikz@6";
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.5;
      doubleArray1[2] = 811.35112;
      doubleArray1[2] = 1.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = 0.5;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "z>L2*%\"3U9f", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(1.5, range1.getUpperBound(), 0.01);
      assertEquals(0.75, range1.getCentralValue(), 0.01);
      assertEquals(1.5, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      int int0 = 1800;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1800);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1800, Size: 2
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.contains(number0));
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(10, doubleArray0.length);
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate(23, 5, 3031, 0, (-1245));
      assertNotNull(mockDate0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) year0, (-3514.347032160706), "qikz@12");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-1757.173516080353), range0.getCentralValue(), 0.01);
      assertEquals((-3514.347032160706), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3514.347032160706, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, linkedList0.size());
      assertEquals((-1757.173516080353), range0.getCentralValue(), 0.01);
      assertEquals((-3514.347032160706), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3514.347032160706, range0.getLength(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      boolean boolean0 = true;
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      int int0 = (-1);
      int int1 = 1584;
      int int2 = 0;
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      Minute minute0 = new Minute(0, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertNotNull(minute0);
      
      double[] doubleArray0 = new double[4];
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1584;
      DefaultHighLowDataset defaultHighLowDataset0 = null;
//      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset(minute0, (Date[]) null, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'date' argument.
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertNotNull(locale1);
      
      Locale locale2 = locale0.stripExtensions();
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale2.getVariant());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja_JP", locale2.toString());
      assertNotNull(locale2);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale2.getVariant());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja_JP", locale2.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      boolean boolean0 = locale2.hasExtensions();
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale2.getVariant());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja_JP", locale2.toString());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 2104.0);
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale2.getVariant());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja_JP", locale2.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(2104.0, range0.getUpperBound(), 0.01);
      assertEquals(2104.0, range0.getCentralValue(), 0.01);
      assertEquals(2104.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      int int0 = 30;
      int int1 = (-1235);
      // Undeclared exception!
//      try { 
        timeTableXYDataset0.getStartYValue(30, (-1235));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[][] doubleArray0 = new double[16][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(16, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(16, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(16, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(16, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder1 = TableOrder.BY_ROW;
      assertSame(tableOrder1, tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder1.toString());
      assertNotNull(tableOrder1);
      
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertNotSame(jDBCXYDataset1, jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getSeriesCount());
      assertFalse(jDBCXYDataset1.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getItemCount());
      assertFalse(jDBCXYDataset1.equals((Object)jDBCXYDataset0));
      assertNotNull(jDBCXYDataset1);
      
      Float float0 = new Float(2413.5);
      assertEquals(2413.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, 833.944);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(833.944, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertNotNull(xYBarDataset0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(833.944, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertNull(number1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(16, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(16, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(16, doubleArray0.length);
      assertNotNull(range0);
      
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-608.14490312);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-608.14490312)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("6+:GA");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      jDBCXYDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stream<XYIntervalSeriesCollection> stream0 = stack0.stream();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stream0);
      
      String string0 = locale0.getDisplayVariant(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNull(range0);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-2316));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "", 304.47004013);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(boolean0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, (-2083.7));
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals((-2083.7), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      MockDate mockDate0 = new MockDate((-4332), (-4332), 27, (-500), (-2316));
      assertNotNull(mockDate0);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range3);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "Duplicate items in 'columnKeys'.", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertEquals(1, doubleArray0.length);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList1, false);
      assertEquals(0, linkedList1.size());
      assertEquals(1, doubleArray0.length);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double double0 = (-1871.4977113471);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1871.4977113471), 1.7976931348623157E308);
      assertEquals(1.7976931348623157E308, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1871.4977113471), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      int int0 = (-1723);
      Comparable<DefaultIntervalCategoryDataset> comparable0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 1.7976931348623157E308, 0.0, (-1723), (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-608.14490312);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-608.14490312)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1640.497166153, Double.POSITIVE_INFINITY, 730, "6+:GA");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "jS", doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertNotNull(categoryDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(4, doubleArray1.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3033L);
      assertEquals(3033L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(3033L, fixedMillisecond0.getSerialIndex());
      assertEquals(3033L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(3033L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = new MockDate(1699, 1699, 2146594236, 2990, 1556);
      assertNotNull(mockDate0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultPieDataset0);
      assertEquals("Tue Apr 28 15:56:00 GMT 5880916", mockDate0.toString());
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-2797.5));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      String string0 = "vOzGMDGk[:9";
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("vOzGMDGk[:9", "qikz@", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      int int0 = defaultCategoryDataset0.getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      assertNotNull(localDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      defaultCategoryDataset0.fireSelectionEvent();
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("vOzGMDGk[:9", "qikz@", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(double0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int0 = defaultCategoryDataset0.getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayDeque<Byte> arrayDeque0 = new ArrayDeque<Byte>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayList0.retainAll(arrayDeque0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(boolean0);
      
      defaultCategoryDataset0.fireSelectionEvent();
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, false);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(7, doubleArray0.length);
      assertNull(range0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = 1175;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 1175);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) stack0, false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "qikz@", 0.0, 365);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-4111));
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      defaultXYZDataset0.validateObject();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2022, 2985);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(2984, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(2984, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1339.3, Double.NEGATIVE_INFINITY, 23, 0.0, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 1339.3, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 0.0, (-3125.5745755), 1343.07734032988, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, linkedList0, false);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertFalse(boolean0);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1.0, number0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(float0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(0, 0, 182, 0, (-833));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-860.851246), (-1.7976931348623157E308), (-833), 182, 0.0);
      assertEquals("Sat Jun 30 10:07:00 GMT 1900", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0.0, 0.0, (-889779.8417236379), (-1265.937999606), Double.NEGATIVE_INFINITY);
      assertEquals("Sat Jun 30 10:07:00 GMT 1900", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 0.0, (-2.147483648E9), (-1.7976931348623157E308), Double.POSITIVE_INFINITY, (-412.13996834327577));
      assertEquals("Sat Jun 30 10:07:00 GMT 1900", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-889779.8417236379), 0.0, 0.0, 187.5241437, 3908.5160059);
      assertEquals("Sat Jun 30 10:07:00 GMT 1900", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("qikz@", oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean1 = categoryToPieDataset0.equals(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, oHLCDataItemArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, false);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range2);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 0.0, (-508.696), 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertNotSame(range3, range0);
      assertEquals((-1.7976931348623157E308), range3.getLowerBound(), 0.01);
      assertEquals((-8.988465674311579E307), range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range3.getLength(), 0.01);
      assertFalse(range3.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range3);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = true;
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      int int0 = 0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(2632.3689);
      assertEquals(2632.369F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int1 = 15;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 15);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = linkedList0.containsAll(stack0);
      assertEquals(0, linkedList0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2592.37);
      doubleArray0[1] = (-2592.37);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2592.37), (-1891.414311097788), 30, (-2592.37));
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(4900653.347660572, xYSeries0.getMinY(), 0.01);
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(xYSeries0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      double[][] doubleArray1 = new double[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", (String) null, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotNull(categoryDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0, doubleArray1.length);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range2);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(0, doubleArray1.length);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Object object0 = defaultMultiValueCategoryDataset0.clone();
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      assertNotSame(object0, defaultMultiValueCategoryDataset0);
      assertTrue(object0.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(object0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotSame(defaultMultiValueCategoryDataset0, object0);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)object0));
      assertNull(range0);
      
      int int0 = 0;
      String string0 = "-}F\\~7Cu@AW3eY@\";L";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "-}F~7Cu@AW3eY@\";L");
      assertEquals("-}F~7Cu@AW3eY@\";L", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=-}F~7Cu@AW3eY@\";L,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertEquals("-}F~7Cu@AW3eY@\";L", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=-}F~7Cu@AW3eY@\";L,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("-}F~7Cu@AW3eY@\";L", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
//      try { 
        defaultHighLowDataset0.getXDate(0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 154, 266);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(154, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range2);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range3);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 8);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(pieDataset0);
      
      MockDate mockDate0 = new MockDate(11, (-1), 5589, 8, 2078, (-1));
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Sun Mar 21 18:37:59 GMT 1926", mockDate0.toString());
      assertEquals(37, minute0.getMinute());
      assertEquals((-1381641721000L), minute0.getLastMillisecond());
      assertEquals((-1381641721000L), minute0.getFirstMillisecond());
      assertEquals(18, minute0.getHourValue());
      assertNotNull(minute0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) minute0, 1023.750674769519);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Sun Mar 21 18:37:59 GMT 1926", mockDate0.toString());
      assertEquals(37, minute0.getMinute());
      assertEquals((-1381641721000L), minute0.getLastMillisecond());
      assertEquals((-1381641721000L), minute0.getFirstMillisecond());
      assertEquals(18, minute0.getHourValue());
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) mockDate0, (-1905.745978921318), 154);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Sun Mar 21 18:37:59 GMT 1926", mockDate0.toString());
      assertEquals(37, minute0.getMinute());
      assertEquals((-1381641721000L), minute0.getLastMillisecond());
      assertEquals((-1381641721000L), minute0.getFirstMillisecond());
      assertEquals(18, minute0.getHourValue());
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotNull(pieDataset2);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, 618.0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(154, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 16, 154);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(16, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(154, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 16);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(16.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      boolean boolean0 = arrayList0.add(xYBarDataset0);
      assertTrue(arrayList0.contains(xYBarDataset0));
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(16.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(boolean0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(2413.5, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 2413.5;
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.clone();
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultCategoryDataset1);
      
      numberArray1[2] = (Number) 0.0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      DefaultCategoryDataset defaultCategoryDataset2 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("qikz@", "qikz@", numberArray0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset2, defaultCategoryDataset1);
      assertFalse(defaultCategoryDataset2.equals((Object)defaultCategoryDataset0));
      assertFalse(defaultCategoryDataset2.equals((Object)defaultCategoryDataset1));
      assertEquals(2, numberArray0.length);
      assertNotNull(defaultCategoryDataset2);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      assertEquals(100.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(100.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      assertEquals(100.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(100.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(100.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(100.0, xYDataItem1.getXValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotNull(xYDataItem1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertEquals(100.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(100.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 293.15506845701753, 23, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 23, (-3125.5745755), 1343.07734032988, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      int int0 = oHLCDataItem4.compareTo(oHLCDataItem2);
      assertNotSame(oHLCDataItem2, oHLCDataItem4);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(oHLCDataItem2, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem0);
      assertNotSame(oHLCDataItem4, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem2);
      assertNotSame(oHLCDataItem4, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, int0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertFalse(boolean0);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23.0, number0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      int int1 = taskSeriesCollection0.getColumnIndex(oHLCDataItem0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem4);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem4));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      System.setCurrentTimeMillis(0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1.39240928132E12, number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1.39240928132E12, number2);
      assertFalse(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(number2);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-891.24861758506), range1.getCentralValue(), 0.01);
      assertEquals((-3125.5745755), range1.getLowerBound(), 0.01);
      assertEquals(4468.65191582988, range1.getLength(), 0.01);
      assertEquals(1343.07734032988, range1.getUpperBound(), 0.01);
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[][] doubleArray0 = new double[17][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(17, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(1337.2346458927);
      assertEquals(1337.2346F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TimeSeries timeSeries0 = new TimeSeries(Double.POSITIVE_INFINITY);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = categoryToPieDataset0.equals(timeSeriesCollection0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(17, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-564));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      assertNotSame(tableOrder1, tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertNotNull(tableOrder1);
      
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder1, (-2527));
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals((-2527), categoryToPieDataset1.getExtractIndex());
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertFalse(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset1);
      
      boolean boolean0 = categoryToPieDataset1.equals("jS");
      assertNotSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals((-2527), categoryToPieDataset1.getExtractIndex());
      assertFalse(boolean0);
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertFalse(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertEquals(10, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0, (List) stack0, true);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, (-1767.724), 9);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultPieDataset1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) (-2527));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2527.0), range1.getLowerBound(), 0.01);
      assertEquals((-2527.0), range1.getCentralValue(), 0.01);
      assertEquals((-2527.0), range1.getUpperBound(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(range1);
      
      Random.setNextRandom((-991));
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(10, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 602.631;
      doubleArray1[2] = 602.631;
      doubleArray1[3] = 602.631;
      doubleArray1[4] = 71.7146;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 602.631;
      doubleArray2[3] = 234.482718412955;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@5", "(iHZ$;u-aG$1o=W]|", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("The number of row keys does not match the number of rows in the data array.");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("The number of row keys does not match the number of rows in the data array."));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.contains("The number of row keys does not match the number of rows in the data array."));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 335, 266);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(335, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range2);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList1 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList1, true);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNull(range3);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList1 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, false);
      assertFalse(arrayList0.contains("The number of row keys does not match the number of rows in the data array."));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range5.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range5.getLength(), 0.01);
      assertEquals(Double.NaN, range5.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range5.getLowerBound(), 0.01);
      assertNotNull(range5);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 154, 266);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(154, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList1 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = linkedList1.add(defaultStatisticalCategoryDataset0);
      assertTrue(linkedList1.contains(defaultStatisticalCategoryDataset0));
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList1, (Range) null, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, 554.39);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 6.283185307179586;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 335.9637;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 335.9637;
      doubleArray2[1] = (-258.710763);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 335.9637;
      doubleArray3[1] = (-3439.6);
      doubleArray3[2] = 335.9637;
      doubleArray3[3] = 6.283185307179586;
      doubleArray3[4] = 335.9637;
      doubleArray3[5] = (-258.710763);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 335.9637;
      doubleArray4[1] = 6.283185307179586;
      doubleArray4[2] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 6.283185307179586;
      doubleArray5[1] = (-258.710763);
      doubleArray5[2] = (-258.710763);
      doubleArray5[3] = (-3439.6);
      doubleArray5[4] = (-258.710763);
      doubleArray5[5] = 1.0;
      doubleArray5[6] = (-3439.6);
      doubleArray5[7] = 6.283185307179586;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "\"aXk|\"?{-t%cT", doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "=VSiZg@*?.wE", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(2, doubleArray0.length);
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate(1699, 1699, 1699, 1699, 340);
      assertNotNull(mockDate0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 602.631;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3666.859626;
      doubleArray1[2] = 3666.859626;
      doubleArray1[3] = 3666.859626;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = (-1.0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-72);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short) (-30280), bigInteger0.shortValue());
      assertEquals((byte) (-72), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-72), (byte) (-72), (byte) (-119), (byte) (-72)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("", "", (Number[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 0.0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeriesDataItem0);
      
      Comparable<DefaultStatisticalCategoryDataset>[] comparableArray0 = (Comparable<DefaultStatisticalCategoryDataset>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<DefaultStatisticalCategoryDataset>) regularTimePeriod0;
      comparableArray0[1] = (Comparable<DefaultStatisticalCategoryDataset>) timeSeriesDataItem0;
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate(1029, (-1201), (-1201));
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals("Sun Aug 17 00:00:00 GMT 2825", mockDate0.toString());
      assertEquals(338080, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(2825, serialDate0.getYYYY());
      assertEquals(17, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(8, serialDate0.getMonth());
      assertNotNull(serialDate0);
      
      SerialDate serialDate1 = SerialDate.addDays(3660, serialDate0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertEquals("Sun Aug 17 00:00:00 GMT 2825", mockDate0.toString());
      assertEquals(338080, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(2825, serialDate0.getYYYY());
      assertEquals(17, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(2835, serialDate1.getYYYY());
      assertNull(serialDate1.getDescription());
      assertEquals(25, serialDate1.getDayOfMonth());
      assertEquals(341740, serialDate1.toSerial());
      assertEquals(8, serialDate1.getMonth());
      assertEquals(7, serialDate1.getDayOfWeek());
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertNotNull(serialDate1);
      
      boolean boolean0 = serialDate1.isInRange(serialDate0, serialDate0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertEquals("Sun Aug 17 00:00:00 GMT 2825", mockDate0.toString());
      assertEquals(338080, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(2825, serialDate0.getYYYY());
      assertEquals(17, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(2835, serialDate1.getYYYY());
      assertNull(serialDate1.getDescription());
      assertEquals(25, serialDate1.getDayOfMonth());
      assertEquals(341740, serialDate1.toSerial());
      assertEquals(8, serialDate1.getMonth());
      assertEquals(7, serialDate1.getDayOfWeek());
      assertFalse(boolean0);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      
      defaultKeyedValues2DDataset0.setValue((Number) null, (Comparable) serialDate1, (Comparable) mockDate0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FOLLOWING);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertEquals("Sun Aug 17 00:00:00 GMT 2825", mockDate0.toString());
      assertEquals(338080, serialDate0.toSerial());
      assertNull(serialDate0.getDescription());
      assertEquals(2825, serialDate0.getYYYY());
      assertEquals(17, serialDate0.getDayOfMonth());
      assertEquals(1, serialDate0.getDayOfWeek());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(2835, serialDate1.getYYYY());
      assertNull(serialDate1.getDescription());
      assertEquals(25, serialDate1.getDayOfMonth());
      assertEquals(341740, serialDate1.toSerial());
      assertEquals(8, serialDate1.getMonth());
      assertEquals(7, serialDate1.getDayOfWeek());
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 259);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 259, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = 154;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 154, 266);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(154, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList1 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 0.0);
      assertNull(range3);
      
      int int1 = (-1352);
      Random.setNextRandom((-1352));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(154, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(boolean0);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range4);
      
      String string0 = "qikz@4";
      Number[][] numberArray0 = new Number[8][1];
      Number[] numberArray1 = new Number[8];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      numberArray1[0] = (Number) long0;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) integer0;
      // Undeclared exception!
//      try { 
        taskSeriesCollection0.getValue((-1352), (-1352));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultPieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, doubleArray0.length);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, false);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range2);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, (double) 0, 0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultPieDataset1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 0.0);
      assertNull(range3);
      
      Random.setNextRandom(0);
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(10, doubleArray0.length);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertNotSame(range4, range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertTrue(range4.equals((Object)range0));
      assertNotNull(range4);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2592.37);
      doubleArray0[1] = (-2592.37);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(polynomialFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2592.37), (-1891.414311097788), 30, (-2592.37));
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4900653.347660572, xYSeries0.getMinY(), 0.01);
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(xYSeries0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      XYSeries xYSeries1 = new XYSeries((-2592.37), false);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertFalse(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4900653.347660572, xYSeries0.getMinY(), 0.01);
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.add(number0, (Number) (-2592.37));
      assertNotSame(xYSeries0, xYSeries1);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertEquals((-2592.37), xYSeries0.getMinY(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertEquals((-2592.37), xYSeries0.getMinY(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(701.9556889022119, range0.getLength(), 0.01);
      assertEquals((-2241.892155548894), range0.getCentralValue(), 0.01);
      assertEquals((-1890.914311097788), range0.getUpperBound(), 0.01);
      assertEquals((-2592.87), range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(range1, range0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertEquals((-2592.37), xYSeries0.getMinY(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(6720382.216899999, range1.getLength(), 0.01);
      assertEquals(3357598.7384499996, range1.getCentralValue(), 0.01);
      assertEquals((-2592.37), range1.getLowerBound(), 0.01);
      assertEquals(6717789.846899999, range1.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-2592.37));
      assertNull(range2);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2592.37));
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(xYSeries0, xYSeries1);
      assertEquals(700.9556889022119, range3.getLength(), 0.01);
      assertEquals((-2241.892155548894), range3.getCentralValue(), 0.01);
      assertEquals((-1891.414311097788), range3.getUpperBound(), 0.01);
      assertEquals((-2592.37), range3.getLowerBound(), 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2592.37), xYSeries0.getMinX(), 0.01);
      assertEquals((-2592.37), xYSeries0.getMinY(), 0.01);
      assertEquals((-1891.414311097788), xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(6717789.846899999, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {(-2592.37), (-2592.37)}, doubleArray0, 0.01);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range3);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("| 5m$W i_", "| 5m$W i_", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(xYTaskDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range2 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range2);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) vector0, true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNull(range0);
      
      jDBCXYDataset0.validateObject();
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range2);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(number0);
      
      String string0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((String) null, (String) null, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 23, Double.NEGATIVE_INFINITY, 23, 0, Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 23, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 23, (-3125.5745755), 1343.07734032988, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem4);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", timeZone0.getID());
      assertNull(range0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertNotSame(oHLCDataItem2, oHLCDataItem4);
      assertNotSame(oHLCDataItem2, oHLCDataItem3);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(1337.2346458927);
      assertEquals(1337.2346F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TimeSeries timeSeries0 = new TimeSeries(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = categoryToPieDataset0.equals(timeSeriesCollection0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-564));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(number1);
      
      XYSeries xYSeries0 = new XYSeries(float0, false);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.add(number1, number0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(number0.equals((Object)number1));
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, (Number) 0.0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(timeSeriesDataItem0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("*", "A>rq=6Fxgze$0", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) "A>rq=6Fxgze$0", (KeyedValues) pieDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset1);
      
      Range range2 = Range.combine(range0, range0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertTrue(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = linkedList0.add(defaultBoxAndWhiskerXYDataset0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, linkedList0.size());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[10];
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(float0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-505.78180491);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Mz&Q0M#^:Qkz(", ",K?cYIi8", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = new Double((-505.78180491));
      assertEquals((-505.78180491), (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) double0, (-505.78180491), 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(3, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      System.setCurrentTimeMillis(0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(boolean1);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(number1);
      
      XYSeries xYSeries0 = new XYSeries(float0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) vector0, true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNull(range0);
      
      jDBCXYDataset0.validateObject();
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range2);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) vector0, true);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range3);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection1);
      assertNotNull(jDBCPieDataset0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertNotNull(quarter0);
      
      Class<XIntervalSeriesCollection> class0 = XIntervalSeriesCollection.class;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1539);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(1539, spreadsheetDate0.toSerial());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertNotNull(spreadsheetDate0);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(1539, spreadsheetDate0.toSerial());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, date0, (TimeZone) null);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(18, spreadsheetDate0.getDayOfMonth());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(1539, spreadsheetDate0.toSerial());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1904, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNull(regularTimePeriod0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (-1.0), 1233);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertNotNull(pieDataset0);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (-1767.724));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range4);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertNotNull(keyToGroupMap0);
      
      Range range5 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertNull(range5);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(double0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(10, doubleArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("The 'data' is null.", "The 'data' is null.", doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "The 'data' is null.");
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, (-1.0), (-1));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultPieDataset1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1369.671111));
      assertNull(range0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("jS");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals(2413.5, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range1);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range2 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range2);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 154, 266);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(154, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList1 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList1, (Range) null, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList1.size());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      String string0 = null;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      int int0 = 0;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-1770));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range0);
      
      jDBCXYDataset0.validateObject();
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range1);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (-2.147483648E9), (-2316));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 2632.3689);
      assertEquals(2632.3689, range2.getUpperBound(), 0.01);
      assertEquals(2632.3689, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2632.3689, range2.getLowerBound(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 602.631;
      doubleArray1[2] = 602.631;
      doubleArray1[3] = 602.631;
      doubleArray1[4] = 71.7146;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 602.631;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 602.631;
      doubleArray2[3] = 234.482718412955;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = (-1.0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@5", "(iHZ$;u-aG$1o=W]|", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, number1);
      assertTrue(number1.equals((Object)number0));
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 154, 266);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(154, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range2);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList1 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range3);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(154);
      assertEquals(154L, fixedMillisecond0.getLastMillisecond());
      assertEquals(154L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(154L, fixedMillisecond0.getSerialIndex());
      assertEquals(154L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) fixedMillisecond0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(154, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(154L, fixedMillisecond0.getLastMillisecond());
      assertEquals(154L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(154L, fixedMillisecond0.getSerialIndex());
      assertEquals(154L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      int int0 = 11;
      xYDatasetTableModel0.fireTableRowsUpdated(53, 11);
      jDBCXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      int int1 = 1523;
      taskSeriesCollection0.removeAll();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        taskSeriesCollection0.getPercentComplete(53, 11);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 53, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      Minute minute0 = second0.getMinute();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(minute0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 154, 266);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(266, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(154, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range2);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range3);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList1 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList1, (Range) null, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList1.size());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range5);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "qikz@";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((TimeSeriesCollection) null);
      assertEquals("[null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.add((TimeSeriesCollection) null);
      assertEquals("[null, null]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, false);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range2);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "jS", Double.POSITIVE_INFINITY, 0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0);
      assertNotSame(range3, range0);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertTrue(range3.equals((Object)range0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(float0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range1);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, false);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range2);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 0.0, (-508.696), 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertNotSame(range3, range0);
      assertEquals((-1.07374061625E9), range3.getCentralValue(), 0.01);
      assertEquals(2414.5, range3.getUpperBound(), 0.01);
      assertEquals(2.1474860615E9, range3.getLength(), 0.01);
      assertEquals((-2.147483647E9), range3.getLowerBound(), 0.01);
      assertFalse(range3.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = (-1.7976931348623157E308);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) double0, 2413.5, 212);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 7;
      doubleArray1[3] = (double) 7;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-508.696);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 335;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "0ly-", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(335.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range1);
      
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) 7.0;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 7.0;
      numberArray1[3] = (Number) 335.0;
      numberArray1[4] = number0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-72);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short) (-30280), bigInteger0.shortValue());
      assertEquals((byte) (-72), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-72)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bigInteger0);
      
      numberArray1[5] = (Number) bigInteger0;
      numberArray1[6] = (Number) 2.0;
      numberArray1[7] = (Number) 0.0;
      numberArray1[8] = (Number) (-508.696);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "0ly-", numberArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(2, numberArray0.length);
      assertNotNull(categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[3] = 1207.0433;
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 38.24464257485834;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(38.24464257485834);
      assertEquals(38.244644F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(float0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertNotNull(datasetGroup1);
      
      DatasetGroup datasetGroup2 = (DatasetGroup)datasetGroup1.clone();
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertNotSame(datasetGroup1, datasetGroup2);
      assertNotSame(datasetGroup2, datasetGroup0);
      assertNotSame(datasetGroup2, datasetGroup1);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertEquals("NOID", datasetGroup2.getID());
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertTrue(datasetGroup2.equals((Object)datasetGroup0));
      assertTrue(datasetGroup2.equals((Object)datasetGroup1));
      assertNotNull(datasetGroup2);
      
      defaultIntervalXYDataset0.setGroup(datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertNotSame(datasetGroup1, datasetGroup2);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals("NOID", datasetGroup1.getID());
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      assertTrue(datasetGroup1.equals((Object)datasetGroup2));
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stream<XYIntervalSeriesCollection> stream0 = stack0.stream();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stream0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("vOzGMDGk[:9", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[][][] objectArray0 = new Object[4][8][7];
      Object[][] objectArray1 = new Object[2][6];
      objectArray1[0] = (Object[]) doubleArray0;
      objectArray1[1] = (Object[]) doubleArray0;
      objectArray0[0] = objectArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "qikz@");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Stream<XYIntervalSeriesCollection> stream0 = stack0.stream();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stream0);
      
      String string0 = locale0.getDisplayVariant((Locale) null);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[18];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(18, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 8
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stream<XYIntervalSeriesCollection> stream0 = stack0.stream();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stream0);
      
      String string0 = locale0.getDisplayVariant((Locale) null);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stream<XYIntervalSeriesCollection> stream0 = stack0.stream();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stream0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertFalse(priorityQueue0.contains(locale0));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) priorityQueue0, locale_FilteringMode0);
      assertFalse(priorityQueue0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = locale0.getDisplayVariant((Locale) null);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 1.0;
      double[][] doubleArray3 = new double[6][3];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray1;
      doubleArray3[5] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "}x;T!XW{yM!U{xS$b", doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(6, doubleArray3.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) Double.POSITIVE_INFINITY);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@22", "jS", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 4170);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(4170, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 4170);
      assertEquals(4170.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertFalse(arrayList0.contains(number0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      
      XYSeries xYSeries0 = new XYSeries("qikz@", false);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      
      XYSeries xYSeries1 = new XYSeries(float0);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeriesCollection0);
      
      xYSeries0.add(number0, (Number) float0);
      assertNotSame(xYSeries0, xYSeries1);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(4170.0, xYSeries0.getMinY(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(4170.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertFalse(number0.equals((Object)number1));
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("vOzGMDGk[:9", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowIndex(double0);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[][][] objectArray0 = new Object[4][8][7];
      Object[][] objectArray1 = new Object[2][6];
      objectArray1[0] = (Object[]) doubleArray0;
      objectArray1[1] = (Object[]) doubleArray0;
      objectArray0[0] = objectArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((-3251.0F));
      assertEquals((-3251.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-3251.0F));
      assertEquals((-3251.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      boolean boolean0 = categoryToPieDataset0.equals(float1);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(boolean0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(number1);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range2);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("GR0_L4!^P", "GR0_L4!^P", doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(number0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = defaultCategoryDataset0.getRowIndex("GR0_L4!^P");
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals((-1), int0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      assertNotNull(localDate0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = new Float((-2592.37));
      assertEquals((-2592.37F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      linkedList0.addFirst(defaultBoxAndWhiskerXYDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate(7, 335, 0, 7, 335);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
//      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) mockDate0, (Comparable) "K");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Row key (Fri Nov 30 12:35:00 GMT 1934) not recognised.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate(7, 335, 0, 7, 335);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
//      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) mockDate0, (Comparable) "K");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Row key (Fri Nov 30 12:35:00 GMT 1934) not recognised.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      int int0 = 7;
      int int1 = 335;
      int int2 = 0;
      MockDate mockDate0 = new MockDate(7, 335, 0, 7, 335);
      assertNotNull(mockDate0);
      
      String string0 = "K";
      // Undeclared exception!
//      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) mockDate0, (Comparable) "K");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Row key (Fri Nov 30 12:35:00 GMT 1934) not recognised.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 602.631;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      String string0 = "V4*Bq(~T";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "V4*Bq(~T", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", (String) null, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertTrue(boolean0);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset1, (-41));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stream<XYIntervalSeriesCollection> stream0 = stack0.stream();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stream0);
      
      String string0 = locale0.getDisplayVariant((Locale) null);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Hour hour0 = new Hour(mockDate0, timeZone0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 0, 0, (-3125.5745755), Double.POSITIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1339.3, Double.NEGATIVE_INFINITY, 23, 0.0, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1.0, 1.0, 23, 1.0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0, 1.0, 304.47004013, 1339.3, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-3125.5745755), 0.0, (-715.0), 1343.07734032988, Double.NEGATIVE_INFINITY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, linkedList0, false);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(5, oHLCDataItemArray0.length);
      assertNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertFalse(boolean0);
      assertEquals(5, oHLCDataItemArray0.length);
      
      DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset("qikz@5", (String) null, (String) null, "qikz@6");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 15);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(15, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(1337.2346458927);
      assertEquals(1337.2346F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TimeSeries timeSeries0 = new TimeSeries(Double.POSITIVE_INFINITY);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      boolean boolean0 = categoryToPieDataset0.equals(timeSeriesCollection0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(15, categoryToPieDataset0.getExtractIndex());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Stream<XYIntervalSeriesCollection> stream0 = stack0.stream();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stream0);
      
      String string0 = locale0.getDisplayVariant((Locale) null);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 2.0;
      doubleArray2[3] = 2.0;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      String string1 = locale0.getDisplayCountry();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("Taiwan", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) "");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((-3251.0F));
      assertEquals((-3251.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-3251.0F));
      assertEquals((-3251.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getColumnIndex(2413.5);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = categoryToPieDataset0.equals(float1);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(number1);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range2);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 2643, 1931);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Sat Apr 21 11:11:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-2199444540001L), week0.getLastMillisecond());
      assertEquals(16, week0.getWeek());
      assertEquals((-2199444540000L), week0.getFirstMillisecond());
      assertEquals(100716L, week0.getSerialIndex());
      assertEquals(1900, week0.getYearValue());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<Integer>) week0;
      comparableArray0[1] = (Comparable<Integer>) week0;
      Comparable<Integer>[] comparableArray1 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 5);
      assertFalse(comparableArray1.equals((Object)comparableArray0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (Number) 53);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Sat Apr 21 11:11:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-2199444540001L), week0.getLastMillisecond());
      assertEquals(16, week0.getWeek());
      assertEquals((-2199444540000L), week0.getFirstMillisecond());
      assertEquals(100716L, week0.getSerialIndex());
      assertEquals(1900, week0.getYearValue());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      
      comparableArray1[0] = (Comparable<Integer>) timeSeriesDataItem0;
      comparableArray1[1] = (Comparable<Integer>) week0;
      comparableArray1[2] = (Comparable<Integer>) week0;
      comparableArray1[3] = (Comparable<Integer>) week0;
      comparableArray1[4] = (Comparable<Integer>) week0;
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2643;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1931;
      doubleArray1[3] = (double) 2643;
      doubleArray1[4] = (double) 53;
      doubleArray1[5] = (double) 1931;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'rowKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[4];
      Float float0 = new Float(655.5162);
      assertEquals(655.5162F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[0] = (Number) float0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray1[2] = (Number) bigInteger0;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      numberArray1[3] = (Number) integer1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer1;
      numberArray2[1] = (Number) integer1;
      numberArray2[2] = (Number) bigInteger0;
      numberArray2[3] = (Number) integer1;
      numberArray2[4] = (Number) bigInteger0;
      numberArray2[5] = (Number) bigInteger0;
      numberArray2[6] = (Number) bigInteger0;
      numberArray2[7] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) bigInteger0;
      numberArray3[1] = (Number) bigInteger0;
      numberArray3[2] = (Number) float0;
      numberArray3[3] = (Number) float0;
      numberArray3[4] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@6", "6iO%c0nh-", numberArray0);
      assertEquals(3, numberArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(3, numberArray0.length);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1931);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Jan 01 08:11:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-2208959340000L), week0.getFirstMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2208959340001L), week0.getLastMillisecond());
      assertEquals(1900, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) week0, 677.90618);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Jan 01 08:11:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-2208959340000L), week0.getFirstMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2208959340001L), week0.getLastMillisecond());
      assertEquals(1900, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Jan 01 08:11:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-2208959340000L), week0.getFirstMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2208959340001L), week0.getLastMillisecond());
      assertEquals(1900, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Mon Jan 01 08:11:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-2208959340000L), week0.getFirstMillisecond());
      assertEquals(100701L, week0.getSerialIndex());
      assertEquals((-2208959340001L), week0.getLastMillisecond());
      assertEquals(1900, week0.getYearValue());
      assertEquals(1, week0.getWeek());
      assertEquals(677.90618, range0.getUpperBound(), 0.01);
      assertEquals(338.95309, range0.getCentralValue(), 0.01);
      assertEquals(677.90618, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      JDBCXYDataset jDBCXYDataset0 = null;
//      try {
        jDBCXYDataset0 = new JDBCXYDataset("zJp`'xK=}q.5mI", "zJp`'xK=}q.5mI", "{d4)R_H", "w|v(_G<hpQ");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(10, doubleArray0.length);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(10, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) stack0, true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 4409.7126);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(4409.7126, range2.getUpperBound(), 0.01);
      assertEquals(4409.7126, range2.getCentralValue(), 0.01);
      assertEquals(4409.7126, range2.getLowerBound(), 0.01);
      assertEquals(10, doubleArray0.length);
      assertNotNull(range2);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) 0, 1703);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(10, doubleArray0.length);
      assertNotNull(pieDataset1);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(float0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(number1);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, (List) stack0, true);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range2);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-1.7976931348623157E308), (-508.696), 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1.0);
      assertNotSame(range3, range0);
      assertEquals(2414.5, range3.getUpperBound(), 0.01);
      assertEquals((-8.988465674311579E307), range3.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range3.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range3.getLength(), 0.01);
      assertFalse(range3.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range3);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 2643, 1969);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-110), 2500);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2500, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-110), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(2500, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-110), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Stream<XYIntervalSeriesCollection> stream0 = stack0.stream();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stream0);
      
      String string0 = locale0.getDisplayVariant(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(categoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals((-8.988465674311579E307), range1.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertEquals(2413.5, range1.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(range1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset1, 0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(boolean0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset1, (-41));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = null;
      double[][] doubleArray0 = new double[7][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "qikz@6", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertEquals(7, doubleArray0.length);
      assertNotNull(range1);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 594);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 594, Size: 7
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Date date0 = millisecond0.getEnd();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = "The number of row keys does not match the number of rows in the data array.";
      TimeZone timeZone0 = TimeZone.getTimeZone("The number of row keys does not match the number of rows in the data array.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      String string1 = "RyS2@ezF +";
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[8];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 2643, 1969);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Sat Apr 21 11:49:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2199442260001L), week0.getLastMillisecond());
      assertEquals(16, week0.getWeek());
      assertEquals(100716L, week0.getSerialIndex());
      assertEquals((-2199442260000L), week0.getFirstMillisecond());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Sat Apr 21 11:49:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2199442260001L), week0.getLastMillisecond());
      assertEquals(16, week0.getWeek());
      assertEquals(100716L, week0.getSerialIndex());
      assertEquals((-2199442260000L), week0.getFirstMillisecond());
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Sat Apr 21 11:49:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2199442260001L), week0.getLastMillisecond());
      assertEquals(16, week0.getWeek());
      assertEquals(100716L, week0.getSerialIndex());
      assertEquals((-2199442260000L), week0.getFirstMillisecond());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals("Sat Apr 21 11:49:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2199442260001L), week0.getLastMillisecond());
      assertEquals(16, week0.getWeek());
      assertEquals(100716L, week0.getSerialIndex());
      assertEquals((-2199442260000L), week0.getFirstMillisecond());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 580.0;
      doubleArray1[2] = 2208.62135659385;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.5;
      doubleArray1[5] = 1297.66018;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1314.777071;
      doubleArray1[8] = (-195.182);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@1", "qikz@1", doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2500);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2500, Size: 9
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = new Float((-2592.37));
      assertEquals((-2592.37F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(float0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      linkedList0.addFirst(defaultBoxAndWhiskerXYDataset0);
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(505L);
      assertNotNull(localDate0);
      
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((ChronoLocalDate) localDate0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2592.37);
      doubleArray2[1] = (double) 505L;
      doubleArray2[2] = (double) 505L;
      doubleArray2[3] = (double) 505L;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 505L;
      doubleArray3[1] = (-2592.37);
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowIndex(505.0);
      assertEquals((-1), int0);
      
      doubleArray3[2] = (-2592.37);
      doubleArray3[3] = (-2592.37);
      doubleArray3[4] = (-2592.37);
      doubleArray3[5] = 505.0;
      doubleArray3[6] = (-2592.37);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@5", "Duplicate items in 'rowKeys'.", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 2643, (-1));
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(mockDate0, timeZone0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Apr 20 02:59:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(16, week0.getWeek());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2199560460000L), week0.getFirstMillisecond());
      assertEquals((-2199560460001L), week0.getLastMillisecond());
      assertEquals(100716L, week0.getSerialIndex());
      assertNotNull(week0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) defaultKeyedValuesDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Apr 20 02:59:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(16, week0.getWeek());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2199560460000L), week0.getFirstMillisecond());
      assertEquals((-2199560460001L), week0.getLastMillisecond());
      assertEquals(100716L, week0.getSerialIndex());
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Apr 20 02:59:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(16, week0.getWeek());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2199560460000L), week0.getFirstMillisecond());
      assertEquals((-2199560460001L), week0.getLastMillisecond());
      assertEquals(100716L, week0.getSerialIndex());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Apr 20 02:59:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(16, week0.getWeek());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2199560460000L), week0.getFirstMillisecond());
      assertEquals((-2199560460001L), week0.getLastMillisecond());
      assertEquals(100716L, week0.getSerialIndex());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Fri Apr 20 02:59:00 GMT 1900", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(16, week0.getWeek());
      assertEquals(1900, week0.getYearValue());
      assertEquals((-2199560460000L), week0.getFirstMillisecond());
      assertEquals((-2199560460001L), week0.getLastMillisecond());
      assertEquals(100716L, week0.getSerialIndex());
      assertNull(range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2413.5, number0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryToPieDataset0);
      
      Float float0 = new Float((-3251.0F));
      assertEquals((-3251.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = categoryToPieDataset0.equals(float0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      jDBCXYDataset0.removeChangeListener(categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(number1);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 120.37022738806;
      doubleArray2[1] = 2413.5;
      doubleArray2[2] = 2413.5;
      doubleArray2[3] = 3022.7729356;
      doubleArray2[4] = 2413.5;
      doubleArray2[5] = 2413.5;
      doubleArray2[6] = 2413.5;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=Eq<;;bNm8_w[oN38", "=Eq<;;bNm8_w[oN38", doubleArray0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Float float0 = new Float((-688.9708521717));
      assertEquals((-688.9708F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 2413.5, 2413.5, 0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(pieDataset1);
      
      System.setCurrentTimeMillis(0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertFalse(boolean0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertFalse(boolean1);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 154, 266);
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeSeriesCollection0, 266);
      arrayList0.add(xYBarDataset0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) linkedList0, true);
      LinkedList<DefaultStatisticalCategoryDataset> linkedList1 = new LinkedList<DefaultStatisticalCategoryDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      arrayList0.add(xYBarDataset0);
      categoryTableXYDataset0.getDomainBounds(true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      stack0.stream();
      locale0.getDisplayVariant(locale0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = (-2316);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-2316));
      defaultPieDataset0.setValue((Comparable) "", (-2.147483647E9));
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, (-2083.7));
      arrayList0.add(xYBarDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 602.631;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3666.859626;
      doubleArray1[2] = 3666.859626;
      doubleArray1[3] = 3666.859626;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      int int0 = 743;
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1.0, (-1767.724), 743, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int int0 = 2643;
      MockDate mockDate0 = new MockDate(0, 0, 0, 2643, 1969);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((String) null, "qikz@1", (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, (-155), (-326));
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 329.6653249932;
      doubleArray2[1] = (-1931.0);
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 329.6653249932;
      doubleArray3[1] = (-1931.0);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1931.0);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 329.6653249932;
      doubleArray3[7] = 329.6653249932;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1931.0);
      doubleArray4[1] = 4164.86957648107;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 4164.86957648107;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 4164.86957648107;
      doubleArray5[3] = 4164.86957648107;
      doubleArray5[4] = (-1159.13296820496);
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      doubleArray5[8] = 329.6653249932;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (-1931.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 329.6653249932;
      doubleArray7[3] = 329.6653249932;
      doubleArray7[4] = (-1931.0);
      doubleArray7[5] = 484.3994969993449;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(4164.86957648107, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      millisecond0.getEnd();
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowData' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Comparable<DefaultBoxAndWhiskerCategoryDataset> comparable0 = null;
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      int int0 = (-1);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, (-1));
      categoryToPieDataset0.getItemCount();
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NaN;
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", (String) null, doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 2643, 1931);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) defaultKeyedValuesDataset0);
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = "The number of row keys does not match the number of rows in the data array.";
      TimeZone timeZone0 = TimeZone.getTimeZone("The number of row keys does not match the number of rows in the data array.");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2914, 587, timeZone0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      stack0.stream();
      locale0.getDisplayVariant((Locale) null);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) defaultKeyedValues0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, (-2840.8894069583), 1559.09333660971, 0, millisecond0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-499.73);
      doubleArray1[1] = 1509.1;
      doubleArray1[2] = (-43.94146203);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 2563.316015281;
      doubleArray1[5] = 6.283185307179586;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 1568.61183584;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1509.1;
      doubleArray3[4] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 1568.61183584;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-812));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      stack0.stream();
      locale0.getDisplayVariant(locale0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      Range.combine((Range) null, (Range) null);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = (-2316);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-2316));
      defaultPieDataset0.setValue((Comparable) "", 304.47004013);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, (-2083.7));
      arrayList0.add(xYBarDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Month month0 = new Month();
      month0.toString();
      month0.getStart();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) defaultPieDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2413.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("qikz@", "qikz@", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.createCategoryDataset("74Dlh?1iW", (String) null, doubleArray0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) 0.0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // A connection must be supplied.
//         //
//         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = (-2.147483648E9);
      doubleArray0[3] = 0.0;
      MockDate mockDate0 = new MockDate(586, 5279, 1969, (-1466), 1969);
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) (-2.147483648E9), (KeyedValues) defaultKeyedValuesDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 2);
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, 2);
      DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, true);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      double[][] doubleArray0 = new double[10][3];
      double[] doubleArray1 = new double[6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("jS", "", doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      Float float0 = new Float((double) 0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      Stack<Short> stack0 = new Stack<Short>();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, (double) 0, 0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, 0.0);
      Random.setNextRandom(0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      stack0.stream();
      locale0.getDisplayVariant(locale0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-2316));
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      Stack<Short> stack1 = new Stack<Short>();
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack1, false);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) (-2316), 8);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 1.7976931348623157E308);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      LinkedList<DefaultBoxAndWhiskerXYDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerXYDataset>();
      String string0 = "=VSiZg@*?.wE";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "=VSiZg@*?.wE", doubleArray0);
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      DatasetUtilities.createCategoryDataset("=VSiZg@*?.wE", "qikz@1", doubleArray0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 3);
      VectorSeries vectorSeries0 = new VectorSeries("=VSiZg@*?.wE", true, true);
      int int0 = 2626;
      // Undeclared exception!
//      try { 
        vectorSeries0.getDataItem(2626);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 2626, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = "|V3R]E)gO;Ap6";
      TimeZone timeZone0 = TimeZone.getTimeZone("|V3R]E)gO;Ap6");
      timeZone0.getOffset(0L);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, timeZone0);
      dynamicTimeSeriesCollection0.invalidateRangeInfo();
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      Locale locale0 = Locale.CHINESE;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 2;
      doubleArray5[5] = 1648.48182;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = (-1.0);
      doubleArray5[8] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (double) 0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (double) 1;
      doubleArray7[1] = (double) 0;
      doubleArray7[2] = (-1.7976931348623157E308);
      doubleArray7[3] = (double) 0;
      doubleArray7[4] = 1648.48182;
      doubleArray7[5] = (double) 0;
      doubleArray7[6] = (double) 0;
      doubleArray7[7] = (double) 2;
      doubleArray7[8] = 1648.48182;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (double) 0;
      doubleArray8[1] = (-1.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = (double) 0;
      doubleArray9[1] = (double) 1;
      doubleArray9[2] = (double) 1;
      doubleArray9[3] = Double.POSITIVE_INFINITY;
      doubleArray9[4] = (double) 0;
      doubleArray9[5] = 0.0;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("|V3R]E)gO;Ap6", "L@bA", doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) 0.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = "";
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, false);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      taskSeriesCollection0.validateObject();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
      Stack<Short> stack0 = new Stack<Short>();
      DatasetUtilities.findMaximumDomainValue(xYTaskDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone.getDefault();
      Week week0 = new Week(1931, 1931);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1931, 53, 1931, 1, 99.41789802);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      Millisecond millisecond0 = new Millisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      RegularTimePeriod regularTimePeriod1 = millisecond0.previous();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue(regularTimePeriod0, (Number) null);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(regularTimePeriod1);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "+";
      stringArray0[2] = "N$$w89T7nIZ";
      stringArray0[3] = ">oly6^4Ue#kdmXv}xk";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "9~5}";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-3008), 2426);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 964.047411664;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 964.047411664;
      doubleArray2[3] = 964.047411664;
      doubleArray2[4] = 1.7976931348623157E308;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 686.4919435190725;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 686.4919435190725;
      doubleArray3[2] = (-149.7583530338);
      doubleArray3[3] = 686.4919435190725;
      doubleArray3[4] = 1.7976931348623157E308;
      doubleArray3[5] = 686.4919435190725;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      Object[][][] objectArray0 = new Object[2][3][7];
      Object[][] objectArray1 = new Object[9][7];
      objectArray1[0] = (Object[]) doubleArray0;
      objectArray1[1] = (Object[]) doubleArray0;
      objectArray1[2] = (Object[]) doubleArray0;
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = (Object) 1.7976931348623157E308;
      objectArray2[1] = (Object) 964.047411664;
      objectArray1[3] = objectArray2;
      objectArray1[4] = (Object[]) doubleArray0;
      objectArray1[5] = (Object[]) doubleArray0;
      objectArray1[6] = (Object[]) doubleArray0;
      objectArray1[7] = (Object[]) doubleArray0;
      objectArray1[8] = (Object[]) doubleArray0;
      objectArray0[0] = objectArray1;
      Object[][] objectArray3 = new Object[8][7];
      objectArray3[0] = objectArray2;
      objectArray3[1] = objectArray2;
      objectArray3[2] = (Object[]) doubleArray0;
      objectArray3[3] = objectArray2;
      objectArray3[4] = objectArray2;
      Object[] objectArray4 = new Object[2];
      objectArray4[0] = (Object) 0.0;
      Object object0 = new Object();
      objectArray4[1] = object0;
      objectArray3[5] = objectArray4;
      objectArray3[6] = objectArray2;
      objectArray3[7] = objectArray2;
      objectArray0[1] = objectArray3;
      DefaultWindDataset defaultWindDataset0 = null;
//      try {
        defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of series keys does not match the number of series in the data array.
//         //
//         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 602.631;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 3666.859626;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'f' argument.", "", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 594);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 594, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      datasetGroup0.clone();
      datasetGroup0.clone();
      defaultIntervalXYDataset0.setGroup(datasetGroup0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      boolean boolean0 = false;
      DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, false);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      // Undeclared exception!
//      try { 
        xIntervalSeriesCollection0.getSeries(5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.xy.XIntervalSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 580.0;
      doubleArray1[2] = 2208.62135659385;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.5;
      doubleArray1[5] = 1297.66018;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1314.777071;
      doubleArray1[8] = (-195.182);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 580.0;
      doubleArray3[2] = (-195.182);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 580.0;
      doubleArray3[5] = 1297.66018;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-195.182);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 1.0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }
}
