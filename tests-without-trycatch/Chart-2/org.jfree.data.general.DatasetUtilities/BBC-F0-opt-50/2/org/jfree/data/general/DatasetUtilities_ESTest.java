/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 11:26:34 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.HierarchyBoundsListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.swing.Action;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.TransferHandler;
import javax.swing.plaf.synth.SynthSeparatorUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("Duplicate items in 'columnKeys'.");
      assertTrue(stack0.contains("Duplicate items in 'columnKeys'."));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[Duplicate items in 'columnKeys'.]", stack0.toString());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, (-527.834069353376), "Sm0wvzc}D?/riv/");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1404.069690711021));
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1931.903760064397), range0.getLowerBound(), 0.01);
      assertEquals(527.834069353376, range0.getLength(), 0.01);
      assertEquals((-1667.986725387709), range0.getCentralValue(), 0.01);
      assertEquals((-1404.069690711021), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-527.834069353376), range1.getLowerBound(), 0.01);
      assertEquals((-263.917034676688), range1.getCentralValue(), 0.01);
      assertEquals(527.834069353376, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(995.2879003, (-391.3474314), "Series 2");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-391.3474314), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DefaultKeyedValuesDataset", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 930.6933657, Double.NEGATIVE_INFINITY, (-400.6045082), (-400.6045082), 1398.64938770194);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1895.0632456573755;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1895.0632456573755;
      doubleArray2[1] = 1895.0632456573755;
      doubleArray2[2] = 1895.0632456573755;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1895.0632456573755;
      doubleArray3[1] = 1895.0632456573755;
      doubleArray3[2] = 1895.0632456573755;
      doubleArray3[3] = 1895.0632456573755;
      doubleArray3[4] = 1895.0632456573755;
      doubleArray3[5] = 1895.0632456573755;
      doubleArray3[6] = 1895.0632456573755;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      
      defaultIntervalCategoryDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(1895.0632456573755, range0.getCentralValue(), 0.01);
      assertEquals(1895.0632456573755, range0.getUpperBound(), 0.01);
      assertEquals(1895.0632456573755, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("org.jfree.data.general.DatasetGroup");
      assertTrue(stack0.contains("org.jfree.data.general.DatasetGroup"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[org.jfree.data.general.DatasetGroup]", stack0.toString());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("R", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "Index outside valid range.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.5), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertEquals(400, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray2[3] = (Number) integer1;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      List list0 = defaultIntervalCategoryDataset1.getRowKeys();
      assertNotNull(list0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, (List) list0, true);
      assertNotNull(range0);
      assertEquals(2, numberArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("0V/\u0007", "0V/\u0007", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.general.DefaultKeyedValuesDataset", 1, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1820.653), 1692.8994417, "Index outside valid range.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1588.032043168);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1588.032043168, range0.getLowerBound(), 0.01);
      assertEquals(3280.9314848679996, range0.getUpperBound(), 0.01);
      assertEquals(2434.481764018, range0.getCentralValue(), 0.01);
      assertEquals(1692.8994416999997, range0.getLength(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, (-1820.653));
      assertNotNull(lineFunction2D0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1820.653), lineFunction2D0.getSlope(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-1820.653), 0.0, 230, "Index outside valid range.");
      assertNotNull(xYSeries0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1820.653), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1820.653), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(230, xYSeries0.getItemCount());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      
      Random.setNextRandom(230);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-219.4613165808795), 3770.816443, "org.jfree.data.category.SlidingCategoryDataset3");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 628.28, (-1015.4657), 628.28, 628.28, (-1015.4657));
      assertNotNull(oHLCDataItem0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(7, oHLCDataItemArray0.length);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Range(double, double): require lower (628.28) <= upper (-1015.4657).
//         //
//         verifyException("org.jfree.data.Range", e);
//      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1774.38750957202;
      doubleArray1[1] = 1201.0663474909852;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.5;
      doubleArray1[4] = (-1415.0423779597484);
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.5;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1774.38750957202;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1169.052;
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = (-2546.32159824);
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3715.3735982400003, range0.getLength(), 0.01);
      assertEquals(1169.052, range0.getUpperBound(), 0.01);
      assertEquals((-688.6347991200001), range0.getCentralValue(), 0.01);
      assertEquals((-2546.32159824), range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 1774.38750957202);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "Index outside valid range.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((double) (-1393), (double) (-1393), "Series 1");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1393.0), range1.getLowerBound(), 0.01);
      assertEquals((-1393.0), range1.getUpperBound(), 0.01);
      assertEquals((-1393.0), range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range2);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "Index outside valid range.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.5), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(histogramDataset0, (-3399.23019789612));
      assertNotNull(xYBarDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals((-3399.23019789612), xYBarDataset0.getBarWidth(), 0.01);
      
      defaultIntervalCategoryDataset0.addChangeListener(xYBarDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals((-3399.23019789612), xYBarDataset0.getBarWidth(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) list0, range0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add("aXz$oql}>U3`");
      assertTrue(vector0.contains("aXz$oql}>U3`"));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[aXz$oql}>U3`]", vector0.toString());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(vector0, "aXz$oql}>U3`", xYDataItem0);
      assertTrue(vector0.contains("aXz$oql}>U3`"));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[aXz$oql}>U3`]", vector0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertTrue(vector0.contains("aXz$oql}>U3`"));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[aXz$oql}>U3`]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      Number[][] numberArray0 = new Number[2][7];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) bigInteger0;
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(2, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue(2.0, (Comparable) "org.jfree.chart.event.DatasetChangeInfo6", (Comparable) "org.jfree.chart.event.DatasetChangeInfo6");
      boolean boolean0 = linkedList0.add("org.jfree.chart.event.DatasetChangeInfo6");
      assertTrue(linkedList0.contains("org.jfree.chart.event.DatasetChangeInfo6"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      assertNotNull(range0);
      assertTrue(linkedList0.contains("org.jfree.chart.event.DatasetChangeInfo6"));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      
      System.setCurrentTimeMillis((-1919L));
      Float float0 = new Float((double) (-2608L));
      assertNotNull(float0);
      assertEquals((-2608.0F), (float)float0, 0.01F);
      
      Double double0 = new Double((-2608L));
      assertNotNull(double0);
      assertEquals((-2608.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-624L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-574.5163233209536), (-624L), (-2505.0), (-2505.0), 1.5);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 11.0, 11.0, 952.7162, 1.5, 11.0);
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-624L), (-127.0), 1.0, (-624L), (-1.0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1613.952931856375), 3170.91561, (-1118.39071779), (-3602.356451), 1976.80304);
      assertNotNull(oHLCDataItem3);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate1, (-127.0), 1.0, (-147.0), (-574.5163233209536), 0.0);
      assertNotNull(oHLCDataItem4);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      
      oHLCDataItemArray0[0] = oHLCDataItem4;
      oHLCDataItemArray0[1] = oHLCDataItem2;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(148.0, range0.getLength(), 0.01);
      assertEquals((-73.0), range0.getCentralValue(), 0.01);
      assertEquals((-147.0), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotSame(mockDate0, mockDate1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0L, (-127.0), 1.0, (-127.0), 0L);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3676.041511494903, (-1118.39071779), 971.5667, 1011.382023935, 519.87723);
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.data.category.SlidingCategoryDataset2", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.category.SlidingCategoryDataset2", 2, 2);
      assertNotNull(matrixSeries0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-127.0), 1.0, (-127.0), 0L);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, 11.0, 1.5, (-1390.707473584), 2);
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-127.0), (-287.94691459), (-1.0), 0.0, (-368.5924773393));
      assertNotNull(oHLCDataItem2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 3676.041511494903, (-1118.39071779), 971.5667, 1011.382023935, 519.87723);
      assertNotNull(oHLCDataItem3);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.data.category.SlidingCategoryDataset2", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(12.0, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(11.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-20.382648351930996), (-20.382648351930996), "(8?5m%");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 3196.62);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(3176.237351648069, range0.getLowerBound(), 0.01);
      assertEquals(3196.62, range0.getUpperBound(), 0.01);
      assertEquals(3186.428675824034, range0.getCentralValue(), 0.01);
      assertEquals(20.38264835193104, range0.getLength(), 0.01);
      
      categoryTableXYDataset0.setAutoWidth(false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.clearSelection();
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-20.382648351930996), range2.getUpperBound(), 0.01);
      assertEquals((-20.382648351930996), range2.getLowerBound(), 0.01);
      assertEquals((-20.382648351930996), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      defaultKeyedValues2DDataset0.addValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(200.0, number0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "org.jfree.chart.event.DatasetChangeInfo6";
      defaultKeyedValues2DDataset0.setValue((-1002.20673), (Comparable) "org.jfree.chart.event.DatasetChangeInfo6", (Comparable) "org.jfree.chart.event.DatasetChangeInfo6");
      boolean boolean0 = linkedList0.add("org.jfree.chart.event.DatasetChangeInfo6");
      assertTrue(linkedList0.contains(string0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      assertNotNull(range0);
      assertTrue(linkedList0.contains(string0));
      assertEquals(1, linkedList0.size());
      assertEquals((-1002.20673), range0.getLowerBound(), 0.01);
      assertEquals((-1002.20673), range0.getUpperBound(), 0.01);
      assertEquals((-1002.20673), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      System.setCurrentTimeMillis((-2608L));
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("T(['oSTgIW(AhZPP!", "T(['oSTgIW(AhZPP!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 243);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(243, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "T(['oSTgIW(AhZPP!", (KeyedValues) categoryToPieDataset0);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 243, Size: 3
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNull(range0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(2, (-574.5163233209536));
      assertNotNull(lineFunction2D0);
      assertEquals(2.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-574.5163233209536), lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-4.2605379875006655), 1.7976931348623157E308, 2, "org.jfree.data.category.SlidingCategoryDataset2");
      assertNotNull(xYSeriesCollection0);
      assertEquals(2.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-574.5163233209536), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(2.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-574.5163233209536), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals((-4.7605379875006655), range0.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("-");
      assertTrue(stack0.contains("-"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-]", stack0.toString());
      assertTrue(boolean0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, (-388));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-389), dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(stack0.contains("-"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-]", stack0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-389), dynamicTimeSeriesCollection0.getNewestIndex());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-427));
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add("D_ygHn[pfP9-");
      assertTrue(stack0.contains("D_ygHn[pfP9-"));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[D_ygHn[pfP9-]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1424, 0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, false);
      assertNull(range1);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(stack0.contains("D_ygHn[pfP9-"));
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[D_ygHn[pfP9-]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add("org.jfree.data.xy.XIntervalDataItem");
      assertTrue(vector0.contains("org.jfree.data.xy.XIntervalDataItem"));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[org.jfree.data.xy.XIntervalDataItem]", vector0.toString());
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertTrue(vector0.contains("org.jfree.data.xy.XIntervalDataItem"));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[org.jfree.data.xy.XIntervalDataItem]", vector0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate0 = new MockDate((-1689), 365, 365);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1689), (-1337.0367), (-1337.0367), (-1689), 500.03612012);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue May 31 00:00:00 GMT 242", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1689), 1.7976931348623157E308, 500.03612012, 1070.10448649, 1820.009240076415);
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue May 31 00:00:00 GMT 242", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 281.8, 1110.97, Double.NEGATIVE_INFINITY);
      assertNotNull(oHLCDataItem2);
      assertEquals("Tue May 31 00:00:00 GMT 242", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-5.45174496E13), range0.getLowerBound(), 0.01);
      assertEquals((-5.45174496E13), range0.getUpperBound(), 0.01);
      assertEquals((-5.45174496E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(7, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNull(range0);
      assertEquals(7, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range1);
      assertEquals(7, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, 3542.865348098379);
      assertNotNull(xYBarDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(3542.865348098379, xYBarDataset0.getBarWidth(), 0.01);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3542.865348098379, 3542.865348098379);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(3542.865348098379, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3542.865348098379, normalDistributionFunction2D0.getMean(), 0.01);
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(16, 16);
      assertNotNull(powerFunction2D0);
      assertEquals(16.0, powerFunction2D0.getA(), 0.01);
      assertEquals(16.0, powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, 16, 16, "KokR]tF4pFjngk");
      assertNotNull(xYSeriesCollection0);
      assertEquals(16.0, powerFunction2D0.getA(), 0.01);
      assertEquals(16.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (double) 16;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 16;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 16;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("KokR]tF4pFjngk", "Null 'dataset' argument.", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(bigInteger0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.jfree.chart.event.DatasetChangeInfo6";
      stringArray0[1] = "eb";
      stringArray0[2] = "*7~byiWd@p7}AfO-";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      boolean boolean0 = stack0.add("D_ygHn[pfP9-");
      assertTrue(stack0.contains("D_ygHn[pfP9-"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[D_ygHn[pfP9-]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(16, 16);
      assertNotNull(powerFunction2D0);
      assertEquals(16.0, powerFunction2D0.getA(), 0.01);
      assertEquals(16.0, powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, 16, 16, "oVgojfree.chart.event.DatasecChangeInfo2");
      assertNotNull(xYSeriesCollection0);
      assertEquals(16.0, powerFunction2D0.getA(), 0.01);
      assertEquals(16.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range0);
      assertEquals(16.0, powerFunction2D0.getA(), 0.01);
      assertEquals(16.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "org.jfree.chart.event.DatasetChangeInfo61";
      String string1 = null;
      Number[][] numberArray0 = new Number[9][1];
      Number[] numberArray1 = new Number[4];
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 6.283185307179586, (-5298.054405366835), (-5298.054405366835), Double.NEGATIVE_INFINITY, 6.283185307179586);
      assertNotNull(oHLCDataItem0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-1013.16), 6.283185307179586, 3277.1924329740355, (-1356.7515894), (-2784.79466006802));
      assertNotNull(oHLCDataItem1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-1494.142179036), (-1304.8), (-1502.9), Double.NEGATIVE_INFINITY, 6.283185307179586);
      assertNotNull(oHLCDataItem2);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, (-1502.9), (-1013.16), (-2784.79466006802), 6.283185307179586, 3277.1924329740355);
      assertNotNull(oHLCDataItem3);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, (-1356.7515894), (-1304.8), (-1494.142179036), (-5298.054405366835), 1779.273440564722);
      assertNotNull(oHLCDataItem4);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, 1779.273440564722, 1253.78236169369, (-1494.142179036), 6.283185307179586, (-2784.79466006802));
      assertNotNull(oHLCDataItem5);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("org.jfree.chart.event.DatasetChangeInfo61", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      int int0 = 0;
      Number number0 = defaultOHLCDataset0.getOpen(3268, 0);
      assertNotNull(number0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6.283185307179586, number0);
      
      numberArray1[0] = number0;
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1253.78236169369, number1);
      assertFalse(number1.equals((Object)number0));
      
      numberArray1[1] = number1;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      numberArray1[2] = (Number) bigInteger0;
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray1[3] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) bigInteger0;
      numberArray2[2] = number1;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = number0;
      numberArray2[5] = (Number) bigInteger0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        taskSeriesCollection0.getPercentComplete((Comparable) oHLCDataItem2, (Comparable) oHLCDataItem4, 365);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      Year year0 = month0.getYear();
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (double) (-9999);
      doubleArray1[2] = (double) (-9999);
      doubleArray1[3] = (double) (-9999);
      doubleArray1[4] = (double) 9999;
      doubleArray1[5] = (double) 9999;
      doubleArray1[6] = (double) 9999;
      doubleArray1[7] = (-638.26);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-9999);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 9999;
      doubleArray3[1] = (double) (-9999);
      doubleArray3[2] = 2540.0;
      doubleArray3[3] = (double) 9999;
      doubleArray3[4] = (-638.26);
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = (-638.26);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 9999;
      doubleArray4[1] = 2540.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (double) (-9999);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 2540.0;
      doubleArray7[1] = (-638.26);
      doubleArray7[2] = (double) (-9999);
      doubleArray7[3] = 2540.0;
      doubleArray7[4] = (-638.26);
      doubleArray7[5] = (-4204.89);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 2540.0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      String string0 = "Null 'xRange' argument";
      boolean boolean0 = vector0.add("Null 'xRange' argument");
      assertTrue(vector0.contains(string0));
      assertEquals(1, vector0.size());
      assertEquals("[Null 'xRange' argument]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = 1852628618;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1852628618, 1852628618);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1852628618, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1852628618, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((String[]) null, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset1);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)57;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(6, byteArray0.length);
      assertEquals((byte)57, bigInteger0.byteValue());
      assertEquals((short)7737, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)64, (byte)1, (byte) (-107), (byte) (-7), (byte)30, (byte)57}, byteArray0);
      
      numberArray3[2] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2, (-676));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-676), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add("||a:");
      assertTrue(vector0.contains("||a:"));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[||a:]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<String>) "org.jfree.data.category.DefaultIntervalCategoryDataset";
      comparableArray0[1] = (Comparable<String>) "org.jfree.data.category.DefaultIntervalCategoryDataset";
      comparableArray0[2] = (Comparable<String>) "org.jfree.data.category.DefaultIntervalCategoryDataset";
      comparableArray0[3] = (Comparable<String>) "||a:";
      comparableArray0[4] = (Comparable<String>) "org.jfree.data.category.DefaultIntervalCategoryDataset";
      TimeSeries timeSeries0 = new TimeSeries(comparableArray0[0]);
      assertNotNull(timeSeries0);
      assertEquals(6, comparableArray0.length);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(regularTimePeriod0);
      assertNull(timeSeriesDataItem0);
      assertEquals(6, comparableArray0.length);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      comparableArray0[5] = (Comparable<String>) null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, comparableArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(32, 32);
      assertNotNull(powerFunction2D0);
      assertEquals(32.0, powerFunction2D0.getB(), 0.01);
      assertEquals(32.0, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, 32, 32, "org.jfree.chart.event.DatasetChangeInfo2");
      assertNotNull(xYSeriesCollection0);
      assertEquals(32.0, powerFunction2D0.getB(), 0.01);
      assertEquals(32.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(32.0, powerFunction2D0.getB(), 0.01);
      assertEquals(32.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.category.SlidingCategoryDataset2", 2, 2);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[4];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer1);
      assertEquals((-30000), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray1[1] = (Number) integer1;
      Float float0 = new Float((double) 2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      numberArray1[2] = (Number) float0;
      Double double0 = new Double(2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      numberArray1[3] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer1;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) float0;
      numberArray0[1] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.8;
      doubleArray1[2] = 754.5857433530039;
      doubleArray1[3] = (-234.9);
      doubleArray1[4] = (-2712.109493960332);
      doubleArray1[5] = 559.3444222;
      doubleArray1[6] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 559.3444222;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 754.5857433530039;
      doubleArray2[3] = (-234.9);
      doubleArray2[4] = (-234.9);
      doubleArray2[5] = (-234.9);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = 5675.848;
      doubleArray3[2] = 363.8649434116893;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 754.5857433530039;
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2712.109493960332);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 3408.310360810221;
      doubleArray5[1] = 0.8;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 0.8;
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][1];
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      double[][] doubleArray1 = new double[2][7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 686.002691366;
      doubleArray2[1] = 812.384730335971;
      doubleArray2[2] = (-2830.78715012);
      doubleArray2[3] = 2044.00399628;
      doubleArray2[4] = (-227.011518553871);
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 812.384730335971;
      doubleArray3[1] = 812.384730335971;
      doubleArray3[2] = 1036.55547419809;
      doubleArray1[1] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("org.jfree.chart.event.DatasetChangeInfo2");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) "7R>v7+o/6|", (double) 749);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) "7R>v7+o/6|", (double) 749, (-324));
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "7R>v7+o/6|", (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      boolean boolean0 = vector0.add("org.jfree.chart.event.DatasetChangeInfo2");
      assertTrue(vector0.contains("org.jfree.chart.event.DatasetChangeInfo2"));
      assertEquals("[org.jfree.chart.event.DatasetChangeInfo2]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertTrue(vector0.contains("org.jfree.chart.event.DatasetChangeInfo2"));
      assertEquals("[org.jfree.chart.event.DatasetChangeInfo2]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      vector0.clear();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add("org.jfre.data.cat{gory.DefaultIntervalCategoryDataset");
      assertTrue(vector0.contains("org.jfre.data.cat{gory.DefaultIntervalCategoryDataset"));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[org.jfre.data.cat{gory.DefaultIntervalCategoryDataset]", vector0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.add("org.jfre.data.cat{gory.DefaultIntervalCategoryDataset");
      assertTrue(vector0.contains("org.jfre.data.cat{gory.DefaultIntervalCategoryDataset"));
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[org.jfre.data.cat{gory.DefaultIntervalCategoryDataset, org.jfre.data.cat{gory.DefaultIntervalCategoryDataset]", vector0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("org.jfree.chart.event.DatasetChangeInfo2");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("org.jfree.chart.event.DatasetChangeInfo2"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add("org.jfree.data.category.DefaultIntervalCategoryDataset");
      assertFalse(vector0.contains("org.jfree.chart.event.DatasetChangeInfo2"));
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.add("org.jfree.data.category.DefaultIntervalCategoryDataset");
      assertFalse(vector0.contains("org.jfree.chart.event.DatasetChangeInfo2"));
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertEquals(10, vector0.capacity());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset, org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertFalse(vector0.contains("org.jfree.chart.event.DatasetChangeInfo2"));
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertEquals(10, vector0.capacity());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset, org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = vector0.add("org.jfree.data.category.DefaultIntervalCategoryDataset");
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The 'series' argument is out of bounds (", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset3", "org.jfree.data.category.SlidingCategoryDataset3", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      assertTrue(boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 12);
      assertNotNull(categoryToPieDataset0);
      assertEquals(6, numberArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(12, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "org.jfree.data.category.SlidingCategoryDataset3", (double) 12);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 12, Size: 6
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2520.549189);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2520.549189);
      doubleArray2[1] = (-2520.549189);
      doubleArray2[2] = (-2520.549189);
      doubleArray2[3] = (-2520.549189);
      doubleArray2[4] = (-2520.549189);
      doubleArray2[5] = (-2520.549189);
      doubleArray2[6] = (-2520.549189);
      doubleArray2[7] = (-2520.549189);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2520.549189);
      doubleArray3[1] = (-2520.549189);
      doubleArray3[2] = 71.0;
      doubleArray3[3] = (-2520.549189);
      doubleArray3[4] = (-2520.549189);
      doubleArray3[5] = (-2520.549189);
      doubleArray3[6] = (-2520.549189);
      doubleArray3[7] = (-2520.549189);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2520.549189), range0.getLowerBound(), 0.01);
      assertEquals((-2520.549189), range0.getUpperBound(), 0.01);
      assertEquals((-2520.549189), range0.getCentralValue(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries((-2520.549189));
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(30);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Minute minute0 = new Minute(mockDate0, timeZone0);
      assertNotNull(minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, minute0.getMinute());
      assertEquals(30L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(30L, minute0.getFirstMillisecond());
      
      Second second0 = new Second(30, minute0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(30, second0.getSecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, minute0.getMinute());
      assertEquals(30L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(30L, minute0.getFirstMillisecond());
      
      Second second1 = (Second)second0.previous();
      assertNotNull(second1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(30, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(29, second1.getSecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, minute0.getMinute());
      assertEquals(30L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(30L, minute0.getFirstMillisecond());
      assertFalse(second1.equals((Object)second0));
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      
      timeTableXYDataset0.add((TimePeriod) second1, (Number) (-2520.549189), "n2`<%ulj#=l5Nt", false);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(30, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(29, second1.getSecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, minute0.getMinute());
      assertEquals(30L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(30L, minute0.getFirstMillisecond());
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2520.549189));
      assertNotNull(range1);
      assertEquals((-2520.549189), range1.getUpperBound(), 0.01);
      assertEquals((-5041.098378), range1.getLowerBound(), 0.01);
      assertEquals((-3780.8237835), range1.getCentralValue(), 0.01);
      assertEquals(2520.549189, range1.getLength(), 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 2);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
      assertNull(range1);
      assertEquals(1, linkedList0.size());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.TimePeriodAnchor", "5}nGb*dr", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, number0);
      assertTrue(number0.equals((Object)double0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 999, 0, (-1068.496757651), 2.0, (-1068.496757651));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2550.109400038054, (-2.147483648E9), 0, Double.NEGATIVE_INFINITY, 1174.99228);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 4.014022706E9, 0.0, 2550.109400038054, 2.0, 4.014022706E9);
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      int int0 = oHLCDataItem1.compareTo(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, int0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem2));
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertNotSame(oHLCDataItem1, oHLCDataItem2);
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 0.0, 2.0, (-432.6), 1174.99228, (-894.0));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1174.99228, (-2.147483648E9), (-82.90527078319), (-2.147483648E9), (-1068.496757651));
      assertNotNull(oHLCDataItem4);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 1174.99228, 3416.8902, 0, (-432.6), 4.014022706E9);
      assertNotNull(oHLCDataItem5);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(millisecond0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals((-1068.496757651), number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(1174.99228, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(1174.99228, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 433;
      doubleArray1[1] = (double) 433;
      doubleArray1[2] = (double) 433;
      doubleArray1[3] = (double) 433;
      doubleArray1[4] = (double) 433;
      doubleArray1[5] = (double) 433;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 433);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2520.549189);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2520.549189);
      doubleArray2[1] = (-2520.549189);
      doubleArray2[2] = (-2520.549189);
      doubleArray2[3] = (-2520.549189);
      doubleArray2[4] = (-2520.549189);
      doubleArray2[5] = (-2520.549189);
      doubleArray2[6] = (-2520.549189);
      doubleArray2[7] = (-2520.549189);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2520.549189);
      doubleArray3[1] = (-2520.549189);
      doubleArray3[2] = 71.0;
      doubleArray3[3] = (-2520.549189);
      doubleArray3[4] = (-2520.549189);
      doubleArray3[5] = (-2520.549189);
      doubleArray3[6] = (-2520.549189);
      doubleArray3[7] = (-2520.549189);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-2520.549189), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2520.549189), range0.getCentralValue(), 0.01);
      assertEquals((-2520.549189), range0.getLowerBound(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries((-2520.549189));
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-2520.549189));
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2520.549189), range1.getUpperBound(), 0.01);
      assertEquals((-2520.549189), range1.getCentralValue(), 0.01);
      assertEquals((-2520.549189), range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 32;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 53;
      doubleArray3[2] = 1870.7575826988943;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) 53;
      doubleArray4[2] = (double) 53;
      doubleArray4[3] = (double) 32;
      doubleArray4[4] = (double) 1;
      doubleArray4[5] = 1870.7575826988943;
      doubleArray4[6] = (double) 32;
      doubleArray0[4] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.chart.event.DatasetChangeInfo6", "org.jfree.chart.event.DatasetChangeInfo6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(5, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 53.0, 53.0, 749);
      assertNotNull(pieDataset1);
      assertEquals(5, doubleArray0.length);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, number0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Null 'xRange' argument", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      
      matrixSeries0.fireSeriesChanged();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(32, (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(32.0, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, 32, 2, "Null 'xRange' argument");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(32.0, powerFunction2D0.getA(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(32.0, powerFunction2D0.getA(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) week0, (double) 53);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<String> vector0 = new Stack<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      boolean boolean0 = vector0.add("org.jfree.data.category.DefaultIntervalCategoryDataset");
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add("org.jfree.data.category.DefaultIntervalCategoryDataset");
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertEquals(10, vector0.capacity());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      
      Minute minute0 = Minute.parseMinute("&(g,h2");
      assertNull(minute0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(750, 750);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(749, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add("org.jfree.data.category.DefaultIntervalCategoryDataset");
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertEquals(10, vector0.capacity());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.add("UT~Y:J");
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset, UT~Y:J]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 32;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 32;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 1;
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("Null 'xRange' argument"));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("Null 'xRange' argument");
      assertTrue(stack0.contains("Null 'xRange' argument"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Null 'xRange' argument]", stack0.toString());
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.contains("Null 'xRange' argument"));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[Null 'xRange' argument]", stack0.toString());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      boolean boolean1 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<DefaultHighLowDataset> linkedList1 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList1, true);
      assertNull(range0);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 32;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 32;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 53;
      doubleArray4[2] = 1870.7575826988943;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) 53;
      doubleArray5[2] = (double) 53;
      doubleArray5[3] = (double) 32;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = 1870.7575826988943;
      doubleArray5[6] = (double) 32;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.chart.event.DatasetChangeInfo6", "org.jfree.chart.event.DatasetChangeInfo6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(5, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 53.0, 53.0, 749);
      assertNotNull(pieDataset1);
      assertEquals(5, doubleArray0.length);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add("org.jfree.data.category.DefaultIntervalCategoryDataset");
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertFalse(vector0.isEmpty());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.DefaultIntervalCategoryDataset", "6Mp.H2'", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate(34, 34, 34, 34, 34);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      
      long long0 = MockDate.UTC(2146041707, 59, (-235), 59, 33, 1261);
      assertEquals((-6064443231112165464L), long0);
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(320L, millisecond1.getMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 999);
      assertNull(timeSeriesDataItem0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(millisecond0, millisecond1);
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(999.0, timeSeries1.getMinY(), 0.01);
      assertEquals(999.0, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeries1.getItemCount());
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999.0, range0.getLength(), 0.01);
      assertEquals(1.3924092818195E12, range0.getCentralValue(), 0.01);
      assertEquals(1.392409282319E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.3924092818195E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.392409282319E12, range1.getUpperBound(), 0.01);
      assertEquals(999.0, range1.getLength(), 0.01);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add("org.jfree.data.category.DefaultIntervalCategoryDataset");
      assertTrue(vector0.contains("org.jfree.data.category.DefaultIntervalCategoryDataset"));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.jfree.data.category.DefaultIntervalCategoryDataset";
      stringArray0[1] = "org.jfree.chart.event.DatasetChangeInfo5";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo((SeriesChangeType) null, 3422, 11);
      assertNotNull(seriesChangeInfo0);
      assertEquals(3422, seriesChangeInfo0.getIndex1());
      assertEquals(11, seriesChangeInfo0.getIndex2());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent("org.jfree.chart.event.DatasetChangeInfo5", seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(3422, seriesChangeInfo0.getIndex1());
      assertEquals(11, seriesChangeInfo0.getIndex2());
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3422, seriesChangeInfo0.getIndex1());
      assertEquals(11, seriesChangeInfo0.getIndex2());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string0 = "org.jfree.data.category.DefaultIntervalCategoryDataset";
      boolean boolean0 = vector0.add("org.jfree.data.category.DefaultIntervalCategoryDataset");
      assertTrue(vector0.contains(string0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[org.jfree.data.category.DefaultIntervalCategoryDataset]", vector0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.setIntervalWidth(0.0);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(0.0, 0.0, "org.jfree.data.category.SlidingCategoryDataset1");
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 6176.33709984762);
      assertNotNull(range0);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6176.33709984762, range0.getLowerBound(), 0.01);
      assertEquals(6176.33709984762, range0.getUpperBound(), 0.01);
      assertEquals(6176.33709984762, range0.getCentralValue(), 0.01);
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[5];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      numberArray1[1] = (Number) long0;
      Long long1 = new Long((-3453L));
      assertNotNull(long1);
      assertEquals((-3453L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      numberArray1[2] = (Number) long1;
      Integer integer1 = Integer.getInteger("org.jfree.chart.event.DatasetChangeInfo3");
      assertNull(integer1);
      
      numberArray1[3] = (Number) null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)84, bigInteger0.byteValue());
      assertEquals((short)84, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)84}, byteArray0);
      
      numberArray1[4] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(31.0, range0.getLength(), 0.01);
      assertEquals(31.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(15.5, range0.getCentralValue(), 0.01);
      
      ArrayList<BigInteger> arrayList0 = new ArrayList<BigInteger>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayDeque<Float> arrayDeque0 = new ArrayDeque<Float>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean0 = arrayList0.containsAll(arrayDeque0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, false);
      assertNull(range1);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNotNull(range2);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(31.0, range2.getUpperBound(), 0.01);
      assertEquals(15.5, range2.getCentralValue(), 0.01);
      assertEquals(31.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertTrue(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getRowCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-2901.0), 2784.5448934327296, "Null 'xRange' argument");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1105.1877185611497));
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(287.0847281552151, range0.getCentralValue(), 0.01);
      assertEquals(2784.5448934327296, range0.getLength(), 0.01);
      assertEquals((-1105.1877185611497), range0.getLowerBound(), 0.01);
      assertEquals(1679.35717487158, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      Integer integer0 = new Integer((-549));
      assertNotNull(integer0);
      assertEquals((-549), (int)integer0);
      
      numberArray1[4] = (Number) integer0;
      numberArray1[5] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = null;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(2, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      defaultKeyedValuesDataset0.setValue((Comparable) day0, (-151.7911202));
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.chart.event.DatasetChangeInfo2", 2, 2);
      assertNotNull(matrixSeries0);
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) 2.0, 3099.39, 2);
      assertNotNull(pieDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1.0));
      assertNotNull(range2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(2.0, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((double) 71, (Comparable) "4OUczCnd[&L.)[EZ", (Comparable) "4OUczCnd[&L.)[EZ");
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(double0);
      assertEquals(71.0, (double)double0, 0.01);
      
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) double0, (Comparable) double0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1.0), 1.0, 71, double0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 71, 1563.89471045, 2, "4OUczCnd[&L.)[EZ");
      assertNotNull(xYSeries0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-6.394292360719456E-4), xYSeries0.getMaxY(), 0.01);
      assertEquals(1563.89471045, xYSeries0.getMaxX(), 0.01);
      assertEquals(71.0, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-0.014084507042253521), xYSeries0.getMinY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.chart.event.DatasetChangeInfo2", 2, 2);
      assertNotNull(matrixSeries0);
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeries0.zeroAll();
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "org.jfree.chart.event.DatasetChangeInfo2", (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowData' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(bigInteger0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add((String) null);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4213, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(4213, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(4213, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add("createInstance");
      assertTrue(vector0.contains("createInstance"));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[createInstance]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      assertNull(range0);
      assertTrue(vector0.contains("createInstance"));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[createInstance]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "createInstance");
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = vector0.add("org.jfree.chart.event.DatasetChangeInfo3");
      assertTrue(vector0.contains("org.jfree.chart.event.DatasetChangeInfo3"));
      assertEquals("[org.jfree.chart.event.DatasetChangeInfo3]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertTrue(vector0.contains("org.jfree.chart.event.DatasetChangeInfo3"));
      assertEquals("[org.jfree.chart.event.DatasetChangeInfo3]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(6, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(31.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(31.0, range0.getLength(), 0.01);
      assertEquals(31.0, range0.getUpperBound(), 0.01);
      assertEquals(15.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(number0));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
      assertNull(range1);
      assertEquals(0, numberArray0.length);
      assertFalse(vector0.contains(number0));
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = vector0.add(xYSeriesCollection0);
      assertTrue(vector0.contains(xYSeriesCollection0));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.xy.XYSeriesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("QV|m_wWRNxcnAA6]", 76, 76);
      assertNotNull(matrixSeries0);
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate(34, 34, 34, 34, 34);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = millisecond0.compareTo(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(1, int0);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(millisecond0, millisecond1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 999);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(millisecond0, millisecond1);
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(999.0, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(999.0, timeSeries1.getMinY(), 0.01);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.392409282319E12, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getLength(), 0.01);
      assertEquals(1.3924092818195E12, range0.getCentralValue(), 0.01);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range2);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(999.0, range2.getLowerBound(), 0.01);
      assertEquals(999.0, range2.getCentralValue(), 0.01);
      assertEquals(999.0, range2.getUpperBound(), 0.01);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range3);
      
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      matrixSeries0.fireSeriesChanged();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(31.0, number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      assertEquals(31.0, range0.getLength(), 0.01);
      assertEquals(31.0, range0.getUpperBound(), 0.01);
      assertEquals(15.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.category.SlidingCategoryDataset3", 273, 1);
      assertNotNull(matrixSeries0);
      assertEquals(273, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(273, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(273, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(273, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(273, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(273, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertNull(matrixSeries0.getDescription());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries0 = new TimeSeries("Null 'xRange' argument");
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Null 'xRange' argument");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(31.0, range0.getLength(), 0.01);
      assertEquals(15.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(31.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate(17, 17, 17, 17, 17);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Mon Jun 17 17:17:00 GMT 1918", mockDate0.toString());
      assertEquals((-1626504180000L), millisecond0.getFirstMillisecond());
      assertEquals((-1626504180000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Mon Jun 17 17:17:00 GMT 1918", mockDate0.toString());
      assertEquals((-1626504180000L), millisecond0.getFirstMillisecond());
      assertEquals((-1626504180000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Mon Jun 17 17:17:00 GMT 1918", mockDate0.toString());
      assertEquals((-1626504180000L), millisecond0.getFirstMillisecond());
      assertEquals((-1626504180000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate1 = new MockDate(0, 0, 0);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Mon Jun 17 17:17:00 GMT 1918", mockDate0.toString());
      assertEquals((-1626504180000L), second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-1626504179001L), second0.getLastMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 999);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Mon Jun 17 17:17:00 GMT 1918", mockDate0.toString());
      assertEquals((-1626504180000L), millisecond0.getFirstMillisecond());
      assertEquals((-1626504180000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals((-1626504180000L), second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-1626504179001L), second0.getLastMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Mon Jun 17 17:17:00 GMT 1918", mockDate0.toString());
      assertEquals((-1626504180000L), millisecond0.getFirstMillisecond());
      assertEquals((-1626504180000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Mon Jun 17 17:17:00 GMT 1918", mockDate0.toString());
      assertEquals((-1626504180000L), millisecond0.getFirstMillisecond());
      assertEquals((-1626504180000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999.0, number0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Mon Jun 17 17:17:00 GMT 1918", mockDate0.toString());
      assertEquals((-1626504180000L), millisecond0.getFirstMillisecond());
      assertEquals((-1626504180000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999.0, range1.getLowerBound(), 0.01);
      assertEquals(999.0, range1.getUpperBound(), 0.01);
      assertEquals(999.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(range1, range0);
      
      String string0 = "You are trying to add data where the time period class is ";
      Number[][] numberArray0 = new Number[9][2];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray1[3] = (Number) float0;
      numberArray1[4] = number0;
      numberArray1[5] = (Number) 999;
      numberArray1[6] = (Number) 59;
      numberArray1[7] = (Number) 59;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 999;
      numberArray2[1] = (Number) 999;
      numberArray2[2] = number0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) 999;
      numberArray2[5] = (Number) 0;
      numberArray2[6] = (Number) 0;
      numberArray2[7] = (Number) float0;
      numberArray2[8] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[5];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) 0;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(millisecond1);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      // Undeclared exception!
//      try { 
        defaultBoxAndWhiskerXYDataset0.getMinOutlier(0, 999);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 999, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries0 = new TimeSeries("Null 'xRange' argument");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      
      timeSeries0.removeAgedItems((long) 32, true);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      
      TimeSeries timeSeries1 = new TimeSeries("Null 'xRange' argument", "9Z_{t#E", "9Z_{t#E");
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals("9Z_{t#E", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("9Z_{t#E", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      SynthSeparatorUI synthSeparatorUI0 = new SynthSeparatorUI();
      assertNotNull(synthSeparatorUI0);
      
      timeSeries1.removePropertyChangeListener(synthSeparatorUI0);
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals("9Z_{t#E", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("9Z_{t#E", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotNull(timeSeries2);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals("9Z_{t#E", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("9Z_{t#E", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertTrue(timeSeries2.getNotify());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertNull(timeSeries2.getDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(0, timeSeries2.getItemCount());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      
      Float float0 = new Float(2390.270579);
      assertNotNull(float0);
      assertEquals(2390.2705F, (float)float0, 0.01F);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(32, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(31.0, number0);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2390.270579;
      doubleArray1[1] = (double) 32;
      doubleArray1[2] = 2390.270579;
      doubleArray1[3] = (double) 32;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5787.899236;
      doubleArray2[1] = 2390.270579;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 5787.899236;
      doubleArray3[1] = (double) 32;
      doubleArray3[2] = 2390.270579;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate(34, 34, 34, 34, 34);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate1 = new MockDate(0, 34, (-3167));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      int int0 = timeSeriesCollection0.indexOf(mockDate1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals("Tue Feb 27 00:00:00 GMT 1894", mockDate1.toString());
      assertEquals((-1), int0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(320L, millisecond1.getMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) 0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("YdG4x>({=jb");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      assertNotNull(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(320L, millisecond1.getMillisecond());
      assertTrue(millisecond1.equals((Object)millisecond0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond1, (Number) 0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(320L, millisecond1.getMillisecond());
      assertTrue(millisecond1.equals((Object)millisecond0));
      assertNotSame(millisecond1, millisecond0);
      
      TimeSeries timeSeries1 = new TimeSeries(millisecond0, "org.jfree.chart.event.DatasetChangeInfo4", "YdG4x>({=jb");
      assertNotNull(timeSeries1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("org.jfree.chart.event.DatasetChangeInfo4", timeSeries1.getDomainDescription());
      assertEquals("YdG4x>({=jb", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertTrue(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotNull(timeSeries2);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("org.jfree.chart.event.DatasetChangeInfo4", timeSeries1.getDomainDescription());
      assertEquals("YdG4x>({=jb", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertTrue(timeSeries2.getNotify());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertNull(timeSeries2.getDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertTrue(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      
      Float float0 = new Float(0.8);
      assertNotNull(float0);
      assertEquals(0.8F, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate(34, 34, 34, 34, 34);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate1 = new MockDate(0, 0, 0);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(320L, millisecond1.getMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 999);
      assertNull(timeSeriesDataItem0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999.0, number0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999.0, range1.getLength(), 0.01);
      assertEquals(1.392409282319E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.3924092818195E12, range1.getCentralValue(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(hour0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      int int0 = defaultBoxAndWhiskerXYDataset0.indexOf(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, int0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 31.0, 274, 0.0);
      assertNotNull(xYSeries0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(274, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(31.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        xYSeries0.getY(274);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 274, Size: 274
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultKeyedValues2DDataset0.clearSelection();
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jf$'e.data.pie.AbstractvieDVtaset", 1, 289);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(289, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(289, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(289, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(289, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(289, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(289, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(289, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(289, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(289, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(289, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(288.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(288.0, range1.getUpperBound(), 0.01);
      assertEquals(144.0, range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 32, 32);
      assertNotNull(matrixSeries0);
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "Null 'xRange' argument", (-3643.0), (-3068));
      assertNotNull(pieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "Null 'xRange' argument", (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Double double0 = new Double(4927.66526608329);
      assertNotNull(double0);
      assertEquals(4927.66526608329, (double)double0, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(double0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotEquals((double)double0, (double)number0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number[][] numberArray0 = new Number[5][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, numberArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Week week0 = new Week(4197, 4197);
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(101, week0.getWeek());
      assertEquals(4197, week0.getYearValue());
      assertEquals(222542L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) week0, (double) 1, (-2890));
      assertNotNull(pieDataset0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(101, week0.getWeek());
      assertEquals(4197, week0.getYearValue());
      assertEquals(222542L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(101, week0.getWeek());
      assertEquals(4197, week0.getYearValue());
      assertEquals(222542L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(0, linkedList0.size());
      assertEquals(101, week0.getWeek());
      assertEquals(4197, week0.getYearValue());
      assertEquals(222542L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.chart.event.DatasetChangeInfo1", 76, 76);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      matrixSeries0.fireSeriesChanged();
      assertNull(matrixSeries0.getDescription());
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(75.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(75.0, range0.getUpperBound(), 0.01);
      assertEquals(37.5, range0.getCentralValue(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)2, bigInteger1.shortValue());
      assertEquals((byte)2, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) xYDataItem0);
      assertNotNull(pieDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertFalse(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
      assertNull(range1);
      assertFalse(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      boolean boolean1 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = Range.expand(range0, 1438.95, 1438.95);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, range1, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)11, bigInteger1.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset[] xYBarDatasetArray0 = new XYBarDataset[3];
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)11, bigInteger1.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertEquals((short)11, bigInteger2.shortValue());
      assertEquals((byte)11, bigInteger2.byteValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 1945.0);
      assertNotNull(xYBarDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1945.0, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      
      xYBarDatasetArray0[0] = xYBarDataset0;
      XYBarDataset xYBarDataset1 = new XYBarDataset(xYBarDataset0, (-2154.660197));
      assertNotNull(xYBarDataset1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1945.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-2154.660197), xYBarDataset1.getBarWidth(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(xYBarDataset1.equals((Object)xYBarDataset0));
      
      xYBarDatasetArray0[1] = xYBarDataset1;
      XYBarDataset xYBarDataset2 = new XYBarDataset(xYBarDataset0, 1945.0);
      assertNotNull(xYBarDataset2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1945.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1945.0, xYBarDataset2.getBarWidth(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(xYBarDataset0.equals((Object)xYBarDataset1));
      assertFalse(xYBarDataset2.equals((Object)xYBarDataset1));
      assertFalse(xYBarDataset2.equals((Object)xYBarDataset0));
      
      xYBarDatasetArray0[2] = xYBarDataset2;
      XYBarDataset[] xYBarDatasetArray1 = linkedList0.toArray(xYBarDatasetArray0);
      assertNotNull(xYBarDatasetArray1);
      assertEquals(3, xYBarDatasetArray0.length);
      assertEquals(3, xYBarDatasetArray1.length);
      assertEquals(0, linkedList0.size());
      assertSame(xYBarDatasetArray0, xYBarDatasetArray1);
      assertSame(xYBarDatasetArray1, xYBarDatasetArray0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Hour hour1 = (Hour)hour0.previous();
      assertNotNull(hour1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(19, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertFalse(hour1.equals((Object)hour0));
      assertNotSame(hour1, hour0);
      assertNotSame(hour0, hour1);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger1, (Comparable) xYDataItem0, (Comparable) hour1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(19, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((byte)11, bigInteger1.byteValue());
      assertEquals((short)11, bigInteger1.shortValue());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertFalse(hour1.equals((Object)hour0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(hour0.equals((Object)hour1));
      assertNotSame(hour1, hour0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(hour0, hour1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(11.0, range0.getUpperBound(), 0.01);
      assertEquals(5.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(11.0, range0.getLength(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = linkedList0.add(timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, range0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(0, linkedList0.size());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-352));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-352), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("dG4x>({=jbD.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Stack<BigInteger> stack0 = new Stack<BigInteger>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      boolean boolean0 = stack0.add(bigInteger0);
      assertTrue(stack0.contains(bigInteger0));
      assertFalse(stack0.isEmpty());
      assertEquals("[10]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertTrue(boolean0);
      
      Range range1 = Range.shift(range0, Double.NaN, false);
      assertNotNull(range1);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      boolean boolean1 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) stack0, range0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Series index out of bounds
//         //
//         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((-1621.0), (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      Vector<JSeparator> vector0 = new Vector<JSeparator>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      assertNull(range0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range1);
      assertEquals((-1621.0), range1.getUpperBound(), 0.01);
      assertEquals((-1621.0), range1.getLowerBound(), 0.01);
      assertEquals((-1621.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[6][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) "xEw1q5\"Ynu#Sj=~#D", (Comparable) bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) linkedList0, range0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[19];
      doubleArray1[1] = 1780.5374652;
      doubleArray1[3] = 1780.5374652;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1780.5374652, range0.getUpperBound(), 0.01);
      assertEquals(890.2687326, range0.getCentralValue(), 0.01);
      assertEquals(1780.5374652, range0.getLength(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      int int0 = 2;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 2);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      xYDataItem0.setY((Number) bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, true);
      assertNull(range0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.jfree.data.category.SlidingCategoryDataset2";
      stringArray0[1] = "The number of column keys does not match the number of columns in the data array.";
      stringArray0[2] = ":E";
      stringArray0[3] = "fWNsIZ|9):*V+d>Vk";
      stringArray0[4] = "org.jfree.chart.event.DatasetChangeInfo3";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      int int0 = (-342);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 9, (-342));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(5, stringArray0.length);
      assertEquals((-342), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(9, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) linkedList0, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)2, bigInteger1.shortValue());
      assertEquals((byte)2, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) xYDataItem0);
      assertNotNull(pieDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = linkedList0.add(timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range1);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((-1621.0), (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals((-1621.0), number0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNotNull(range1);
      assertEquals((-1621.0), range1.getLowerBound(), 0.01);
      assertEquals((-1621.0), range1.getUpperBound(), 0.01);
      assertEquals((-1621.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number[][] numberArray0 = new Number[5][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 0);
      defaultIntervalCategoryDataset0.setSeriesKeys(comparableArray0);
      assertEquals(5, numberArray0.length);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getDomainDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "z_Y*Sg=", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(5, doubleArray1.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "xEw1q5\"Ynu#SjF~#f", (double) 2);
      assertNotNull(pieDataset1);
      assertEquals(5, doubleArray1.length);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(5, doubleArray1.length);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(5, doubleArray1.length);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.chart.event.DatasetChangeInfo4", 96, 96);
      assertNotNull(matrixSeries0);
      assertEquals(96, matrixSeries0.getRowCount());
      assertEquals(9216, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(96, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(96, matrixSeries0.getRowCount());
      assertEquals(9216, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(96, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(96, matrixSeries0.getRowCount());
      assertEquals(9216, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(96, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(96, matrixSeries0.getRowCount());
      assertEquals(9216, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(96, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(95.0, range0.getLength(), 0.01);
      assertEquals(95.0, range0.getUpperBound(), 0.01);
      assertEquals(47.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-2485.77262624848);
      doubleArray0[3] = (-2485.77262624848);
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 19);
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      comparableArray0[0] = (Comparable<Short>) millisecond0;
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-2485.77262624848));
      assertNull(timeSeriesDataItem0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals((-2485.77262624848), timeSeries0.getMaxY(), 0.01);
      assertEquals((-2485.77262624848), timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      
      comparableArray0[1] = (Comparable<Short>) null;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2541L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-2541L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2541L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2541L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2541L), fixedMillisecond0.getMiddleMillisecond());
      
      Float float0 = new Float((float) (-2541L));
      assertNotNull(float0);
      assertEquals((-2541.0F), (float)float0, 0.01F);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) float0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals((-2541L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2541L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2541L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2541L), fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      int int0 = keyToGroupMap0.getGroupIndex(timeSeriesDataItem0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-2541L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2541L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2541L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2541L), fixedMillisecond0.getMiddleMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      assertEquals((-1), int0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jf$ee.data.pie.AbstractPieDVtaset", 1, 289);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(289, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(289, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(289, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(289, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0, "", "org.jfree.data.category.SlidingCategoryDataset2");
      assertNotNull(timePeriodValues0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("org.jfree.data.category.SlidingCategoryDataset2", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 1000);
      assertNotNull(timePeriodValues1);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("org.jfree.data.category.SlidingCategoryDataset2", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("org.jfree.data.category.SlidingCategoryDataset2", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("org.jfree.data.category.SlidingCategoryDataset2", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("org.jfree.data.category.SlidingCategoryDataset2", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      boolean boolean0 = linkedList0.add(timePeriodValuesCollection0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(1, linkedList0.size());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("org.jfree.data.category.SlidingCategoryDataset2", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("org.jfree.data.category.SlidingCategoryDataset2", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(boolean0);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate(34, 34, 34, 34, 34);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate1 = new MockDate(0, 0, 0);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 999);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("?.i8|M&%Y`o*7>ShV", 59, 34);
      assertNotNull(matrixSeries0);
      assertEquals(2006, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(34, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(2006, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(34, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(2006, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(34, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset1, false);
      assertNull(range1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) millisecond1, (double) 59, 0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'seriesKey' argument.", 96, 96);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(96, matrixSeries0.getColumnsCount());
      assertEquals(9216, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(96, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(96, matrixSeries0.getColumnsCount());
      assertEquals(9216, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(96, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(96, matrixSeries0.getColumnsCount());
      assertEquals(9216, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(96, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(96, matrixSeries0.getColumnsCount());
      assertEquals(9216, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(96, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(95.0, range0.getUpperBound(), 0.01);
      assertEquals(47.5, range0.getCentralValue(), 0.01);
      assertEquals(95.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList1 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'rowKey' argument.", 2, 53);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(106, matrixSeries0.getItemCount());
      
      matrixSeries0.fireSeriesChanged();
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(106, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList1 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertTrue(jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu_Separator0.isFocusCycleRoot());
      assertFalse(jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenu_Separator0.getIgnoreRepaint());
      
      int int0 = week0.compareTo(jPopupMenu_Separator0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenu_Separator0.isFocusCycleRoot());
      assertFalse(jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(1, int0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'rowKey' argument.", 2, 53);
      assertNotNull(matrixSeries0);
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = 1595.496903468327;
      doubleArray1[2] = 3401.065919926;
      doubleArray1[3] = (-2183.94397957239);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-84.6531206279);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.chart.event.DatasetChangeInfo", "org.jfree.chart.event.DatasetChangeInfo", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) bigInteger0, 0.0);
      assertNotNull(pieDataset1);
      assertEquals(1, doubleArray0.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) bigInteger0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.7976931348623157E308, 1.7976931348623157E308);
      assertNotNull(powerFunction2D0);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getB(), 0.01);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-3088.0), 0.0, 90, bigInteger0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1.7976931348623157E308, powerFunction2D0.getB(), 0.01);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1.7976931348623157E308, powerFunction2D0.getB(), 0.01);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(4.547473508864641E-13, range1.getUpperBound(), 0.01);
      assertEquals((-1543.9999999999998), range1.getCentralValue(), 0.01);
      assertEquals(3088.0000000000005, range1.getLength(), 0.01);
      assertEquals((-3088.0), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3067.556614587);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3067.556614587);
      doubleArray2[1] = (-4054.1697864715);
      doubleArray2[2] = (-3067.556614587);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3067.556614587);
      doubleArray3[1] = (-879.5170649);
      doubleArray3[2] = (-4054.1697864715);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-3067.556614587);
      doubleArray4[1] = (-879.5170649);
      doubleArray4[2] = (-4054.1697864715);
      doubleArray4[3] = 1.0;
      doubleArray4[4] = (-1835.216400191988);
      doubleArray4[5] = (-879.5170649);
      doubleArray4[6] = (-879.5170649);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-879.5170649);
      doubleArray5[1] = 1.0;
      doubleArray5[2] = (-4054.1697864715);
      doubleArray5[3] = (-548.1059999999998);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (-879.5170649);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = (-1835.216400191988);
      doubleArray7[1] = 1.0;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = (-1975.77);
      doubleArray7[4] = (-4054.1697864715);
      doubleArray7[5] = (-3067.556614587);
      doubleArray7[6] = 1.0;
      doubleArray7[7] = (-548.1059999999998);
      doubleArray7[8] = (-4054.1697864715);
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(7, doubleArray0.length);
      assertEquals((-7931.238494169993), range0.getCentralValue(), 0.01);
      assertEquals((-15864.476988339986), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(15866.476988339986, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 2);
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      comparableArray0[0] = (Comparable<Short>) millisecond0;
      TimeSeries timeSeries0 = new TimeSeries((-2485.77262624848));
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((DefaultBoxAndWhiskerXYDataset) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-656.65252299);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ejqu$t5";
      stringArray0[1] = "7fztOc~JH";
      stringArray0[2] = "org.jfree.data.general.SeriesChangeType";
      stringArray0[3] = "Requires 'start' < 'end'.";
      stringArray0[4] = "l0~Dw-/1s`,H`/3";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)2, bigInteger1.shortValue());
      assertEquals((byte)2, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger1, (Comparable) bigInteger1, (Comparable) bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)2, bigInteger1.shortValue());
      assertEquals((byte)2, bigInteger1.byteValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-1837.216400191988));
      assertNotNull(range1);
      assertEquals((-1835.216400191988), range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals((-1837.216400191988), range1.getLowerBound(), 0.01);
      assertEquals((-1836.216400191988), range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      assertNotNull(range2);
      assertEquals(2.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(2.0, range2.getUpperBound(), 0.01);
      assertEquals(2.0, range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getDomainDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "z_Y*Sg=", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(5, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "xEw1q5\"Ynu#SjF~#f", (double) 2);
      assertNotNull(defaultPieDataset0);
      assertEquals(5, doubleArray1.length);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      
      defaultPieDataset0.insertValue(2, (Comparable) "Null 'visibleSeriesKeys' argument.", (-537.801895937));
      assertEquals(5, doubleArray1.length);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
//         //
//         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      XYDataItem xYDataItem1 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem1);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.pie.AbstractPieDataset", 334, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(334, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(334, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(334, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(334, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(334, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(334, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number1);
      assertFalse(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, (-903.2389));
      assertNotNull(xYBarDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals((-903.2389), xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals((-903.2389), xYBarDataset0.getBarWidth(), 0.01);
      
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-903.2389);
      doubleArray1[1] = (-903.2389);
      doubleArray1[2] = (-903.2389);
      doubleArray1[3] = (-903.2389);
      doubleArray1[4] = (-903.2389);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-903.2389);
      doubleArray2[1] = (-903.2389);
      doubleArray2[2] = (-903.2389);
      doubleArray2[3] = (-903.2389);
      doubleArray2[4] = (-903.2389);
      doubleArray2[5] = (-903.2389);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-903.2389);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-903.2389);
      doubleArray4[1] = (-903.2389);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-903.2389);
      doubleArray5[1] = (-903.2389);
      doubleArray5[2] = (-903.2389);
      doubleArray5[3] = (-903.2389);
      doubleArray5[4] = (-903.2389);
      doubleArray5[5] = (-903.2389);
      doubleArray5[6] = (-903.2389);
      doubleArray5[7] = (-903.2389);
      doubleArray5[8] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = Double.POSITIVE_INFINITY;
      doubleArray6[1] = (-903.2389);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-903.2389);
      doubleArray6[4] = (-903.2389);
      doubleArray6[5] = Double.POSITIVE_INFINITY;
      doubleArray6[6] = (-903.2389);
      doubleArray6[7] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = Double.POSITIVE_INFINITY;
      doubleArray7[1] = (-1106.7611);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-903.2389);
      doubleArray7[4] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultStatisticalCategoryDataset0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add(defaultStatisticalCategoryDataset0);
      assertTrue(vector0.contains(defaultStatisticalCategoryDataset0));
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(true));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertFalse(arrayList0.contains(true));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      String string0 = xYDataItem0.toString();
      assertNotNull(string0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals("[1.0, 1.0]", string0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      BigInteger bigInteger1 = (BigInteger)xYDataItem0.getY();
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertSame(bigInteger0, bigInteger1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[1.0, 1.0]";
      stringArray0[1] = "[1.0, 1.0]";
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) bigInteger1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-56);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      assertNotNull(bigInteger2);
      assertEquals(5, byteArray0.length);
      assertEquals((short)7368, bigInteger2.shortValue());
      assertEquals((byte) (-56), bigInteger2.byteValue());
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)17, (byte)23, (byte)1, (byte)28, (byte) (-56)}, byteArray0);
      
      BigInteger bigInteger3 = bigInteger1.gcd(bigInteger2);
      assertNotNull(bigInteger3);
      assertEquals(5, byteArray0.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((short)7368, bigInteger2.shortValue());
      assertEquals((byte) (-56), bigInteger2.byteValue());
      assertEquals((short)1, bigInteger3.shortValue());
      assertEquals((byte)1, bigInteger3.byteValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertTrue(bigInteger3.equals((Object)bigInteger0));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertArrayEquals(new byte[] {(byte)17, (byte)23, (byte)1, (byte)28, (byte) (-56)}, byteArray0);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger1, bigInteger3);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      
      numberArray1[1] = (Number) bigInteger0;
      numberArray1[2] = (Number) bigInteger1;
      numberArray1[3] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = (Number) bigInteger1;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) bigInteger0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList1 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'rowKey' argument.", 2, 53);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      matrixSeries0.fireSeriesChanged();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getRangeDescription());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "z_Y*Sg=", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(defaultPieDataset0);
      assertEquals(5, doubleArray1.length);
      
      defaultPieDataset0.insertValue(2, (Comparable) "Null 'visibleSeriesKeys' argument.", 168.6874588962);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "xEw1q5\"Ynu#SjF~#f", (double) 2);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
//         //
//         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 0.8;
      doubleArray0[2] = 0.8;
      doubleArray0[3] = 0.8;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) 0.8, (Comparable) 0.8, (Comparable) 0.8);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(0.4, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLength(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 0.8);
      assertNotNull(range1);
      assertEquals(0.8, range1.getLowerBound(), 0.01);
      assertEquals(1.6, range1.getUpperBound(), 0.01);
      assertEquals(1.2000000000000002, range1.getCentralValue(), 0.01);
      assertEquals(0.8, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 0);
      Comparable<Double>[] comparableArray1 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 2);
      comparableArray1[0] = (Comparable<Double>) 0.8;
      comparableArray1[1] = (Comparable<Double>) 0.8;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'columnKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      XYDataItem xYDataItem0 = new XYDataItem(0.8, 754.798);
      assertNotNull(xYDataItem0);
      assertEquals(754.798, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.8, xYDataItem0.getXValue(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[][] doubleArray1 = new double[4][0];
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2478.2);
      doubleArray2[1] = 1930.094;
      doubleArray2[3] = 754.798;
      doubleArray2[4] = 0.8;
      doubleArray2[5] = 1930.094;
      doubleArray2[6] = (-2478.2);
      doubleArray2[7] = 754.798;
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1930.094;
      doubleArray3[1] = 0.8;
      doubleArray3[2] = 754.798;
      doubleArray3[3] = (-2478.2);
      doubleArray3[4] = 0.8;
      doubleArray3[5] = 1930.094;
      doubleArray1[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("y}dYzaj$nw,|", (String) null, doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(4, doubleArray1.length);
      assertEquals((-2478.2), number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
//      try { 
        taskSeriesCollection0.getStartValue(1, 1);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("dG4x>({=jbD.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, (-1786.8813815815265));
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals((-1786.8813815815265), xYBarDataset0.getBarWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYBarDataset0);
      assertNull(number0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals((-1786.8813815815265), xYBarDataset0.getBarWidth(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3541.7311477, 3541.7311477);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.5, 53, 44, xYDataItem0);
      assertNotNull(xYSeries0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertEquals(44, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3541.7311477;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (-749.69394472);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 53;
      doubleArray2[1] = (-749.69394472);
      doubleArray2[2] = (-2183.94397957239);
      doubleArray2[3] = (double) 44;
      doubleArray2[4] = (-749.69394472);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-749.69394472), 3541.7311477);
      assertNotNull(pieDataset1);
      assertEquals(2, doubleArray0.length);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      Comparable<XIntervalSeriesCollection> comparable0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Minute minute0 = Minute.parseMinute(";-.T{g`jPMw57w^+");
      assertNull(minute0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 1.0, 1.0, 91, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, true);
      assertNull(range0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Float float0 = new Float(3541.7311477);
      assertNotNull(float0);
      assertEquals(3541.7312F, (float)float0, 0.01F);
      
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3541.7311477;
      doubleArray1[1] = 3541.7311477;
      doubleArray1[2] = 3541.7311477;
      doubleArray1[3] = 3541.7311477;
      doubleArray1[4] = 3541.7311477;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3541.7311477, range1.getLowerBound(), 0.01);
      assertEquals(3541.7311477, range1.getUpperBound(), 0.01);
      assertEquals(3541.7311477, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "dG4x>({=jbD.";
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("dG4x>({=jbD.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) "dG4x>({=jbD.", (Comparable) bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection((TimePeriodValues) null);
      assertNotNull(timePeriodValuesCollection1);
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      
      boolean boolean0 = linkedList0.add(timePeriodValuesCollection1);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertTrue(boolean0);
      assertTrue(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      assertNotSame(timePeriodValuesCollection1, timePeriodValuesCollection0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, range0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[19];
      doubleArray1[1] = 1780.5374652;
      doubleArray1[3] = 1780.5374652;
      doubleArray0[1] = doubleArray1;
      doubleArray0[1] = doubleArray0[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries1 = new TimeSeries(1780.5374652);
      assertNotNull(timeSeries1);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(timeSeries1.getNotify());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotNull(timeSeries2);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertNull(timeSeries2.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertTrue(timeSeries2.getNotify());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Float float0 = new Float(1780.5374652);
      assertNotNull(float0);
      assertEquals(1780.5375F, (float)float0, 0.01F);
      
      boolean boolean0 = vector0.add(float0);
      assertTrue(vector0.contains(float0));
      assertEquals(10, vector0.capacity());
      assertEquals("[1780.5375]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'series' argument is out of bounds (-1).
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3541.7311477, 3541.7311477);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.5, 53, 44, xYDataItem0);
      assertNotNull(xYSeries0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(44, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3541.7311477;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (-749.69394472);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 53;
      doubleArray2[1] = (-749.69394472);
      doubleArray2[2] = (-2183.94397957239);
      doubleArray2[3] = (double) 44;
      doubleArray2[4] = (-749.69394472);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.SlidingCategoryDataset", "org.jfree.data.category.SlidingCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 3541.7311477, (double) 0);
      assertNotNull(pieDataset1);
      assertEquals(2, doubleArray0.length);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3542.7311477, double0, 0.01);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)2, bigInteger1.byteValue());
      assertEquals((short)2, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) xYDataItem0);
      assertNotNull(pieDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = linkedList0.add(timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) linkedList0, range0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Stack<BigInteger> stack0 = new Stack<BigInteger>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.shift(range0, Double.NaN, false);
      assertNotNull(range1);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = Range.expandToInclude(range0, Double.NaN);
      assertNotNull(range2);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range0, range1);
      assertSame(range0, range2);
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) stack0, range1, false);
      assertNull(range3);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range4 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, Double.NaN);
      assertNull(range4);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Minute minute0 = Minute.parseMinute("");
      assertNull(minute0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-100);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte) (-100), bigInteger0.byteValue());
      assertEquals((short)8604, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)36, (byte)35, (byte)33, (byte) (-100)}, byteArray0);
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals(4, byteArray0.length);
      assertEquals((byte) (-100), bigInteger0.byteValue());
      assertEquals((short)8604, bigInteger0.shortValue());
      assertEquals((byte) (-97), bigInteger1.byteValue());
      assertEquals((short)8607, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)36, (byte)35, (byte)33, (byte) (-100)}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      defaultKeyedValues2DDataset1.setValue((Number) (byte) (-100), (Comparable) bigInteger0, (Comparable) (byte)35);
      assertEquals(4, byteArray0.length);
      assertEquals((byte) (-100), bigInteger0.byteValue());
      assertEquals((short)8604, bigInteger0.shortValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertArrayEquals(new byte[] {(byte)36, (byte)35, (byte)33, (byte) (-100)}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset1);
      assertNotNull(range0);
      assertEquals(100.0, range0.getLength(), 0.01);
      assertEquals((-100.0), range0.getLowerBound(), 0.01);
      assertEquals((-50.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) bigInteger0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate(34, 34, 34, 34, 34);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0, second0.getSecond());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 999);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, second0.getSecond());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeSeriesCollection0, true);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertNotNull(range0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      Range range1 = Range.shift(range0, (double) 999, true);
      assertNotNull(range1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.392409282319E12, range1.getCentralValue(), 0.01);
      assertEquals(1.3924092823195E12, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(1.3924092823185E12, range1.getLowerBound(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNotNull(range2);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(999.0, range2.getUpperBound(), 0.01);
      assertEquals(999.0, range2.getLowerBound(), 0.01);
      assertEquals(999.0, range2.getCentralValue(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, range2, true);
      assertNull(range3);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(999.0, range2.getUpperBound(), 0.01);
      assertEquals(999.0, range2.getLowerBound(), 0.01);
      assertEquals(999.0, range2.getCentralValue(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range4);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1.3924092818195E12, range4.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range4.getLowerBound(), 0.01);
      assertEquals(1.392409282319E12, range4.getUpperBound(), 0.01);
      assertEquals(999.0, range4.getLength(), 0.01);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(bigInteger0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList1 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'rowKey' argument.", 2, 53);
      assertNotNull(matrixSeries0);
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(52.0, range0.getUpperBound(), 0.01);
      assertEquals(26.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(52.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(53, matrixSeries0.getColumnsCount());
      assertEquals(106, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(52.0, range1.getLength(), 0.01);
      assertEquals(52.0, range1.getUpperBound(), 0.01);
      assertEquals(26.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate(34, 34, 34, 34, 34);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 999);
      assertNull(timeSeriesDataItem0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      timeSeries0.setDomainDescription(">QHcnwy,");
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(">QHcnwy,", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      TimeSeries timeSeries1 = new TimeSeries(mockDate1);
      assertNotNull(timeSeries1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertTrue(timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries2);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(">QHcnwy,", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(999.0, timeSeries1.getMaxY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(999.0, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertTrue(timeSeries2.getNotify());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertNull(timeSeries2.getDescription());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      
      Float float0 = new Float((-912.3023));
      assertNotNull(float0);
      assertEquals((-912.3023F), (float)float0, 0.01F);
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(999.0, range1.getLowerBound(), 0.01);
      assertEquals(999.0, range1.getUpperBound(), 0.01);
      assertEquals(999.0, range1.getCentralValue(), 0.01);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(">QHcnwy,", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("dG4x>({=jbD.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate(34, 34, 34, 34, 34);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(320L, millisecond1.getMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 999);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals((-1043673960000L), second0.getFirstMillisecond());
      assertEquals((-1043673959001L), second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      
      TimeSeries timeSeries1 = new TimeSeries(mockDate1);
      assertNotNull(timeSeries1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.getNotify());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries2);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(999.0, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.getNotify());
      assertEquals(999.0, timeSeries1.getMaxY(), 0.01);
      assertNull(timeSeries2.getDescription());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertTrue(timeSeries2.getNotify());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      
      Float float0 = new Float((-912.3023));
      assertNotNull(float0);
      assertEquals((-912.3023F), (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.3924092818195E12, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getLength(), 0.01);
      assertEquals(1.392409282319E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("Sat Dec 05 10:34:00 GMT 1936", mockDate0.toString());
      assertEquals((-1043673960000L), millisecond0.getLastMillisecond());
      assertEquals((-1043673960000L), millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(999.0, number0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-2485.77262624848);
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-2485.77262624848), range0.getLowerBound(), 0.01);
      assertEquals((-1242.88631312424), range0.getCentralValue(), 0.01);
      assertEquals(2485.77262624848, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries((-2485.77262624848));
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeries timeSeries1 = new TimeSeries((-2485.77262624848), (String) null, (String) null);
      assertNotNull(timeSeries1);
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries1);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = new TimeSeries((-2485.77262624848));
      assertNotNull(timeSeries2);
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertTrue(timeSeries2.getNotify());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertNull(timeSeries2.getDescription());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertTrue(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      
      TimeSeries timeSeries3 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotNull(timeSeries3);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries3.getMaxY(), 0.01);
      assertEquals(0, timeSeries3.getItemCount());
      assertEquals(9223372036854775807L, timeSeries3.getMaximumItemAge());
      assertTrue(timeSeries3.getNotify());
      assertEquals("Value", timeSeries3.getRangeDescription());
      assertNull(timeSeries3.getDescription());
      assertEquals("Time", timeSeries3.getDomainDescription());
      assertEquals(Double.NaN, timeSeries3.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries3.getMaximumItemCount());
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertFalse(timeSeries3.equals((Object)timeSeries1));
      assertFalse(timeSeries3.equals((Object)timeSeries0));
      assertFalse(timeSeries3.equals((Object)timeSeries2));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries3);
      assertNotSame(timeSeries1, timeSeries3);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries3, timeSeries1);
      assertNotSame(timeSeries3, timeSeries0);
      assertNotSame(timeSeries3, timeSeries2);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Float float0 = new Float((-2485.77262624848));
      assertNotNull(float0);
      assertEquals((-2485.7727F), (float)float0, 0.01F);
      
      boolean boolean0 = vector0.add(float0);
      assertTrue(vector0.contains(float0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[-2485.7727]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'series' argument is out of bounds (-1).
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      Number number0 = xYDataItem0.getY();
      assertNotNull(number0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((byte)10, number0.byteValue());
      assertEquals((short)10, number0.shortValue());
      assertSame(bigInteger0, number0);
      assertSame(number0, bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertSame(bigInteger1, bigInteger0);
      assertSame(bigInteger1, number0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) xYDataItem0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertSame(bigInteger0, number0);
      assertSame(bigInteger0, bigInteger1);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertSame(bigInteger0, number0);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertSame(bigInteger0, number0);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(xYDataItem0, xYDataItem1);
      
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<Byte>) xYDataItem0;
      comparableArray0[1] = (Comparable<Byte>) xYDataItem0;
      comparableArray0[2] = (Comparable<Byte>) xYDataItem0;
      comparableArray0[3] = (Comparable<Byte>) xYDataItem0;
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-733.84225);
      doubleArray1[1] = 262.118;
      doubleArray1[2] = 492.579457;
      doubleArray1[3] = 2373.9161119705;
      doubleArray1[4] = 2045.18801172;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1815.23240239);
      doubleArray1[7] = 0.8;
      doubleArray1[8] = (-1191.81);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 262.118;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'columnKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("dG4x>({=jbD.");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeSeries timeSeries0 = new TimeSeries("dG4x>({=jbD.");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = (Second)second0.next();
      assertNotNull(second1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertFalse(second1.equals((Object)second0));
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second1, (Number) 0);
      assertNull(timeSeriesDataItem0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      
      TimeSeries timeSeries1 = new TimeSeries("dG4x>({=jbD.");
      assertNotNull(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries2);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0.0, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(0.0, timeSeries1.getMaxY(), 0.01);
      assertTrue(timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertTrue(timeSeries2.getNotify());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertNull(timeSeries2.getDescription());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      
      Float float0 = new Float((-157.19441495014));
      assertNotNull(float0);
      assertEquals((-157.19441F), (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNotNull(double0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.fireSelectionEvent();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, true);
      assertNull(range0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertNull(number0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3541.7311477;
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "zrq:i>", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(3541.7311477, range1.getLength(), 0.01);
      assertEquals(3541.7311477, range1.getUpperBound(), 0.01);
      assertEquals(1770.86557385, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f");
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[6][0];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.8;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = 0.8;
      doubleArray2[3] = 0.8;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(6, doubleArray1.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "lkn>[", 0.8);
      assertNotNull(pieDataset1);
      assertEquals(6, doubleArray1.length);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertEquals(6, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(range1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2189));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3541.7311477;
      doubleArray1[1] = 3541.7311477;
      doubleArray1[2] = 3541.7311477;
      doubleArray1[3] = 3541.7311477;
      doubleArray1[4] = 3541.7311477;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3541.7311477;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3541.7311477;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (-4119.28));
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = taskSeriesCollection0.equals(yIntervalSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[19];
      doubleArray1[1] = 1780.5374652;
      doubleArray1[3] = 1780.5374652;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1780.5374652, range0.getUpperBound(), 0.01);
      assertEquals(890.2687326, range0.getCentralValue(), 0.01);
      assertEquals(1780.5374652, range0.getLength(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries1 = new TimeSeries(1780.5374652);
      assertNotNull(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotNull(timeSeries2);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertTrue(timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertTrue(timeSeries2.getNotify());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01);
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertNull(timeSeries2.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries2.getMaximumItemCount());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Float float0 = new Float(1780.5374652);
      assertNotNull(float0);
      assertEquals(1780.5375F, (float)float0, 0.01F);
      
      boolean boolean0 = vector0.add(float0);
      assertTrue(vector0.contains(float0));
      assertEquals(10, vector0.capacity());
      assertEquals("[1780.5375]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, range0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'series' argument is out of bounds (-1).
//         //
//         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[6][0];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.8;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = 0.8;
      doubleArray2[3] = 0.8;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      Year year0 = week0.getYear();
      assertNotNull(year0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(0.0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = true;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowData' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[4][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("dG4x>({=jbD.", "dG4x>({=jbD.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)2, bigInteger1.shortValue());
      assertEquals((byte)2, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) xYDataItem0);
      assertNotNull(pieDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertFalse(boolean0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 3789);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 3789, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-34));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, (-2479));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-2480), dynamicTimeSeriesCollection0.getNewestIndex());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1900, (-886));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(1900, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-886), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (double) 2);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[19];
      doubleArray1[1] = 1780.5374652;
      doubleArray1[3] = 1780.5374652;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1780.5374652, range0.getUpperBound(), 0.01);
      assertEquals(890.2687326, range0.getCentralValue(), 0.01);
      assertEquals(1780.5374652, range0.getLength(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1780.5374652, range0.getUpperBound(), 0.01);
      assertEquals(890.2687326, range0.getCentralValue(), 0.01);
      assertEquals(1780.5374652, range0.getLength(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      assertEquals(19, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(19, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, number0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range2);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      xYDataItem0.setSelected(true);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, linkedList0.size());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(bigInteger0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      defaultKeyedValues2DDataset0.setValue((Number) short0, (Comparable) xYDataItem0, (Comparable) bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYBarDataset0);
      assertNull(number0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
//      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("RQwg^t@", "", "Range", "Null 'rowData' argument.");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f");
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[6][0];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.8;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = 0.8;
      doubleArray2[3] = 0.8;
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(range1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.8);
      assertNotNull(range2);
      assertEquals(6, doubleArray1.length);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.8, range2.getLowerBound(), 0.01);
      assertEquals(0.8, range2.getCentralValue(), 0.01);
      assertEquals(0.8, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        SerialDate.createInstance((-1067), (-1), (-1));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The 'year' argument must be in range 1900 to 9999.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1780.5374652;
      doubleArray1[2] = 1780.5374652;
      doubleArray1[3] = 1780.5374652;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1780.5374652, range0.getLength(), 0.01);
      assertEquals(1780.5374652, range0.getUpperBound(), 0.01);
      assertEquals(890.2687326, range0.getCentralValue(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(1780.5374652);
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1780.5374652, range0.getLength(), 0.01);
      assertEquals(1780.5374652, range0.getUpperBound(), 0.01);
      assertEquals(890.2687326, range0.getCentralValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#Sj=~#D", "xEw1q5\"Ynu#Sj=~#D", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 0.8;
      doubleArray0[2] = 0.8;
      doubleArray0[3] = 0.8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray1[2] = (Number) bigInteger0;
      numberArray1[3] = (Number) bigInteger0;
      numberArray1[4] = (Number) bigInteger0;
      numberArray1[5] = (Number) bigInteger0;
      numberArray1[7] = (Number) bigInteger0;
      numberArray1[8] = (Number) bigInteger0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertSame(bigInteger1, bigInteger0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = linkedList0.add(timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number[][] numberArray0 = new Number[3][7];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) bigInteger1;
      numberArray2[1] = (Number) bigInteger1;
      numberArray2[2] = (Number) bigInteger0;
      numberArray2[3] = (Number) bigInteger1;
      numberArray2[4] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) bigInteger0;
      numberArray3[1] = (Number) bigInteger0;
      numberArray3[2] = (Number) bigInteger1;
      numberArray3[3] = (Number) bigInteger1;
      numberArray3[4] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(3, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1564, 1800);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1799, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1799, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotNull(range1);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1799, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultXYZDataset defaultXYZDataset1 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset1);
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      
      int int0 = new Integer(1564);
      assertEquals(1564, int0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range2 = Range.combine(range1, range1);
      assertNotNull(range2);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1799, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0);
      assertNull(range3);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      assertNotNull(pieDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries(")_V[pD^uY(R(9", 1896, 2);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1896, matrixSeries0.getRowCount());
      assertEquals(3792, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      matrixSeries0.fireSeriesChanged();
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1896, matrixSeries0.getRowCount());
      assertEquals(3792, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1896, matrixSeries0.getRowCount());
      assertEquals(3792, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range4);
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1896, matrixSeries0.getRowCount());
      assertEquals(3792, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, range4.getCentralValue(), 0.01);
      assertEquals(1.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range4.getLength(), 0.01);
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#Sj=~#D", "xEw1q5\"Ynu#Sj=~#D", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[7][0];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.8;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = 0.8;
      doubleArray2[3] = 0.8;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("xEw1q5\"Ynu#Sj=~#D", "xEw1q5\"Ynu#Sj=~#D", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray1.length);
      
      CategoryDataset categoryDataset1 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 0.8);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      JList<CategoryTableXYDataset> jList0 = new JList<CategoryTableXYDataset>();
      assertNotNull(jList0);
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      
      List<CategoryTableXYDataset> list0 = jList0.getSelectedValuesList();
      assertNotNull(list0);
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 4352.62;
      doubleArray1[2] = (-1394.7658);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4352.62;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2.0;
      doubleArray3[1] = (-1394.7658);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 2.0;
      doubleArray5[1] = 2.0;
      doubleArray5[2] = (-1394.7658);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-1394.7658);
      doubleArray6[1] = 2.0;
      doubleArray6[2] = (-1394.7658);
      doubleArray6[3] = (-1394.7658);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 4352.62;
      doubleArray7[1] = 2.0;
      doubleArray7[2] = 4352.62;
      doubleArray7[3] = 2.0;
      doubleArray7[4] = 2.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 1780.5374652;
      doubleArray8[1] = 4352.62;
      doubleArray8[2] = (-1394.7658);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-1394.7658);
      doubleArray8[5] = (-1394.7658);
      doubleArray8[6] = 4352.62;
      doubleArray8[7] = 2.0;
      doubleArray8[8] = 2.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      
      doubleArray9[0] = (-1394.7658);
      doubleArray9[1] = 0.0;
      doubleArray9[2] = (-1394.7658);
      doubleArray9[3] = 4352.62;
      doubleArray9[4] = 4352.62;
      doubleArray9[5] = 4352.62;
      doubleArray9[6] = 0.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 1
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("xEw1q5\"Ynu#SjF~#f", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[6][0];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.8;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = 0.8;
      doubleArray2[3] = 0.8;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(6, doubleArray1.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "lkn>[", 0.8);
      assertNotNull(pieDataset1);
      assertEquals(6, doubleArray1.length);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[1];
      numberArray0[3] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("dG4x>({=jbD.", "dG4x>({=jbD.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(6, numberArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray1[2] = (Number) bigInteger0;
      numberArray1[3] = (Number) bigInteger0;
      numberArray1[4] = (Number) bigInteger0;
      numberArray1[5] = (Number) bigInteger0;
      numberArray1[6] = (Number) bigInteger0;
      numberArray1[7] = (Number) bigInteger0;
      numberArray1[8] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3541.7311477, 3541.7311477);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.5, 53, 44, xYDataItem0);
      assertNotNull(xYSeries0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(44, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(44, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (double) 53;
      doubleArray0[3] = 2189.8696;
      doubleArray0[4] = (double) 44;
      doubleArray0[5] = 0.5;
      doubleArray0[6] = 3541.7311477;
      doubleArray0[7] = (double) 53;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(xYDataItem0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1.0, 6.283185307179586, 53.0, 2189.8696, 44.0, 0.5, 3541.7311477, 53.0}, doubleArray0, 0.01);
      
      xYSeriesCollection0.setSelectionState(defaultHighLowDataset0);
      assertEquals(0, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(44, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {1.0, 6.283185307179586, 53.0, 2189.8696, 44.0, 0.5, 3541.7311477, 53.0}, doubleArray0, 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(6.934219391308082E-5, range1.getUpperBound(), 0.01);
      assertEquals(6.883587039325618E-5, range1.getCentralValue(), 0.01);
      assertEquals(6.832954687343154E-5, range1.getLowerBound(), 0.01);
      assertEquals(1.0126470396492867E-6, range1.getLength(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(44, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range1, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(bigInteger0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)69;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertNotNull(bigInteger1);
      assertEquals(9, byteArray0.length);
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)23621, bigInteger1.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)35, (byte)40, (byte)1, (byte)37, (byte)12, (byte)83, (byte)2, (byte)92, (byte)69}, byteArray0);
      
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      assertNotNull(bigInteger2);
      assertEquals(9, byteArray0.length);
      assertEquals((byte)69, bigInteger1.byteValue());
      assertEquals((short)23621, bigInteger1.shortValue());
      assertEquals((byte)117, bigInteger2.byteValue());
      assertEquals((short)23669, bigInteger2.shortValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)35, (byte)40, (byte)1, (byte)37, (byte)12, (byte)83, (byte)2, (byte)92, (byte)69}, byteArray0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) (byte)12, (Comparable) (byte)35, (Comparable) (byte)1);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(12.0, range0.getLength(), 0.01);
      assertEquals(12.0, range0.getUpperBound(), 0.01);
      assertEquals(6.0, range0.getCentralValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(12.0, number0);
      
      System.setCurrentTimeMillis(1250L);
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) (byte)69);
      assertNotNull(range1);
      assertEquals(12.0, range1.getLength(), 0.01);
      assertEquals(75.0, range1.getCentralValue(), 0.01);
      assertEquals(69.0, range1.getLowerBound(), 0.01);
      assertEquals(81.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      assertNotNull(bigInteger2);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)2, bigInteger2.shortValue());
      assertEquals((byte)2, bigInteger2.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Double double0 = new Double(1579.5137669092);
      assertNotNull(double0);
      assertEquals(1579.5137669092, (double)double0, 0.01);
      
      defaultKeyedValues2DDataset0.setValue((Number) double0, (Comparable) bigInteger0, (Comparable) bigInteger1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1579.5137669092, range0.getUpperBound(), 0.01);
      assertEquals(789.7568834546, range0.getCentralValue(), 0.01);
      assertEquals(1579.5137669092, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(1579.5137669092, number0);
      assertTrue(number0.equals((Object)double0));
      
      System.setCurrentTimeMillis((-4312L));
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (-7.0));
      assertNotNull(range1);
      assertEquals((-7.0), range1.getLowerBound(), 0.01);
      assertEquals(1579.5137669092, range1.getLength(), 0.01);
      assertEquals(1572.5137669092, range1.getUpperBound(), 0.01);
      assertEquals(782.7568834546, range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) xYDataItem0, (Comparable) xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(10.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(10.0, range0.getUpperBound(), 0.01);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range1);
      assertEquals(10.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(10.0, range1.getUpperBound(), 0.01);
      assertEquals(5.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
      assertNull(range2);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(Double.NaN, number1);
      
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1918.33815119;
      doubleArray1[1] = 661.6520933659012;
      doubleArray1[2] = (-587.8640578);
      doubleArray1[3] = 6435.0;
      doubleArray1[4] = (-1426.3274943335);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-647.391);
      doubleArray1[7] = 3638.9;
      doubleArray1[8] = (-9999.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 661.6520933659012;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-587.8640578);
      doubleArray2[3] = (-647.391);
      doubleArray2[4] = (-9999.0);
      doubleArray2[5] = 6435.0;
      doubleArray2[6] = 1442.2842170332528;
      doubleArray2[7] = (-1426.3274943335);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1918.33815119;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1918.33815119;
      doubleArray4[2] = 1442.2842170332528;
      doubleArray4[3] = (-145.3896264876715);
      doubleArray4[4] = (-9999.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) xYDataItem0, (Comparable) xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-1807), 391);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(391, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1807), slidingCategoryDataset0.getFirstCategoryIndex());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(391, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1807), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)2, bigInteger1.shortValue());
      assertEquals((byte)2, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      
      System.setCurrentTimeMillis((-4312L));
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) (-4312L));
      assertNotNull(range1);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-4311.0), range1.getUpperBound(), 0.01);
      assertEquals((-4311.5), range1.getCentralValue(), 0.01);
      assertEquals((-4312.0), range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1863.9884304922193);
      doubleArray1[1] = (-2607.633776642066);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 53.0;
      doubleArray1[4] = (-865.57);
      doubleArray1[5] = 3444.02829784;
      doubleArray1[6] = (-2.147483648E9);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 3444.02829784;
      doubleArray2[3] = (-2.147483648E9);
      doubleArray2[4] = 3444.02829784;
      doubleArray2[5] = 3444.02829784;
      doubleArray2[6] = 445.96307;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray2[8] = (-2.147483648E9);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1233.0851058365;
      doubleArray3[1] = 3444.02829784;
      doubleArray3[2] = (-1911.8047560493);
      doubleArray3[3] = 445.96307;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = (-2.147483648E9);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 6
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-61);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertNotNull(bigInteger1);
      assertEquals(8, byteArray0.length);
      assertEquals((short) (-21821), bigInteger1.shortValue());
      assertEquals((byte) (-61), bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)84, (byte)2, (byte)59, (byte) (-69), (byte) (-7), (byte)55, (byte) (-86), (byte) (-61)}, byteArray0);
      
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals(8, byteArray0.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short) (-21821), bigInteger1.shortValue());
      assertEquals((byte) (-61), bigInteger1.byteValue());
      assertEquals((short) (-21820), bigInteger2.shortValue());
      assertEquals((byte) (-60), bigInteger2.byteValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)84, (byte)2, (byte)59, (byte) (-69), (byte) (-7), (byte)55, (byte) (-86), (byte) (-61)}, byteArray0);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = bigInteger0.nextProbablePrime();
      assertNotNull(bigInteger3);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)2, bigInteger3.byteValue());
      assertEquals((short)2, bigInteger3.shortValue());
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger2));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowIndex(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((-1), int0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset1);
      assertTrue(boolean0);
      assertFalse(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NaN, number0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger3);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1.0));
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 2659.7705395140015);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) xYDataItem0);
      assertNotNull(pieDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(Double.NaN, number0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("org.jfree.data.xy.XYDataItem", "org.jfree.data.xy.XYDataItem", (Number[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      JList<CategoryTableXYDataset> jList0 = new JList<CategoryTableXYDataset>();
      assertNotNull(jList0);
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      
      List<CategoryTableXYDataset> list0 = jList0.getSelectedValuesList();
      assertNotNull(list0);
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 4352.62;
      doubleArray1[2] = (-1394.7658);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4352.62;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2.0;
      doubleArray3[1] = (-1394.7658);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 2.0;
      doubleArray5[1] = 2.0;
      doubleArray5[2] = (-1394.7658);
      doubleArray0[4] = doubleArray5;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      String string0 = "lr)unY";
      String string1 = "Requires 'start' < 'end'.";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("lr)unY", "Requires 'start' < 'end'.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1394.7658));
      assertNotNull(range0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2963.8541999999998, range0.getUpperBound(), 0.01);
      assertEquals(7148.151599999999, range0.getLength(), 0.01);
      assertEquals((-610.2215999999999), range0.getCentralValue(), 0.01);
      assertEquals((-4184.2973999999995), range0.getLowerBound(), 0.01);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) "Requires 'start' < 'end'.");
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(9, doubleArray0.length);
      assertEquals(4358.62, range1.getUpperBound(), 0.01);
      assertEquals((-2789.5316), range1.getLowerBound(), 0.01);
      assertEquals(7148.151599999999, range1.getLength(), 0.01);
      assertEquals(784.5442, range1.getCentralValue(), 0.01);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(range1, range0);
      
      Number[][] numberArray0 = new Number[6][0];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (-1394.7658);
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      numberArray2[1] = (Number) bigInteger0;
      numberArray2[2] = (Number) 2.0;
      numberArray2[3] = (Number) (-1394.7658);
      numberArray2[4] = (Number) (-1394.7658);
      numberArray2[5] = (Number) (-1394.7658);
      numberArray2[6] = (Number) (-1394.7658);
      numberArray2[7] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray3[0] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) 4352.62;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertEquals(400, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray4[1] = (Number) integer1;
      numberArray4[2] = (Number) 2.0;
      numberArray4[3] = (Number) (-1394.7658);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = (-2639);
      // Undeclared exception!
//      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue((-2639), (-2639));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1426.3274943335);
      doubleArray1[1] = 37.28256615860055;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-439.7962140795537);
      doubleArray1[4] = (-1504.93);
      doubleArray1[5] = 4207.0365939571;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4195.813043;
      doubleArray2[1] = (-1426.3274943335);
      doubleArray2[2] = 4207.0365939571;
      doubleArray2[3] = (-1426.3274943335);
      doubleArray2[4] = 510.21;
      doubleArray2[5] = 37.28256615860055;
      doubleArray2[6] = 37.28256615860055;
      doubleArray2[7] = (-2313.88479169664);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 4195.813043;
      doubleArray3[1] = (-2607.633776642066);
      doubleArray3[2] = (-1504.93);
      doubleArray3[3] = 4207.0365939571;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-1059));
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1059), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
//         //
//         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("org.jfree.data.category.CategoryToPieDataset", "A&%E@:%U-,/+gf,`", (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 2659.7705395140015);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset1, (Comparable) xYDataItem0);
      assertNotNull(pieDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("xEw1q5\"Ynu#Sj=~#D", "xEw1q5\"Ynu#Sj=~#D", "");
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[7][0];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.8;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = 0.8;
      doubleArray2[3] = 0.8;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(7, doubleArray1.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "lkn>[", 0.8);
      assertNotNull(pieDataset1);
      assertEquals(7, doubleArray1.length);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(range1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "lkn>[", 2864.0, 3408);
      assertNotNull(pieDataset2);
      assertEquals(7, doubleArray1.length);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((-1621.0), (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(double0);
      assertEquals((-1621.0), (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1621.0), range0.getLowerBound(), 0.01);
      assertEquals((-1621.0), range0.getUpperBound(), 0.01);
      assertEquals((-1621.0), range0.getCentralValue(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) bigInteger0);
      assertNotNull(defaultPieDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1621.0, range1.getLength(), 0.01);
      assertEquals((-1621.0), range1.getLowerBound(), 0.01);
      assertEquals((-810.5), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = timeTableXYDataset0.getItemCount();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, int0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((double) 0, (Comparable) (-1.0), (Comparable) (-1.0));
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 1564);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1563, dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1563, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, true);
      assertNull(range1);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1563, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultXYZDataset defaultXYZDataset1 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset1);
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      
      int int0 = defaultXYZDataset1.indexOf(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertEquals((-1), int0);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      assertNotNull(timePeriodValues1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      short short0 = bigInteger0.shortValueExact();
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, short0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      linkedList0.add(0, timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      timePeriodValues1.removeChangeListener(timePeriodValuesCollection0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      double double0 = timePeriodValuesCollection0.getDomainLowerBound(true);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 273);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range1);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range2);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 53;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 761.19211356;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 53;
      doubleArray2[3] = (double) 53;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 761.19211356;
      doubleArray3[1] = 761.19211356;
      doubleArray3[2] = (double) 53;
      doubleArray3[3] = (double) 53;
      doubleArray3[4] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 53;
      doubleArray4[2] = 761.19211356;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 53;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 761.19211356;
      doubleArray5[1] = (double) 53;
      doubleArray5[2] = (double) 53;
      doubleArray5[3] = 761.19211356;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) 53;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (double) 53;
      doubleArray7[1] = (double) 53;
      doubleArray7[2] = 761.19211356;
      doubleArray7[3] = 761.19211356;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.category.AbstractCategoryDataset", "org.jfree.data.category.AbstractCategoryDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(8, doubleArray0.length);
      assertEquals(381.09605678, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(760.19211356, range0.getLength(), 0.01);
      assertEquals(761.19211356, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 1564);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1563, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1563, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, true);
      assertNull(range1);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, linkedList0.size());
      assertEquals(1563, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultXYZDataset defaultXYZDataset1 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset1);
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      
      int int0 = defaultXYZDataset1.indexOf(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertEquals((-1), int0);
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset1, false);
      assertNull(range2);
      assertEquals(0, defaultXYZDataset1.getSeriesCount());
      assertTrue(defaultXYZDataset1.equals((Object)defaultXYZDataset0));
      assertNotSame(defaultXYZDataset1, defaultXYZDataset0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0);
      assertNull(range3);
      assertEquals(0, histogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      assertNotNull(vectorSeries0);
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertNull(vectorSeries0.getDescription());
      assertEquals(0, vectorSeries0.getItemCount());
      assertTrue(vectorSeries0.getNotify());
      assertFalse(vectorSeries0.getAutoSort());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      
      Year year0 = week0.getYear();
      assertNotNull(year0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Number[][] numberArray0 = new Number[0][7];
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6176.33709984762;
      doubleArray0[1] = 0.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 6176.33709984762);
      assertNotNull(powerFunction2D0);
      assertEquals(6176.33709984762, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      assertNotNull(vectorSeries0);
      assertNull(vectorSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertTrue(vectorSeries0.getNotify());
      assertFalse(vectorSeries0.getAutoSort());
      assertEquals(0, vectorSeries0.getItemCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(6176.33709984762);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(0.0);
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertFalse(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset1);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertTrue(boolean0);
      assertFalse(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) arrayList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("lkn>[", "xEw1q5\"Ynu#Sj=~#D", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 0.0, (-4006.9706129781807));
      assertNotNull(pieDataset1);
      assertEquals(2, doubleArray0.length);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, number0);
      assertTrue(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      boolean boolean0 = false;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      defaultTableXYDataset0.validateObject();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      defaultXYZDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = null;
      MockDate mockDate0 = new MockDate((-2471L));
      assertNotNull(mockDate0);
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      String string0 = zoneId0.toString();
      assertNotNull(string0);
      assertEquals("GMT", string0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Month month0 = new Month(mockDate0, timeZone0);
      assertNotNull(month0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1969, month0.getYearValue());
      assertEquals((-2471L), month0.getFirstMillisecond());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals((-2471L), month0.getLastMillisecond());
      assertEquals(12, month0.getMonth());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) month0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, true);
      assertNull(range0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      assertNotNull(timePeriodValues1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      timePeriodValues1.fireSeriesChanged();
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultStatisticalCategoryDataset0);
      assertTrue(vector0.contains(defaultStatisticalCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 23, 11);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(11, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      
      Comparable<JDBCXYDataset> comparable0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((-1621.0), (Comparable) bigInteger0, (Comparable) xYDataItem0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals((-1621.0), number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals((-1621.0), range0.getLowerBound(), 0.01);
      assertEquals((-1621.0), range0.getUpperBound(), 0.01);
      assertEquals((-1621.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) bigInteger0, (Comparable) xYDataItem0, (Comparable) xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(5.0, range0.getCentralValue(), 0.01);
      assertEquals(10.0, range0.getUpperBound(), 0.01);
      assertEquals(10.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(10.0, number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      short short0 = (short)59;
      Short short1 = new Short((short)59);
      assertNotNull(short1);
      assertEquals((short)59, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) short1, (Number) short1);
      assertNotNull(xYDataItem0);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(short1.equals((Object)short0));
      
      Number number0 = xYDataItem0.getX();
      assertNotNull(number0);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((short)59, number0);
      assertTrue(short1.equals((Object)short0));
      assertTrue(number0.equals((Object)short0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, vector0, false);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "Series index out of bounds", "");
      assertNotNull(timePeriodValues0);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Series index out of bounds", timePeriodValues0.getDomainDescription());
      assertTrue(short1.equals((Object)short0));
      
      timePeriodValues0.removeChangeListener(defaultXYZDataset0);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Series index out of bounds", timePeriodValues0.getDomainDescription());
      assertTrue(short1.equals((Object)short0));
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(short1.equals((Object)short0));
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-3296), (short)59);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3296), slidingCategoryDataset0.getFirstCategoryIndex());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) arrayList0, false);
      assertNull(range1);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3296), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNotNull(range2);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3296), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      assertNull(number1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) vector0, false);
      assertNull(range3);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3296), slidingCategoryDataset0.getFirstCategoryIndex());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0);
      assertNull(range4);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      JDBCXYDataset jDBCXYDataset0 = null;
//      try {
        jDBCXYDataset0 = new JDBCXYDataset("K]&HBjp/sja", "Series index out of bounds", "K]&HBjp/sja", "K]&HBjp/sja");
//        fail("Expecting exception: ClassNotFoundException");
      
//      } catch(Throwable e) {
//      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      assertNotNull(timePeriodValues1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      linkedList0.add(0, timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      timePeriodValues1.removeChangeListener(timePeriodValuesCollection0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 273);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((DefaultBoxAndWhiskerXYDataset) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertNotNull(categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-18));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains((-18)));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 0.0, 1424.0, (-997), week0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'f' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1088, 1088);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1087, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1087, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1087, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      int int0 = defaultXYZDataset0.indexOf(2);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 0;
      numberArray0[1] = (Number) 1;
      numberArray0[2] = (Number) 1;
      XYDataItem xYDataItem1 = new XYDataItem(1, numberArray0[0]);
      assertNotNull(xYDataItem1);
      assertEquals(6, numberArray0.length);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem1.getXValue(), 0.01);
      assertFalse(xYDataItem1.equals((Object)xYDataItem0));
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Number[][] numberArray1 = new Number[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.DefaultOHLCDataset", "!v)", numberArray1);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray1.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Short short0 = new Short((short)59);
      assertNotNull(short0);
      assertEquals((short)59, (short)short0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      assertNotNull(xYDataItem0);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      
      Number number0 = xYDataItem0.getX();
      assertNotNull(number0);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((short)59, number0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, vector0, false);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, true);
      assertNull(range2);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      xYDataItem0.setY((-1.7976931348623157E308));
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1.7976931348623157E308), xYDataItem0.getYValue(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1760), (-3711));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-1760), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-3711), slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (-1760));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      assertNotNull(vectorSeries0);
      assertTrue(vectorSeries0.getNotify());
      assertEquals(0, vectorSeries0.getItemCount());
      assertFalse(vectorSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertNull(vectorSeries0.getDescription());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      defaultKeyedValues2DDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(200.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(200.0, range0.getLength(), 0.01);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((DefaultBoxAndWhiskerXYDataset) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'key' argument.
//         //
//         verifyException("org.jfree.data.KeyedObjects2D", e);
//      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      Year year0 = week0.getYear();
      assertNotNull(year0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset1, false);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 607.188195075;
      doubleArray1[1] = (double) (-9999);
      doubleArray1[2] = (-1819.5971);
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = 922.621443734;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 922.621443734;
      doubleArray2[1] = 607.188195075;
      doubleArray2[2] = (double) 53;
      doubleArray2[3] = 607.188195075;
      doubleArray2[4] = (double) (-9999);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-9999);
      doubleArray3[1] = (double) (-9999);
      doubleArray3[2] = (-1819.5971);
      doubleArray3[3] = (double) 53;
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 9);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 9, Size: 3
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      assertNotNull(timePeriodValues1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      timePeriodValues1.fireSeriesChanged();
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      linkedList0.add(0, timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 273);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) xYDataItem0);
      assertNotNull(defaultPieDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(xYDataItem0, xYDataItem1);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) bigInteger0, 138.954, 0);
      assertNotNull(defaultPieDataset1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) "9:,r{^/{nFV", (-374.1166787185706));
      assertNotNull(defaultPieDataset2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(xYDataItem0, xYDataItem1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Number[][] numberArray0 = new Number[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("y#;c", "46vyKVdqIVAIm9{", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertNull(number0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertNull(number0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "dG4x>({=jbD.";
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("dG4x>({=jbD.", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Stack<DefaultIntervalXYDataset> stack0 = new Stack<DefaultIntervalXYDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1088, 1088);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1087, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1087, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1087, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      int int0 = defaultXYZDataset0.indexOf(2);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      Number[][] numberArray0 = new Number[3][0];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 1;
      numberArray1[2] = (Number) 1;
      numberArray1[3] = (Number) 2;
      numberArray1[4] = (Number) 2;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      numberArray1[5] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 2;
      numberArray2[1] = (Number) 2;
      numberArray2[2] = (Number) 0;
      numberArray2[3] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) 0;
      numberArray3[1] = (Number) 1;
      numberArray3[2] = (Number) 0;
      numberArray3[3] = (Number) bigInteger0;
      numberArray3[4] = (Number) 0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Preceding", "Preceding", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultBoxAndWhiskerCategoryDataset0, 273, 273);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(273, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) xYDataItem0);
      assertNotNull(defaultPieDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(273, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(xYDataItem0, xYDataItem1);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) bigInteger0, (-2.147483648E9), 7);
      assertNotNull(defaultPieDataset1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(273, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) xYDataItem0, (-587.91270569084));
      assertNotNull(defaultPieDataset2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(273, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(double0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(xYDataItem0, xYDataItem1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      assertNotNull(timePeriodValues1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      linkedList0.add(0, timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 273);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range1);
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Short short0 = new Short((short)59);
      assertNotNull(short0);
      assertEquals((short)59, (short)short0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      assertNotNull(xYDataItem0);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      
      Number number0 = xYDataItem0.getX();
      assertNotNull(number0);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((short)59, number0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Object object0 = defaultKeyedValuesDataset0.clone();
      assertNotNull(object0);
      assertTrue(object0.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, object0);
      assertNotSame(object0, defaultKeyedValuesDataset0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, vector0, false);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>(arrayList0);
      assertNotNull(vector0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      
      timePeriodValues0.setNotify(true);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      assertNotNull(timePeriodValues1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      linkedList0.add(0, timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 273);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) xYDataItem0);
      assertNotNull(defaultPieDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(xYDataItem0, xYDataItem1);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) bigInteger0, 138.954, 0);
      assertNotNull(defaultPieDataset1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) "9:,r{^/{nFV", (-374.1166787185706));
      assertNotNull(defaultPieDataset2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(xYDataItem0, xYDataItem1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<Float>) xYDataItem0;
      comparableArray0[1] = (Comparable<Float>) xYDataItem0;
      comparableArray0[2] = (Comparable<Float>) xYDataItem0;
      comparableArray0[3] = (Comparable<Float>) xYDataItem0;
      comparableArray0[4] = (Comparable<Float>) xYDataItem0;
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1087;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-374.1166787185706);
      doubleArray2[1] = (double) 1087;
      doubleArray2[2] = (double) 1087;
      doubleArray2[3] = (double) 1087;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 3541.7311477;
      doubleArray3[2] = (double) 1087;
      doubleArray3[3] = (double) 273;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 3541.7311477;
      doubleArray4[1] = (-374.1166787185706);
      doubleArray4[2] = (double) 1087;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 138.954;
      doubleArray5[1] = (double) 273;
      doubleArray5[2] = (double) 1087;
      doubleArray5[3] = 138.954;
      doubleArray5[4] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (-374.1166787185706);
      doubleArray6[2] = (-374.1166787185706);
      doubleArray6[3] = (double) 1087;
      doubleArray6[4] = (double) 273;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-374.1166787185706);
      doubleArray7[1] = (double) 273;
      doubleArray7[2] = (double) 0;
      doubleArray7[3] = 3541.7311477;
      doubleArray7[4] = (double) 1087;
      doubleArray7[5] = 3541.7311477;
      doubleArray7[6] = (double) 273;
      doubleArray7[7] = (double) 0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = (double) 1087;
      doubleArray8[1] = (double) 273;
      doubleArray8[2] = 3541.7311477;
      doubleArray8[3] = 2456.250617079;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      
      doubleArray9[0] = 138.954;
      doubleArray9[1] = 2456.250617079;
      doubleArray9[2] = (-374.1166787185706);
      doubleArray9[3] = 138.954;
      doubleArray9[4] = (-505.0);
      doubleArray9[5] = 2456.250617079;
      doubleArray9[6] = 3541.7311477;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'rowKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset1);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertTrue(boolean0);
      assertTrue(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      int int0 = 0;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      assertNotNull(timePeriodValues1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      linkedList0.add(0, timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 711);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "xEw1q5\"Ynu#Sj=~#D", (-2.147483648E9));
      assertNotNull(pieDataset1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Short short0 = new Short((short)59);
      assertNotNull(short0);
      assertEquals((short)59, (short)short0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      assertNotNull(xYDataItem0);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      assertNotNull(timeSeries0);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Millisecond millisecond1 = new Millisecond();
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(320L, millisecond1.getMillisecond());
      assertTrue(millisecond1.equals((Object)millisecond0));
      
      int int0 = millisecond1.compareTo(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(320L, millisecond1.getMillisecond());
      assertEquals(0, int0);
      assertTrue(millisecond0.equals((Object)millisecond1));
      assertTrue(millisecond1.equals((Object)millisecond0));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.fireSelectionEvent();
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      defaultKeyedValues2DDataset0.setValue((Number) 0, (Comparable) millisecond0, (Comparable) integer0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertTrue(millisecond0.equals((Object)millisecond1));
      assertTrue(integer0.equals((Object)int0));
      assertNotSame(millisecond0, millisecond1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) null, 1734.5304532, 1094);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, (-350));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setValue((Number) 53, (Comparable) xYDataItem0, (Comparable) week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range1);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertEquals(26.5, range1.getCentralValue(), 0.01);
      assertEquals(53.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(53.0, number0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(xYBarDataset0));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) linkedList0, true);
      assertNull(range2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      assertNotNull(timePeriodValues1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      linkedList0.add(0, timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 273);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) xYDataItem0);
      assertNotNull(defaultPieDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(xYDataItem0, xYDataItem1);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) bigInteger0, 138.954, 0);
      assertNotNull(defaultPieDataset1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) "9:,r{^/{nFV", (-374.1166787185706));
      assertNotNull(defaultPieDataset2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertNull(range2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(xYDataItem0, xYDataItem1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "@LGx|", "`9cvVTSGf");
      assertNotNull(timePeriodValues0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals("@LGx|", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("`9cvVTSGf", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-8154), (-8154));
      assertNotNull(timePeriodValues1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals("@LGx|", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("`9cvVTSGf", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("`9cvVTSGf", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("@LGx|", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals("@LGx|", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("`9cvVTSGf", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("`9cvVTSGf", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("@LGx|", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      boolean boolean0 = linkedList0.add(timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals("@LGx|", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("`9cvVTSGf", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("`9cvVTSGf", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("@LGx|", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(boolean0);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3541.7311477, 3541.7311477);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.5, 53, 44, xYDataItem0);
      assertNotNull(xYSeries0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(44, xYSeries0.getItemCount());
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3541.7311477;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (-749.69394472);
      doubleArray0[0] = doubleArray1;
      boolean boolean0 = linkedList0.add((TimePeriodValuesCollection) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      assertNotNull(timePeriodValues0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      assertNotNull(timePeriodValues1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      linkedList0.add(0, timePeriodValuesCollection0);
      assertTrue(linkedList0.contains(timePeriodValuesCollection0));
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("9:,r{^/{nFV", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertEquals("9:,r{^/{nFV", timePeriodValues1.getDomainDescription());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals("xEw1q5\"Ynu#Sj=~#D", timePeriodValues1.getRangeDescription());
      assertNull(timePeriodValues1.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 273);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) xYDataItem0);
      assertNotNull(defaultPieDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertNotSame(xYDataItem0, xYDataItem1);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) bigInteger0, 138.954, 0);
      assertNotNull(defaultPieDataset1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(273, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
      assertNotNull(defaultPieDataset2);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset2);
      assertTrue(boolean0);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      
      BigInteger bigInteger1 = bigInteger0.abs();
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertSame(bigInteger0, bigInteger1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("xEw1q5\"Ynu#SjF~#f");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("xEw1q5\"Ynu#SjF~#f");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      XYDataItem xYDataItem0 = new XYDataItem((-2478.2), 1930.094);
      assertNotNull(xYDataItem0);
      assertEquals(1930.094, xYDataItem0.getYValue(), 0.01);
      assertEquals((-2478.2), xYDataItem0.getXValue(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1930.094;
      doubleArray2[1] = (-2478.2);
      doubleArray2[2] = 1930.094;
      doubleArray2[3] = 1930.094;
      doubleArray2[4] = 1930.094;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1930.094;
      doubleArray3[1] = 1930.094;
      doubleArray3[2] = 1930.094;
      doubleArray3[3] = 1930.094;
      doubleArray3[4] = 1930.094;
      doubleArray3[5] = (-2478.2);
      doubleArray3[6] = (-2478.2);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2478.2);
      doubleArray4[1] = 1930.094;
      doubleArray4[2] = (-2478.2);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-2478.2), number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4408.294, range0.getLength(), 0.01);
      assertEquals((-274.0529999999999), range0.getCentralValue(), 0.01);
      assertEquals(1930.094, range0.getUpperBound(), 0.01);
      assertEquals((-2478.2), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-656.65252299);
      doubleArray0[1] = (-656.65252299);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-656.65252299), (-656.65252299), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-656.65252299), (-656.65252299), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-656.65252299), (-656.65252299), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-656.65252299), (-656.65252299), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-656.65252299), (-656.65252299), 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1312), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1312), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1312), slidingGanttCategoryDataset0.getFirstCategoryIndex());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-656.65252299);
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertNull(number0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1312), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1312), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1312), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<Short>) xYDataItem0;
      comparableArray0[1] = (Comparable<Short>) week0;
      comparableArray0[2] = (Comparable<Short>) xYDataItem0;
      comparableArray0[3] = (Comparable<Short>) xYDataItem0;
      comparableArray0[4] = (Comparable<Short>) week0;
      comparableArray0[5] = (Comparable<Short>) week0;
      comparableArray0[6] = (Comparable<Short>) xYDataItem0;
      comparableArray0[7] = (Comparable<Short>) xYDataItem0;
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 53;
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = (double) 53;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-783.189076443672);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-783.189076443672);
      doubleArray2[2] = (-783.189076443672);
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 53;
      doubleArray3[2] = (-3510.8);
      doubleArray3[3] = (double) 53;
      doubleArray3[4] = (double) 53;
      doubleArray3[5] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (-783.189076443672);
      doubleArray5[4] = (double) 53;
      doubleArray5[5] = (double) 53;
      doubleArray5[6] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = 1.0;
      doubleArray6[2] = (double) 1;
      doubleArray6[3] = (-3510.8);
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = (-783.189076443672);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 1.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = (-3510.8);
      doubleArray8[1] = 607.188195075;
      doubleArray8[2] = (double) 53;
      doubleArray8[3] = (double) 1;
      doubleArray8[4] = (-1.0);
      doubleArray8[5] = (-1.0);
      doubleArray8[6] = (-1.0);
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Duplicate items in 'rowKeys'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Range range0 = new Range((-2018.359735358427), 1.0);
      assertNotNull(range0);
      assertEquals((-1008.6798676792135), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals((-2018.359735358427), range0.getLowerBound(), 0.01);
      assertEquals(2019.359735358427, range0.getLength(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, true);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Byte byte0 = new Byte((byte) (-40));
      assertNotNull(byte0);
      assertEquals((byte) (-40), (byte)byte0);
      
      Number[][] numberArray0 = new Number[0][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9x", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Short short0 = new Short((short)59);
      assertNotNull(short0);
      assertEquals((short)59, (short)short0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      assertNotNull(xYDataItem0);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      
      Number number0 = xYDataItem0.getX();
      assertNotNull(number0);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((short)59, number0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Object object0 = defaultKeyedValuesDataset0.clone();
      assertNotNull(object0);
      assertTrue(object0.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, object0);
      assertNotSame(object0, defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) short0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)object0));
      assertNotSame(defaultKeyedValuesDataset0, object0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertNotNull(xYDataItem1);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(59.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) short0, 0.8);
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)object0));
      assertNotSame(defaultKeyedValuesDataset0, object0);
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(short0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      boolean boolean0 = arrayList0.add(defaultBoxAndWhiskerXYDataset0);
      assertTrue(arrayList0.contains(defaultBoxAndWhiskerXYDataset0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, false);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-1061.7);
      doubleArray0[3] = (-2485.77262624848);
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 2);
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      comparableArray0[0] = (Comparable<Short>) millisecond0;
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      int int0 = millisecond0.compareTo(timeSeries0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, int0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      int int1 = new Integer(0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      defaultKeyedValues2DDataset0.setValue((Number) 0, (Comparable) comparableArray0[0], (Comparable) millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(2, comparableArray0.length);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) stack0, true);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Short short0 = new Short((short)59);
      assertNotNull(short0);
      assertEquals((short)59, (short)short0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      assertNotNull(xYDataItem0);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYSeries xYSeries0 = new XYSeries(short0, true);
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1, 53);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(53.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-1063.2311579853988), 2830.582956, 44, week0);
      assertNotNull(xYSeries1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(0.0, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(2830.5829559999993, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals((-1063.2311579853988), xYSeries1.getMinX(), 0.01);
      assertEquals(44, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(0.006883278857015872, xYSeries1.getMaxY(), 0.01);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries1, xYSeries0);
      
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection(xYSeries1);
      assertNotNull(xYSeriesCollection1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(0.0, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(2830.5829559999993, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals((-1063.2311579853988), xYSeries1.getMinX(), 0.01);
      assertEquals(44, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(0.006883278857015872, xYSeries1.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection1);
      assertNotNull(range1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(0.0, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(2830.5829559999993, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals((-1063.2311579853988), xYSeries1.getMinX(), 0.01);
      assertEquals(44, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(0.006883278857015872, xYSeries1.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.006883278857015872, range1.getLength(), 0.01);
      assertEquals(0.006883278857015872, range1.getUpperBound(), 0.01);
      assertEquals(0.003441639428507936, range1.getCentralValue(), 0.01);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) linkedList0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      numberArray2[0] = (Number) bigInteger0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dG4x>({=jbD.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(6, numberArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Byte byte0 = new Byte((byte) (-40));
      assertNotNull(byte0);
      assertEquals((byte) (-40), (byte)byte0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("dG4x>({=jbD.", "", numberArray0);
      assertNotNull(categoryDataset1);
      assertEquals(6, numberArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNull(range1);
      assertEquals(6, numberArray0.length);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNotSame(categoryDataset0, categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      numberArray2[0] = (Number) bigInteger0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dG4x>({=jbD.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(6, numberArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, false);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(6, numberArray0.length);
      assertEquals(Double.NaN, number1);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3541.7311477, 3541.7311477);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.5, 53, 44, xYDataItem0);
      assertNotNull(xYSeries0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(44, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(44, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(44, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(6.934219391308082E-5, range1.getUpperBound(), 0.01);
      assertEquals(6.832954687343154E-5, range1.getLowerBound(), 0.01);
      assertEquals(6.883587039325618E-5, range1.getCentralValue(), 0.01);
      assertEquals(1.0126470396492867E-6, range1.getLength(), 0.01);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range1, false);
      assertNull(range2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3541.7311477, normalDistributionFunction2D0.getMean(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(44, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(6.832954687343154E-5, xYSeries0.getMinY(), 0.01);
      assertEquals(53.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(6.934219391308082E-5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(6.934219391308082E-5, range1.getUpperBound(), 0.01);
      assertEquals(6.832954687343154E-5, range1.getLowerBound(), 0.01);
      assertEquals(6.883587039325618E-5, range1.getCentralValue(), 0.01);
      assertEquals(1.0126470396492867E-6, range1.getLength(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1063.2311579853988);
      doubleArray0[1] = (-1863.9884304922193);
      doubleArray0[2] = (-1063.2311579853988);
      doubleArray0[3] = (-2485.8);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1863.9884304922193), (-1063.2311579853988), 31, (-1063.2311579853988));
      assertNotNull(xYSeries0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1.6095195174858084E13, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1863.9884304922193), xYSeries0.getMinX(), 0.01);
      assertEquals(2.9865845340163364E12, xYSeries0.getMinY(), 0.01);
      assertEquals((-1063.2311579853988), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, number0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset("", "", (Number[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-656.65252299);
      doubleArray0[1] = 0.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.7976931348623157E308, (-656.65252299));
      assertNotNull(powerFunction2D0);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      assertEquals((-656.65252299), powerFunction2D0.getB(), 0.01);
      
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      assertNotNull(vectorSeries0);
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertFalse(vectorSeries0.getAutoSort());
      assertEquals(0, vectorSeries0.getItemCount());
      assertTrue(vectorSeries0.getNotify());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertNull(vectorSeries0.getDescription());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, (-1232.95));
      assertNotNull(lineFunction2D0);
      assertEquals((-1232.95), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("TimeSeriesDataset.addValue(): series #");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 0.0);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray2[1] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) stack0, true);
      assertNull(range1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range2);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, false);
      assertNull(range3);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-656.65252299);
      doubleArray1[1] = 0.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.7976931348623157E308, (-656.65252299));
      assertNotNull(powerFunction2D0);
      assertEquals((-656.65252299), powerFunction2D0.getB(), 0.01);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      assertNotNull(vectorSeries0);
      assertTrue(vectorSeries0.getNotify());
      assertNull(vectorSeries0.getDescription());
      assertEquals(0, vectorSeries0.getItemCount());
      assertFalse(vectorSeries0.getAutoSort());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, (-1232.95));
      assertNotNull(lineFunction2D0);
      assertEquals((-1232.95), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      
      Date date0 = week0.getEnd();
      assertNotNull(date0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) week0);
      assertNotNull(pieDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(4, doubleArray0.length);
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(4, doubleArray0.length);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-656.65252299), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) null, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1182.2957);
      doubleArray0[1] = (-1182.2957);
      doubleArray0[2] = (-1182.2957);
      doubleArray0[3] = (-1182.2957);
      doubleArray0[4] = (-1182.2957);
      doubleArray0[5] = (-1182.2957);
      doubleArray0[6] = (-1182.2957);
      doubleArray0[7] = (-1182.2957);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1182.2957), (-1182.2957), (-1182.2957), (-1182.2957), (-1182.2957), (-1182.2957), (-1182.2957), (-1182.2957)}, doubleArray0, 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range0 = new Range((-1182.2957), (-1182.2957));
      assertNotNull(range0);
      assertEquals((-1182.2957), range0.getCentralValue(), 0.01);
      assertEquals((-1182.2957), range0.getUpperBound(), 0.01);
      assertEquals((-1182.2957), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, true);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) (-1182.2957);
      Byte byte0 = new Byte((byte) (-40));
      assertNotNull(byte0);
      assertEquals((byte) (-40), (byte)byte0);
      
      numberArray1[1] = (Number) byte0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultStatisticalCategoryDataset0);
      assertTrue(vector0.contains(defaultStatisticalCategoryDataset0));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) vector0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-656.65252299);
      doubleArray1[1] = 0.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.7976931348623157E308, (-656.65252299));
      assertNotNull(powerFunction2D0);
      assertEquals((-656.65252299), powerFunction2D0.getB(), 0.01);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      assertNotNull(vectorSeries0);
      assertFalse(vectorSeries0.getAutoSort());
      assertEquals(0, vectorSeries0.getItemCount());
      assertTrue(vectorSeries0.getNotify());
      assertNull(vectorSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, (-1232.95));
      assertNotNull(lineFunction2D0);
      assertEquals((-1232.95), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) week0);
      assertNotNull(pieDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(4, doubleArray0.length);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(4, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-656.65252299), 0.0, 53, week0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-1232.95), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals((-1232.95), lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(809619.7282205205, range1.getLength(), 0.01);
      assertEquals(809619.7282205205, range1.getUpperBound(), 0.01);
      assertEquals(404809.86411026027, range1.getCentralValue(), 0.01);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.8;
      doubleArray1[1] = 871.232;
      doubleArray1[2] = 0.8;
      doubleArray1[3] = 0.8;
      doubleArray1[4] = 0.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 871.232;
      doubleArray3[1] = 871.232;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.8);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1742.464, range0.getUpperBound(), 0.01);
      assertEquals(871.232, range0.getCentralValue(), 0.01);
      assertEquals(1742.464, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>(arrayList0);
      assertNotNull(vector0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      jDBCXYDataset0.close();
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 3352);
      assertNotNull(pieDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, true);
      assertNull(range1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.general.DatasetUtilities", "qml=)3d", (String) null);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("qml=)3d", timeSeries0.getDomainDescription());
      
      XYBarDataset xYBarDataset1 = new XYBarDataset(jDBCXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(3541.7311477, xYBarDataset1.getBarWidth(), 0.01);
      assertTrue(xYBarDataset1.equals((Object)xYBarDataset0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range2);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.equals((Object)xYBarDataset1));
      assertNotSame(xYBarDataset0, xYBarDataset1);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range3);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.equals((Object)xYBarDataset1));
      assertNotSame(xYBarDataset0, xYBarDataset1);
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range4);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(xYBarDataset0.equals((Object)xYBarDataset1));
      assertNotSame(xYBarDataset0, xYBarDataset1);
      
      Range range5 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset1);
      assertNull(range5);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(3541.7311477, xYBarDataset1.getBarWidth(), 0.01);
      assertTrue(xYBarDataset1.equals((Object)xYBarDataset0));
      assertNotSame(xYBarDataset1, xYBarDataset0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1063.2311579853988);
      doubleArray0[1] = (-1863.9884304922193);
      doubleArray0[2] = (-1063.2311579853988);
      doubleArray0[3] = (-2485.8);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1863.9884304922193), (-1063.2311579853988), 31, (-1063.2311579853988));
      assertNotNull(xYSeries0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.6095195174858084E13, xYSeries0.getMaxY(), 0.01);
      assertEquals((-1863.9884304922193), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(2.9865845340163364E12, xYSeries0.getMinY(), 0.01);
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1063.2311579853988), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1063.2311579853988), (-1863.9884304922193), (-1063.2311579853988), (-2485.8)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertNull(number0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double double0 = 6176.33709984762;
      double double1 = (-1061.7);
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond1);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      double double2 = (-2018.359735358427);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-1061.7));
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals((-1061.7), timeSeries0.getMinY(), 0.01);
      assertEquals((-1061.7), timeSeries0.getMaxY(), 0.01);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) null;
      comparableArray0[1] = (Comparable<XIntervalSeriesCollection>) millisecond0;
      comparableArray0[2] = (Comparable<XIntervalSeriesCollection>) null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-656.65252299);
      doubleArray1[1] = 0.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.7976931348623157E308, (-656.65252299));
      assertNotNull(powerFunction2D0);
      assertEquals((-656.65252299), powerFunction2D0.getB(), 0.01);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      assertNotNull(vectorSeries0);
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertNull(vectorSeries0.getDescription());
      assertEquals(0, vectorSeries0.getItemCount());
      assertTrue(vectorSeries0.getNotify());
      assertFalse(vectorSeries0.getAutoSort());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, (-1232.95));
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1232.95), lineFunction2D0.getSlope(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) week0);
      assertNotNull(pieDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(4, doubleArray0.length);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(4, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset1);
      assertEquals(4, doubleArray0.length);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset1, pieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, true);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(histogramDataset0);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 53;
      doubleArray1[1] = (double) 53;
      doubleArray1[2] = (double) 53;
      doubleArray1[3] = 1046.93;
      doubleArray1[4] = (double) 53;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 1;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'samples' > 1", (String) null, doubleArray0);
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(631.465, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1182.2957);
      doubleArray0[1] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1182.2957), (-1.0)}, doubleArray0, 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertArrayEquals(new double[] {(-1182.2957), (-1.0)}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, (-1182.2957), (-1.0), 31, (-1182.2957));
      assertNotNull(xYSeries0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D1.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1181.2957), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1182.2957), xYSeries0.getMinX(), 0.01);
      assertEquals((-1.0), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(31, xYSeries0.getItemCount());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertArrayEquals(new double[] {(-1182.2957), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[4];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      jDBCXYDataset0.close();
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 3352);
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 0.5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, true);
      assertNull(range2);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Hour hour0 = Hour.parseHour("");
      assertNull(hour0);
      
      Number[][] numberArray0 = new Number[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("y#;c", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      numberArray2[0] = (Number) bigInteger0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "dG4x>({=jbD.", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(6, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(6, numberArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.getSelectionState();
      assertNotNull(defaultCategoryDataset1);
      assertEquals(6, numberArray0.length);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      defaultCategoryDataset0.setSelectionState(defaultCategoryDataset1);
      assertEquals(6, numberArray0.length);
      assertSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      doubleArray0[1] = 484.00892;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[4] = (-3483.0);
      doubleArray0[5] = 1.7976931348623157E308;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) "");
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 60.108722;
      doubleArray0[1] = 3541.7311477;
      doubleArray0[2] = 3541.7311477;
      doubleArray0[3] = 3541.7311477;
      doubleArray0[4] = 3541.7311477;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {60.108722, 3541.7311477, 3541.7311477, 3541.7311477, 3541.7311477}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1233.0851058365, 3541.7311477, 196, 60.108722);
      assertNotNull(xYSeries0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(8.194833675877548E15, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(196, xYSeries0.getItemCount());
      assertEquals(1233.0851058365, xYSeries0.getMinX(), 0.01);
      assertEquals(3541.7311476999994, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(5.5744316368970048E17, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertArrayEquals(new double[] {60.108722, 3541.7311477, 3541.7311477, 3541.7311477, 3541.7311477}, doubleArray0, 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 3541.7311477, 1479.629, 1094, 3541.7311477);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultStatisticalCategoryDataset0);
      assertTrue(vector0.contains(defaultStatisticalCategoryDataset0));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      Vector<Object> vector1 = new Vector<Object>();
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      numberArray2[0] = (Number) bigInteger0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dG4x>({=jbD.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(6, numberArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 484.00892;
      Vector<TimePeriodValuesCollection> vector0 = new Vector<TimePeriodValuesCollection>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, false);
      assertNull(range1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range3 = Range.expandToInclude((Range) null, (-2672.04751));
      assertNotNull(range3);
      assertEquals((-2672.04751), range3.getLowerBound(), 0.01);
      assertEquals((-2672.04751), range3.getUpperBound(), 0.01);
      assertEquals((-2672.04751), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range3, range0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, false);
      assertNull(range4);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertNotNull(xYDataItem0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      assertNull(range0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      assertNotNull(xYBarDataset0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      assertNull(range1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities");
      assertNotNull(timeSeries0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals("org.jfree.data.general.DatasetUtilities", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.general.DatasetUtilities", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      XYBarDataset xYBarDataset1 = new XYBarDataset(xYBarDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(xYBarDataset1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(3541.7311477, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYBarDataset1.getBarWidth(), 0.01);
      assertFalse(xYBarDataset1.equals((Object)xYBarDataset0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertNull(range2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range3);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "Se]*[1'QdmQP9BnELC", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 2;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-2765));
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1182.2957);
      doubleArray0[1] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1182.2957), (-1.0)}, doubleArray0, 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, false);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 1;
      numberArray1[1] = (Number) 53;
      numberArray1[2] = (Number) (-1182.2957);
      numberArray1[3] = (Number) 1;
      numberArray1[4] = (Number) (-1182.2957);
      numberArray1[5] = (Number) 53;
      numberArray1[6] = (Number) (-1.0);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 53;
      numberArray2[1] = (Number) 1;
      numberArray2[2] = (Number) 53;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("$:iJ+T Lec", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range2);
      assertEquals(2, numberArray0.length);
      assertEquals((-564.64785), range2.getCentralValue(), 0.01);
      assertEquals(1235.2957, range2.getLength(), 0.01);
      assertEquals(53.0, range2.getUpperBound(), 0.01);
      assertEquals((-1182.2957), range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6176.33709984762;
      doubleArray0[1] = 0.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 6176.33709984762);
      assertNotNull(powerFunction2D0);
      assertEquals(6176.33709984762, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      assertNotNull(vectorSeries0);
      assertFalse(vectorSeries0.getAutoSort());
      assertEquals(0, vectorSeries0.getItemCount());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertTrue(vectorSeries0.getNotify());
      assertNull(vectorSeries0.getDescription());
      
      TaskSeries taskSeries0 = new TaskSeries("");
      assertNotNull(taskSeries0);
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      taskSeriesCollection0.add(taskSeries0);
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-3637), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-3637), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(range0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-3637), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NaN, (-1), (-3637), 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sh,{E%:a$`PX#x,Up9", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertNull(range0);
      assertEquals(0, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("ZG`&f *>MTqJ7", "ZG`&f *>MTqJ7", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0, false);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(0.0));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0);
      assertNull(range2);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range3 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNull(range3);
      assertEquals(0, doubleArray0.length);
      assertTrue(categoryDataset0.equals((Object)categoryDataset1));
      assertNotSame(categoryDataset0, categoryDataset1);
      
      Range range4 = Range.expandToInclude((Range) null, 0.0);
      assertNotNull(range4);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-505), (-126));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-126), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-505), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-126), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-505), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      String string0 = "";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
//      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "");
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sh,{E%:a$`PX#x,Up9", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertNull(range0);
      assertEquals(0, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("ZG`&f *>MTqJ7", "ZG`&f *>MTqJ7", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotSame(categoryDataset1, categoryDataset0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0, false);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(0.0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.0, 360.18268493);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(360.18268493, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1.0, normalDistributionFunction2D0.getMean(), 0.01);
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) week0, Double.POSITIVE_INFINITY);
      assertNotNull(pieDataset1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(0, doubleArray0.length);
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertTrue(categoryDataset0.equals((Object)categoryDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, false);
      assertNull(range2);
      assertEquals(0, histogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-656.65252299), 2.0);
      assertNotNull(lineFunction2D0);
      assertEquals((-656.65252299), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2.0, lineFunction2D0.getSlope(), 0.01);
      
      XYDataItem xYDataItem0 = new XYDataItem((-2522.34778), (-937.36240654));
      assertNotNull(xYDataItem0);
      assertEquals((-2522.34778), xYDataItem0.getXValue(), 0.01);
      assertEquals((-937.36240654), xYDataItem0.getYValue(), 0.01);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-656.65252299), 2.0, (-2950), xYDataItem0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Short short0 = new Short((short)59);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1232.95), 0.0);
      Week week0 = new Week();
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1977.0167;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1232.95);
      doubleArray2[1] = (double) (short)59;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 53;
      doubleArray2[4] = (-1232.95);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1977.0167;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 53;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 53;
      doubleArray3[5] = (-1232.95);
      doubleArray3[6] = (-3523.6076772863);
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (double) 1;
      doubleArray0[2] = doubleArray3;
      DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-656.65252299);
      doubleArray1[1] = 0.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, (-656.65252299));
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, (-1232.95));
      Week week0 = new Week();
      DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      Range range0 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      defaultKeyedValues2DDataset0.getRowCount();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) vector0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, (List) stack0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      linkedList0.add(0, timePeriodValuesCollection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      String string0 = "org.jfree.data.general.DatasetUtilities";
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0, "org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      XYBarDataset xYBarDataset1 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, Double.POSITIVE_INFINITY);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset1, true);
      DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) linkedList0, (Range) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[8];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray2[0] = (Number) bigInteger0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dG4x>({=jbD.", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 484.00892;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 22.916728708526634;
      doubleArray0[4] = (-3483.0);
      doubleArray0[5] = 2613.87461;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) regularTimePeriod0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      defaultKeyedValues2DDataset0.getRowCount();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      vector0.add(defaultStatisticalCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) vector0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1852.38795950849), 0.0, 1229, 0.8);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 72.4893;
      doubleArray2[3] = 0.0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-617));
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      String string0 = "";
      Hour.parseHour("");
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      // Undeclared exception!
//      try { 
        defaultBoxAndWhiskerXYDataset0.getX(0, 18);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 18, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.clone();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-617));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) (-617));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1061.7);
      doubleArray0[1] = (-1864.3816971460003);
      doubleArray0[2] = (-1061.7);
      doubleArray0[3] = (-2485.772626248477);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1864.3816971460003), (-1061.7), 31, (-1061.7));
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 2);
      Millisecond millisecond0 = new Millisecond();
      comparableArray0[0] = (Comparable<Short>) millisecond0;
      TimeSeries timeSeries0 = new TimeSeries((-1061.7));
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-2018.359735358427));
      comparableArray0[1] = (Comparable<Short>) null;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray1);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of column keys does not match the number of columns in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, false);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0);
      assertNull(range0);
      
      Range.combine((Range) null, (Range) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) stack0, (Range) null, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'xRange' argument
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 72.4893;
      doubleArray2[3] = 0.0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-617));
      TimeZone timeZone0 = TimeZone.getTimeZone("{{MoAtyGy-hfO");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-276.488158));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-1061.7);
      doubleArray0[3] = (-2485.77262624848);
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 2);
      Millisecond millisecond0 = new Millisecond();
      comparableArray0[0] = (Comparable<Short>) millisecond0;
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (-2018.359735358427));
      comparableArray0[1] = (Comparable<Short>) null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, (-2485.77262624848));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) xYDataItem0, (KeyedValues) defaultKeyedValuesDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      bigInteger0.bitLength();
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) xYDataItem1, (KeyedValues) defaultKeyedValuesDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'visibleSeriesKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.clone();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Number[][] numberArray0 = new Number[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.close();
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = 3352;
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 3352);
      TableXYDataset tableXYDataset0 = null;
      Action action0 = TransferHandler.getCopyAction();
      jDBCXYDataset0.hasListener(action0);
      double double0 = 0.5;
      defaultMultiValueCategoryDataset0.hasListener(jDBCXYDataset0);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, false);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, linkedList0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      timeTableXYDataset0.getItemCount();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[8];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray2[0] = (Number) bigInteger0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dG4x>({=jbD.", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 484.00892;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 22.916728708526634;
      doubleArray0[4] = (-3483.0);
      doubleArray0[5] = 2613.87461;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-3483.0), 2830.582956, 1091, "dG4x>({=jbD.");
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      int int0 = 1055;
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 1055);
      XYDataItem xYDataItem0 = new XYDataItem((double) 1055, (double) 1055);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0);
      int int1 = 1093;
      int int2 = (-2356);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1093, (-2356));
      int int3 = 1202;
      // Undeclared exception!
//      try { 
        timePeriodValues1.getTimePeriod(1202);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1202, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.close();
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      int int0 = 3352;
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 3352);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 0.5);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.clone();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      boolean boolean0 = true;
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      Week week0 = new Week(0, 0);
      defaultBoxAndWhiskerCategoryDataset0.getColumnIndex(week0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      XYDataset xYDataset0 = null;
      int int0 = 646;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 646, 646);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 72.4893;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 72.4893;
      doubleArray3[2] = 72.4893;
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      Stack<Double> stack0 = new Stack<Double>();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2361.3598815, 72.4893);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-1.7976931348623157E308), 1.0, 1073741824, 72.4893);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0, "org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      XYBarDataset xYBarDataset1 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, Double.POSITIVE_INFINITY);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset1, true);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sh,{E%:a$`PX#x,Up9", "", doubleArray0);
      int int0 = 2;
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      DatasetUtilities.createCategoryDataset("ZG`&f *>MTqJ7", "ZG`&f *>MTqJ7", doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0, false);
      Stack<Double> stack0 = new Stack<Double>();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.0, 360.18268493);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 3628.9827037, (-872.2730632), (-4169), "ZG`&f *>MTqJ7");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = 6176.33709984762;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      int int0 = 9999;
      String string0 = "x";
      // Undeclared exception!
//      try { 
        Year.parseYear("x");
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Cannot parse string.
//         //
//         verifyException("org.jfree.data.time.Year", e);
//      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = null;
      int int0 = 2;
      int int1 = 3197;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 3197, 3197);
      boolean boolean0 = true;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      XYDataset xYDataset0 = null;
      int int0 = 646;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 646, 646);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.getTimeZone();
      TimeSeries timeSeries0 = new TimeSeries(bigInteger0, "org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities");
      XYBarDataset xYBarDataset1 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset1, true);
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0);
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3541.7311477;
      doubleArray1[1] = 3541.7311477;
      doubleArray1[2] = 3541.7311477;
      doubleArray1[3] = 3541.7311477;
      doubleArray1[4] = 3541.7311477;
      doubleArray1[5] = 3541.7311477;
      doubleArray1[6] = 3541.7311477;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 3541.7311477;
      doubleArray3[1] = 3541.7311477;
      doubleArray3[2] = 3541.7311477;
      doubleArray3[3] = 3541.7311477;
      doubleArray3[4] = 3541.7311477;
      doubleArray3[5] = 3541.7311477;
      doubleArray3[6] = 3541.7311477;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 3541.7311477;
      doubleArray4[1] = 3541.7311477;
      doubleArray4[2] = 3541.7311477;
      doubleArray4[3] = 3541.7311477;
      doubleArray4[4] = 3541.7311477;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(3541.7311477, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, (-350));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = (-1522);
      // Undeclared exception!
//      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (-1522));
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 72.4893;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 72.4893;
      doubleArray3[2] = 72.4893;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      Stack<Double> stack0 = new Stack<Double>();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2361.3598815, 72.4893);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 1.0, 0.0, (-4169), 1.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, false);
      Number[][] numberArray0 = new Number[8][6];
      Number[] numberArray1 = new Number[3];
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 1.0);
      // Undeclared exception!
//      try { 
        xYBarDataset0.getEndY(0, 4);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 4, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DatasetUtilities.createCategoryDataset("@.", "@.", doubleArray1);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      int int0 = 3;
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 4111.4271, 484.00892, 3, (Comparable) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'seriesKey' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.clone();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-656.65252299);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2485.772626248477);
      doubleArray1[3] = (-1061.7);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-656.65252299);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-656.65252299);
      doubleArray3[1] = 0.0;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      int int0 = 13;
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, (-224.7), 13, 0.0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray3);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2018.359735358427), (-2018.359735358427), 2116, (-1.0));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      defaultKeyedValues2DDataset0.hasListener((EventListener) null);
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (KeyToGroupMap) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[9];
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray1[5] = number0;
      numberArray1[6] = number0;
      numberArray1[7] = number0;
      numberArray1[8] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray3[0] = (Number) bigInteger0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dG4x>({=jbD.", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 484.00892;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3483.0);
      doubleArray0[5] = 2613.87461;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1.7976931348623157E308, 484.00892, (-2022), 2613.87461);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'start' < 'end'.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = "sh,{E%:a$`PX#x,Up9";
      String string1 = "";
      double[][] doubleArray0 = new double[0][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sh,{E%:a$`PX#x,Up9", "", doubleArray0);
      int int0 = 2;
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.hasListener((EventListener) null);
      defaultKeyedValues2DDataset0.getRowCount();
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      VectorSeries vectorSeries0 = new VectorSeries(0.0);
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      Week week0 = new Week();
      String string0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "9:,r{^/{nFV", "xEw1q5\"Ynu#Sj=~#D");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1087, 0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      linkedList0.add(0, timePeriodValuesCollection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 3541.7311477);
      DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, true);
      xYDataItem0.clone();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 273);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) xYDataItem0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) bigInteger0, 138.954, 0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "9:,r{^/{nFV", (-374.1166787185706));
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) linkedList0, true);
//        fail("Expecting exception: ClassCastException");
      
//      } catch(ClassCastException e) {
//         //
//         // org.jfree.data.time.TimePeriodValuesCollection cannot be cast to java.lang.Comparable
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) xYDataItem0, (KeyedValues) defaultKeyedValuesDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      xYDataItem0.clone();
      bigInteger0.bitLength();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) bigInteger0, 0.0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
//      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, (String) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
//      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYDataItem0.getX();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) xYDataItem0, (KeyedValues) defaultKeyedValuesDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      xYDataItem0.clone();
      bigInteger0.bitLength();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) xYDataItem0, 2566.56017206);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Week week0 = new Week();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(464, 6, week0);
      // Undeclared exception!
//      try { 
        dynamicTimeSeriesCollection0.getEndX((-523), 490);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      double[][] doubleArray1 = new double[6][0];
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.8;
      doubleArray2[1] = 0.8;
      doubleArray2[2] = 0.8;
      doubleArray2[3] = 0.8;
      doubleArray1[0] = doubleArray2;
      doubleArray1[2] = doubleArray1[1];
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("xEw1q5\"Ynu#SjF~#f", "xEw1q5\"Ynu#SjF~#f", doubleArray1);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(xYDataItem0);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      linkedList0.add((TimePeriodValuesCollection) null);
      xYDataItem0.clone();
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(492, (-1201), timeZone0);
      DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 2);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 0, (KeyedValues) categoryToPieDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) 0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1, 1.0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      // Undeclared exception!
//      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = null;
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray1[5] = number0;
      numberArray1[6] = number0;
      numberArray1[7] = number0;
      numberArray1[8] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray3[0] = (Number) bigInteger0;
      numberArray3[1] = number0;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      // Undeclared exception!
//      try { 
        defaultIntervalXYDataset0.getStartY(1825, 1825);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 1825, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1.0), 1643.229544215336, (-1548), (-1.0));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Requires 'samples' > 1
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      String string0 = "s.";
      Number[][] numberArray0 = new Number[8][8];
      Number[] numberArray1 = new Number[5];
      BigInteger bigInteger0 = BigInteger.TEN;
      numberArray1[0] = (Number) bigInteger0;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      int int0 = (-1159);
      int int1 = 0;
      // Undeclared exception!
//      try { 
        xYSeriesCollection0.getY((-1159), 0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Comparable<DefaultTableXYDataset> comparable0 = null;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      boolean boolean0 = true;
      DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, linkedList0, true);
      String string0 = "(mrE";
      String string1 = "F^Y-}E@>NNB}H;D.\\";
      Number[][] numberArray0 = new Number[8][6];
      Number[] numberArray1 = new Number[3];
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultBoxAndWhiskerXYDataset0, 1.0);
      int int0 = 0;
      int int1 = 4;
      // Undeclared exception!
//      try { 
        xYBarDataset0.getEndY(0, 4);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 4, Size: 0
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      Comparable<TimePeriodValuesCollection>[] comparableArray0 = (Comparable<TimePeriodValuesCollection>[]) Array.newInstance(Comparable.class, 8);
      int int0 = 0;
      SpreadsheetDate spreadsheetDate0 = null;
//      try {
        spreadsheetDate0 = new SpreadsheetDate(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SpreadsheetDate: Serial must be in range 2 to 2958465.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vectorSeriesCollection0.clone();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-656.65252299);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2485.772626248477);
      doubleArray1[3] = (-1061.7);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-656.65252299);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-656.65252299);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1061.7);
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-656.65252299);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-1061.7);
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sh,{E%:a$`PX#x,Up9", "", doubleArray0);
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      SimpleTimeZone simpleTimeZone0 = null;
//      try {
        simpleTimeZone0 = new SimpleTimeZone((-1), "", 2, (-1), 2, (-1), (-402), 2361, (-921), (-2251), (-3125), 1094, (-550));
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Illegal start time -1
//         //
//         verifyException("java.util.SimpleTimeZone", e);
//      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      int int0 = 0;
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, 0);
      // Undeclared exception!
//      try { 
        SerialDate.createInstance(0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // SpreadsheetDate: Serial must be in range 2 to 2958465.
//         //
//         verifyException("org.jfree.data.time.SpreadsheetDate", e);
//      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) xYDataItem0, (KeyedValues) defaultKeyedValuesDataset0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2302));
      defaultKeyedValuesDataset0.addChangeListener(categoryToPieDataset0);
      xYDataItem0.clone();
      // Undeclared exception!
//      try { 
        defaultKeyedValuesDataset0.insertValue(3754, (Comparable) bigInteger0, (double) 3754);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // 'position' out of bounds.
//         //
//         verifyException("org.jfree.data.KeyedObjects", e);
//      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2188.72252151689;
      doubleArray1[2] = (-751.3180659508);
      doubleArray1[3] = (-191.33);
      doubleArray1[4] = 2819.26253759591;
      double double0 = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1001.8223756;
      doubleArray1[7] = 2675.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // The number of row keys does not match the number of rows in the data array.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dG4x>({=jbD.");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[1] = numberArray1;
      Number[] numberArray2 = new Number[8];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray2[0] = (Number) bigInteger0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dG4x>({=jbD.", numberArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      TreeSet<XIntervalSeriesCollection> treeSet0 = new TreeSet<XIntervalSeriesCollection>();
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(treeSet0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      defaultKeyedValues2DDataset0.getRowCount();
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (KeyToGroupMap) null);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-789.987040611), 995.2879003, "Series 2");
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(995.2879003, double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(995.2879003, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = (-264.0);
      String string0 = "5!<N";
      categoryTableXYDataset0.add((-264.0), 1.0, "5!<N");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1263.271394526028);
      // Undeclared exception!
//      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 76);
//        fail("Expecting exception: IndexOutOfBoundsException");
      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // Index: 76, Size: 1
//         //
//         verifyException("java.util.ArrayList", e);
//      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 723);
      String string0 = "?/aXJ";
      Number[][] numberArray0 = new Number[9][8];
      Number[] numberArray1 = new Number[5];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray1[0] = (Number) integer0;
      Week week0 = new Week();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 1667, week0);
      // Undeclared exception!
//      try { 
        dynamicTimeSeriesCollection0.getEndX(1858, 1800);
//        fail("Expecting exception: NullPointerException");
      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.clone();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Week week0 = new Week();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
//      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-2500), (-2500), week0);
//        fail("Expecting exception: NegativeArraySizeException");
      
//      } catch(NegativeArraySizeException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
//      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 6176.33709984762);
      assertNotNull(range0);
      assertEquals(6176.33709984762, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.REMOVE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-658), (-658));
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(yIntervalSeriesCollection0, seriesChangeInfo0);
      defaultTableXYDataset0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      // Undeclared exception!
//      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'dataset' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-199.60987168701237);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-199.60987168701237);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = Double.POSITIVE_INFINITY;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 1.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 0.0;
      doubleArray0[7] = doubleArray8;
      // Undeclared exception!
//      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
//        fail("Expecting exception: IllegalArgumentException");
      
//      } catch(IllegalArgumentException e) {
//         //
//         // Null 'rowKeys' argument.
//         //
//         verifyException("org.jfree.data.general.DatasetUtilities", e);
//      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 72.4893;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 72.4893;
      doubleArray3[2] = 72.4893;
      doubleArray3[3] = 1852.4438242071;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
  }
}
